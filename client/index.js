(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["matrixClientSdk"] = factory();
	else
		root["matrixClientSdk"] = factory();
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ([
/* 0 */,
/* 1 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   JSONTools: () => (/* reexport safe */ _matrixlib_index__WEBPACK_IMPORTED_MODULE_1__.JSONTools),
/* harmony export */   LoggerTools: () => (/* reexport safe */ _matrixlib_index__WEBPACK_IMPORTED_MODULE_1__.LoggerTools),
/* harmony export */   ml: () => (/* binding */ ml)
/* harmony export */ });
/* harmony import */ var _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _matrixlib_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);



class matrix {
    constructor() {
        this.Search = new _matrixlib_index__WEBPACK_IMPORTED_MODULE_1__.SearchTools();
        this.Item = new _matrixlib_index__WEBPACK_IMPORTED_MODULE_1__.ItemTools();
        this.ContextFrames = new _matrixlib_index__WEBPACK_IMPORTED_MODULE_1__.ContextFramesTools();
        // highlight / search function
        this.XPath = new _matrixlib_index__WEBPACK_IMPORTED_MODULE_1__.XPathTools();
        this.URL = new _matrixlib_index__WEBPACK_IMPORTED_MODULE_1__.URLTools();
        this.Mail = new _matrixlib_index__WEBPACK_IMPORTED_MODULE_1__.MailTools();
        // tooltipsmessage boxes and other ui controls
        this.UI = new _matrixlib_index__WEBPACK_IMPORTED_MODULE_1__.UIToolsEnum();
        this.File = new _matrixlib_index__WEBPACK_IMPORTED_MODULE_1__.FileTools();
        this.ReportGenerator = new _matrixlib_index__WEBPACK_IMPORTED_MODULE_1__.ReportGeneratorTools();
        this.SmartText = new _matrixlib_index__WEBPACK_IMPORTED_MODULE_1__.SmartTextTools();
        // console / error logging
        this.Logger = new _matrixlib_index__WEBPACK_IMPORTED_MODULE_1__.LoggerTools(this.UI.DateTime.renderHumanDate.bind(this.UI.DateTime));
        this.JSON = new _matrixlib_index__WEBPACK_IMPORTED_MODULE_1__.JSONTools(this.Logger);
        // label tools (labels and filters)
        this.LabelTools = this.CreateNewLabelTools();
    }
    CreateNewLabelTools() {
        return new _matrixlib_index__WEBPACK_IMPORTED_MODULE_1__.LabelTools(this.Logger, this.JSON);
    }
}
let ml;
ml = new matrix();
// Let's save this on the window.
globalThis.ml = ml;
// TODO(modules): UIToolsEnum was split into two classes because of circular dependencies.
// UIToolsConstants was the result. Legacy plugins often use those constants, so let's
// make it easy for them by exposing those in the old name they know. This is a TODO
// because it reflects that those plugins need to be refactored.
globalThis.UIToolsEnum = _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_0__.UIToolsConstants;


/***/ }),
/* 2 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DOCUMENT_STATUS_LABEL_GROUP_TYPE: () => (/* binding */ DOCUMENT_STATUS_LABEL_GROUP_TYPE),
/* harmony export */   UIToolsConstants: () => (/* binding */ UIToolsConstants)
/* harmony export */ });


const DOCUMENT_STATUS_LABEL_GROUP_TYPE = "_DOCUMENT_STATUS_";
;
class UIToolsConstants {
}
UIToolsConstants.CIColors = {
    Black: { color: "#000", alternateColor: "#FFF" },
    BrownCoffeeRoyal: { color: "#6C3008", alternateColor: "#FFF" },
    BlueEastBay: { color: "#3D5A7F", alternateColor: "#FFF" },
    BlueLagoon: { color: "#17125B", alternateColor: "#FFF" },
    BlueDoger: { color: "#41B4FF", alternateColor: "#FFF" },
    BlueZiggurat: { color: "#B3D9DD", alternateColor: "#000" },
    GreenYellow: { color: "#B9D771", alternateColor: "#000" },
    GreenSushi: { color: "#68C037", alternateColor: "#000" },
    YellowBrightSun: { color: "#FFE541", alternateColor: "#000" },
    OrangeYellow: { color: "#FBA043", alternateColor: "#000" },
    //YellowOrange:{bg:"#FBA043",fg:"#000"},
    RedPersimmon: { color: "#FF545D", alternateColor: "#FFF  " },
    VioletElectric: { color: "#A543FB", alternateColor: "#000" },
    VioletMauve: { color: "#DEA3FF", alternateColor: "#000" },
    PinkHot: { color: "#FF6FBC", alternateColor: "#000" },
    BrownTiaMaria: { color: "#C6490C", alternateColor: "#FFF" },
    BrownDiSerria: { color: "#E19E72", alternateColor: "#FFF" },
    PinkBeautyBush: { color: "#F5CECE", alternateColor: "#000" },
    GreyDark: { color: "#838383", alternateColor: "#FFF" },
    GreyLightAlto: { color: "#DCDCDC", alternateColor: "#000" },
    White: { color: "#FFFFFF", alternateColor: "#000" }
};
UIToolsConstants.CIColorsGrey = {
    G0_VeryDark: { color: "#1d2227", alternateColor: "#FFF" },
    G1: { color: "#32373c", alternateColor: "#FFF" },
    G2: { color: "#465055", alternateColor: "#FFF" },
    G3_GreyDark: { color: "#838383", alternateColor: "#FFF" },
    G4: { color: "#a9b3b8", alternateColor: "#FFF" },
    G5: { color: "#cdd2d7", alternateColor: "#000" },
    G6: { color: "#dbe0e5", alternateColor: "#000" },
    G7_GreyLightAlto: { color: "#DCDCDC", alternateColor: "#000" },
    G8: { color: "#f0f0f5", alternateColor: "#000" },
    G9: { color: "#f5f5fa", alternateColor: "#000" }
};
UIToolsConstants.allGrey = [
    UIToolsConstants.CIColorsGrey.G0_VeryDark.color,
    UIToolsConstants.CIColorsGrey.G1.color,
    UIToolsConstants.CIColorsGrey.G2.color,
    UIToolsConstants.CIColorsGrey.G3_GreyDark.color,
    UIToolsConstants.CIColorsGrey.G4.color,
    UIToolsConstants.CIColorsGrey.G5.color,
    UIToolsConstants.CIColorsGrey.G6.color,
    UIToolsConstants.CIColorsGrey.G7_GreyLightAlto.color,
    UIToolsConstants.CIColorsGrey.G8.color,
    UIToolsConstants.CIColorsGrey.G9.color
];
// based on green sushi
UIToolsConstants.CIColorsPrimary = {
    P0_LogoGreenYellow: { color: "#b9d771", alternateColor: "#FFF" },
    P1: { color: "#9bcf45", alternateColor: "#FFF" },
    P2: { color: "#6dcf45", alternateColor: "#FFF" },
    P3_GreenSushi: { color: "#68C037", alternateColor: "#FFF" },
    P4: { color: "#75b10f", alternateColor: "#FFF" },
    P5: { color: "#7aa608", alternateColor: "#FFF" },
    P6_LogoDarkGreen: { color: "#007e8d", alternateColor: "#FFF" },
};
(function (UIToolsConstants) {
    let Scroll;
    (function (Scroll) {
        Scroll[Scroll["Auto"] = 0] = "Auto";
        Scroll[Scroll["Vertical"] = 1] = "Vertical";
        Scroll[Scroll["None"] = 2] = "None";
    })(Scroll = UIToolsConstants.Scroll || (UIToolsConstants.Scroll = {}));
})(UIToolsConstants || (UIToolsConstants = {}));


/***/ }),
/* 3 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BlockingProgressUI: () => (/* reexport safe */ _UITools__WEBPACK_IMPORTED_MODULE_11__.BlockingProgressUI),
/* harmony export */   ContextFramesTools: () => (/* reexport safe */ _ContextFramesTools__WEBPACK_IMPORTED_MODULE_2__.ContextFramesTools),
/* harmony export */   DateTimeUI: () => (/* reexport safe */ _DateTimeUI__WEBPACK_IMPORTED_MODULE_14__.DateTimeUI),
/* harmony export */   FileTools: () => (/* reexport safe */ _FileTools__WEBPACK_IMPORTED_MODULE_3__.FileTools),
/* harmony export */   HTMLCleaner: () => (/* reexport safe */ _HTMLCleaner__WEBPACK_IMPORTED_MODULE_4__.HTMLCleaner),
/* harmony export */   ItemTools: () => (/* reexport safe */ _ItemTools__WEBPACK_IMPORTED_MODULE_1__.ItemTools),
/* harmony export */   JSONTools: () => (/* reexport safe */ _JSONTools__WEBPACK_IMPORTED_MODULE_5__.JSONTools),
/* harmony export */   LT: () => (/* reexport safe */ _UITools__WEBPACK_IMPORTED_MODULE_11__.LT),
/* harmony export */   LabelTools: () => (/* reexport safe */ _LabelTools__WEBPACK_IMPORTED_MODULE_6__.LabelTools),
/* harmony export */   LoggerTools: () => (/* reexport safe */ _LoggerTools__WEBPACK_IMPORTED_MODULE_7__.LoggerTools),
/* harmony export */   MailTools: () => (/* reexport safe */ _MailTools__WEBPACK_IMPORTED_MODULE_8__.MailTools),
/* harmony export */   ProgressUI: () => (/* reexport safe */ _UITools__WEBPACK_IMPORTED_MODULE_11__.ProgressUI),
/* harmony export */   ReportGeneratorTools: () => (/* reexport safe */ _ReportGeneratorTools__WEBPACK_IMPORTED_MODULE_9__.ReportGeneratorTools),
/* harmony export */   SERVER_LOG_LEVEL: () => (/* reexport safe */ _LoggerTools__WEBPACK_IMPORTED_MODULE_7__.SERVER_LOG_LEVEL),
/* harmony export */   SearchTools: () => (/* reexport safe */ _SearchTools__WEBPACK_IMPORTED_MODULE_0__.SearchTools),
/* harmony export */   SelectUserOrGroupUI: () => (/* reexport safe */ _UITools__WEBPACK_IMPORTED_MODULE_11__.SelectUserOrGroupUI),
/* harmony export */   SmartTextTools: () => (/* reexport safe */ _SmartTextTools__WEBPACK_IMPORTED_MODULE_10__.SmartTextTools),
/* harmony export */   UIToolsEnum: () => (/* reexport safe */ _UITools__WEBPACK_IMPORTED_MODULE_11__.UIToolsEnum),
/* harmony export */   URLTools: () => (/* reexport safe */ _URLTools__WEBPACK_IMPORTED_MODULE_12__.URLTools),
/* harmony export */   XPathTools: () => (/* reexport safe */ _XPathTools__WEBPACK_IMPORTED_MODULE_13__.XPathTools)
/* harmony export */ });
/* harmony import */ var _SearchTools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
/* harmony import */ var _ItemTools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);
/* harmony import */ var _ContextFramesTools__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(10);
/* harmony import */ var _FileTools__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(130);
/* harmony import */ var _HTMLCleaner__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(131);
/* harmony import */ var _JSONTools__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(132);
/* harmony import */ var _LabelTools__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(38);
/* harmony import */ var _LoggerTools__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(133);
/* harmony import */ var _MailTools__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(134);
/* harmony import */ var _ReportGeneratorTools__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(135);
/* harmony import */ var _SmartTextTools__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(136);
/* harmony import */ var _UITools__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(137);
/* harmony import */ var _URLTools__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(148);
/* harmony import */ var _XPathTools__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(149);
/* harmony import */ var _DateTimeUI__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(147);


















/***/ }),
/* 4 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SearchTools: () => (/* binding */ SearchTools)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _businesslogic_MatrixRequirementsAPI__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);
/// <reference types="matrixrequirements-type-declarations" />



class CancelSearchEvent {
}
;
class SearchTools {
    constructor() {
        // context is used to highlight only in select from tree dialog. by default all is
        this.highlightContext = $("#highlightContext");
        this.OnCancelSearch = new _businesslogic_MatrixRequirementsAPI__WEBPACK_IMPORTED_MODULE_1__.EventDispatcher();
    }
    getFilter() {
        return this.globalFilter;
    }
    cancelSearch() {
        // from all search filters, remove the search term and details
        $(".treeCtrl input[name=search]").val("");
        $(".treeCtrl :checkbox").prop("checked", false);
        // remove any kind of highlighting in main tree
        this.OnCancelSearch.dispatch(new CancelSearchEvent());
        this.hideHighlight();
    }
    searchInDialog() {
        this.cancelSearch();
        // now set search to dialog
        this.highlightContext = _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm;
    }
    ;
    endSearchInDialog() {
        this.highlightContext = $("#highlightContext");
        this.globalFilter = "";
    }
    ;
    highlight(term) {
        this.globalFilter = term;
        this.renderHighlight();
    }
    ;
    hideHighlight() {
        this.globalFilter = "";
        this.highlightContext.unhighlight();
        this.updateTinys();
    }
    ;
    renderHighlight() {
        this.highlightContext.unhighlight();
        if (this.globalFilter && this.globalFilter.length > 0) {
            this.highlightContext.highlight(this.globalFilter);
        }
        this.updateTinys();
    }
    updateTinys() {
        let that = this;
        if (this.globalFilter) {
            $(".thisIsTiny").each(function (idx, tiny) {
                let editor = tinymce.get($(tiny).attr("id"));
                if (editor) {
                    $(editor.getBody()).unhighlight().highlight(that.getFilter());
                }
            });
        }
        else {
            $(".thisIsTiny").each(function (idx, tiny) {
                let editor = tinymce.get($(tiny).attr("id"));
                if (editor) {
                    $(editor.getBody()).unhighlight();
                }
            });
        }
    }
}


/***/ }),
/* 5 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ControlState: () => (/* binding */ ControlState),
/* harmony export */   GlobalMatrix: () => (/* binding */ GlobalMatrix),
/* harmony export */   InstallLegacyAdaptor: () => (/* binding */ InstallLegacyAdaptor),
/* harmony export */   app: () => (/* binding */ app),
/* harmony export */   applyResponsiveView: () => (/* binding */ applyResponsiveView),
/* harmony export */   globalMatrix: () => (/* binding */ globalMatrix),
/* harmony export */   matrixApplicationUI: () => (/* binding */ matrixApplicationUI),
/* harmony export */   matrixSession: () => (/* binding */ matrixSession),
/* harmony export */   restConnection: () => (/* binding */ restConnection),
/* harmony export */   setApp: () => (/* binding */ setApp),
/* harmony export */   setIC: () => (/* binding */ setIC),
/* harmony export */   setMatrixApplicationUI: () => (/* binding */ setMatrixApplicationUI),
/* harmony export */   setMatrixSession: () => (/* binding */ setMatrixSession),
/* harmony export */   setRestConnection: () => (/* binding */ setRestConnection)
/* harmony export */ });




;
class GlobalMatrix {
    constructor() {
        this.ITEM_DOES_NOT_EXIST = "";
        this.globalShiftDown = false;
        this.globalCtrlDown = false;
        this.historyFilter = "merge,delete,undelete,add,edit,execute,reviewed,signature,report,touch,release";
        this.mobileApp = undefined;
    }
    installLegacyAdaptor() {
        globalThis.ITEM_DOES_NOT_EXIST = this.ITEM_DOES_NOT_EXIST;
        globalThis.matrixRestUrl = this.matrixRestUrl;
        globalThis.matrixBaseUrl = this.matrixBaseUrl;
        globalThis.matrixWfgw = this.matrixWfgw;
        globalThis.matrixExpress = this.matrixExpress;
        globalThis.matrixProduct = this.matrixProduct;
        globalThis.mxOauth = this.mxOauth;
        globalThis.mxOauthLoginUrl = this.mxOauthLoginUrl;
        globalThis.serverStorage = this.serverStorage;
        globalThis.projectStorage = this.projectStorage;
        globalThis.wfgwConnection = this.wfgwConnection;
        globalThis.globalShiftDown = this.globalShiftDown;
        globalThis.globalCtrlDown = this.globalCtrlDown;
        globalThis.jsonValidator = this.jsonValidator;
    }
}
var globalMatrix = new GlobalMatrix();
function setIC(newIC) {
    globalMatrix.ItemConfig = newIC; // To use in matrixSdk
    globalThis.IC = newIC; // legacy support
}
var matrixSession;
function setMatrixSession(session) {
    matrixSession = session;
}
var restConnection; // global rest connection
function setRestConnection(rc) {
    restConnection = rc;
}
var matrixApplicationUI; // the application
function setMatrixApplicationUI(ui) {
    matrixApplicationUI = ui;
}
// TODO(modules): app was declared as interface MatrixReq, which is empty, and then usually
// assigned to a variable of type businesslogic/UI/MatrixReq. We just opt out of typing for
// this variable and ideally we should fix that with a real interface. I changed the type to
// any to make the true situation easier to see.
var app; // main application
function setApp(newApp) {
    app = newApp;
}
;
var ControlState;
(function (ControlState) {
    ControlState[ControlState["FormEdit"] = 0] = "FormEdit";
    ControlState[ControlState["FormView"] = 1] = "FormView";
    ControlState[ControlState["DialogCreate"] = 2] = "DialogCreate";
    ControlState[ControlState["HistoryView"] = 3] = "HistoryView";
    ControlState[ControlState["Tooltip"] = 4] = "Tooltip";
    ControlState[ControlState["Print"] = 5] = "Print";
    ControlState[ControlState["Report"] = 6] = "Report";
    ControlState[ControlState["DialogEdit"] = 7] = "DialogEdit";
    ControlState[ControlState["Review"] = 8] = "Review"; // special mode for design reviews
})(ControlState || (ControlState = {}));
;
// This is so that old legacy scripts can "just work" to a degree.
function InstallLegacyAdaptor() {
    globalThis.ControlState = ControlState;
    globalThis.IC = globalMatrix.ItemConfig;
    globalThis.matrixSession = matrixSession;
    globalThis.restConnection = restConnection;
    globalThis.app = app;
    globalThis.matrixApplicationUI = matrixApplicationUI;
    globalMatrix.installLegacyAdaptor();
    globalThis.applyResponsiveView = applyResponsiveView;
}
function applyResponsiveView() {
    let mobileView = localStorage.getItem("mobileLayout");
    let x = $(window).width();
    if (mobileView) {
        $('#contextframesizer').css("display", "none");
        $('#dragbar').css("display", "none");
    }
    if (mobileView == "0") { // see item
        $('#sidebar').css("display", "none");
        $("#navLeft").css("display", "none");
        $('#main').css("left", 0).css("display", "block");
    }
    else if (mobileView == "1") { // see navigation tree
        $('#sidebar').css("width", x).css("display", "block");
        $('#main').css("display", "none");
        $("#navLeft").css("display", "");
    }
    else if (mobileView == "2") { // see both
        $('#sidebar').css("width", (x / 2) + "px");
        $("#navLeft").css("display", "");
        $('#main').css("left", (x / 2) + "px").css("display", "block");
    }
    else { // not mobile
        $('#dragbar').css("display", "block");
        $('#contextframesizer').css("display", "block");
        $("#navLeft").css("display", "");
        $('#main').css("display", "block");
    }
    app.resizeItem(true);
}


/***/ }),
/* 6 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EventDispatcher: () => (/* binding */ EventDispatcher),
/* harmony export */   EventDispatcherAsync: () => (/* binding */ EventDispatcherAsync),
/* harmony export */   MR1: () => (/* binding */ MR1),
/* harmony export */   MR1Impl: () => (/* binding */ MR1Impl)
/* harmony export */ });

class EventDispatcher {
    constructor() {
        this._subscriptions = new Array();
        this._callers = new Array();
    }
    subscribe(caller, fn) {
        this._callers.push(caller);
        this._subscriptions.push(fn);
    }
    unsubscribe(fn) {
        var i = this._subscriptions.indexOf(fn);
        if (i > -1) {
            this._subscriptions.splice(i, 1);
            this._callers.splice(i, 1);
        }
    }
    dispatch(args) {
        for (var i = 0; i < this._subscriptions.length; i++) {
            var handler = this._subscriptions[i];
            if (handler != null) {
                args.caller = this._callers[i];
                handler(args);
            }
        }
    }
}
class EventDispatcherAsync {
    constructor() {
        this._subscriptionsAsync = new Array();
        this._callersAsync = new Array();
    }
    // now same for asyncs
    subscribe(caller, fn) {
        this._callersAsync.push(caller);
        this._subscriptionsAsync.push(fn);
    }
    unsubscribe(fn) {
        var i = this._subscriptionsAsync.indexOf(fn);
        if (i > -1) {
            this._subscriptionsAsync.splice(i, 1);
            this._callersAsync.splice(i, 1);
        }
    }
    dispatch(args) {
        return this.dispatchAsyncOne(args, 0);
    }
    dispatchAsyncOne(args, idx) {
        let that = this;
        let res = $.Deferred();
        if (idx >= this._subscriptionsAsync.length) {
            res.resolve();
            return res;
        }
        var handler = this._subscriptionsAsync[idx];
        if (handler != null) {
            args.caller = this._callersAsync[idx];
            handler(args).done(function () {
                that.dispatchAsyncOne(args, idx + 1).done(function () {
                    res.resolve();
                }).fail(function () {
                    res.reject();
                });
            }).fail(function () {
                res.reject();
            });
        }
        else {
            that.dispatchAsyncOne(args, idx + 1).done(function () {
                res.resolve();
            }).fail(function () {
                res.reject();
            });
        }
        return res;
    }
}
class MR1Impl {
    constructor() {
        this.cbsItemDisplayed = new EventDispatcher();
        this.cbsCreateItemDisplayed = new EventDispatcher();
        this.cbsCreateItemDisplayedClose = new EventDispatcher();
        this.cbsBeforeSave = new EventDispatcherAsync();
        this.cbsAfterSave = new EventDispatcher();
        this.cbsAfterRestore = new EventDispatcher();
        this.cbsAfterDelete = new EventDispatcher();
        this.cbsAfterCreate = new EventDispatcher();
        this.cbsAfterCreateSign = new EventDispatcher();
        this.cbsBeforeDelete = new EventDispatcherAsync();
        this.cbsAfterLabelChange = new EventDispatcher();
        this.cbsAfterSignature = new EventDispatcher();
    }
    // triggers
    triggerItemCreate(view, isItem, category) { this.cbsCreateItemDisplayed.dispatch({ view: view, isItem: isItem, category: category }); }
    triggerItemCreateClose(ok) { this.cbsCreateItemDisplayedClose.dispatch({ ok: ok }); }
    triggerItemDisplayed(item, view) { this.cbsItemDisplayed.dispatch({ item: item, view: view }); }
    triggerBeforeSaveAsync(view, before, after) { return this.cbsBeforeSave.dispatch({ view: view, before, after }); }
    triggerAfterSave(view, before, after) { this.cbsAfterSave.dispatch({ before: before, after: after, view: view }); }
    triggerAfterRestore(itemId) { this.cbsAfterRestore.dispatch({ itemId: itemId }); }
    triggerAfterDelete(item) { this.cbsAfterDelete.dispatch({ item: item }); }
    triggerAfterItemCreate(item) { this.cbsAfterCreate.dispatch({ item: item }); }
    triggerAfterCreateSign(item) { this.cbsAfterCreateSign.dispatch({ item: item }); }
    triggerBeforeDeleteAsync(item) { return this.cbsBeforeDelete.dispatch({ item: item }); }
    triggerAfterLabelChange(item, before, after) { this.cbsAfterLabelChange.dispatch({ item: item, set: before, unset: after }); }
    triggerAfterSignature(item, lastuser) { this.cbsAfterSignature.dispatch({ item: item, lastuser: lastuser }); }
    // notifications
    onItemDisplayed() { /* fired after item is rendered */ return this.cbsItemDisplayed; }
    onItemCreateDlgOpen() { /* fired after dialog is opened */ return this.cbsCreateItemDisplayed; }
    onItemCreateDlgClose() { /* fired after dialog is closed */ return this.cbsCreateItemDisplayedClose; }
    onAfterSave() { /* fired after item was saved */ return this.cbsAfterSave; }
    onAfterRestore() { /* fired after item was restored */ return this.cbsAfterRestore; }
    onAfterDelete() { /* event after an item (or a folder) has been deleted */ return this.cbsAfterDelete; }
    onAfterCreate() { /* event after an item (or a folder) has been created */ return this.cbsAfterCreate; }
    onAfterCreateSign() { /* event after a SIGN item has been created */ return this.cbsAfterCreateSign; }
    onAfterLabelChange() { return this.cbsAfterLabelChange; }
    onAfterSignature() { return this.cbsAfterSignature; }
    // allowing to stop execution. need to return promise, reject() to stop resolve() to continue.
    onBeforeSaveAsync() { /* event before  an item will be saved. */ return this.cbsBeforeSave; }
    onBeforeDeleteAsync() { /* event before  an item (or a folder) has been deleted. */ return this.cbsBeforeDelete; }
}
var MR1 = new MR1Impl();
globalThis.MR1 = MR1;
/** tests...

// MR1.onAfterLabelChange().subscribe( this, function (event:ILabelChangeEvent) { console.log("Label changed for " + event.item.id + " set: '" + event.set.join() + "' unset: '" + event.unset.join() + "'");} );


MR1.onBeforeDeleteAsync().subscribe( this, function (event:IGenericItemEvent) {
    console.log("MR1 >>>Could cancel item delete " + event.item.id);

    let res = $.Deferred();
    res.resolve(); // res.reject(); to cancel
    return res;
});

MR1.onBeforeSaveAsync().subscribe( this, function (event:IItemChangeEvent) {
    console.log("MR1 >>>Could cancel save of " + event.before.id);

    let res = $.Deferred();
    res.resolve(); // res.reject(); to cancel
    return res;
});

MR1.onAfterCreate().subscribe( this, function (event:INewItemIdEvent) { console.log("MR1 >>>Item created " + event.item.item.id);} );
MR1.onAfterCreateSign().subscribe( this, function (event:IGenericItemEvent) { console.log("MR1 >>>SIGN created " + event.item.id);} );

MR1.onAfterSignature().subscribe( this, function (event:ISignatureEvent) { console.log("MR1 >>>SIGNED " + event.item.id + " by " + matrixSession.getUser() +  ( event.lastuser?" as last signature":" but not last signature"));} );

MR1.onAfterSave().subscribe( this, function (event:IItemChangeEvent) { console.log("MR1 >>>Item saved " + event.after.id);} );
MR1.onAfterRestore().subscribe( this, function (event:IGenericItemIdEvent) { console.log("MR1 >>>Item restored " + event.itemId);} );

MR1.onAfterDelete().subscribe( this, function (event:IGenericItemEvent) { console.log("MR1 >>>Item deleted " + event.item.id);} );

MR1.onItemDisplayed().subscribe( this, function (event:IGenericItemEvent) { console.log("MR1 >>>Item displayed " + event.item.id);} );

MR1.onItemCreateDlgOpen().subscribe( this, function (event:IPreCreateItemEvent) {  console.log("MR1 >>>Create item dialog with " + event.view.getControls().length + " controls.");}  );

*/
/** example extract all italic from text and put in title when saving if title is " " or ""
MR1.onBeforeSaveAsync().subscribe( this, function (event:IItemChangeEvent) {
    console.log("MR1 >>>Could cancel save of " + event.before.title);

    if (event.after.title == " " || event.after.title == "") {
        let tf = IC.getFieldsOfType("richtext",event.after.type);
        let italics="";
        $.each( tf, function(idx, tfd) {
            let tfc = $("<div>").html(event.after[tfd.field.id]);
            $("span", tfc).each( function(spanIdx,span) {
                if ($(span).css("font-style").indexOf("italic")!=-1) {
                    italics += italics?(" "+$(span).text()):$(span).text();
                }
            });
        });
        event.after.title = italics?italics:"title required";
    }

    let res = $.Deferred();
    res.resolve();
    return res;
});

 */


/***/ }),
/* 7 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ItemTools: () => (/* binding */ ItemTools)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _SimpleItemTools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);




class ItemTools {
    constructor() {
        this.simpleItemTools = new _SimpleItemTools__WEBPACK_IMPORTED_MODULE_1__.SimpleItemTools();
    }
    // extract different parts from item ids, like version, category, ...
    parseRef(itemRef) {
        return this.simpleItemTools.parseRef(itemRef, _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getProject(), _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.matrixBaseUrl);
    }
    ;
    getCreator(item) {
        return this.simpleItemTools.getCreator(item);
    }
    getLastEditor(item) {
        return this.simpleItemTools.getLastEditor(item);
    }
    // render a list of item ids, to show up as <b>ID</b> name, <b>ID</b> name, 
    refListToDisplayString(inputItems, prefix, shorten) {
        return this.simpleItemTools.refListToDisplayString(inputItems, prefix, (ref) => _globals__WEBPACK_IMPORTED_MODULE_0__.app.getItemTitle(ref), shorten);
    }
    renderLink(itemId, itemTitle, newWindow) {
        const realTitle = itemTitle ? itemTitle : _globals__WEBPACK_IMPORTED_MODULE_0__.app.getItemTitle(itemId);
        return this.simpleItemTools.renderLink(itemId, realTitle, newWindow);
    }
    // update and changes to reference lists
    updateReferences(oldReferences, newReferences, fromId, toId) {
        return this.simpleItemTools.updateReferences(oldReferences, newReferences, fromId, toId);
    }
    // clone item from IItemGet to IItemPut
    clone(item, copyLabels) {
        return this.simpleItemTools.clone(item, copyLabels);
    }
    sort(a, b) {
        return this.simpleItemTools.sort(a, b, _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getProject(), _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.matrixBaseUrl);
    }
}


/***/ }),
/* 8 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SimpleItemTools: () => (/* binding */ SimpleItemTools)
/* harmony export */ });
/* harmony import */ var _UI_Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);


// Implements ItemTools functionality with minimal dependencies
class SimpleItemTools {
    // extract different parts from item ids, like version, category, ...
    parseRef(itemRef, project, matrixBaseUrl) {
        let ref = itemRef; // e.g. F-REQ-13-v12
        var result = {
            id: "",
            number: 0,
            version: 0,
            type: "",
            isFolder: false,
            url: "",
            link: "",
            linkv: "" // <a href=url>url</a>
        };
        var vp = ref.indexOf("-v");
        if (vp !== -1) {
            result.version = parseInt(ref.substr(vp + 2));
            ref = ref.substr(0, vp);
        }
        result.id = ref;
        if (ref.indexOf("F-") === 0) {
            result.isFolder = true;
            ref = ref.substr(2);
        }
        var parts = ref.split("-");
        if (parts.length > 1) {
            result.type = parts[0];
            result.number = Number(parts[1]);
        }
        result.url = matrixBaseUrl + "/" + project + "/" + itemRef;
        result.link = "<a style='color:blue !important' href='" + result.url + "'>" + itemRef + "</a>";
        result.linkv = "<a style='color:blue !important' href='" + result.url + "'>" + result.url + "</a>";
        return result;
    }
    ;
    getCreator(item) {
        return item.history[item.history.length - 1].user;
    }
    getLastEditor(item) {
        return item.history.length > 0 ? item.history[0].user : "";
    }
    // render a list of item ids, to show up as <b>ID</b> name, <b>ID</b> name, 
    refListToDisplayString(inputItems, prefix, getTitleFunction, shorten) {
        function makeLink(itemobj, shorten) {
            if (!itemobj.projectShortLabel) {
                return "<b>" + itemobj.to + "</b>" + (shorten ? "" : (" " + getTitleFunction(itemobj.to)));
            }
            var label = itemobj.projectShortLabel + ":" + itemobj.to;
            return "#" + itemobj.projectShortLabel + "/" + itemobj.to + "#";
            //return "<a class='crossProjectLink' title='" + itemobj.title + "' href='" + matrixBaseUrl + "/" + itemobj.projectShortLabel + "/" + itemobj.to + "' target='_blank'>" + label + "</a> ";
        }
        if (inputItems) {
            // build the list ItemId Title can take a long time, e.g. if there's dozens of search results and the list should be a short list. In that case only show names if there's less than 5 items 
            let refs = inputItems.map(function (inputItem) { return makeLink(inputItem, shorten && inputItems.length > 4 ? true : false); });
            let list = refs.join(", ");
            if (shorten && list.replace(/<b>/g, "").replace(/<\/b>/g, "").length > shorten) {
                refs = inputItems.map(function (inputItem) { return makeLink(inputItem, true); });
                list = refs.join(", ");
            }
            if (shorten && list.replace(/<b>/g, "").replace(/<\/b>/g, "").length > shorten) {
                list = "<b>" + list.replace(/<b>/g, "").replace(/<\/b>/g, "").substr(0, shorten - 4) + " ...</b>";
            }
            if (prefix) {
                list = prefix + " " + list;
            }
            return list;
        }
        else {
            return "";
        }
    }
    ;
    renderLink(itemId, itemTitle, newWindow) {
        let dbt = itemTitle;
        return $("<div>").refLink({
            id: itemId,
            folder: false,
            title: dbt ? dbt : "(deleted)",
            style: newWindow ? _UI_Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_0__.refLinkStyle.link : _UI_Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_0__.refLinkStyle.selectTree,
            tooltip: _UI_Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_0__.refLinkTooltip.html
        });
    }
    // update and changes to reference lists
    updateReferences(oldReferences, newReferences, fromId, toId) {
        var changeList = [];
        // find links to add
        for (var idx = 0; idx < newReferences.length; idx++) {
            var found = false;
            for (var jdx = 0; jdx < oldReferences.length; jdx++) {
                if (newReferences[idx].to === oldReferences[jdx].to) {
                    found = true;
                    continue;
                }
            }
            if (!found) {
                if (fromId) {
                    changeList.push({ action: 'addLink', fromId: fromId, toId: newReferences[idx].to });
                }
                else if (toId) {
                    changeList.push({ action: 'addLink', fromId: newReferences[idx].to, toId: toId });
                }
            }
        }
        // find links to remove
        for (var jdx = 0; jdx < oldReferences.length; jdx++) {
            var found = false;
            for (var idx = 0; idx < newReferences.length; idx++) {
                if (newReferences[idx].to === oldReferences[jdx].to) {
                    found = true;
                    continue;
                }
            }
            if (!found) {
                if (fromId) {
                    changeList.push({ action: 'removeLink', fromId: fromId, toId: oldReferences[jdx].to });
                }
                else if (toId) {
                    changeList.push({ action: 'removeLink', fromId: oldReferences[jdx].to, toId: toId });
                }
            }
        }
        return changeList;
    }
    ;
    // clone item from IItemGet to IItemPut
    clone(item, copyLabels) {
        var newItem = {};
        $.each(item, function (idx, val) {
            if (idx !== "maxVersion" && idx !== "labels" && idx !== "labels" && idx !== "downLinks" && idx !== "upLinks" && idx !== "type" && idx !== "children" && idx !== "hide" && idx !== "history" && idx !== "isUnselected" && idx !== "modDate" && idx !== "restricted" && idx !== "upLinkList" && idx !== "userRights") {
                newItem[idx] = val;
            }
        });
        if (copyLabels) {
            newItem.labels = item.labels.join(",");
        }
        else {
            newItem.labels = "";
        }
        return newItem;
    }
    sort(a, b, project, matrixBaseUrl) {
        let at = this.parseRef(a, project, matrixBaseUrl);
        let bt = this.parseRef(b, project, matrixBaseUrl);
        if (at.type == bt.type) {
            if (at.isFolder && !bt.isFolder)
                return -1;
            if (bt.isFolder && !at.isFolder)
                return 1;
            return at.number - bt.number;
        }
        return a < b ? -1 : 1;
    }
}


/***/ }),
/* 9 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   refLinkStyle: () => (/* binding */ refLinkStyle),
/* harmony export */   refLinkTooltip: () => (/* binding */ refLinkTooltip)
/* harmony export */ });

var refLinkStyle;
(function (refLinkStyle) {
    refLinkStyle[refLinkStyle["edit"] = 1] = "edit";
    refLinkStyle[refLinkStyle["link"] = 2] = "link";
    refLinkStyle[refLinkStyle["show"] = 3] = "show";
    refLinkStyle[refLinkStyle["select"] = 4] = "select";
    refLinkStyle[refLinkStyle["selectTree"] = 5] = "selectTree"; // like link, but selects in tree unless ctrl-was clicked
})(refLinkStyle || (refLinkStyle = {}));
var refLinkTooltip;
(function (refLinkTooltip) {
    refLinkTooltip[refLinkTooltip["none"] = 1] = "none";
    refLinkTooltip[refLinkTooltip["html"] = 2] = "html"; // full html tooltip
})(refLinkTooltip || (refLinkTooltip = {}));


/***/ }),
/* 10 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ContextFramesTools: () => (/* binding */ ContextFramesTools)
/* harmony export */ });
/* harmony import */ var _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);
/* harmony import */ var _UI_Components_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1);
/* harmony import */ var _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(24);
// import { mDHF } from "../businesslogic/index";
// import { mTM } from "../businesslogic/index";






class ContextFramesTools {
    constructor() {
        this.exists = false;
        this.visible = false;
        this.support = false;
        this.resetSmartLinks = true;
        this.maxNumberOfLinks = 20;
        this.shouldBeVisible = false;
        // to be done once
        let that = this;
        $('#contextframesizer').mousedown(function (e) {
            if (e.preventDefault)
                e.preventDefault();
            $(document).mousemove(function (e) {
                let contextframeWidth = Math.max(0, ($(document).width() - e.pageX + 2));
                if (contextframeWidth < 150) {
                    contextframeWidth = 500;
                    localStorage.setItem('contextframeWidth', contextframeWidth.toString());
                    that.hideContextFrames();
                }
                else {
                    localStorage.setItem('contextframeWidth', contextframeWidth.toString());
                    that.showContextFrames();
                }
                $(document).trigger("contextFrameResized");
                _globals__WEBPACK_IMPORTED_MODULE_2__.app.resizeItem(true);
            });
        });
        // to hide / resize context frame if it would be to small
        let resizeHandleTimeout;
        $(window).resize(function () {
            clearTimeout(resizeHandleTimeout);
            resizeHandleTimeout = window.setTimeout(function () {
                if (that.visible) {
                    that.showContextFrames();
                }
            }, 300);
        });
    }
    setToogleIcon(allowClose) {
        let faIcon = $("#contextFrameButton span.fal");
        faIcon.removeClass("fa-arrow-to-right");
        faIcon.removeClass("fa-arrow-from-right");
        if (allowClose) {
            faIcon.addClass("fa-arrow-to-right");
        }
        else {
            faIcon.addClass("fa-arrow-from-right");
        }
    }
    toggleFunction() {
        // toggle status;
        let contextframeWidth = Number(localStorage.getItem('contextframeWidth'));
        localStorage.setItem('contextframeWidth', (-contextframeWidth).toString());
        if (this.visible) {
            this.shouldBeVisible = false;
            this.hideContextFrames();
        }
        else {
            this.shouldBeVisible = true;
            this.showContextFrames();
            this.renderContextFrames();
        }
        this.setToogleIcon(this.shouldBeVisible); // if visible allow close
        _globals__WEBPACK_IMPORTED_MODULE_2__.app.resizeItem(true);
    }
    showContextFrame(tabType, makeVisible) {
        let tab = "";
        $.each(this.getTabs(), function (tabIdx, tabDef) {
            if (tabDef.type == tabType) {
                tab = tabDef.tabId;
            }
        });
        if (!tab)
            return false;
        // toggle status;
        if (!this.visible) {
            if (!makeVisible) {
                return false;
            }
            this.showContextFrames();
            this.renderContextFrames();
        }
        $('.nav-tabs a[href="#' + tab + '"]').tab('show');
        return true;
    }
    getExpender() {
        let that = this;
        let direction = this.shouldBeVisible ? "fa-arrow-to-right" : "fa-arrow-from-right";
        let icon = $('<div class="btn-group contextCloseX" ><button id="contextFrameButton" tabindex="-1" class="btn btn-item" data-original-title="Context frame"><span class="fal ' + direction + '"  ></span></button></div>');
        let faIcon = $(".fal", icon);
        icon.click(function () {
            that.toggleFunction();
        });
        return icon;
    }
    // get tabs enabled for project
    getTabs() {
        let tabs = [];
        let projectHelp = _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.ItemConfig && _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.ItemConfig.getContextPagesConfig();
        if (projectHelp && projectHelp.tabs) {
            tabs = projectHelp.tabs;
        }
        else {
            tabs = ContextFramesTools.defaultPages.tabs;
        }
        return tabs;
    }
    visibility(enabled) {
        if (enabled) {
            if (this.shouldBeVisible && !this.visible) {
                this.showContextFrames();
            }
        }
        else if (this.visible) {
            this.hideContextFrames();
        }
    }
    // hide context frames, remember as hidden
    hideContextFrames() {
        $(".contextCloseX").show();
        $("#contextframemenu").html("Show Context Pages");
        $('#contextframe').addClass('hidden');
        $('#main').css("margin-right", "5px");
        //$('#contextframesizer').addClass('hidden');
        $('#contextframesizer').css('right', "0px");
        let contextframeWidth = Math.abs(Number(localStorage.getItem('contextframeWidth')));
        localStorage.setItem('contextframeWidth', (-contextframeWidth).toString());
        this.visible = false;
        this.setToogleIcon(false); // don't allow close it's closed
        $(document).trigger("contextFrameResized");
    }
    ;
    // show context frames, remember as displayed
    showContextFrames() {
        let ww = $(window).width();
        let sw = $('#sidebar').width() + $('#sidebar').position().left;
        let cw = Math.abs(Number(localStorage.getItem('contextframeWidth')));
        if (ww < 767) {
            // mobile device... hide
            $('#contextframe').addClass('hidden');
            $('#main').css("width", "unset");
            $('#contextframesizer').addClass('hidden');
            return;
        }
        // adjust context frame width (i.e. if the screen size changed)
        if (cw > Math.max(ww - sw, 0) / 2) {
            cw = (ww - sw) / 2;
            if (cw < 100) {
                // hide temporarily... until screen is bigger
                $('#main').css("width", "unset");
                $('#contextframesizer').addClass('hidden');
                return;
            }
        }
        localStorage.setItem('contextframeWidth', cw.toString());
        $('#contextframe').css("width", (cw - 5) + "px").removeClass('hidden');
        $('#main').css("width", (cw) + "px");
        $('#contextframesizer').css("right", cw + "px").removeClass('hidden');
        let container = $('#contextframe .contextFrameContainer');
        let content = $('#contextframe .tab-content');
        let tabs = $('#contextframe .contextFrameTabs');
        //content.height( container.height() - tabs.height());
        this.visible = true;
        this.setToogleIcon(true);
        $(document).trigger("contextFrameResized");
        $(document).trigger("contextFrameResized");
    }
    ;
    showSupport(panel, tabData) {
        let that = this;
        if (!this.support) {
            let formContainer = $(`<div data-cy="${tabData.title}">`);
            let requireEmail = _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.matrixBaseUrl.indexOf('demo.matrixreq.com') !== -1 || _globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession.isSuperAdmin();
            formContainer.append('<p>You can use the form below to create a ticket with the Matrix help desk:</p>');
            formContainer.append('<form id="supportMailForm" role="form">'
                + '  <div class="form-group"><label for="sup_summary">Summary:</label><input autocomplete="off" type="text" class="form-control" id="sup_summary" /></div>'
                + '  <div class="form-group"><label for="sup_description">Description:</label> <textarea  class="form-control" id="sup_description" ></textarea> </div>'
                + (requireEmail ? '  <div class="form-group sup_email"><label for="sup_email">E-mail:</label><input type="email" class="form-control" id="sup_email" /></div>' : '')
                + '  <div class="text-center"><button href="#" class="btn btn-large btn-success" id="support_send" >Create Ticket</button></div>'
                + '  <div class="text-center" style="padding:12px"><span id="sup_last_ticket">sending...</span></div>'
                + '  <div class="form-group sup_metainfo"><label for="sup_project">Related Project(s):</label><input autocomplete="off" type="text" class="form-control" id="sup_project" /></div>'
                + '  <div class="form-group sup_metainfo"><label for="sup_item">Related Item(s):</label><input autocomplete="off" type="text" class="form-control" id="sup_item" /></div>'
                + '  <div class="form-group sup_metainfo"><label for="sup_browser">Browser Info:</label><textarea class="form-control" id="sup_browser" ></textarea></div>'
                + '  <div class="form-group sup_metainfo"><label for="sup_log">Application Log:</label><textarea class="form-control" id="sup_log"></textarea>'
                + ' <input type="hidden" id="sup_version" />'
                + '</div>');
            panel.html("");
            panel.append(formContainer);
            $('#supportMailForm').on('keyup keypress', function (e) {
                // prevent people hitting return (even multiple times? ...MATRIX-2253)
                if (e.originalEvent && e.originalEvent.target && e.originalEvent.target.nodeName == "TEXTAREA") {
                    return true;
                }
                let keyCode = e.keyCode || e.which;
                if (keyCode === 13) {
                    e.preventDefault();
                    return false;
                }
                return true;
            });
            $("#support_send").prop('disabled', true);
            $("#sup_last_ticket").hide();
            $("#sup_summary").on("change keyup paste", function () {
                $("#support_send").prop('disabled', $("#sup_summary").val() == "" || (requireEmail && $("#sup_email").val() == ""));
            });
            $("#sup_email").on("change keyup paste", function () {
                $("#support_send").prop('disabled', $("#sup_summary").val() == "" || (requireEmail && $("#sup_email").val() == ""));
            });
            $("#support_send").on("click", function (evt) {
                $("#support_send").prop('disabled', true);
                if (evt.preventDefault)
                    evt.preventDefault();
                if (evt.stopPropagation)
                    evt.stopPropagation();
                var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                if (requireEmail && !re.test($("#sup_email").val())) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.showError("Invalid Email", "Please enter a correct email.");
                    return;
                }
                let param = {
                    summary: $("#sup_summary").val(),
                    description: $("#sup_description").val(),
                    matrixProject: $("#sup_project").val(),
                    matrixItem: $("#sup_item").val(),
                    browser: $("#sup_browser").val(),
                    log: $("#sup_log").val()
                };
                $("#sup_summary").val("");
                if (requireEmail) {
                    param.email = $("#sup_email").val();
                }
                $("#sup_last_ticket").show();
                let call_param = {
                    type: "POST",
                    url: _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.matrixBaseUrl + "/rest/1/all/servicedesk",
                    data: JSON.stringify(param),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {
                        if (data.key) {
                            $("#sup_last_ticket").html("Created ticket " + data.key + " " + param.description);
                        }
                        else {
                            $("#sup_last_ticket").html(data.message);
                        }
                    },
                    error: function (errMsg) {
                        $("#sup_last_ticket").html("Failed to create ticket: " + errMsg);
                    }
                };
                $.ajax(call_param);
            });
            $("#sup_url").val(_globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.matrixBaseUrl);
            this.support = true;
        }
        let tz_offset = -(new Date().getTimezoneOffset()) / 60;
        let device = {
            screen: {
                width: window.screen.width,
                height: window.screen.height
            },
            viewport: {
                width: 0,
                height: 0
            }
        };
        let width = 0, height = 0;
        try {
            width = window.innerWidth || _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.doc.documentElement.clientWidth || _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.doc.body.clientWidth;
        }
        catch (e) { }
        try {
            height = window.innerHeight || _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.doc.documentElement.clientHeight || _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.doc.body.clientHeight;
        }
        catch (e) { }
        device.viewport = {
            width: width,
            height: height
        };
        $("#sup_browser").val(navigator.userAgent + "\nTimezone: " + tz_offset
            + "\nScreen width: " + device.screen.width
            + "\nScreen height: " + device.screen.height
            + "\nScreen viewport width: " + device.viewport.width
            + "\nScreen viewport height: " + device.viewport.height);
        // Get full version for SER ticket creation
        $("#sup_version").val(_globals__WEBPACK_IMPORTED_MODULE_2__.app.getVersion());
        $("#sup_log").val(_matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.Logger.getLog());
        const user = _globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession.getUser();
        let umail = (!_globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.ItemConfig || user == "demo") ? "" : _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.ItemConfig.getEmail(user);
        $("#sup_email").val(umail);
        $("#sup_user").val(_globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession ? _globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession.getUser() : "");
        $("#sup_project").val(_globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession ? _globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession.getProject() : "");
        $("#sup_item").val(_globals__WEBPACK_IMPORTED_MODULE_2__.app ? _globals__WEBPACK_IMPORTED_MODULE_2__.app.getCurrentItemId() : "");
    }
    showHelp(panel, tabData) {
        panel.html("");
        let that = this;
        let help = "";
        if (!this.context || !this.context.itemId || (_globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession && _globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession.getProject() !== this.context.project)) {
            if (_globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession) {
                help += '<p class="cathelp_summary">Welcome to the project ' + _globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession.getProject() + '</p>';
                help += '<p class="">To get started explore the categories on the left.</p>';
                help += '<br>';
                help += '<br>';
                help += '<br>';
                help += '<br>';
                help += '<br>';
                panel.append(help);
            }
            return;
        }
        let item_type = _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.Item.parseRef(this.context.itemId).type;
        var projectHelp = _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.ItemConfig.getContextPagesConfig();
        if (projectHelp && projectHelp.itemHelp && projectHelp.itemHelp[this.context.itemId]) {
            panel.append('<div class="cathelp text-left">' + projectHelp.itemHelp[this.context.itemId] + '</div>');
        }
        else if (projectHelp && projectHelp.categoryHelp && projectHelp.categoryHelp[item_type]) {
            panel.append('<div class="cathelp text-left">' + projectHelp.categoryHelp[item_type] + '</div>');
        }
        else {
            switch (this.context.itemId) {
                case "F-PROJECT":
                    help += '<p class="cathelp_summary">Dashboards, reports and documents</p>';
                    help += '<p class="">In this folder you find <b>dashboards</b>, <b>reports</b>, <b>documents</b> as well as <b>signed / archived documents</b>.</p>';
                    help += '<ul class="cathelp_details">';
                    help += '<li>Dashboards are in the folder <b>AUDIT</b>. They can be used to see summaries of activities from the past</li>';
                    help += '<li>Reports are in the folder <b>REP</b>. Reports help to manage the project by extracting information about the status and the relationship of items in the database.</li>';
                    help += '<li>Documents are in <b>DOC</b>. Documents allow you to create your own reports with additional document headers and fields such as audit log or signature tables.</li>';
                    help += '<li>Signed / archived documents are in <b>SIGN</b>. Documents can be archived when a milestone has been reached. Once archived they will not change even if the items in the database changes and they can be signed electronically.</li>';
                    help += '</ul>';
                    break;
                case "AUDIT":
                    help += '<p class="cathelp_summary">Audit tools show activities in the project</b>.</p>';
                    help += '<p class="">Depending on your project configuration the following tools are available in this folder:</p>';
                    help += '<ul class="cathelp_details">';
                    help += '<li><b>Changes</b> Shows a calendar view with all changes done by day.</li>';
                    help += '<li><b>Deleted Items</b> Show a list of deleted items, ordered by time.</li>';
                    help += '<li><b>Tags</b> Show a list tags that have been assigned to some point/version in the past.</li>';
                    help += '<li><b>Document Changes and Downloads</b> Shows when and by whom DOCs and SIGN items have been created and downloaded.</li>';
                    help += ' </ul>';
                    break;
                case "DELETED":
                    help += '<p class="cathelp_summary">Deleted Items. Show a list of deleted items, ordered by time.</p>';
                    help += '<ul class="cathelp_details">';
                    help += '<li>You can restore deleted items by clicking on <b>restore</b>. This will restore the item into the project tree - in the same folder where it was when it was deleted. The item will be restored with all its history.</li>';
                    help += '<li>You tag (mark the point in time) when the item was deleted by clicking on <b>tag version</b>.</li>';
                    help += '</ul>';
                    break;
                case "SYNC":
                    help += '<p class="cathelp_summary">Agile Sync.</p>';
                    help += '<ul class="cathelp_details">';
                    help += '<li>The agile sync module allows you to sync data from external tools such as JIRA, Confluence, TFS, Zephyr into Matrix</li>';
                    help += '<li>This dashboard allows you to sync multiple items quickly</b>.</li>';
                    help += '</ul>';
                    break;
                case "MYDOCS":
                    help += '<p class="cathelp_summary">Signatures.</p>';
                    help += '<ul class="cathelp_details">';
                    help += '<li>Shows documents I need to sign</b>.</li>';
                    help += '</ul>';
                    break;
                case "REDLINE":
                    help += '<p class="cathelp_summary">Redlining allows to compare project data between two dates</p>';
                    help += '<ul class="cathelp_details">';
                    help += '<li>Select a from and to date/time and click on "compare" to show differences in items.</b>.</li>';
                    help += '<li>Select a from and click on "Timewarp" to browse the project as it was that day.</b>.</li>';
                    help += '</ul>';
                    break;
                case "REVIEWS":
                    help += '<p class="cathelp_summary">Review Dashboard</p>';
                    help += '<ul class="cathelp_details">';
                    help += '<li>My Reviews: show all reviews I need to participate in and how much work I did already.</b></li>';
                    help += '<li>All Reviews: show all reviews how much work needs to be done.</b></li>';
                    help += '<li>Reviews Per Item: show all reviews done per item.</b></li>';
                    help += '</ul>';
                    break;
                case "TAGS":
                    help += '<p class="cathelp_summary">Tags. Show a list of tags that have been assigned to some point/version in the past.</p>';
                    help += '<ul class="cathelp_details">';
                    help += '    <li>Tags mark a point in time when a change occurred.</li>';
                    help += '    <li>Tags can be set in to changes done in the past (through the CHANGES dashboard).</li>';
                    help += '    <li>Tags can be used to restore a project until a certain point in the past (branch in the past).</li>';
                    help += '</ul>';
                    break;
                case "CHANGES":
                    help += '<p class="cathelp_summary">Change Summary. Shows a calendar view with all changes done by day.</p>';
                    help += '<ul class="cathelp_details">';
                    help += '    <li>In the calendar view you can select a day or selection of days to see what changed in that period.</li>';
                    help += '    <li>You can tag version or just see the details of the changes in this stream.</li>';
                    help += '</ul>';
                    break;
                case "DOCS":
                    help += '<p class="cathelp_summary">Document status and activity</p>';
                    help += '<p class="">Document Status. Shows when and by whom DOCs and SIGN items have been created, signed and downloaded.</p>';
                    break;
                case "TAGS":
                    break;
                default:
                    if (this.context.itemId) {
                        let itemId = this.context.itemId;
                        let isFolder = itemId.indexOf("F-") === 0;
                        let isTC = false; // mTM.isTC(item_type);
                        let isXTC = false; // mTM.isXTC(item_type);
                        let folderName = _globals__WEBPACK_IMPORTED_MODULE_2__.app.getItemTitle("F-" + item_type + "-1");
                        let isSpecialItem = folderName === _globals__WEBPACK_IMPORTED_MODULE_2__.app.getItemTitle("_NON_EXISTING_CATEGORY__");
                        let isXSLTType = item_type === "DOC" || item_type === "SIGN" || item_type === "REPORT";
                        // For all folders besides reports, docs, sign
                        if (!isXSLTType && isFolder && itemId.lastIndexOf("-1") + 2 === itemId.length) {
                            help += '<p class="cathelp_summary">This is the root folder of the category <span>' + _globals__WEBPACK_IMPORTED_MODULE_2__.app.getItemTitle("F-" + item_type + "-1") + '</span></p>';
                            help += '<ul class="cathelp_details">';
                            help += '    <li>You can create a folder structure to organize the items of this category.</li>';
                            help += '    <li>You can create items of this type</li>';
                            help += '</ul>';
                        }
                        else if (!isXSLTType && isFolder && itemId.lastIndexOf("-1") + 2 !== itemId.length) {
                            help += '<p class="cathelp_summary">This is a folder of the category <span>' + _globals__WEBPACK_IMPORTED_MODULE_2__.app.getItemTitle("F-" + item_type + "-1") + '</span></p>';
                            help += '<p class="">You can</p>';
                            help += '<ul class="cathelp_details">';
                            help += '    <li>create more folders of this category inside this folder.</li>';
                            if (!isXTC)
                                help += '    <li>create items of the type ' + _globals__WEBPACK_IMPORTED_MODULE_2__.app.getItemTitle("F-" + item_type + "-1") + '.</li>';
                            if (isXTC)
                                help += '    <li>create test forms based on defined tests and use cases.</li>';
                            help += '</ul>';
                        }
                        // for all items besides DOC, SIGN, and REPORT, and special custom pages like JIRA, ZOHO
                        if (!isFolder && !isXSLTType && !isSpecialItem) {
                            help += '<p class="cathelp_summary">This item is of type <span>' + folderName + '</span></p>';
                            help += '<ul class="cathelp_details">';
                            help += '    <li>You can modify the title or the content and save it (hint: use ctrl-s).</li>';
                            help += '    <li>You can look at its history (<span class="helpGlyph fal fa-history"></span>).</li>';
                            help += '    <li>You can look at or modify the up or downlinks (<i class="helpGlyph fal fa-sitemap" aria-hidden="true"></i>).</li>';
                            if (isTC) {
                                help += '<li>You can create a test form from this (<span class="helpGlyph fal fa-share">)</span>: <span style="font-style:italic">Prepare for test run</span>.</li>';
                            }
                            if (isXTC) {
                                help += '<li>Execute the test. Hints: <ul><li>use keyboard shortcuts to set <span style="font-style:italic">actual results</span>';
                                help += '<li><span style="font-style:italic">tab</span> to navigate between the cells</li>';
                                help += '<li><span style="font-style:italic">shift return</span> in the comment cells to open a rich text editor, e.g. to attach images and files</li></ul></li>';
                            }
                            if (_globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.ItemConfig.getFieldsOfType("risk2", item_type).length > 0) {
                                help += '<li>You can enter the parameters according to the configured risk formula.</li>';
                            }
                            help += '</ul>';
                            help += '<p>Traceability Information:</p>';
                            help += '<ul class="cathelp_details">';
                            $.each([true, false], function (tfi, required) {
                                $.each([false, true], function (tfi, updown) {
                                    var cats = _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.ItemConfig.getLinkTypes(item_type, updown, required);
                                    var text = (required ? 'required' : 'optional') + ' ' + (updown ? 'downlinks' : 'uplinks');
                                    if (cats.length === 0) {
                                        help += '    <li>There are no ' + text + ' configured.</li>';
                                    }
                                    else {
                                        help += '    <li>There are ' + text + ': ' + cats.join(', ') + '.</li>';
                                    }
                                });
                            });
                            help += '</ul>';
                        }
                        // ZOHO JIRA,...
                        if (isSpecialItem) {
                        }
                        // for DOC
                        if (item_type === "DOC") {
                            if (isFolder) {
                                help += '<p class="cathelp_summary">Controlled documents basics</p>';
                                help += '<p class="">Controlled documents allow you to extract and analyze data from the database in order to archive and electronically sign it as PDF or Word File.</p>';
                                help += '<p class="">You can</p>';
                                help += '<ul class="cathelp_details">';
                                help += '    <li>define what the documents look like by selecting the sections, such as audit trail, purpose, scope, trace tables, list items, etc.</li>';
                                help += '    <li>decide which content goes into the document, e.g. all requirements from one specific folder, or all tests results for a selected set of specifications.</li>';
                                help += '    <li>download and review it as word, pdf or html.</li>';
                                help += '    <li>archive it (this will make sure the content of document will not change even if the items in the database get updated afterwards)</li>';
                                help += '    <li>electronically sign it</li>';
                                help += '</ul>';
                                help += '<img  class="cathelp_img" src="' + _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.matrixBaseUrl + '/img/help/doc0.png">';
                            }
                            else {
                                help += '<p class="cathelp_summary">Controlled document</p>';
                                help += '<p class="">You can</p>';
                                help += '<ul class="cathelp_details">';
                                help += '    <li>modify the document.</li>';
                                help += '    <li>download it as PDF, Word or html.</li>';
                                help += '    <li>archive (freeze) it so that the content does not change anymore.</li>';
                                help += '</ul>';
                            }
                            help += '<p class="cathelp_summary">Defining the structure</p>';
                            help += '<p class="">You can</p>';
                            help += '<ul class="cathelp_details">';
                            if (isFolder)
                                help += '    <li>use a wizard to create new documents from scratch, by clicking on "Create Controlled Documents" button.</li>';
                            if (isFolder)
                                help += '    <li>copy and paste an existing document from this or another project using the tool menu: <span class="fal fa-share"></span>.</li>';
                            // if (!isFolder) help += '    <li>modify an existing document by clicking on the configure section icon next to "' + mDHF.getArchiveButtonName() + '": <span class="fal fa-list"></span></li>';
                            if (!isFolder)
                                help += '    <li>modify an existing document by clicking on the configure section icon next to "' + _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.mDHF.getArchiveButtonName() + '": <span class="fal fa-list"></span></li>';
                            help += '</ul>';
                            help += '<p class="">There are two types of document sections</p>';
                            help += '<ul class="cathelp_details">';
                            help += '    <li>Static sections: you type the content</li>';
                            help += '    <li>Dynamic sections: the content is taken from the database of entered items</li>';
                            help += '</ul>';
                            if (!isFolder) {
                                help += '<img  class="cathelp_img" src="' + _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.matrixBaseUrl + '/img/help/doc1.png">';
                                help += '<p class="cathelp_summary">Changing the content and looks of sections</p>';
                                help += '<p class="">You can</p>';
                                help += '<ul class="cathelp_details">';
                                help += '    <li>change the content by clicking on the triangle on the left of the section title</li>';
                                help += '    <li>the looks by clicking on the <span class="fal fa-cog"></span> on the right of the section title</span></li>';
                                help += '</ul>';
                                help += '<img  class="cathelp_img" src="' + _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.matrixBaseUrl + '/img/help/doc2.png">';
                            }
                        }
                        // for SIGN
                        if (item_type === "SIGN") {
                            if (isFolder) {
                                help += '<p class="cathelp_summary">Archived documents</p>';
                                help += '<p class="">Controlled documents allow you to extract and analyze data from the database in order to archive and electronically sign it as PDF or Word File.</p>';
                                help += '<ul class="cathelp_details">';
                                help += '   <li>Archived documents are controlled documents that have been archived and therefore will not change anymore.</li>';
                                help += '   <li>You can only sign and download archived documents.</li>';
                                help += '</ul>';
                            }
                            else {
                                help += '<p class="cathelp_summary">Archived document</p>';
                                help += '<p class="">Controlled documents with a signature table can be signed here.</p>';
                            }
                        }
                        // for REPORTS
                        if (item_type === "REPORT") {
                            if (isFolder) {
                                help += '<p class="cathelp_summary">Reports</p>';
                                help += '<p class="">Reports allow you to manage your project by</p>';
                                help += '<ul class="cathelp_details">';
                                help += '   <li>reviewing items</li>';
                                help += '   <li>reviewing traceability</li>';
                                help += '   <li>analyzing risks</li>';
                                help += '   <li>planning tests</li>';
                                help += '   <li>...</li>';
                                help += '</ul>';
                                help += '<p class="">If you want to create documents for certification, audits or archiving, see Controlled Documents (DOC) on the left side.</p>';
                            }
                            else {
                                help += '<p class="cathelp_summary">Report</p>';
                                help += '<p class="">This report can be created as html, PDF or word file.</p>';
                            }
                        }
                    }
                    ;
                    break;
            }
            panel.append('<div class="cathelp text-left">' + help + '</div>');
            panel.append('<hr>');
            var moreHelp = 'Questions? Here is the online <span id="helpDocu" class="helpLink">user guide</span>';
            if (tabData.hipchat) {
                moreHelp += ', <a href="http://urlshort.matrixreq.com/helpdesk" target="_blank" class="helpLink" >Contact our service desk</a> with us send us an <span id="helpMail" class="helpLink">e-mail</span>';
            }
            else {
                moreHelp += ' or send us an <span id="helpMail" class="helpLink">e-mail</span>';
            }
            panel.append('<p>' + moreHelp + '.</p>');
            $("#helpDocu").click(function () {
                window.open("https://urlshort.matrixreq.com/d23/manual/main");
            });
            $("#helpMail").click(function () {
                let email = _globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession.serverConfig.serviceEmail ? _globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession.serverConfig.serviceEmail : "support@matrixreq.com";
                window.location.href = "mailto:" + email;
            });
        }
    }
    showSmartLinksTab(panel, tabData) {
        $("a[href='#" + tabData.tabId + "']").css("color", "");
        if (this.context.item && !_matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.Item.parseRef(this.context.itemId).isFolder && this.resetSmartLinks) {
            this.resetSmartLinks = false; // avoid reloading same frame on tab switch
            panel.html("");
            var smartlinks = $(`<div data-cy="${tabData.title}">`);
            panel.append(smartlinks);
            panel.append("<br>");
            var item = JSON.parse(decodeURI(this.context.item));
            // match references (smart links) into project
            // not (folders) F-REQ-1 not (cross project).../REQ-1
            var regexstr = '((F-)*(\/)*(' + _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.ItemConfig.getCategories(true).join("|") + ')-[1-9]+[0-9]*)';
            var re = new RegExp(regexstr, 'g');
            // parse fields
            var links = [];
            let inSection = {};
            $.each(_globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.ItemConfig.getItemConfiguration(item.type).fieldList, function (idx, field) {
                if (field.fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_4__.FieldDescriptions.Field_richtext || field.fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_4__.FieldDescriptions.Field_steplist
                    || field.fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_4__.FieldDescriptions.Field_test_steps || field.fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_4__.FieldDescriptions.Field_test_steps_result
                    || field.fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_4__.FieldDescriptions.Field_dhf) {
                    var fieldVal = item[field.id];
                    var match = fieldVal ? fieldVal.match(re) : null;
                    if (match) {
                        $.each(match, function (midx, m) {
                            if (m.indexOf("F-") == 0 || m.indexOf("/") == 0)
                                return; // folder or cross project are not yet supported
                            if (links.indexOf(m) === -1) {
                                links.push(m);
                            }
                            let sn = (field.fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_4__.FieldDescriptions.Field_dhf) ? JSON.parse(fieldVal).name : field.label;
                            if (!inSection[m]) {
                                inSection[m] = [];
                            }
                            if (inSection[m].indexOf(sn) == -1) {
                                inSection[m].push(sn);
                            }
                        });
                    }
                }
            });
            if (links.length === 0) {
                smartlinks.append($("<div class='contextFrame-select-item'>").html("there are no smart links"));
            }
            else if (links.length > this.maxNumberOfLinks) {
                this.renderIds(tabData, links, smartlinks, 'contextFramePreview contextFramePreviewUp', inSection, "There are to many smart links to show details.");
            }
            else {
                this.renderFromIds(tabData, links, smartlinks, 'contextFramePreview contextFramePreviewUp', inSection);
            }
        }
        else if (this.resetSmartLinks) {
            panel.html("").append($("<div class='contextFrame-select-item'>").html("select an item to see smartlinks"));
        }
    }
    showReferencesTab(panel, tabData) {
        if (this.context.item && !_matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.Item.parseRef(this.context.itemId).isFolder) {
            panel.html("");
            var uplinks = $("<div>");
            var downlinks = $("<div>");
            panel.append(uplinks);
            panel.append("<hr>");
            panel.append(downlinks);
            panel.append("<br>");
            let item = JSON.parse(decodeURI(this.context.item));
            if (item.upLinks.length === 0) {
                uplinks.append($("<div class='contextFrame-select-item'>").html("there are no uplinks"));
            }
            else if (item.upLinks.length > this.maxNumberOfLinks) {
                this.renderIds(tabData, this.getUpLinks(item), uplinks, 'contextFramePreview contextFramePreviewUp', null, "There are to many up links to show details.");
            }
            else {
                this.renderFromIds(tabData, this.getUpLinks(item), uplinks, 'contextFramePreview contextFramePreviewUp');
            }
            if (item.downLinks.length === 0) {
                downlinks.append($("<div class='contextFrame-select-item'>").html("there are no downlinks"));
            }
            else if (item.downLinks.length > this.maxNumberOfLinks) {
                this.renderIds(tabData, this.getDownLinks(item), downlinks, 'contextFramePreview contextFramePreviewUp', null, "There are to many down links to show details.");
            }
            else {
                this.renderFromIds(tabData, this.getDownLinks(item), downlinks, 'contextFramePreview contextFramePreviewDown');
            }
        }
        else {
            panel.html("").append($("<div class='contextFrame-select-item'>").html("select an item to see up and downlinks"));
        }
    }
    showItemsInFolderTab(panel, tabData) {
        if (this.context.item && _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.Item.parseRef(this.context.itemId).isFolder) {
            panel.html("");
            var items = $("<div>");
            panel.append(items);
            panel.append("<br>");
            this.renderAllInFolder(this.context.itemId, items);
        }
        else {
            panel.html("").append($("<div class='contextFrame-select-item'>").html("select a folder to see it's items"));
        }
    }
    showUpReferences(panel, tabData) {
        if (this.context.item && !_matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.Item.parseRef(this.context.itemId).isFolder) {
            var links = $("<div>");
            panel.append(links);
            panel.append("<br>");
            this.renderAllUpOrDown(this.context.itemId, false, links);
        }
        else {
            panel.html("").append($("<div class='contextFrame-select-item'>").html("select an item to see the up references"));
        }
    }
    showDownReferences(panel, tabData) {
        if (this.context.item && !_matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.Item.parseRef(this.context.itemId).isFolder) {
            var links = $("<div>");
            panel.append(links);
            panel.append("<br>");
            this.renderAllUpOrDown(this.context.itemId, true, links);
        }
        else {
            panel.html("").append($("<div class='contextFrame-select-item'>").html("select an item to see the down references"));
        }
    }
    getUpLinks(item) {
        let toDo = [];
        $.each(item.upLinks, function (lidx, link) {
            toDo.push(link.to);
        });
        return toDo;
    }
    getDownLinks(item) {
        let toDo = [];
        $.each(item.downLinks, function (lidx, link) {
            toDo.push(link.to);
        });
        return toDo;
    }
    // get full items for a number of items and render them
    renderFromIds(tabData, toDoList, render, renderClass, inSection) {
        let that = this;
        if (toDoList.length === 0) {
            return;
        }
        let searchExpr = toDoList.map(function (id) { return "id=" + id; }).join(" OR ");
        _globals__WEBPACK_IMPORTED_MODULE_2__.app.getNeedlesAsync(searchExpr, false, true, "*", true, true).done(async function (items) {
            for (let itemId of toDoList) {
                let data = items.filter(function (item) {
                    return item.id == itemId;
                });
                if (data.length == 0) {
                    let linkDoesNotExist = $("<div class='contextFramePreview contextFramePreviewError'>");
                    render.append(linkDoesNotExist);
                    _globals__WEBPACK_IMPORTED_MODULE_2__.matrixApplicationUI.renderErrorControl(linkDoesNotExist, "" + itemId + " does not exist", "Please correct the link.", true);
                    $("a[href='#" + tabData.tabId + "']").css("color", "red");
                }
                else if (_globals__WEBPACK_IMPORTED_MODULE_2__.app.canViewItem(data[0])) {
                    var preview = $("<div class='" + renderClass + "'>");
                    render.append(preview);
                    var ctrl = new _UI_Components_index__WEBPACK_IMPORTED_MODULE_1__.ItemControl({
                        control: preview,
                        controlState: _globals__WEBPACK_IMPORTED_MODULE_2__.ControlState.Tooltip,
                        item: data[0],
                        isItem: (typeof data[0].children === 'undefined')
                    });
                    await ctrl.load();
                    that.controls.push(ctrl);
                }
                else {
                    let noView = $("<div class='contextFramePreview contextFramePreviewError'>");
                    render.append(noView);
                    _globals__WEBPACK_IMPORTED_MODULE_2__.matrixApplicationUI.renderErrorControl(noView, "You have no rights to view " + itemId + "", "Talk to the project administrator.", true);
                }
                if (inSection && inSection[itemId] && inSection[itemId].length) {
                    render.append($("<div class='TitleSpecial'>").html("used in: " + inSection[itemId].join(",")));
                }
            }
        });
    }
    // show item ids as a flat list
    renderIds(tabData, toDoList, render, renderClass, inSection, infotext) {
        let that = this;
        render.append(infotext);
        render.append("<br>");
        let ul = $("<div>").appendTo(render);
        $.each(toDoList, function (idx, itemId) {
            let title = _globals__WEBPACK_IMPORTED_MODULE_2__.app.getItemTitle(itemId);
            if (!title) {
                let dash = itemId.indexOf("-");
                $("<li><span style='font-weight:bold;color:red'><span>" + itemId.substr(0, dash) + "</span>" + itemId.substr(dash) + "</span> does not exist.</li>").appendTo(ul);
                $("a[href='#" + tabData.tabId + "']").css("color", "red");
            }
            else {
                $("<li>" + itemId + "!</li>").appendTo(ul);
            }
        });
        ul.highlightReferences();
    }
    async nonBlockingRender(items, index, renderClass, render, hideShow, categoryFilter) {
        let that = this;
        if (items.length <= index)
            return;
        let item = items[index];
        if (_globals__WEBPACK_IMPORTED_MODULE_2__.app.canViewItem(item)) {
            let type = _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.Item.parseRef(item.id).type;
            let preview = $("<div class='" + renderClass + " " + type + "'>");
            render.append(preview);
            // need to hide after adding to DOM
            if (hideShow && categoryFilter && categoryFilter[type] === false)
                preview.hide();
            let ctrl = new _UI_Components_index__WEBPACK_IMPORTED_MODULE_1__.ItemControl({
                control: preview,
                controlState: _globals__WEBPACK_IMPORTED_MODULE_2__.ControlState.Tooltip,
                item: item,
                isItem: (typeof item.children === 'undefined')
            });
            await ctrl.load();
            that.controls.push(ctrl);
            // need to re-hide after adding to rendering
            if (hideShow && categoryFilter && categoryFilter[type] === false)
                preview.hide();
        }
        else {
            let noView = $("<div class='contextFramePreview contextFramePreviewUp'>");
            render.append(noView);
            _globals__WEBPACK_IMPORTED_MODULE_2__.matrixApplicationUI.renderErrorControl(noView, "You have no rights to view " + item.id + "", "Talk to the project administrator.", true);
        }
        this.nonBlockingRenderNext = window.setTimeout(async function () {
            await that.nonBlockingRender(items, index + 1, renderClass, render, hideShow);
        }, 200);
    }
    renderAllUpOrDown(fromItemId, down, render) {
        let that = this;
        let renderSettings = {
            recursive: localStorage.getItem("recursive") == "1"
        };
        let filter = $("<div style='display:table'>").appendTo(render);
        _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.addCheckbox(filter, "recursively", renderSettings, "recursive", function () {
            localStorage.setItem("recursive", renderSettings.recursive ? "1" : "0");
            render.html("");
            that.renderAllUpOrDown(fromItemId, down, render);
        }).css("display", "table-cell").addClass("showall_recursive");
        let renderClass = down ? "contextFramePreview contextFramePreviewDown" : "contextFramePreview contextFramePreviewUp";
        let recurse = renderSettings.recursive ? "m" : "";
        let searchExpr = down ? ("uplink" + recurse + "=" + fromItemId) : ("category!=XTC and downlink" + recurse + "=" + fromItemId);
        window.clearTimeout(this.nonBlockingRenderNext);
        _globals__WEBPACK_IMPORTED_MODULE_2__.app.getNeedlesAsync(searchExpr, false, true, "*", true, true).done(function (items) {
            if (items.length == 0) {
                that.showNothingFound(render);
                return;
            }
            // find out which categories are returned and add checkbox to UI to show/hide that category
            let categories = [];
            let categoryFilter = {}; // default is show all
            for (let item of items) {
                let type = _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.Item.parseRef(item.id).type;
                if (categories.indexOf(type) == -1) {
                    // by default 'show items"
                    if (typeof categoryFilter[type] == 'undefined') {
                        categoryFilter[type] = type != "XTC";
                    }
                    _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.addCheckbox(filter, type, categoryFilter, type, function () {
                        if (categoryFilter[type] === true)
                            $("." + type, render).show();
                        else
                            $("." + type, render).hide();
                    }).css("display", "table-cell").css("padding-left", "12px").addClass("showall_" + type);
                    categories.push(type);
                }
            }
            // render items
            that.nonBlockingRenderNext = window.setTimeout(async () => {
                that.nonBlockingRender(items, 0, renderClass, render, true);
            }, 200);
        });
    }
    renderAllInFolder(folderId, render) {
        let that = this;
        let renderSettings = {
            recursive: localStorage.getItem("recursiveFolder") == "1"
        };
        _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.addCheckbox(render, "recursively", renderSettings, "recursive", function () {
            localStorage.setItem("recursiveFolder", renderSettings.recursive ? "1" : "0");
            render.html("");
            that.renderAllInFolder(folderId, render);
        }).addClass("showall_recursive");
        let renderClass = "contextFramePreview contextFramePreviewUp";
        let searchExpr = "folder" + (renderSettings.recursive ? "m" : "") + "=" + folderId;
        window.clearTimeout(this.nonBlockingRenderNext);
        _globals__WEBPACK_IMPORTED_MODULE_2__.app.getNeedlesAsync(searchExpr, false, true, "*", true, true).done(function (items) {
            if (items.length == 0) {
                that.showNothingFound(render);
                return;
            }
            that.nonBlockingRenderNext = window.setTimeout(async function () {
                await that.nonBlockingRender(items, 0, renderClass, render, false);
            }, 200);
        });
    }
    showNothingFound(render) {
        render.append("No items found.");
    }
    // write data into frames
    renderContextFrames() {
        this.controls = [];
        if (!this.exists || !this.visible || !this.context) {
            return;
        }
        let that = this;
        $.each(this.getTabs(), function (tabIdx, tabData) {
            var panel = $('#contextFrameSettingTab_' + tabIdx);
            if (tabData.type === "faq") {
                // this is rendered statically once - keep it
            }
            else if (tabData.type === "support") {
                that.showSupport(panel, tabData);
            }
            else if (tabData.type === "smartlinks") {
                that.showSmartLinksTab(panel, tabData);
            }
            else if (tabData.type === "help") {
                that.showHelp(panel, tabData);
            }
            else if (!panel.hasClass("active")) {
                // don't actually render it just now, wait until user shows it
                if (!panel.hasClass("noRefresh")) {
                    panel.html("").append(_matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.getSpinningWait("retrieving data"));
                }
            }
            else if (tabData.type === "iframeget") {
                let jp = _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.JSON.clone(that.context);
                jp.item = "";
                jp.fieldList = "";
                var param = $.param(jp, true);
                var page = tabData.baseURL + "?" + param;
                $('.contextframeIframeget', panel)[0].src = page;
            }
            else if (tabData.type === "iframe") {
                var iframePoster = $('<form style="display:none" target="contextframeIframe_' + tabIdx + '" method="post" action="' + tabData.baseURL + '">');
                $("body").append(iframePoster);
                $.each(that.context, function (vaIdx, va) {
                    iframePoster.append('<input type="hidden" name="' + vaIdx + '" value="' + va + '">');
                });
                iframePoster.submit().remove();
            }
            else if (_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.ContextFrameManager.implements(tabData.type)) {
                _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.ContextFrameManager.renderTab(panel, tabData.type, tabData, that.context);
            }
            else if (tabData.type === "references") {
                that.showReferencesTab(panel, tabData);
            }
            else if (tabData.type === "foldercontent") {
                that.showItemsInFolderTab(panel, tabData);
            }
            else if (tabData.type === "upreferences") {
                panel.html("");
                that.showUpReferences(panel, tabData);
            }
            else if (tabData.type === "downreferences") {
                panel.html("");
                that.showDownReferences(panel, tabData);
            }
            else {
                panel.html(tabData.type);
            }
        });
    }
    ;
    fillContextFrame(_data, itemId) {
        if (!this.exists) {
            return;
        }
        // save the data
        this.context = {
            project: _globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession.getProject(),
            user: _globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession.getUser(),
            server: _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.matrixBaseUrl,
            version: _globals__WEBPACK_IMPORTED_MODULE_2__.app.getVersion(),
            product: _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.matrixProduct,
            itemId: itemId,
            item: _data ? encodeURI(JSON.stringify(_data)) : "",
            fieldList: _data ? encodeURI(JSON.stringify(_globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.ItemConfig.getItemConfiguration(_data.type).fieldList)) : ""
        };
        // fill the frames
        this.resetSmartLinks = true;
        this.renderContextFrames();
    }
    ;
    // show context frames, remember as displayed
    init() {
        var contextBar = $("#contextframesizer");
        var container = $("#contextframe");
        this.support = false; // make sure support tab is initialized
        this.exists = false;
        if ($("#contextframe").length === 0) {
            // client has no context frames (e.g. admin, mobile, ...)
            return;
        }
        container.html();
        if (this.getTabs().length === 0) {
            return;
        }
        let that = this;
        this.exists = true;
        // paint the tabs
        var tabpanel = $('<div role="tabpanel" class="tabpanel-container contextFrameContainer">');
        container.append(tabpanel);
        var tabpanelul = $('<ul class="nav nav-tabs contextFrameTabs" role="tablist">');
        tabpanel.append(tabpanelul);
        var tabpanels = $('<div class="tab-content">');
        tabpanel.append(tabpanels);
        $.each(this.getTabs(), function (tabIdx, tabData) {
            tabData.tabId = "contextFrameSettingTab_" + tabIdx;
            tabpanelul.append('<li data-cy="tab ' + tabData.title + '" role="presentation" ' + (tabIdx === 0 ? 'class="active"' : '') + '><a href="#contextFrameSettingTab_' + tabIdx + '"  role="tab" data-toggle="tab">' + tabData.title + '</a></li>');
            var panel = $('<div role="tabpanel"  style="height:100%" class="tabpaneltab tab-pane ' + (tabIdx === 0 ? 'active' : '') + '" id="' + tabData.tabId + '" >');
            tabpanels.append(panel);
            if (tabData.type === "iframe") {
                panel.append(`<iframe data-cy="iframe ${tabData.title}" class="contextframeIframe" name="contextframeIframe_${tabIdx}"></iframe>`);
            }
            if (tabData.type === "iframeget") {
                panel.append(`<iframe data-cy="iframe ${tabData.title}"  class="contextframeIframeget" name="contextframeIframe_${tabIdx}"></iframe>`);
            }
            else if (tabData.type === "faq") {
                panel.append(`<iframe data-cy="iframe ${tabData.title}" class="contextframeIframe" name="contextframeIframe_${tabIdx}" src="https://urlshort.matrixreq.com/d23/faq" allowfullscreen="allowfullscreen"></iframe>`);
            }
            else if (tabData.type === "support") {
                that.showSupport(panel, tabData);
            }
            else if (tabData.type === "help") {
                that.showHelp(panel, tabData);
            }
        });
        $('a[data-toggle="tab"]', tabpanel).on('shown.bs.tab', function (e) {
            var target = $(e.target).attr("href"); // activated tab
            that.renderContextFrames();
        });
        // prepare initial size
        if (!localStorage.getItem('contextframeWidth')) {
            // it has never been shown, calculate default size amd
            let contextframeWidth = $(document).width() - 722 - $("#main").position().left;
            if (contextframeWidth < 400) {
                contextframeWidth = 400;
            }
            localStorage.setItem('contextframeWidth', contextframeWidth.toString());
        }
        // show frames if they should be visible
        var contextframeWidth = Number(localStorage.getItem('contextframeWidth'));
        if (Number(contextframeWidth) > 0) {
            this.shouldBeVisible = true;
            that.showContextFrames();
        }
        else {
            this.shouldBeVisible = false;
            that.hideContextFrames();
        }
        // to avoid bug that mouse up is stolen by iframe
        $(".contextframeIframe").mouseenter(function (e) {
            $(document).off('mousemove');
        });
        $(".contextframeIframeget").mouseenter(function (e) {
            $(document).off('mousemove');
        });
    }
    ;
}
ContextFramesTools.defaultPages = {
    tabs: [{ title: "Help", type: "help", hipchat: false },
        { title: "Support", type: "support", hipchat: false }]
};


/***/ }),
/* 11 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseTableFieldHandler: () => (/* reexport safe */ _FieldHandlers_index__WEBPACK_IMPORTED_MODULE_6__.BaseTableFieldHandler),
/* harmony export */   BaseValidatedTableFieldHandler: () => (/* reexport safe */ _FieldHandlers_index__WEBPACK_IMPORTED_MODULE_6__.BaseValidatedTableFieldHandler),
/* harmony export */   BasicFunctions: () => (/* reexport safe */ _BasicFunctions__WEBPACK_IMPORTED_MODULE_7__.BasicFunctions),
/* harmony export */   BranchingConstants: () => (/* reexport safe */ _Branching__WEBPACK_IMPORTED_MODULE_8__.BranchingConstants),
/* harmony export */   BranchingHelper: () => (/* reexport safe */ _Branching__WEBPACK_IMPORTED_MODULE_8__.BranchingHelper),
/* harmony export */   CheckboxFieldHandler: () => (/* reexport safe */ _FieldHandlers_index__WEBPACK_IMPORTED_MODULE_6__.CheckboxFieldHandler),
/* harmony export */   ColumnEditor: () => (/* reexport safe */ _FieldHandlers_index__WEBPACK_IMPORTED_MODULE_6__.ColumnEditor),
/* harmony export */   ColumnTypesInfo: () => (/* reexport safe */ _PluginManagerDocuments__WEBPACK_IMPORTED_MODULE_1__.ColumnTypesInfo),
/* harmony export */   ContextFrameManager: () => (/* reexport safe */ _TrainingManager__WEBPACK_IMPORTED_MODULE_5__.ContextFrameManager),
/* harmony export */   CrosslinksFieldHandler: () => (/* reexport safe */ _FieldHandlers_index__WEBPACK_IMPORTED_MODULE_6__.CrosslinksFieldHandler),
/* harmony export */   DBCache: () => (/* reexport safe */ _DBCache__WEBPACK_IMPORTED_MODULE_9__.DBCache),
/* harmony export */   DHFFieldHandler: () => (/* reexport safe */ _FieldHandlers_index__WEBPACK_IMPORTED_MODULE_6__.DHFFieldHandler),
/* harmony export */   DateFieldHandler: () => (/* reexport safe */ _FieldHandlers_index__WEBPACK_IMPORTED_MODULE_6__.DateFieldHandler),
/* harmony export */   DocumentSectionType: () => (/* reexport safe */ _PluginManagerDocuments__WEBPACK_IMPORTED_MODULE_1__.DocumentSectionType),
/* harmony export */   DropdownFieldHandler: () => (/* reexport safe */ _FieldHandlers_index__WEBPACK_IMPORTED_MODULE_6__.DropdownFieldHandler),
/* harmony export */   EItemChangeState: () => (/* reexport safe */ _Branching__WEBPACK_IMPORTED_MODULE_8__.EItemChangeState),
/* harmony export */   EMergeActionChoice: () => (/* reexport safe */ _Branching__WEBPACK_IMPORTED_MODULE_8__.EMergeActionChoice),
/* harmony export */   EMergeChangeStatus: () => (/* reexport safe */ _Branching__WEBPACK_IMPORTED_MODULE_8__.EMergeChangeStatus),
/* harmony export */   EMergeType: () => (/* reexport safe */ _Branching__WEBPACK_IMPORTED_MODULE_8__.EMergeType),
/* harmony export */   EmptyFieldHandler: () => (/* reexport safe */ _FieldHandlers_index__WEBPACK_IMPORTED_MODULE_6__.EmptyFieldHandler),
/* harmony export */   EventDispatcher: () => (/* reexport safe */ _MatrixRequirementsAPI__WEBPACK_IMPORTED_MODULE_12__.EventDispatcher),
/* harmony export */   EventDispatcherAsync: () => (/* reexport safe */ _MatrixRequirementsAPI__WEBPACK_IMPORTED_MODULE_12__.EventDispatcherAsync),
/* harmony export */   FieldHandlerFactory: () => (/* reexport safe */ _FieldHandlers_index__WEBPACK_IMPORTED_MODULE_6__.FieldHandlerFactory),
/* harmony export */   GateFieldHandler: () => (/* reexport safe */ _FieldHandlers_GateFieldHandler__WEBPACK_IMPORTED_MODULE_19__.GateFieldHandler),
/* harmony export */   GenericFieldHandler: () => (/* reexport safe */ _FieldHandlers_index__WEBPACK_IMPORTED_MODULE_6__.GenericFieldHandler),
/* harmony export */   HyperlinkFieldHandler: () => (/* reexport safe */ _FieldHandlers_index__WEBPACK_IMPORTED_MODULE_6__.HyperlinkFieldHandler),
/* harmony export */   InitializeBusinessLogic: () => (/* binding */ InitializeBusinessLogic),
/* harmony export */   InitializeFieldHandlers: () => (/* reexport safe */ _FieldHandlers_index__WEBPACK_IMPORTED_MODULE_6__.InitializeFieldHandlers),
/* harmony export */   InitializePluginManager: () => (/* reexport safe */ _PluginManager__WEBPACK_IMPORTED_MODULE_0__.InitializePluginManager),
/* harmony export */   InitializePluginManagerDocuments: () => (/* reexport safe */ _PluginManagerDocuments__WEBPACK_IMPORTED_MODULE_1__.InitializePluginManagerDocuments),
/* harmony export */   InitializePluginManagerFormulas: () => (/* reexport safe */ _PluginManagerFormulas__WEBPACK_IMPORTED_MODULE_2__.InitializePluginManagerFormulas),
/* harmony export */   InitializeTasks: () => (/* reexport safe */ _Tasks__WEBPACK_IMPORTED_MODULE_3__.InitializeTasks),
/* harmony export */   InitializeTestManager: () => (/* reexport safe */ _TestManager__WEBPACK_IMPORTED_MODULE_4__.InitializeTestManager),
/* harmony export */   InitializeTrainingManager: () => (/* reexport safe */ _TrainingManager__WEBPACK_IMPORTED_MODULE_5__.InitializeTrainingManager),
/* harmony export */   ItemConfiguration: () => (/* reexport safe */ _ItemConfiguration__WEBPACK_IMPORTED_MODULE_10__.ItemConfiguration),
/* harmony export */   ItemSelectionFieldHandler: () => (/* reexport safe */ _FieldHandlers_index__WEBPACK_IMPORTED_MODULE_6__.ItemSelectionFieldHandler),
/* harmony export */   ItemSelectionFieldHandlerFromTo: () => (/* reexport safe */ _FieldHandlers_index__WEBPACK_IMPORTED_MODULE_6__.ItemSelectionFieldHandlerFromTo),
/* harmony export */   MR1: () => (/* reexport safe */ _MatrixRequirementsAPI__WEBPACK_IMPORTED_MODULE_12__.MR1),
/* harmony export */   MR1Impl: () => (/* reexport safe */ _MatrixRequirementsAPI__WEBPACK_IMPORTED_MODULE_12__.MR1Impl),
/* harmony export */   MatrixReq: () => (/* reexport safe */ _MatrixReq__WEBPACK_IMPORTED_MODULE_11__.MatrixReq),
/* harmony export */   MatrixSession: () => (/* reexport safe */ _MatrixSession__WEBPACK_IMPORTED_MODULE_13__.MatrixSession),
/* harmony export */   NotificationsBL: () => (/* reexport safe */ _NotificationsBL__WEBPACK_IMPORTED_MODULE_17__.NotificationsBL),
/* harmony export */   NotificationsCache: () => (/* reexport safe */ _NotificationsCache__WEBPACK_IMPORTED_MODULE_18__.NotificationsCache),
/* harmony export */   PluginManager: () => (/* reexport safe */ _PluginManager__WEBPACK_IMPORTED_MODULE_0__.PluginManager),
/* harmony export */   PluginManagerDocuments: () => (/* reexport safe */ _PluginManagerDocuments__WEBPACK_IMPORTED_MODULE_1__.PluginManagerDocuments),
/* harmony export */   PushMessages: () => (/* reexport safe */ _PushMessages__WEBPACK_IMPORTED_MODULE_14__.PushMessages),
/* harmony export */   RestConnector: () => (/* reexport safe */ _RestConnector__WEBPACK_IMPORTED_MODULE_15__.RestConnector),
/* harmony export */   RestDB: () => (/* reexport safe */ _RestDB__WEBPACK_IMPORTED_MODULE_16__.RestDB),
/* harmony export */   RichtextFieldHandler: () => (/* reexport safe */ _FieldHandlers_index__WEBPACK_IMPORTED_MODULE_6__.RichtextFieldHandler),
/* harmony export */   SteplistFieldHandler: () => (/* reexport safe */ _FieldHandlers_index__WEBPACK_IMPORTED_MODULE_6__.SteplistFieldHandler),
/* harmony export */   TableMath: () => (/* reexport safe */ _PluginManagerFormulas__WEBPACK_IMPORTED_MODULE_2__.TableMath),
/* harmony export */   Tasks: () => (/* reexport safe */ _Tasks__WEBPACK_IMPORTED_MODULE_3__.Tasks),
/* harmony export */   TestManager: () => (/* reexport safe */ _TestManager__WEBPACK_IMPORTED_MODULE_4__.TestManager),
/* harmony export */   TestResultFieldHandler: () => (/* reexport safe */ _FieldHandlers_index__WEBPACK_IMPORTED_MODULE_6__.TestResultFieldHandler),
/* harmony export */   TestStepsFieldHandler: () => (/* reexport safe */ _FieldHandlers_index__WEBPACK_IMPORTED_MODULE_6__.TestStepsFieldHandler),
/* harmony export */   TestStepsResultFieldHandler: () => (/* reexport safe */ _FieldHandlers_index__WEBPACK_IMPORTED_MODULE_6__.TestStepsResultFieldHandler),
/* harmony export */   TextlineFieldHandler: () => (/* reexport safe */ _FieldHandlers_index__WEBPACK_IMPORTED_MODULE_6__.TextlineFieldHandler),
/* harmony export */   UserFieldHandler: () => (/* reexport safe */ _FieldHandlers_index__WEBPACK_IMPORTED_MODULE_6__.UserFieldHandler),
/* harmony export */   initialize: () => (/* reexport safe */ _FieldHandlers_index__WEBPACK_IMPORTED_MODULE_6__.initialize),
/* harmony export */   mDHF: () => (/* reexport safe */ _PluginManagerDocuments__WEBPACK_IMPORTED_MODULE_1__.mDHF),
/* harmony export */   mTM: () => (/* reexport safe */ _TestManager__WEBPACK_IMPORTED_MODULE_4__.mTM),
/* harmony export */   mTasks: () => (/* reexport safe */ _Tasks__WEBPACK_IMPORTED_MODULE_3__.mTasks),
/* harmony export */   pluginHooks: () => (/* reexport safe */ _PluginManager__WEBPACK_IMPORTED_MODULE_0__.pluginHooks),
/* harmony export */   plugins: () => (/* reexport safe */ _PluginManager__WEBPACK_IMPORTED_MODULE_0__.plugins),
/* harmony export */   tableMath: () => (/* reexport safe */ _PluginManagerFormulas__WEBPACK_IMPORTED_MODULE_2__.tableMath)
/* harmony export */ });
/* harmony import */ var _PluginManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);
/* harmony import */ var _PluginManagerDocuments__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(13);
/* harmony import */ var _PluginManagerFormulas__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(118);
/* harmony import */ var _Tasks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(119);
/* harmony import */ var _TestManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(52);
/* harmony import */ var _TrainingManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(120);
/* harmony import */ var _FieldHandlers_index__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(60);
/* harmony import */ var _BasicFunctions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(74);
/* harmony import */ var _Branching__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(121);
/* harmony import */ var _DBCache__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(15);
/* harmony import */ var _ItemConfiguration__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(122);
/* harmony import */ var _MatrixReq__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(123);
/* harmony import */ var _MatrixRequirementsAPI__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(6);
/* harmony import */ var _MatrixSession__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(124);
/* harmony import */ var _PushMessages__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(126);
/* harmony import */ var _RestConnector__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(129);
/* harmony import */ var _RestDB__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(14);
/* harmony import */ var _NotificationsBL__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(43);
/* harmony import */ var _NotificationsCache__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(44);
/* harmony import */ var _FieldHandlers_GateFieldHandler__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(76);



























function InitializeBusinessLogic() {
    // Why: sets up field handlers.
    (0,_FieldHandlers_index__WEBPACK_IMPORTED_MODULE_6__.InitializeFieldHandlers)();
    // Why: sets up the global plugins
    (0,_PluginManager__WEBPACK_IMPORTED_MODULE_0__.InitializePluginManager)();
    // Why: sets up the global mDHF, registers it as a plugin.
    (0,_PluginManagerDocuments__WEBPACK_IMPORTED_MODULE_1__.InitializePluginManagerDocuments)();
    // Why: sets up the global mTasks
    (0,_Tasks__WEBPACK_IMPORTED_MODULE_3__.InitializeTasks)();
    // Why: sets up the global mTM, registers it as a plugin.
    (0,_TestManager__WEBPACK_IMPORTED_MODULE_4__.InitializeTestManager)();
    // Why: sets up the global ContextFrameManager.
    (0,_TrainingManager__WEBPACK_IMPORTED_MODULE_5__.InitializeTrainingManager)();
    // Why: sets up the global tableMath.
    (0,_PluginManagerFormulas__WEBPACK_IMPORTED_MODULE_2__.InitializePluginManagerFormulas)();
}



/***/ }),
/* 12 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InitializePluginManager: () => (/* binding */ InitializePluginManager),
/* harmony export */   PluginManager: () => (/* binding */ PluginManager),
/* harmony export */   pluginHooks: () => (/* binding */ pluginHooks),
/* harmony export */   plugins: () => (/* binding */ plugins)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);




let pluginHooks;
pluginHooks = { shares: 0 };
class PluginManager {
    constructor() {
        this._plugins = [];
        this.controls = {};
        this.destructors = {};
        this.titles = {};
        this.usesFilters = {};
    }
    /** Called by the main UI handing over a div which can be used inside a plugin
     * to display modal popups
     *
     * @param {jquery object} jui a $("<div />") object
     * @returns {undefined}
     */
    setUI(jui) {
        this._jui = jui;
    }
    /** function to register a plugin for a specific menu (specified by the hook)
     *
     * @param {instance of plugin} plugin
     * @returns {undefined}
     */
    register(plugin) {
        this._plugins.push(plugin);
    }
    /** this method is called from the main UI whenever an item is selected to be
     * displayed. The information is forwarded to all plugins
     *
     * @param {json object} item for example a requirement. see the json documention of item types
     * @returns {undefined}
     */
    init(item) {
        for (var idx = 0; idx < this._plugins.length; idx++) {
            if (this._plugins[idx].initItem) {
                this._plugins[idx].initItem(item, this._jui);
            }
        }
    }
    async initPrinting() {
        for (let idx = 0; idx < this._plugins.length; idx++) {
            if (this._plugins[idx].initPrintingAsync) {
                await this._plugins[idx].initPrintingAsync();
            }
        }
    }
    /** this method is called after connecting to server using getServer ("")
     *
     * @param {json serverSettings} serverSettings or null after unsucessful login
     * @returns {undefined}
     */
    initServerSettings(serverSettings) {
        for (var idx = 0; idx < this._plugins.length; idx++) {
            try {
                if (this._plugins[idx].initServerSettings) {
                    this._plugins[idx].initServerSettings(serverSettings);
                }
            }
            catch (e) {
                console.log("error " + e.toString());
            }
        }
    }
    /** this method is called when creating a menu which has a hook. it allows the plugins to add
     * li's to the ul supplied
     *
     * @param {number} hook identifies the menu
     * @param {jquery object} ul  a $("<ul />) object
     * @returns {undefined}
     */
    updateMenu(hook, ul) {
        for (var idx = 0; idx < this._plugins.length; idx++) {
            if (this._plugins[idx].updateMenu) {
                this._plugins[idx].updateMenu(ul, hook);
            }
        }
    }
    getFieldConfigOptions() {
        let fco = [];
        for (let idx = 0; idx < this._plugins.length; idx++) {
            if (this._plugins[idx].getFieldConfigOptions && this._plugins[idx].supportsControl) {
                const fieldConfig = this._plugins[idx].getFieldConfigOptions();
                for (let i = 0; i < fieldConfig.length; i++) {
                    if (this._plugins[idx].supportsControl(fieldConfig[i].id)) {
                        fco.push(fieldConfig[i]);
                    }
                }
            }
        }
        return fco;
    }
    addFieldSettings(configApp, project, pageId, fieldType, fieldParams, ui, paramChanged, canBePublished) {
        for (var idx = 0; idx < this._plugins.length; idx++) {
            if (this._plugins[idx].addFieldSettings) {
                this._plugins[idx].addFieldSettings(configApp, project, pageId, fieldType, fieldParams, ui, () => paramChanged(), canBePublished);
            }
        }
    }
    supportsControl(fieldType) {
        for (var idx = 0; idx < this._plugins.length; idx++) {
            if (this._plugins[idx].supportsControl && this._plugins[idx].supportsControl(fieldType)) {
                return true;
            }
        }
        return false;
    }
    createControl(ctrlObj, settings) {
        for (var idx = 0; idx < this._plugins.length; idx++) {
            if (this._plugins[idx].supportsControl && this._plugins[idx].supportsControl(settings.fieldType)) {
                this._plugins[idx].createControl(ctrlObj, settings);
                return;
            }
        }
    }
    initProject(project) {
        // delete all non default plugins === custom
        for (var idx = this._plugins.length - 1; idx >= 0; idx--) {
            if (!this._plugins[idx].isDefault) {
                this._plugins.splice(idx, 1);
            }
        }
        for (var idx = 0; idx < this._plugins.length; idx++) {
            if (this._plugins[idx].initProject) {
                // TODO: Catch and log exceptions here so other plugins can load.
                try {
                    this._plugins[idx].initProject(project);
                }
                catch (e) {
                    //Display error message to user in the console.
                    console.error(e);
                }
            }
        }
        this.initPrinting();
    }
    // to modify db tree after it has been created
    filterProject(db) {
        for (var idx = 0; idx < this._plugins.length; idx++) {
            if (this._plugins[idx].filterProject) {
                this._plugins[idx].filterProject(db);
            }
        }
    }
    // to modify search panel on left after it has been rendered
    updateSearchPanel() {
        for (var idx = 0; idx < this._plugins.length; idx++) {
            if (this._plugins[idx].updateSearchPanel) {
                this._plugins[idx].updateSearchPanel();
            }
        }
    }
    // to modify item on left after it has been rendered
    updateItemPanel() {
        for (var idx = 0; idx < this._plugins.length; idx++) {
            if (this._plugins[idx].updateItemPanel) {
                this._plugins[idx].updateItemPanel();
            }
        }
    }
    // notify plugins that links of item changed
    updateItem(updates) {
        for (var idx = 0; idx < this._plugins.length; idx++) {
            if (this._plugins[idx].updateItem) {
                this._plugins[idx].updateItem(updates);
            }
        }
    }
    ;
    updateTree() {
        for (var idx = 0; idx < this._plugins.length; idx++) {
            if (this._plugins[idx].updateTree) {
                this._plugins[idx].updateTree();
            }
        }
        return;
    }
    getTinyMenus(editor) {
        let list = [];
        for (let plugin of this._plugins) {
            if (plugin.getTinyMenuItems) {
                let menuItems = plugin.getTinyMenuItems(editor);
                if (menuItems && menuItems.length > 0)
                    list.push(...menuItems);
            }
        }
        return list;
    }
    getCustomSearches() {
        let list = [];
        for (let plugin of this._plugins) {
            if (plugin.getCustomSearches) {
                let menuItems = plugin.getCustomSearches();
                if (menuItems && menuItems.length > 0)
                    list.push(...menuItems);
            }
        }
        return list;
    }
    getUserMenuItems() {
        let list = [];
        for (let plugin of this._plugins) {
            if (plugin.getUserMenuItems) {
                let menuItems = plugin.getUserMenuItems();
                if (menuItems && menuItems.length > 0)
                    list.push(...menuItems);
            }
        }
        return list;
    }
    getQMSUserMenuItems() {
        let list = [];
        for (let plugin of this._plugins) {
            if (plugin.getQMSUserMenuItems) {
                let menuItems = plugin.getQMSUserMenuItems();
                if (menuItems && menuItems.length > 0)
                    list.push(...menuItems);
            }
        }
        return list;
    }
    getConfigUserMenuItems() {
        let list = [];
        for (let plugin of this._plugins) {
            if (plugin.getConfigUserMenuItems) {
                let menuItems = plugin.getConfigUserMenuItems();
                if (menuItems && menuItems.length > 0)
                    list.push(...menuItems);
            }
        }
        return list;
    }
    getProjectMenuItems() {
        let list = [];
        for (let plugin of this._plugins) {
            if (plugin.getProjectMenuItems) {
                let menuItems = plugin.getProjectMenuItems();
                if (menuItems && menuItems.length > 0)
                    list.push(...menuItems);
            }
        }
        return list;
    }
    async getProjectPages() {
        let that = this;
        let allPages = [];
        for (let idx = 0; idx < this._plugins.length; idx++) {
            if (this._plugins[idx].getProjectPagesAsync) {
                let pages = await this._plugins[idx].getProjectPagesAsync();
                for (let page of pages) {
                    allPages.push(page);
                    that.controls["_" + page.id] = page.render;
                    that.destructors["_" + page.id] = page.destroy;
                    that.titles["_" + page.id] = page.title;
                    that.usesFilters["_" + page.id] = page.usesFilters;
                }
            }
        }
        return allPages;
    }
    supportsControlPage(controlType) {
        return !!this.controls[controlType];
    }
    createControlPage(options, toggleFilters) {
        options.control.html("");
        document.title = this.titles[options.type] + " - " + _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getProject();
        if (this.usesFilters[options.type]) {
            toggleFilters(true);
        }
        else {
            toggleFilters(false);
        }
        this.activeControlPage = options.type;
        this.controls[options.type](options);
    }
    destroyActiveControlPage() {
        if (this.activeControlPage) {
            try {
                const destructor = this.destructors[this.activeControlPage];
                if (destructor) {
                    destructor();
                }
                this.activeControlPage = null;
            }
            catch (e) {
                console.error("Error removing control page", e);
            }
        }
        else {
            // console.log("No active control page");
        }
    }
    callPreSaveHook(isItem, type, controls) {
        let that = this;
        function callRec(idx) {
            var res = $.Deferred();
            if (idx >= that._plugins.length) {
                res.resolve();
                return res;
            }
            if (that._plugins[idx].preSaveHookAsync) {
                that._plugins[idx].preSaveHookAsync(isItem, type, controls).then(function () {
                    callRec(idx + 1).done(function () {
                        res.resolve();
                    }).fail(function () {
                        res.reject();
                    });
                }).catch(function () {
                    callRec(idx + 1).always(function () {
                        res.reject();
                    });
                });
            }
            else {
                callRec(idx + 1).done(function () {
                    res.resolve();
                }).fail(function () {
                    res.reject();
                });
            }
            return res;
        }
        return callRec(0);
    }
    // return true for handled, false for not  handled
    renderActionButtons(options, body, controls) {
        var done = false;
        for (var idx = 0; idx < this._plugins.length; idx++) {
            if (this._plugins[idx].renderActionButtons) {
                if (this._plugins[idx].renderActionButtons(options, body, controls)) {
                    done = true;
                }
            }
        }
        // return true if at least on plugin is owner
        return done;
    }
    ;
    /******************** admin function  */
    getPlugins() {
        return this._plugins;
    }
}
var plugins;
function InitializePluginManager() {
    plugins = new PluginManager(); // plugin manager
    globalThis.plugins = plugins;
    globalThis.pluginHooks = pluginHooks;
}


/***/ }),
/* 13 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ColumnTypesInfo: () => (/* binding */ ColumnTypesInfo),
/* harmony export */   DocumentSectionType: () => (/* reexport safe */ _DHFInterfaces__WEBPACK_IMPORTED_MODULE_18__.DocumentSectionType),
/* harmony export */   InitializePluginManagerDocuments: () => (/* binding */ InitializePluginManagerDocuments),
/* harmony export */   PluginManagerDocuments: () => (/* binding */ PluginManagerDocuments),
/* harmony export */   mDHF: () => (/* binding */ mDHF)
/* harmony export */ });
/* harmony import */ var _PluginManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);
/* harmony import */ var _matrixlib_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);
/* harmony import */ var _RestDB__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(14);
/* harmony import */ var _UI_Controls_docBase___WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(23);
/* harmony import */ var _UI_Controls_markAsTemplate__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(21);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(1);
/* harmony import */ var _UI_Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(9);
/* harmony import */ var _UI_Tools_ItemCreationView__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(47);
/* harmony import */ var _UI_Tools_Layouter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(54);
/* harmony import */ var _client_plugins_Redlining__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(57);
/* harmony import */ var _client_plugins_DocumentSections_Hidden__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(58);
/* harmony import */ var _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(2);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(5);
/* harmony import */ var _FieldDescriptions__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(24);
/* harmony import */ var _FieldHandlers__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(60);
/* harmony import */ var _FieldHandlers_Document__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(86);
/* harmony import */ var _FieldHandlers_Document_GenericDocFieldHandler__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(83);
/* harmony import */ var _FieldHandlers_Document_SectionDescriptions__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(85);
/* harmony import */ var _DHFInterfaces__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(117);
/* harmony import */ var _UI_MainTree_MainTree__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(30);























const DOC_NUM_NAME = "Document Number";
class PluginManagerDocuments {
    constructor() {
        this.COPY_PASTE_BUFFER = "pasteBuffer";
        this.isDefault = true;
        // **********************
        // plugin interface
        // **********************
        this.preSaveHook = (isItem, type, controls) => {
            //This hook is called before the item is saved. It is used to modify the reportId in case the user has selected only custom sections or static section
            let deferred = $.Deferred();
            let that = this;
            let useReportNameOverride = true;
            let reportOverrideForDocSettings = _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getCustomerSettingJSON("reportNameOverrideForDoc", {
                enabled: true,
                reportNameOverride: "dhf_generic_print",
                positiveList: [
                    "checkbox",
                    "audittrail",
                    "signaturebox",
                    "templateapproval",
                    "responsibilities",
                    "genericTable",
                    "document_options",
                    "duedate",
                    "figures_tables",
                    "multiselect",
                    "remarks",
                    "richtext",
                    "terms_abbreviations",
                    "textline",
                    "CustomSection"
                ]
            });
            if (reportOverrideForDocSettings.enabled) {
                $.each(this.item, function (key, val) {
                    if (val && _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldType(that.item.type, key) === "dhf") {
                        var fieldVal = JSON.parse(val);
                        if (reportOverrideForDocSettings.positiveList.indexOf(fieldVal.type) == -1) {
                            // Not in positive list so we dont fix the report id
                            useReportNameOverride = false;
                        }
                    }
                });
                let field = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldByName("DOC", "reportId");
                if (field) {
                    for (let c of controls) {
                        if (c.fieldId == field.id) {
                            c.control.getController().setValue(useReportNameOverride ? reportOverrideForDocSettings.reportNameOverride : "dhf_generic");
                        }
                    }
                }
            }
            deferred.resolve();
            return deferred;
        };
        let that = this;
        this.wasInformedTodayAbout = "";
        this.wasInformedToday = "";
        this.sectionFactories = [];
        this.sectionTypeNames = {};
    }
    initItem(_item, _jui) {
        this.item = _item;
        this.jui = _jui;
    }
    updateMenu(ul, hook) {
        // no tools
        let that = this;
        if (_matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(this.item.id).isFolder) {
            // find out if there items in buffer
            let pb = localStorage.getItem(this.COPY_PASTE_BUFFER);
            let itemsToPaste = pb ? JSON.parse(pb).items.length : 0;
            if (itemsToPaste && this.isDocumentFormType(this.item.type)) {
                let s = (itemsToPaste > 1) ? "s" : "";
                var pasteDoc = $('<li title="paste document' + s + ' from template"><a href="javascript:void(0)">Paste document' + s + '</a></li>').click(function () {
                    that.pasteTemplates(that.item.id);
                });
                ul.append(pasteDoc);
            }
        }
        if ((this.isSignedType(this.item.type) || this.isDocumentFormType(this.item.type))) {
            let s = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(this.item.id).isFolder ? "s" : "";
            var copyDoc = $('<li title="Copy document' + s + ' as template"><a href="javascript:void(0)">Copy document' + s + '</a></li>').click(function () {
                that.copyTemplates(that.item.id);
            });
            ul.append(copyDoc);
        }
    }
    supportsControl(ctrl) {
        // should render dhf controls....
        return false;
    }
    createControl(ctrl, options) {
        // should render dhf controls....
    }
    initProject(project) {
        let that = this;
        this.dhf_config = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getDHFConfig();
        if (!this.dhf_config) {
            this.dhf_config = {};
        }
        if (!this.dhf_config.categories) {
            this.dhf_config.categories = {
                documentTypes: ["DOC", "SIGN", "REPORT"],
                documentForms: ["DOC"],
                documentSigned: ["SIGN"],
                documentTemplates: ["SIGN"],
                signAs: "SIGN"
            };
        }
        this.ColumnTypes = new ColumnTypesInfo(this.dhf_config);
        // add custom tables for each type
        $.each(this.dhf_config, function (key0, config0) {
            if (typeof config0 === "object") {
                $.each(config0, function (key1, config1) {
                    if (key1 === "columns") {
                        $.each(config1, function (idx, val) {
                            if (val.columnType) {
                                val.editor = that.ColumnTypes.getEditorOfType(val.columnType);
                                var options = that.ColumnTypes.getOptionsOfType(val.columnType);
                                if (options) {
                                    val.options = options;
                                }
                            }
                        });
                    }
                });
            }
        });
    }
    getProjectPages() {
        return new Promise((resolve, reject) => {
            resolve([]);
        });
    }
    renderActionButtons(options, body, controls) {
        if (!_globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.hasDocs() && (this.isSignedType(options.item.type) || this.isDocumentFormType(options.item.type))) {
            body.append("<span style='color:red'>Document module not licensed</span>");
            return true;
        }
        if (this.dhf_config.categories.documentSigned.indexOf(options.type) !== -1) {
            this.renderControlsSIGN(options, body, controls);
            return true;
        }
        else if (mDHF.isDocumentFormType(options.type)) {
            this.renderControlsDOC(options, body, controls);
            return true;
        }
        return false;
    }
    // *****************************
    // public interface through mDHF
    // *****************************
    /* this renders an empty dhf control. It needs the actual field value to find out
    */
    renderControl(ctrl, ctrlParameter, fieldValue) {
        let that = this;
        // store values in control so that they can be rendered by the controller
        let ctrlDef = ctrl;
        ctrlDef.isDhfType = true;
        let controller = this.dhfFactory(_FieldHandlers_Document_SectionDescriptions__WEBPACK_IMPORTED_MODULE_17__.SectionDescriptions.section_hidden); // if nothing is configured - nothing to render
        controller.setFieldHandler(new _FieldHandlers_Document_GenericDocFieldHandler__WEBPACK_IMPORTED_MODULE_16__.GenericDocFieldHandler(_FieldHandlers_Document_SectionDescriptions__WEBPACK_IMPORTED_MODULE_17__.SectionDescriptions.section_hidden, {}, ""));
        if (fieldValue) { // contains type,value,configuration, and xml for reports
            ctrlDef.dhfValue = JSON.parse(fieldValue);
            // create the controller
            controller = this.dhfFactory(ctrlDef.dhfValue.type);
            ctrlParameter.fieldValue = ctrlDef.dhfValue.fieldValue;
            ctrlParameter.help = ctrlDef.dhfValue.name;
            ctrlDef.dhfValue.ctrlConfig = _FieldHandlers_Document__WEBPACK_IMPORTED_MODULE_15__.DocFieldHandlerFactory.GetDHFFieldConfig(_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig, ctrlDef.dhfValue.type, ctrlDef.dhfValue.ctrlConfig);
            let docFieldHandler = _FieldHandlers_Document__WEBPACK_IMPORTED_MODULE_15__.DocFieldHandlerFactory.createHandler(_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig, ctrlDef.dhfValue);
            ctrlParameter.fieldHandler = docFieldHandler;
            controller.setFieldHandler(docFieldHandler);
            ctrlParameter.preciseSelection = _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getUISettings().preciseDocSelect ? true : false;
        }
        // render the control
        controller.renderControl(ctrlDef, ctrlParameter);
        if (ctrlParameter.canEdit && ctrlDef.dhfValue && !ctrlParameter.isTooltip && !ctrlParameter.isPrint && ctrlParameter.controlState != _globals__WEBPACK_IMPORTED_MODULE_12__.ControlState.HistoryView && _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.isEditor()) {
            let search = $("<button title='Update Selection' style='display:none' class='btn btn-xs btn-default hidden-print refreshButton refreshNeeded'> <span class='fal fa-sync-alt' style='margin-left: -1px;'></span></button>");
            search.click(function (event) {
                that.runSearch(controller, ctrlDef);
            });
            // get the dhf section type
            let sectionName = "";
            if (ctrlDef && ctrlDef.dhfValue && ctrlDef.dhfValue.type && this.getDhfControls()[ctrlDef.dhfValue.type]) {
                sectionName = this.getDhfControls()[ctrlDef.dhfValue.type].sectionName;
            }
            // add buttons
            var button = $("<button title='Configure " + sectionName + "' class='btn btn-xs btn-default hidden-print configbutton'> <span class='fal fa-cog'></span></button>");
            if (ctrlDef.dhfValue.type == "checkbox") {
                $(".baseControl", ctrlDef.control).append(button);
            }
            else if ($(".inlineHelp", ctrlDef.control).length) {
                $(".inlineHelp", ctrlDef.control).before(search).before(button);
            }
            else {
                $(".baseControlHelp", ctrlDef.control).append(search).append(button);
            }
            var ctrlParam = ctrlParameter;
            if (ctrlDef.dhfValue.type == "CustomSection") {
                $("<button title='Layout " + sectionName + "' class='btn btn-xs btn-default hidden-print configbutton'> <span class='fal fa-table'></span></button>")
                    .appendTo($(".baseControlHelp", ctrlDef.control))
                    .click(async function () {
                    let layouter = new _UI_Tools_Layouter__WEBPACK_IMPORTED_MODULE_8__.Layouter();
                    let froms = "";
                    let tos = "";
                    let currentSelection = await _globals__WEBPACK_IMPORTED_MODULE_12__.app.getFieldValueAsync(ctrlDef.fieldId);
                    if (currentSelection) {
                        // get selected items from UI
                        let conf = JSON.parse(currentSelection);
                        froms = (conf.from ? conf.from : []).map(x => x.to).join(",");
                        tos = (conf.to ? conf.to : []).map(x => x.to).join(",");
                    }
                    if (!froms) {
                        _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showError("need input!", "You need to select some items on which to report on");
                        return;
                    }
                    let config = controller.getConfig(ctrlDef);
                    controller.getFieldHandler().setDHFConfig(config);
                    let labelFilter = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldsOfType("docFilter").length == 1 ? await _globals__WEBPACK_IMPORTED_MODULE_12__.app.getFieldValueAsync(_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldsOfType("docFilter")[0].field.id) : "";
                    layouter.show(_globals__WEBPACK_IMPORTED_MODULE_12__.app.getCurrentItemId(), ctrlDef.fieldId, _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.JSON.clone(Object.assign(Object.assign({}, config), {})), froms, tos, labelFilter, (newCode) => {
                        controller.getConfig(ctrlDef).options = JSON.parse(newCode);
                        ctrl.configTouched = true;
                        ctrlParameter.valueChanged.apply(null);
                    });
                });
            }
            button.click(function () {
                that.showConfigDialog(sectionName, controller, ctrlDef, ctrlParam, "Configuration Options", false);
            });
            if (controller.hasSearch && controller.hasSearch(ctrl)) {
                // show search button
                $(".baseControlHelp", ctrlDef.control).addClass("refreshNeeded");
                search.show();
                if (controller.verifySearchAsync) {
                    controller.verifySearchAsync(ctrlDef);
                }
            }
            if (controller.verifyContentAsync)
                controller.verifyContentAsync(ctrlDef);
        }
        return !ctrlDef.dhfValue || ctrlDef.dhfValue.type !== "checkbox";
    }
    // ItemForm
    async getValue(ctrl) {
        if (!ctrl.dhfValue) {
            // unused control
            return "";
        }
        // create the controller
        let controller = ctrl.control.getController();
        let fieldHandler = controller.getFieldHandler();
        // udpate the controller values
        ctrl.dhfValue['fieldValue'] = fieldHandler.getData();
        // define global options
        let controllerConfig = fieldHandler.dhfFieldConfig;
        let global = {
            globalOptions: true,
            page_break: controllerConfig['page_break'],
            sub_section: controllerConfig['sub_section'],
            landscape: controllerConfig['landscape'],
            show_section_title: controllerConfig['show_section_title'],
            automation: controllerConfig['automation']
        };
        // get specific options of control and add global as a row
        let options = JSON.parse(await fieldHandler.getXmlValue());
        options.push(global);
        // update the xml dump
        ctrl.dhfValue['fieldValueXML'] = JSON.stringify(options);
        ctrl.dhfValue['ctrlConfig'] = controllerConfig;
        ctrl.dhfValue.name = (DOMPurify.sanitize(ctrl.dhfValue.name) + '').replace(/&lt;/g, "<");
        return JSON.stringify(ctrl.dhfValue);
    }
    /* used by ItemForm to figure if item needs to be saved */
    configChanged(ctrl) {
        if (_globals__WEBPACK_IMPORTED_MODULE_12__.matrixApplicationUI.lastMainItemForm) {
            let allControls = _globals__WEBPACK_IMPORTED_MODULE_12__.matrixApplicationUI.lastMainItemForm.controls;
            for (var idx = 0; idx < allControls.length; idx++) {
                if (allControls[idx].isDhfType && allControls[idx].dhfValue) {
                    let controller = ctrl.control.getController();
                    if (controller.verifyContentAsync)
                        controller.verifyContentAsync(allControls[idx]);
                }
            }
        }
        return ctrl.configTouched;
    }
    /* return default format for REPORTs and DOCUMENTs, used by ItemForm for REPORTs */
    getDefaultFormat(category) {
        if (this.dhf_config.defaultFormats && this.dhf_config.defaultFormats[category]) {
            return this.dhf_config.defaultFormats[category].toLowerCase();
        }
        return (category === "REPORT") ? "html" : "docx";
    }
    // DB Cache
    showInProjectFolder(category) {
        return !(this.dhf_config && this.dhf_config.renderInTree && this.dhf_config.renderInTree.indexOf(category) !== -1);
    }
    // ItemForm, toolbar, ... (default DOC, SIGN, REPORT)
    isDocumentType(category) {
        return this.getDocumentTypes().indexOf(category) !== -1;
    }
    // used from different document sections (default DOC, SIGN, REPORT)
    getDocumentTypes() {
        return this.dhf_config ? _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.JSON.clone(this.dhf_config.categories.documentTypes) : [];
    }
    // DOC
    getDocumentFormTypes() {
        return this.dhf_config ? this.dhf_config.categories.documentForms : [];
    }
    // SIGN (could be DOC and SIGN)
    getDocumentTemplatesTypes() {
        return this.dhf_config ? this.dhf_config.categories.documentTemplates : [];
    }
    // KeyboardManager (default DOC)
    isDocumentFormType(category) {
        return mDHF.getDocumentFormTypes().indexOf(category) !== -1;
    }
    // ItemReference, MatrixReq, PluginManager, RestDb (default SIGN)
    isSignedType(category) {
        return this.dhf_config.categories.documentSigned.indexOf(category) !== -1;
    }
    // docSIGN
    // get all SIGN of an doc, maybe with a specific filter
    getSignedAsync(docId, labelFilter) {
        let that = this;
        function addChildren(children, ids) {
            $.each(children, function (cidx, child) {
                if (child.isUnselected == 0) {
                    if (typeof child.children !== "undefined") {
                        addChildren(child.children, ids);
                    }
                    else {
                        ids.push(child.id);
                    }
                }
            });
        }
        let res = $.Deferred();
        // get the document details which has a list of all downlinks
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.getItemAsync(docId).done(function (doc) {
            if (labelFilter) {
                // get the tree with a label filter which shows which items have the label
                var cmd = "/tree?fancy&filter=" + labelFilter;
                _globals__WEBPACK_IMPORTED_MODULE_12__.restConnection.getServer(_globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getProject() + cmd).done(function (tree) {
                    // build a list of item ids which are not filters
                    tree = _RestDB__WEBPACK_IMPORTED_MODULE_2__.RestDB.filterLegacyReportCat(tree);
                    let signs = [];
                    $.each(tree, function (catidx, cat) {
                        if (that.dhf_config.categories.documentSigned.indexOf(cat.type) !== -1) {
                            addChildren(cat.children, signs);
                        }
                    });
                    let refs = [];
                    // check for each downlink if it has the label or not
                    $.each(doc.downLinks, function (dlidx, dl) {
                        if (signs.indexOf(dl.to) !== -1) {
                            refs.push(dl);
                        }
                    });
                    res.resolve(refs);
                }).fail(function (jqxhr, textStatus, error) {
                    res.reject(jqxhr, textStatus, error);
                });
            }
            else {
                // return all downlinks
                res.resolve(doc.downLinks);
            }
        }).fail(function (jqxhr, textStatus, error) {
            res.reject(jqxhr, textStatus, error);
        });
        return res;
    }
    // all different document sections
    registerSection(sectionType, sectionId, sectionName, creator, hidden) {
        this.registerSection2(sectionType, true, sectionId, sectionName, creator, hidden);
    }
    registerSection2(sectionType, dynamic, sectionId, sectionName, creator, hidden) {
        this.sectionFactories[sectionId] = creator;
        if (sectionName) {
            this.sectionTypeNames[sectionId] = {
                sectionName: sectionName,
                sectionType: sectionType,
                hidden: hidden,
                dynamic: dynamic
            };
        }
    }
    getSections(dynamic) {
        let that = this;
        let sections = Object.keys(this.sectionTypeNames);
        return sections.filter(section => that.sectionTypeNames[section].dynamic == dynamic);
    }
    // in case the user wants to delete a DOC which happens to be a DOC from which a SIGN has been created which is used as template, ask
    isUsedAsTemplate(itemId) {
        let type = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(itemId).type;
        if (type == "DOC" || type == "SIGN") {
            let templates = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getSettingJSON(_UI_Controls_markAsTemplate__WEBPACK_IMPORTED_MODULE_4__.MarkAsTemplateImpl.PROJECT_SETTING);
            if (templates && templates.templates) {
                let filter = templates.templates.filter(function (td) { return (type == "DOC") ? td.fromDOC == itemId : td.fromSign == itemId; });
                if (filter.length > 0) {
                    return true;
                }
            }
        }
        return false;
    }
    // in case the user wants to delete a DOC which happens to be a DOC from which a SIGN has been created which is used as template, remove the templates
    removeAsTemplate(itemId) {
        let type = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(itemId).type;
        if (type == "DOC" || type == "SIGN") {
            let templates = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getSettingJSON(_UI_Controls_markAsTemplate__WEBPACK_IMPORTED_MODULE_4__.MarkAsTemplateImpl.PROJECT_SETTING);
            templates.templates = templates.templates.filter(function (td) { return (type == "DOC") ? td.fromDOC != itemId : td.fromSign != itemId; });
            _globals__WEBPACK_IMPORTED_MODULE_12__.app.setSettingJSON(_UI_Controls_markAsTemplate__WEBPACK_IMPORTED_MODULE_4__.MarkAsTemplateImpl.PROJECT_SETTING, templates);
        }
    }
    runSearch(controller, ctrl) {
        if (controller.executeSearch) {
            controller.executeSearch(ctrl);
        }
    }
    //show config dialog for section, some part like title are available for all, rest is provided by sections itself
    showConfigDialog(sectionName, _controller, _ctrl, _ctrlParameter, title, hideStandardOptions) {
        var controller = _controller;
        var ctrl = _ctrl;
        var ctrlParameter = _ctrlParameter;
        var controllerConfig = controller.getConfig(ctrl);
        if (typeof controllerConfig.show_section_title == 'undefined') {
            // default show title and apply numbering if wanted
            controllerConfig.show_section_title = "auto";
        }
        let isCheckbox = ctrl && ctrl.dhfValue && ctrl.dhfValue.type == "checkbox";
        let isRichtext = ctrl && ctrl.dhfValue && ctrl.dhfValue.type == "richtext";
        let isRisk = ctrl && ctrl.dhfValue && ctrl.dhfValue.type == "riskstats";
        let isFirstSection = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldsOfType("dhf", "DOC")[0].field.id == ctrlParameter.fieldId;
        var ui = $("<div>");
        if (!hideStandardOptions) {
            // add common stuff (like name change)
            var name = $("<div>").refLink({
                folder: false,
                id: "Name" + (sectionName ? (" of " + sectionName) : "") + ":",
                title: ctrl.dhfValue.name,
                style: _UI_Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_6__.refLinkStyle.edit,
                tooltip: _UI_Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_6__.refLinkTooltip.none,
                callback: function () {
                }
            });
            ui.append(name);
            if (!isCheckbox) {
                var globalOptionShowSectionTitle = $('<select class="docOptionSelect p_show_section_title form-control" style="">' +
                    '<option value="auto">Show section title</option>' +
                    '<option value="nonumber">Show section title without numbers</option>' +
                    ((!isRichtext && !isRisk) ? '<option value="notitle">Do not show section title</option>' : '') +
                    (isRichtext ? '<option value="notitle">Do not show section title (note: do not use headings in the text box)</option>' : '') +
                    '</select>');
                ui.append($(globalOptionShowSectionTitle));
                globalOptionShowSectionTitle.val(controllerConfig.show_section_title);
            }
            var globalOptionNewPage = '<div class="checkbox" ><label><input type="checkbox" class="p_newpage" ' + (controllerConfig.page_break ? 'checked' : '') + '> Add page break after this section (word and pdf)</label></div>';
            ui.append($(globalOptionNewPage));
            if (!isCheckbox) {
                let isFirstSection = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldsOfType("dhf", "DOC")[0].field.id == ctrlParameter.fieldId;
                var globalOptionSubSection = `<div class="checkbox" ><label><input type="checkbox" class="p_subsection" ${controllerConfig.sub_section ? 'checked' : ''} ${(isFirstSection && !controllerConfig.sub_section) ? 'disabled' : ''}> Make it a sub-section${isFirstSection ? " (note: first section cannot be a sub-section!)" : ""}</label></div>`;
                ui.append($(globalOptionSubSection));
            }
            var globalOptionLandscape = '<div class="checkbox" ><label><input type="checkbox" class="p_landscape" ' + (controllerConfig.landscape ? 'checked' : '') + '> Print this section in landscape</label></div>';
            ui.append($(globalOptionLandscape));
            var globalOptionAutomation = $('<input autocomplete="off" style="height: 20px;width: 420px;float: right;" class="form-control p_automation" type="text" name="automation" value="" /> ');
            var sp = $("<span>XSLT processing: </span>").append(globalOptionAutomation);
            ui.append(sp);
            ui.append("<div style='padding:4px'>");
            globalOptionAutomation.val(controllerConfig.automation ? controllerConfig.automation : '');
        }
        // per function stuff
        var custom = $("<div>");
        ui.append(custom);
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.html("");
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.append(ui);
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.removeClass("dlg-no-scroll");
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.addClass("dlg-v-scroll");
        let searchBefore = controllerConfig["search"] + "," + controllerConfig["searchFrom"] + "," + controllerConfig["searchTo"];
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.dialog({
            autoOpen: true,
            title: title,
            height: 580,
            width: 680,
            modal: true,
            open: function () {
                controller.showSpecificSettings(ctrl, ctrlParameter, custom);
            },
            resizeStop: function () {
            },
            buttons: [{
                    text: 'Ok',
                    class: 'btnDoIt',
                    click: async function () {
                        // common settings
                        if (!hideStandardOptions && ctrl.dhfValue.name !== name.getValue()) {
                            ctrl.dhfValue.name = name.getValue();
                            _controller.getFieldHandler().setFieldName(name.getValue());
                            ctrl.configTouched = true;
                            if (isCheckbox) {
                                ctrl.control.find(".checkboxLabel").html(ctrl.dhfValue.name);
                            }
                            else {
                                let bcs = ctrl.control.find(".baseControlHelp").contents();
                                $.each(bcs, function (bcIdx, bc) {
                                    if (bc.nodeName == "#text") {
                                        bc.textContent = ctrl.dhfValue.name;
                                    }
                                });
                            }
                        }
                        controllerConfig = controller.getConfig(ctrl);
                        if (!isCheckbox) {
                            // save controls
                            var showHide = $("input:first", ctrl.control);
                            showHide.detach();
                            var label = $("label:first", ctrl.control);
                            label.detach();
                            // specific settings
                            if (await controller.saveSpecificSettingsAsync(ctrl, ctrlParameter, custom)) {
                                ctrl.configTouched = true;
                            }
                            // remove 'normal' help and add doc stuff again
                            $(".baseControlHelp", ctrl.control).remove();
                            ctrl.control.prepend(label);
                            ctrl.control.prepend(showHide);
                            let searchAfter = controllerConfig["search"] + "," + controllerConfig["searchFrom"] + "," + controllerConfig["searchTo"];
                            if (searchAfter.replace(/undefined/g, "").length == 2) {
                                $(".refreshButton", ctrl.control).removeClass("refreshNeeded").hide();
                                $(".baseControlHelp", ctrl.control).removeClass("refreshNeeded");
                            }
                            else {
                                $(".refreshButton", ctrl.control).show();
                                if (searchAfter != searchBefore) {
                                    $(".refreshButton", ctrl.control).addClass("refreshNeeded");
                                    $(".baseControlHelp", ctrl.control).addClass("refreshNeeded");
                                }
                            }
                            if (!hideStandardOptions && controllerConfig.show_section_title != $(ui.find(".p_show_section_title")[0]).val()) {
                                controllerConfig.show_section_title = $(ui.find(".p_show_section_title")[0]).val();
                                // save the checkbox change!
                                _controller.getFieldHandler().setDHFConfig(controllerConfig);
                                ctrl.configTouched = true;
                            }
                            if (!hideStandardOptions && controllerConfig['sub_section'] != $(ui.find(".p_subsection")[0]).prop('checked')) {
                                controllerConfig['sub_section'] = $(ui.find(".p_subsection")[0]).prop('checked');
                                // save the checkbox change!
                                _controller.getFieldHandler().setDHFConfig(controllerConfig);
                                ctrl.configTouched = true;
                            }
                        }
                        if (!hideStandardOptions && controllerConfig['page_break'] != $(ui.find(".p_newpage")[0]).prop('checked')) {
                            controllerConfig['page_break'] = $(ui.find(".p_newpage")[0]).prop('checked');
                            // save the checkbox change!
                            _controller.getFieldHandler().setDHFConfig(controllerConfig);
                            ctrl.configTouched = true;
                        }
                        if (!hideStandardOptions && controllerConfig['landscape'] != $(ui.find(".p_landscape")[0]).prop('checked')) {
                            controllerConfig['landscape'] = $(ui.find(".p_landscape")[0]).prop('checked');
                            // save the checkbox change!
                            _controller.getFieldHandler().setDHFConfig(controllerConfig);
                            ctrl.configTouched = true;
                        }
                        if (!hideStandardOptions && controllerConfig['automation'] != $(ui.find(".p_automation")[0]).val()) {
                            controllerConfig['automation'] = $(ui.find(".p_automation")[0]).val();
                            // save the checkbox change!
                            _controller.getFieldHandler().setDHFConfig(controllerConfig);
                            ctrl.configTouched = true;
                        }
                        if (ctrl.configTouched && ctrlParameter.valueChanged) {
                            ctrlParameter.valueChanged.apply(null);
                        }
                        _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.dialog("close");
                    }
                }, {
                    text: 'Cancel',
                    class: 'btnCancelIt',
                    click: function () {
                        _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.dialog("close");
                    }
                }]
        });
    }
    // ContextFrames (Help Tool)
    getArchiveButtonName() {
        if (this.dhf_config && this.dhf_config.archiveButtonName) {
            return this.dhf_config.archiveButtonName;
        }
        return "Ready to Sign / Release";
    }
    getToolFolderName() {
        if (this.dhf_config && this.dhf_config.toolFolderName) {
            return this.dhf_config.toolFolderName;
        }
        return null;
    }
    // ItemControl
    showCreateFromDocx(options) {
        let that = this;
        function doImport(params) {
            // show spinning wait
            _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.html("").append(_matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.getSpinningWait("Converting document ..."));
            _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.setEnabled($('button', _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.parent()), false);
            // convert document
            let fileId = JSON.parse(params.template)[0].fileId;
            let fileNo = Number(fileId.split("?")[0]);
            _globals__WEBPACK_IMPORTED_MODULE_12__.app.convertDocAsync(fileNo, options.parent).done(function (docId) {
                // patch the document
                _globals__WEBPACK_IMPORTED_MODULE_12__.app.getItemAsync(docId).done(function (newDoc) {
                    let changes = { id: docId, onlyThoseFields: 1, onlyThoseLabels: 1 };
                    changes.title = params.dhfName;
                    let type = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(docId).type;
                    let docNumberField = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldId(type, DOC_NUM_NAME);
                    $.each(newDoc, function (fieldId, fieldValue) {
                        let fieldType = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldType(type, fieldId);
                        if (fieldType === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_13__.FieldDescriptions.Field_dhf) {
                            if (fieldValue) {
                                let parsed = JSON.parse(fieldValue);
                                if (parsed.type === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_13__.FieldDescriptions.Field_richtext && parsed.fieldValue) {
                                    parsed.fieldValue = new _matrixlib_index__WEBPACK_IMPORTED_MODULE_1__.HTMLCleaner(parsed.fieldValue, false).getClean(_matrixlib_index__WEBPACK_IMPORTED_MODULE_1__.HTMLCleaner.CleanLevel.Strict, false);
                                    parsed.fieldValueXML = JSON.stringify([{ "globalOptions": true }]);
                                    changes[fieldId] = JSON.stringify(parsed);
                                }
                            }
                        }
                        else if (fieldType === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_13__.FieldDescriptions.Field_textline && "" + fieldId == "" + docNumberField && params.dhfNumber) {
                            changes[fieldId] = params.dhfNumber;
                        }
                    });
                    if (params.dhfGUID) {
                        let guid = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldsOfType("guid", type);
                        if (guid.length == 1) {
                            changes[guid[0].field.id] = params.dhfGUID;
                        }
                    }
                    let fileAttachmentControl = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldsOfType("fileManager", type);
                    if (fileAttachmentControl.length > 0) {
                        changes[fileAttachmentControl[0].field.id] = params.template;
                    }
                    _globals__WEBPACK_IMPORTED_MODULE_12__.app.updateItemInDBAsync(changes, "post docx conversion").always(function (newItem) {
                        let createdItem = {
                            parent: options.parent,
                            position: 100000,
                            item: newItem
                        };
                        _globals__WEBPACK_IMPORTED_MODULE_12__.app.insertInTree(createdItem);
                        _globals__WEBPACK_IMPORTED_MODULE_12__.app.updateCache(createdItem);
                        _globals__WEBPACK_IMPORTED_MODULE_12__.app.treeSelectionChangeAsync(docId);
                        _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.setEnabled($('button', _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.parent()), true);
                        _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.dialog("close");
                    });
                });
            });
        }
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.html("");
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.removeClass("dlg-no-scroll");
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.addClass("dlg-v-scroll");
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.dialog({
            autoOpen: true,
            title: "Import and Convert Word Document",
            height: 400,
            width: 720,
            modal: true,
            open: function () {
                var okButton = $('.btnDoIt', _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.parent());
                that.showDHFCreateWizard(options.type, _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm, $('.btnDoIt', _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.parent()), doImport, true);
            },
            close: function () {
                _UI_MainTree_MainTree__WEBPACK_IMPORTED_MODULE_19__.NavigationPanel.focusTree();
            },
            resizeStop: function () {
            },
            buttons: [{
                    text: 'Ok',
                    class: 'btnDoIt',
                    click: function () {
                    }
                }, {
                    text: 'Cancel',
                    class: 'btnCancelIt',
                    click: function () {
                        _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.dialog("close");
                    }
                }]
        });
    }
    // docReview control
    loadDocument(jobId, onLoad) {
        let that = this;
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.getReportDetails(jobId).done(function (progress) {
            if (progress.status === "Error" || progress.status.indexOf("Report generation error") === 0) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showError("Error creating document", "");
            }
            else if (progress.status !== "Done" || progress.progress < 100) {
                window.setTimeout(function () {
                    that.loadDocument(jobId, onLoad);
                }, 500);
            }
            else {
                _globals__WEBPACK_IMPORTED_MODULE_12__.app.downloadInMemory(jobId, progress.jobFile[progress.jobFile.length - 1].jobFileId.toString()).done(function (htmlpage) {
                    var htmlDOM = $.parseHTML(htmlpage);
                    if (!htmlDOM) {
                        _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Logger.log("error", "Received report is no (valid) HTML.");
                    }
                    else {
                        for (var idx = 0; idx < htmlDOM.length; idx++) {
                            if (htmlDOM[idx].id === "report") {
                                onLoad(htmlDOM[idx]);
                            }
                        }
                    }
                });
            }
        });
    }
    getSignatureMeanings() {
        if (this.dhf_config) {
            return this.dhf_config.signatureMeanings;
        }
        return null;
    }
    // *****************
    // private interface
    // *****************
    /* returns sections from a pre-configure document, e.g. report, plan, sop, ... */
    getDefaultFields(option) {
        var fields = [];
        if (this.dhf_config.controlledDocs[option]) {
            $.each(this.dhf_config.controlledDocs[option].fields, function (index, value) {
                $.each(value, function (key, val) {
                    fields.push({ type: key, name: val });
                });
            });
        }
        return fields;
    }
    getDhfControls() {
        let that = this;
        mDHF.dhf_config;
        let sn = {};
        let keys = Object.keys(this.sectionTypeNames);
        keys.sort();
        $.each(keys, function (idx, key) {
            sn[key] = that.sectionTypeNames[key];
        });
        // add custom columns to section options
        if (this.dhf_config.customTables) {
            $.each(this.dhf_config.customTables, function (index, table) {
                sn[table.id] = {
                    sectionName: table.name, sectionType: _DHFInterfaces__WEBPACK_IMPORTED_MODULE_18__.DocumentSectionType.CustomTable, hidden: false, dynamic: false
                };
            });
        }
        return sn;
    }
    // for admin client
    setConfig(config) {
        this.dhf_config = config;
    }
    appendConfigTool(creationButtons, _config, _item) {
        let that = this;
        if (!_globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.isEditor() || !_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.canEdit(_item.type)) {
            return;
        }
        var itemId = _item.id;
        var buttonHolder = $("<button id='documentConfig' title='Document Sections' class='btn btn-item hidden-print'> <span class='fal fa-cog'></span></button>");
        creationButtons.append(" ").append(buttonHolder);
        buttonHolder.click(function () {
            if (_globals__WEBPACK_IMPORTED_MODULE_12__.app.getNeedsSave()) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showError("Save Item", "Please save before modifying document options.");
                return;
            }
            _globals__WEBPACK_IMPORTED_MODULE_12__.app.getItemAsync(itemId).done(function (item) {
                var added = false;
                var update = { onlyThoseFields: 1, onlyThoseLabels: 1 };
                $.each(item, function (key, val) {
                    if (key === "type" || key === "title" || key === "id" || _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldType(item.type, key)) {
                        if (!added && _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldType(item.type, key) === 'dhf' && !val) {
                            added = true;
                            update[key] = JSON.stringify({ "type": "document_options", "name": "Document Options", "fieldValue": "", "ctrlConfig": { "auto_number": false, "omit_title": false } });
                        }
                        else {
                            update[key] = val;
                        }
                    }
                });
                if (!added) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showError("Cannot add document options!", "");
                    return;
                }
                _globals__WEBPACK_IMPORTED_MODULE_12__.app.updateItemInDBAsync(update, "report update").done(function (result) {
                    _globals__WEBPACK_IMPORTED_MODULE_12__.app.renderItem(result);
                    $("#buttonDocOptions").click();
                }).fail(function (error) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showError("Failed to save changes!", error);
                });
            });
        });
        var button = $("<button title='Document Sections' class='btn btn-item hidden-print dhfConfigureSections'> <span class='fal fa-list'></span></button>");
        creationButtons.append(" ").append(button);
        button.click(function () {
            if (_globals__WEBPACK_IMPORTED_MODULE_12__.app.getNeedsSave()) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showError("Save Item", "Please save before modifying document sections.");
                return;
            }
            _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.setEnabled(button, false);
            _globals__WEBPACK_IMPORTED_MODULE_12__.app.getItemAsync(itemId).done(function (item) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.setEnabled(button, true);
                that.reorderDialog(item);
            });
        });
    }
    getSignatures(allControls) {
        var signatures = [];
        for (var idx = 0; idx < allControls.length; idx++) {
            if (allControls[idx].isDhfType && allControls[idx].dhfValue) {
                let controller = allControls[idx].control.getController();
                controller.fieldHandler.addSignatures(signatures, allControls[idx], true);
            }
        }
        return signatures;
    }
    showDHFCreateWizard(category, dlgInner, nextButton, endWizard, importDocx) {
        let that = this;
        async function enableNext() {
            var enabled = (await documentName.getController().getValueAsync() && await documentName.getController().getValueAsync() !== "");
            if (importDocx) {
                let val = await createTemplate.getController().getValueAsync();
                if (val && JSON.parse(val).length > 0) {
                    if (!enabled) {
                        documentName.getController().setValue(JSON.parse(val)[0].fileName.replace(".docx", ""));
                    }
                    enabled = true;
                }
                else {
                    enabled = false;
                }
            }
            _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.setEnabled(nextButton, enabled);
        }
        // create wizard
        _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.setEnabled(nextButton, false);
        var documentName = $("<div class='controlContainer'>");
        documentName.plainText({
            controlState: _globals__WEBPACK_IMPORTED_MODULE_12__.ControlState.DialogCreate,
            canEdit: true,
            // TODO(modules): field dummyData wasn't in the original definition, why is it here?
            dummyData: false,
            help: 'Document Name',
            fieldValue: "",
            valueChanged: function () {
                enableNext();
            },
            parameter: {
                rows: 1,
                allowResize: false
            }
        });
        dlgInner.append(documentName);
        let documentId = null;
        if (_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldId(category, DOC_NUM_NAME)) {
            documentId = $("<div  class='controlContainer'>");
            documentId.plainText({
                controlState: _globals__WEBPACK_IMPORTED_MODULE_12__.ControlState.DialogCreate,
                canEdit: true,
                dummyData: false,
                help: DOC_NUM_NAME,
                fieldValue: "",
                valueChanged: function () {
                },
                parameter: {
                    rows: 1,
                    allowResize: false
                }
            });
            dlgInner.append(documentId);
        }
        let documentGUID = null;
        let createTemplate = $("<div  class='controlContainer'>");
        /* prepare pre-configured document types, e.g. report, plan, sop... to be used in a drop down */
        var options = [];
        for (var opt in this.dhf_config.controlledDocs) {
            options.push({ id: opt, label: opt });
        }
        var dhfConfig = $("<div>");
        dlgInner.append(dhfConfig);
        if (importDocx) {
            createTemplate.fileManager({
                controlState: _globals__WEBPACK_IMPORTED_MODULE_12__.ControlState.DialogCreate,
                canEdit: true,
                help: "Word Document",
                fieldValue: "",
                valueChanged: function () {
                    enableNext();
                },
                parameter: {
                    readonly: false,
                    replace: "type_auto",
                    autohide: false,
                    manualOnly: true,
                    titleBarControl: null,
                    extensions: ["docx"],
                    textTodo: "Upload word document",
                    single: true
                }
            });
        }
        else {
            // alow user to choose default layout
            createTemplate.mxDropdown({
                controlState: _globals__WEBPACK_IMPORTED_MODULE_12__.ControlState.DialogCreate,
                canEdit: true,
                dummyData: false,
                help: 'Document Sections',
                fieldValue: "Empty",
                valueChanged: function () {
                },
                parameter: {
                    placeholder: "choose field preset",
                    create: false,
                    options: options,
                    maxItems: 1,
                    sort: false
                }
            });
        }
        dlgInner.append(createTemplate);
        // execute the next only once
        nextButton.one("click", async function (event) {
            if (importDocx) {
                endWizard({
                    template: await createTemplate.getController().getValueAsync(),
                    dhfName: await documentName.getController().getValueAsync() ? await documentName.getController().getValueAsync() : "no name",
                    dhfNumber: (documentId && await documentId.getController().getValueAsync()) ? await documentId.getController().getValueAsync() : "no id",
                    dhfGUID: documentGUID ? documentGUID.getController().getGuid() : ""
                });
                if (event.preventDefault)
                    event.preventDefault();
                return false;
            }
            documentName.hide();
            if (documentId)
                documentId.hide();
            if (documentGUID)
                documentGUID.hide();
            createTemplate.hide();
            var dhfDefaultFields = mDHF.getDefaultFields(await createTemplate.getController().getValueAsync());
            let sectionSelect = [];
            $.each(mDHF.getDhfControls(), function (key, val) {
                if (key !== 'document_options' && !val.hidden) {
                    sectionSelect.push({ id: key, label: val.sectionName, class: val.sectionType.toString() });
                }
            });
            // sort by group + alphabet
            var sortedSectionTypes = [_DHFInterfaces__WEBPACK_IMPORTED_MODULE_18__.DocumentSectionType.Static.toString(), _DHFInterfaces__WEBPACK_IMPORTED_MODULE_18__.DocumentSectionType.Technical.toString(), _DHFInterfaces__WEBPACK_IMPORTED_MODULE_18__.DocumentSectionType.Database.toString(), _DHFInterfaces__WEBPACK_IMPORTED_MODULE_18__.DocumentSectionType.Table.toString(), _DHFInterfaces__WEBPACK_IMPORTED_MODULE_18__.DocumentSectionType.CustomTable.toString()];
            sectionSelect.sort(function (a, b) {
                if (sortedSectionTypes.indexOf(a.class) < sortedSectionTypes.indexOf(b.class))
                    return -1;
                if (sortedSectionTypes.indexOf(a.class) > sortedSectionTypes.indexOf(b.class))
                    return 1;
                return a.label < b.label ? -1 : 1;
            });
            // insert separators
            // sectionSelect.splice(0,0 ,{id:"CUSTOMSECTION", label:"CUSTOM SECTION", disabled:true});
            var pos = sectionSelect.map(function (ss) {
                return ss.class;
            }).indexOf(_DHFInterfaces__WEBPACK_IMPORTED_MODULE_18__.DocumentSectionType.Static.toString());
            if (pos != -1)
                sectionSelect.splice(pos, 0, { id: "Static", label: "Static", disabled: true });
            pos = sectionSelect.map(function (ss) {
                return ss.class;
            }).indexOf(_DHFInterfaces__WEBPACK_IMPORTED_MODULE_18__.DocumentSectionType.Database.toString());
            if (pos != -1)
                sectionSelect.splice(pos, 0, { id: "Static", label: "Dynamic (Database)", disabled: true });
            pos = sectionSelect.map(function (ss) {
                return ss.class;
            }).indexOf(_DHFInterfaces__WEBPACK_IMPORTED_MODULE_18__.DocumentSectionType.Table.toString());
            if (pos != -1)
                sectionSelect.splice(pos, 0, { id: "Static", label: "TOCs and Indexes", disabled: true });
            pos = sectionSelect.map(function (ss) {
                return ss.class;
            }).indexOf(_DHFInterfaces__WEBPACK_IMPORTED_MODULE_18__.DocumentSectionType.CustomTable.toString());
            if (pos != -1)
                sectionSelect.splice(pos, 0, { id: "Static", label: "Custom Tables", disabled: true });
            dhfConfig.tableCtrl({
                controlState: _globals__WEBPACK_IMPORTED_MODULE_12__.ControlState.DialogCreate,
                canEdit: true,
                dummyData: false,
                help: 'Configure Sections',
                fieldValue: JSON.stringify(dhfDefaultFields),
                valueChanged: function () {
                },
                parameter: {
                    maxRows: that.getNumberOfDHFSections(category),
                    canBeModified: true,
                    columns: [{ name: "Section Title", field: "name", editor: _FieldHandlers__WEBPACK_IMPORTED_MODULE_14__.ColumnEditor.textline },
                        { name: "Type", field: "type", editor: _FieldHandlers__WEBPACK_IMPORTED_MODULE_14__.ColumnEditor.select, options: sectionSelect }
                    ]
                }
            });
            // prepare next step
            // disable next for one second
            nextButton.prop("disabled", true);
            nextButton.addClass("ui-state-disabled");
            window.setTimeout(function () {
                nextButton.prop("disabled", false);
                nextButton.removeClass("ui-state-disabled");
                $("span", nextButton).html("Create");
            }, 1000);
            nextButton.click(async function (event) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.setEnabled(nextButton, false);
                let dhfItems = (await dhfConfig.getController().getValueAsync() ? JSON.parse(await dhfConfig.getController().getValueAsync()) : []);
                dhfItems = dhfItems.filter(function (row) {
                    return !!row.type;
                }).map(function (row) {
                    if (!row.name) {
                        row.name = row.type;
                    }
                    return row;
                });
                endWizard({
                    dhfItems: dhfItems,
                    dhfName: await documentName.getController().getValueAsync() ? await documentName.getController().getValueAsync() : "no name",
                    dhfNumber: (documentId && await documentId.getController().getValueAsync()) ? await documentId.getController().getValueAsync() : "no id",
                    dhfGUID: documentGUID ? documentGUID.getController().getGuid() : ""
                });
                if (event.preventDefault)
                    event.preventDefault();
                return false;
            });
            if (event.preventDefault)
                event.preventDefault();
            return false;
        });
    }
    getBaseDOCofSIGN(project, itemSigned) {
        let res = $.Deferred();
        let parents = itemSigned.upLinkList ? itemSigned.upLinkList.filter(ul => _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(ul.itemRef).type == "DOC") : [];
        if (parents.length == 0) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Logger.warning("there's a SIGN without a parent DOC - cannot fill sign Info");
            res.reject();
            return res;
        }
        let signCreationDate = new Date(itemSigned.history[itemSigned.history.length - 1].date);
        let vl = parents[0].itemRef;
        let theDoc = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(vl);
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.getProjectItemAsync(project, theDoc.id).done(function (docWithHistory) {
            // go through history of DOC and find the version which existed just before creating the SIGN
            let docIdx = docWithHistory.history.length - 1;
            while (docIdx >= 0 && new Date(docWithHistory.history[docIdx].date) <= signCreationDate) {
                docIdx--;
            }
            // that's the version used to create the SIGN
            let docVersion = docWithHistory.history[docIdx + 1].version;
            // get that version of the DOC
            _globals__WEBPACK_IMPORTED_MODULE_12__.app.getProjectItemAsync(project, theDoc.id, docVersion).done(function (itemDoc) {
                res.resolve(itemDoc);
            }).fail(() => {
                res.reject();
            });
        }).fail(() => {
            res.reject();
        });
        return res;
    }
    createFromTemplate(project, signId, title, options) {
        let that = this;
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.getProjectCatFields(project).done(function (categories) {
            _globals__WEBPACK_IMPORTED_MODULE_12__.app.getProjectItemAsync(project, signId).done(function (itemSigned) {
                if (itemSigned.isDeleted) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showError("Instantiating Template Failed", "SIGN has been deleted.");
                    return;
                }
                let signType = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(signId).type;
                if (that.isDocumentFormType(signType)) {
                    that.transformTemplate(signId, categories, itemSigned, itemSigned.title, project, options);
                }
                else {
                    that.getBaseDOCofSIGN(project, itemSigned).done((itemDoc) => {
                        that.transformTemplate(signId, categories, itemDoc, itemSigned.title ? itemSigned.title : title, project, options);
                    }).fail(() => {
                        _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showError("Instantiating Template Failed", "The DOC has been deleted.");
                    });
                }
            });
        }).fail(function (jqxhr, textStatus, error) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showError("Instantiating Template Failed", "You have no access to this template");
        });
    }
    transformTemplate(signId, categories, itemDoc, title, project, options) {
        let that = this;
        let pasteBuffer = [];
        let guidFieldId = 0;
        $.each(categories, function (cidx, cat) {
            if (cat.category.shortLabel === itemDoc.type) {
                let fields = cat.fieldList.field;
                $.each(fields, function (fidx, f) {
                    pasteBuffer.push({
                        def: f,
                        val: itemDoc[f.id]
                    });
                    if (f.fieldType === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_13__.FieldDescriptions.Field_guid) {
                        guidFieldId = f.id;
                    }
                });
            }
        });
        var itemJson = {};
        itemJson.title = title;
        const docfields = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getItemConfiguration(_matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(options.parent).type).fieldList;
        const pastebufferDHF = pasteBuffer.filter(pb => pb.def.fieldType === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_13__.FieldDescriptions.Field_dhf);
        const pastebufferNonDHF = pasteBuffer.filter(pb => pb.def.fieldType !== _FieldDescriptions__WEBPACK_IMPORTED_MODULE_13__.FieldDescriptions.Field_dhf);
        $.each(docfields, function (fidx, f) {
            for (let idx = 0; idx < pastebufferNonDHF.length; idx++) {
                if (pastebufferNonDHF[idx].def.label === f.label) {
                    itemJson[f.id] = pastebufferNonDHF[idx].val;
                }
            }
        });
        const dhfDocFields = docfields.filter(df => df.fieldType === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_13__.FieldDescriptions.Field_dhf);
        if (dhfDocFields.length < pastebufferDHF.length) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showError("Template does not match target project", "The target project DOCs don't have enough section fields. Please contact your admin to increase the number of sections in the DOC category");
        }
        else {
            for (let it = 0; it < pastebufferDHF.length; it++) {
                itemJson[dhfDocFields[it].id] = pastebufferDHF[it].val;
            }
            itemJson.title = title;
            that.pasteTemplate({ tree: null, items: [] }, 0, options.parent, true, itemJson, guidFieldId ? itemDoc[guidFieldId] : "", project, signId);
        }
    }
    // itemId:  an item : an item or folder
    copyTemplates(itemId) {
        let res = $.Deferred();
        let tree = _globals__WEBPACK_IMPORTED_MODULE_12__.app.getSubTree(itemId);
        let items = _globals__WEBPACK_IMPORTED_MODULE_12__.app.getChildrenIdsRec(itemId);
        this.preparePasteBuffer(tree);
        let showProgressBar = items.length > 1;
        if (showProgressBar) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.BlockingProgress.Init([{ name: "Copying Documents" }]);
            _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.BlockingProgress.SetProgress(0, 1);
        }
        this.copyTemplate(items, 0, !showProgressBar).done(function () {
            if (showProgressBar) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.BlockingProgress.SetProgress(0, 100);
            }
        }).fail(function (error) {
            if (showProgressBar) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.BlockingProgress.SetProgressError(0, error);
            }
        }).always(function () {
            res.resolve();
        });
        return res;
    }
    copyTemplate(items, itemIdx, quiet) {
        let that = this;
        let res = $.Deferred();
        if (items.length == itemIdx) {
            res.resolve();
            return res;
        }
        let itemId = items[itemIdx];
        if (!quiet) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.BlockingProgress.SetProgress(0, 100 * itemIdx / items.length);
        }
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.getItemAsync(itemId).done(function (item) {
            if (that.isDocumentFormType(_matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(itemId).type)) {
                _globals__WEBPACK_IMPORTED_MODULE_12__.app.getItemAsync(itemId, item.history[0].version).done(function (item_h) {
                    that.addToPasteBuffer(item_h, item.title, itemId + "-v" + item.history[0].version, itemId);
                    that.copyTemplate(items, itemIdx + 1, quiet).done(function () {
                        res.resolve();
                    }).fail(function (error) {
                        res.reject(error);
                    });
                }).fail(function (error) {
                    res.reject(error);
                });
            }
            else if (item.upLinkList && item.upLinkList.length && that.isDocumentFormType(_matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(item.upLinkList[0].itemRef).type)) {
                let vl = item.upLinkList[0].itemRef;
                let docVersion = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(vl);
                _globals__WEBPACK_IMPORTED_MODULE_12__.app.getItemAsync(docVersion.id, docVersion.version).done(function (item) {
                    that.addToPasteBuffer(item, item.title, vl, itemId);
                    that.copyTemplate(items, itemIdx + 1, quiet).done(function () {
                        res.resolve();
                    }).fail(function (error) {
                        res.reject(error);
                    });
                }).fail(function (error) {
                    res.reject(error);
                });
            }
        });
        return res;
    }
    pasteTemplates(folderId) {
        let that = this;
        let currentBufferString = localStorage.getItem(this.COPY_PASTE_BUFFER);
        let pasteBuffers = (currentBufferString ? JSON.parse(currentBufferString) : { items: [] });
        if (pasteBuffers.items.length > 1) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.BlockingProgress.Init([{ name: "Pasting Documents" }]);
        }
        this.pasteTemplate(pasteBuffers, 0, folderId, pasteBuffers.items.length == 1);
    }
    pasteTemplate(pasteBuffers, pasteIdx, folderId, quiet, itemSource, sourceGUID, sourceProject, sourceItem) {
        let that = this;
        if (!quiet) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.BlockingProgress.SetProgress(0, 100 * pasteIdx / pasteBuffers.items.length);
        }
        let targetCategory = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(folderId).type;
        let sourceref = 0;
        let srfs = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldsOfType("sourceref", targetCategory);
        if (srfs.length) {
            sourceref = srfs.length ? srfs[0].field.id : 0;
        }
        // prepare the item to be created
        var itemJson = {};
        if (itemSource) {
            itemJson = itemSource;
            if (sourceref) {
                itemJson[sourceref] = sourceProject + "/" + sourceItem;
            }
        }
        else {
            let pasteBuffer = pasteBuffers.items[pasteIdx];
            itemJson.title = pasteBuffer.title;
            if (sourceref) {
                itemJson[sourceref] = pasteBuffer.sourceProject + "/" + pasteBuffer.sourceItem;
            }
            var fields = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getItemConfiguration(targetCategory).fieldList;
            $.each(fields, function (fidx, f) {
                for (var idx = 0; idx < pasteBuffer.item.length; idx++) {
                    if (pasteBuffer.item[idx].def.label === f.label && sourceref != f.id) {
                        itemJson[f.id] = pasteBuffer.item[idx].val;
                    }
                }
            });
        }
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.createItemOfTypeAsync(targetCategory, itemJson, "instantiated template", folderId).done(function (result) {
            if (pasteBuffers.items.length > pasteIdx + 1) {
                that.pasteTemplate(pasteBuffers, pasteIdx + 1, folderId, quiet, itemSource, sourceGUID);
            }
            else {
                if (!quiet) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.BlockingProgress.SetProgress(0, 100);
                }
                _globals__WEBPACK_IMPORTED_MODULE_12__.app.treeSelectionChangeAsync(result.item.id);
            }
        }).fail(function (error) {
            if (!quiet) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.BlockingProgress.SetProgressError(0, error);
            }
        });
    }
    // returns first field of a given
    getFieldByType(fieldType, controls) {
        for (var idx = 0; idx < controls.length; idx++) {
            if (controls[idx].fieldType === fieldType) {
                return controls[idx].control.getController();
            }
        }
        return null;
    }
    /** requires sectionName or sectionType to identify field(s) */
    getDHFFieldValuesFromItem(sectionName, sectionType) {
        let that = this;
        let value = [];
        $.each(this.item, function (key, val) {
            if (val && _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldType(that.item.type, key) === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_13__.FieldDescriptions.Field_dhf) {
                var fieldVal = JSON.parse(val);
                if ((sectionName && fieldVal.name.toLocaleLowerCase() === sectionName.toLocaleLowerCase()) ||
                    (sectionType && fieldVal.type.toLocaleLowerCase() === sectionType.toLocaleLowerCase())) {
                    value.push(fieldVal);
                }
            }
        });
        return value;
    }
    /** requires sectionName or sectionType to identify field */
    setDHFFieldValueOfItem(sectionName, sectionType, newValue) {
        let that = this;
        $.each(this.item, function (key, val) {
            if (val && _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldType(that.item.type, key) === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_13__.FieldDescriptions.Field_dhf) {
                var fieldVal = JSON.parse(val);
                if ((sectionName && fieldVal.name.toLocaleLowerCase() === sectionName.toLocaleLowerCase()) ||
                    (sectionType && fieldVal.type.toLocaleLowerCase() === sectionType.toLocaleLowerCase())) {
                    fieldVal.fieldValue = newValue;
                    let change = { id: that.item.id, onlyThoseFields: 1, onlyThoseLabels: 1 };
                    change[key] = JSON.stringify(fieldVal);
                    _globals__WEBPACK_IMPORTED_MODULE_12__.app.updateItemInDBAsync(change, "edit").done(function () {
                        _globals__WEBPACK_IMPORTED_MODULE_12__.app.renderItem();
                    });
                    return;
                }
            }
        });
    }
    preparePasteBuffer(tree) {
        let pasteBuffer = { tree: tree, items: [] };
        localStorage.setItem(this.COPY_PASTE_BUFFER, JSON.stringify(pasteBuffer));
    }
    addToPasteBuffer(item, title, pasteSource, sourceItem) {
        var fields = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getItemConfiguration(item.type).fieldList;
        var pasteBuffer = [];
        $.each(fields, function (fidx, f) {
            pasteBuffer.push({
                def: f,
                val: item[f.id]
            });
        });
        let currentBuffer = JSON.parse(localStorage.getItem(this.COPY_PASTE_BUFFER));
        currentBuffer.items.push({
            sourceItem: sourceItem,
            sourceProject: _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getProject(),
            pasteSource: pasteSource,
            title: title,
            item: pasteBuffer
        });
        localStorage.setItem(this.COPY_PASTE_BUFFER, JSON.stringify(currentBuffer));
    }
    docHasContent(controls) {
        // check if a doc would be empty int hat case: explain and return false
        var isEmpty = true;
        var sectionCount = 0;
        var noContentSections = 0;
        $.each(controls, function (cidx, control) {
            if (control.isDhfType && control.dhfValue) {
                sectionCount++;
                if (control.dhfValue.fieldValueXML && control.dhfValue.type != "document_options") {
                    isEmpty = false;
                }
                if (control.dhfValue.type === "terms_abbreviations") {
                    noContentSections++;
                }
            }
        });
        if (sectionCount > 0 && _globals__WEBPACK_IMPORTED_MODULE_12__.app.getNeedsSave()) {
            return true;
        }
        isEmpty = isEmpty && !(sectionCount > 0 && noContentSections === sectionCount);
        if (isEmpty) {
            var message = sectionCount ? "You need to add some content into the sections:<br><ul>" +
                "<li>To edit a section's content click on the <span class='cbimg'></span> before the section name.</li>" +
                "<li>To change how the content is rendered click on the <span class='fal fa-cog'></span> behind the section name." :
                "First you need to add some sections. To do this click on the <span class='fal fa-list'></span> icon behind '" + this.getArchiveButtonName() + "'";
            var dlg = '<div class="modal fade bs-example-modal-sm" role="dialog" >' +
                '    <div class="modal-dialog modal-sm">' +
                '        <div class="modal-content">' +
                '            <div class="modal-header">' +
                '                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>' +
                '                <h4 class="modal-title">Your document is still empty</h4>' +
                '            </div>' +
                '            <div class="modal-body" id="message_ack_content" >' + message +
                '                <br><br>Find more info here <a href="https://urlshort.matrixreq.com/d23/manual/docs" target="blank">here</a>.' +
                '            </div>' +
                '            <div class="modal-footer">' +
                '                <button id="message_ack_ok" type="button" class="btn btn-default" data-dismiss="modal">Ok</button>' +
                '            </div>' +
                '        </div>' +
                '    </div>' +
                '</div>';
            $(dlg).modal();
        }
        return !isEmpty;
    }
    dhfFactory(dhfType) {
        if ((typeof this.sectionFactories[dhfType]) !== "undefined") {
            let creator = this.sectionFactories[dhfType];
            return creator(this.dhf_config, dhfType, this.ColumnTypes);
        }
        else {
            var isTable = false;
            if (this.dhf_config.customTables) {
                $.each(this.dhf_config.customTables, function (index, table) {
                    if (dhfType === table.id) {
                        isTable = true;
                    }
                });
            }
            if (isTable) {
                let creator = this.sectionFactories["dhf_table"];
                return creator(this.dhf_config, dhfType, this.ColumnTypes);
            }
            return new _client_plugins_DocumentSections_Hidden__WEBPACK_IMPORTED_MODULE_10__.Hidden();
        }
    }
    getNumberOfDHFSections(type) {
        var maxRows = 0;
        var fields = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldsOfType("dhf", type);
        for (var idx = 0; idx < fields.length; idx++) {
            maxRows++;
        }
        return maxRows;
    }
    getControlFieldName(type) {
        var name = type;
        $.each(this.getDhfControls(), function (key, val) {
            if (key === type) {
                name = val.sectionName;
            }
        });
        return name;
    }
    reorderDialog(_item) {
        let that = this;
        var item = _item;
        var td;
        var dhfTable = [];
        var idx = 0;
        $.each(item, function (key, val) {
            if (_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldType(item.type, key) === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_13__.FieldDescriptions.Field_dhf) {
                if (val) {
                    try {
                        var fieldVal = JSON.parse(val);
                        if (fieldVal.type !== 'document_options') {
                            dhfTable.push({ idx: idx, id: key, name: fieldVal.name, type: that.getControlFieldName(fieldVal.type) });
                        }
                        idx++;
                    }
                    catch (error) {
                        console.log("Error parsing dhf field: " + key + " - " + error);
                    }
                }
            }
        });
        var ui = $("<div style='position: absolute;top: 12px;bottom: 12px;left: 12px;right: 12px;'>");
        var nst = $('<div class="newSectionType" style="flex-grow: 1">');
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.html("");
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.append(ui);
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.removeClass("dlg-v-scroll");
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.addClass("dlg-no-scroll");
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.dialog({
            autoOpen: true,
            title: "Configure Document Sections",
            height: 600,
            width: 650,
            modal: true,
            open: function () {
                var enableAdd = async function () {
                    var table = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.JSON.fromString(await td.getController().getValueAsync());
                    var count = table.status === "ok" ? _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.JSON.fromString(await td.getController().getValueAsync()).value.length : 0;
                    var type = await nst.getController().getValueAsync();
                    var name = nsn.val();
                    // leave 1 spare for document config
                    let cannotAddSection = (!type || !name || count + 1 >= that.getNumberOfDHFSections(item.type));
                    button.prop('disabled', cannotAddSection);
                    _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.setEnabled($(".btnSectionAdd"), cannotAddSection);
                };
                var addRow = $("<div class='rowFlex' style='align-items: top; width: 100%'>");
                ui.append(addRow);
                var nsn = $('<input  class="newSectionName form-control" placeholder="enter section name" style="flex-grow: 1; width: auto;height: 38px;" />');
                nsn.on('input propertychange', function () {
                    enableAdd();
                });
                addRow.append(nsn);
                var sorted = [];
                $.each(mDHF.getDhfControls(), function (key, val) {
                    if (key !== 'document_options' && !val.hidden) {
                        sorted.push({ id: key, label: val.sectionName, class: val.sectionType.toString() });
                    }
                });
                sorted.sort(function (a, b) {
                    if (a.label < b.label)
                        return -1;
                    if (a.label > b.label)
                        return 1;
                    return 0;
                });
                addRow.append(nst);
                nst.mxDropdown({
                    controlState: _globals__WEBPACK_IMPORTED_MODULE_12__.ControlState.DialogCreate,
                    canEdit: true,
                    dummyData: false,
                    help: '',
                    fieldValue: "Empty",
                    valueChanged: function () {
                        enableAdd();
                    },
                    parameter: {
                        placeholder: "select section type",
                        create: false,
                        options: sorted,
                        groups: [
                            { "value": _DHFInterfaces__WEBPACK_IMPORTED_MODULE_18__.DocumentSectionType.Static.toString(), "label": "Static" },
                            { "value": _DHFInterfaces__WEBPACK_IMPORTED_MODULE_18__.DocumentSectionType.Database.toString(), "label": "Dynamic (Database)" },
                            { "value": _DHFInterfaces__WEBPACK_IMPORTED_MODULE_18__.DocumentSectionType.Table.toString(), "label": "TOCs and Indexes" },
                            { "value": _DHFInterfaces__WEBPACK_IMPORTED_MODULE_18__.DocumentSectionType.CustomTable.toString(), "label": "Custom Tables" },
                            { "value": _DHFInterfaces__WEBPACK_IMPORTED_MODULE_18__.DocumentSectionType.Technical.toString(), "label": "Static" }
                        ],
                        maxItems: 1,
                        sort: false,
                        maxHeight: "400px"
                    },
                    noMarkup: true
                });
                $(".selectize-input", nst).css("width", "100%");
                var button = $("<button title class='newSectionAdd btn btn-success hidden-print' style='height: 38px;'> Add </span></button>");
                addRow.append(button);
                td = $("<div style='position: absolute;top: 65px;bottom: 0;left: 0;right: 0; overflow-x:hidden;overflow-y:auto;'>");
                ui.append(td);
                td.tableCtrl({
                    help: "Re-order or delete sections",
                    controlState: _globals__WEBPACK_IMPORTED_MODULE_12__.ControlState.DialogCreate,
                    parameter: {
                        canBeModified: true,
                        columns: [
                            { name: "Section name", field: "name", editor: _FieldHandlers__WEBPACK_IMPORTED_MODULE_14__.ColumnEditor.none },
                            { name: "Section Type", field: "type", editor: _FieldHandlers__WEBPACK_IMPORTED_MODULE_14__.ColumnEditor.none }
                        ],
                        create: false,
                    },
                    canEdit: true,
                    create: false,
                    fieldValue: JSON.stringify(dhfTable)
                });
                enableAdd();
                button.click(async function () {
                    var type = await nst.getController().getValueAsync();
                    var name = nsn.val();
                    if (name == "insertall") {
                        $.each(that.getDhfControls(), function (key, val) {
                            td.insertLine({ idx: -1, id: key, type: key, name: key });
                        });
                        return;
                    }
                    var typeName = that.getControlFieldName(type);
                    td.insertLine({ idx: -1, id: type, type: typeName, name: name });
                    nsn.val("");
                    enableAdd();
                });
            },
            resizeStop: function () {
                _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.width(_globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.parent().width() - 30);
                td.getController().resizeItem(_globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.parent().width(), true);
            },
            buttons: [{
                    text: 'Ok',
                    class: 'btnDoIt btnSectionAdd',
                    click: async function () {
                        // save old values
                        var old = {};
                        var oidx = 0;
                        var document_options = "";
                        //TODO : Move this to a business logic.
                        $.each(item, function (key, val) {
                            if (_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldType(item.type, key) === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_13__.FieldDescriptions.Field_dhf) {
                                old[oidx] = val;
                                oidx++;
                                try {
                                    var js = JSON.parse(val);
                                    if (js.type === "document_options") {
                                        document_options = val;
                                    }
                                }
                                catch (Exception) {
                                    // nous nous
                                }
                            }
                        });
                        let newTable = JSON.parse(await td.getController().getValueAsync());
                        newTable = newTable.filter(function (row) {
                            return !!row.type;
                        }).map(function (row) {
                            if (!row.name) {
                                row.name = row.type;
                            }
                            return row;
                        });
                        var nidx = 0;
                        $.each(item, function (key, val) {
                            if (_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldType(item.type, key) === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_13__.FieldDescriptions.Field_dhf) {
                                if (nidx < newTable.length) {
                                    var line = newTable[nidx];
                                    if (line.idx === -1) {
                                        // get default settings / value of item
                                        var sectionCtrl = { dhfValue: { fieldValueXML: "" } };
                                        var section = that.dhfFactory(line.id);
                                        try {
                                            sectionCtrl.dhfValue['fieldValueXML'] == (sectionCtrl);
                                        }
                                        catch (Exception) {
                                            // nous nous (this could be legacy doc section plugins)
                                        }
                                        // new section
                                        var dhfField = {
                                            type: line.id,
                                            name: line.name,
                                            fieldValueXML: sectionCtrl.dhfValue.fieldValueXML
                                        };
                                        item[key] = JSON.stringify(dhfField);
                                    }
                                    else {
                                        item[key] = old[line.idx];
                                    }
                                }
                                else {
                                    // store the remembered document options (once)/clean the rest
                                    item[key] = document_options;
                                    document_options = "";
                                }
                                nidx++;
                            }
                        });
                        let update = { onlyThoseFields: 1, onlyThoseLabels: 1 };
                        $.each(item, function (key, val) {
                            if (key === "type" || key === "title" || key === "id" || _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldType(item.type, key)) {
                                update[key] = val;
                            }
                        });
                        // compare old with new
                        let changed = false;
                        let newIdx = 0;
                        $.each(update, function (key, val) {
                            if (_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldType(item.type, key) === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_13__.FieldDescriptions.Field_dhf) {
                                if ((old[newIdx] || val) && old[newIdx] != val) {
                                    changed = true;
                                }
                                newIdx++;
                            }
                        });
                        if (changed) {
                            _globals__WEBPACK_IMPORTED_MODULE_12__.app.updateItemInDBAsync(update, "edit").done(function (result) {
                                _globals__WEBPACK_IMPORTED_MODULE_12__.app.renderItem(result);
                                _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.dialog("close");
                            }).fail(function (error) {
                                _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showError("Failed to save changes!", error);
                            });
                        }
                    }
                }, {
                    text: 'Cancel',
                    class: 'btnCancelIt',
                    click: function () {
                        _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.dialog("close");
                    }
                }]
        });
    }
    // check if SIGN or DOC has a file attachment control and file attachments
    hasFileAttachments(type, controls, item) {
        var hfa = false;
        $.each(controls, function (ci, c) {
            if (_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldType(type, c.fieldId) === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_13__.FieldDescriptions.Field_fileManager) {
                var iv = item[c.fieldId];
                if (iv && JSON.parse(iv).length > 0) {
                    hfa = true;
                }
            }
        });
        return hfa;
    }
    hideFileOption(category, format) {
        let hide = false;
        if (this.dhf_config && this.dhf_config.hideFileFormats) {
            $.each(this.dhf_config.hideFileFormats, function (hfoidx, hfo) {
                if (hfo.category === category && hfo.format === format) {
                    hide = true;
                }
            });
        }
        return hide;
    }
    renderControlsSIGN(options, body, controls) {
        if (options.isItem) {
            if (options.controlState !== _globals__WEBPACK_IMPORTED_MODULE_12__.ControlState.Print && options.controlState !== _globals__WEBPACK_IMPORTED_MODULE_12__.ControlState.Tooltip) {
                let container = $("<div class='controlContainer'>").appendTo(body);
                $("<div style='padding: 12px 0' class='baseControlHelp'>Manage Documents</div>").appendTo(container);
                let rt = $("<div class='baseControl rowFlex'>").appendTo(container);
                this.showPreviewSign(rt, options);
                this.renderSignDownload(options, rt, controls);
            }
        }
        else {
            if (options.controlState === _globals__WEBPACK_IMPORTED_MODULE_12__.ControlState.FormEdit) {
                body.append($("<span class='baseControlHelp'>Tools</span>"));
                var folderEdit = $("<div class='hidden-print baseControl'></div>");
                body.append(folderEdit);
                var createTools = new _UI_Tools_ItemCreationView__WEBPACK_IMPORTED_MODULE_7__.ItemCreationTools();
                createTools.renderButtons({
                    parent: options.item.id,
                    control: folderEdit,
                    linkTypes: [
                        { type: options.item.type, name: "Folder", buttonName: "Create", folder: true }
                    ],
                    type: options.type,
                    dontOpenNewItem: false
                });
            }
        }
    }
    getFilterCtrl(type, allControls) {
        for (var idx = 0; idx < allControls.length; idx++) {
            if (_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldType(type, allControls[idx].fieldId) === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_13__.FieldDescriptions.Field_docFilter) {
                return allControls[idx].control;
            }
        }
        return null;
    }
    async getFilterValue(filterControl) {
        if (filterControl) {
            var v = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.JSON.fromString(await filterControl.getController().getValueAsync());
            if (v.status === "ok") {
                var list = v.value.join(",");
                return list;
            }
        }
        return null;
    }
    showPreviewDoc(anchor, id, controls) {
        let that = this;
        if (_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getTimeWarp()) {
            return;
        }
        // handle ACL
        if (!_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.canReport("DOC")) {
            return;
        }
        $("<button class='btn btn-success'> Preview </button>").appendTo(anchor).click(async () => {
            let frame = $(`<div class="inlineViewer">`).appendTo("body");
            let spinning = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.getSpinningWait("loading document: <span class='dprogress'></span> done").appendTo(frame);
            $(`<div class='message_close_big'><i class='fal fa-window-close'></i></div>`).appendTo(frame).click(function () {
                frame.remove();
            });
            let params = { format: "pdf", inline: true };
            let labelFilter = await that.getFilterValue(that.getFilterCtrl("DOC", controls));
            if (labelFilter) {
                params.filter = labelFilter;
            }
            _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.ReportGenerator.SaveAndCreate(id, params, "viewing pdf", (lastCreatedObject, path) => {
                spinning.remove();
                frame.append(`<embed src="${path + "?disposition=inline"}" width="100%" height="100%">`);
            }, (error) => {
                spinning.remove();
                frame.append(`document creation failed with error: ${error}`);
            }, (progress) => {
                $(".dprogress", spinning).html(progress + "%");
            });
        });
    }
    showPreviewSign(anchor, options) {
        let that = this;
        if (_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getTimeWarp()) {
            return;
        }
        if (!_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.canReport("SIGN")) {
            return;
        }
        $("<button class='btn btn-success  inlineView' title='View'>Preview</button>").appendTo(anchor).click(() => {
            let frame = $(`<div class="inlineViewer">`).appendTo("body");
            let spinning = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.getSpinningWait("loading document: <span class='dprogress'></span> done").appendTo(frame);
            $(`<div class='message_close_big'><i class='fal fa-window-close'></i></div>`).appendTo(frame).click(function () {
                frame.remove();
            });
            let params = { format: "pdf", inline: true };
            let signCache = that.getCached(options);
            if (signCache["pdf"]) {
                // signCache["pdf"] is a file attachment url like "5745?key\u003dkey_2d6a3cju4dr5qnm9ogvstfqkn2"
                let clean = signCache["pdf"].replace("\u003d", "=");
                let path = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.matrixRestUrl + "/" + _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getProject() + "/file/" + clean + "&disposition=inline";
                spinning.remove();
                frame.append(`<embed src="${path}" width="100%" height="100%">`);
            }
            else {
                if (_globals__WEBPACK_IMPORTED_MODULE_12__.app.getNeedsSave()) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showError("Save Item", "Please save before downloading the signed item.");
                    frame.remove();
                    return;
                }
                _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.ReportGenerator.SaveAndCreate(options.id, params, "viewing pdf", (lastCreatedObject, path) => {
                    spinning.remove();
                    frame.append(`<embed src="${path}?disposition=inline" width="100%" height="100%">`);
                }, (error) => {
                    spinning.remove();
                    frame.append(`document creation failed with error: ${error}`);
                }, (progress) => {
                    $(".dprogress", spinning).html(progress + "%");
                });
            }
        });
    }
    renderControlsDOC(options, body, controls) {
        let that = this;
        let category = options.type; // default type for creation
        if (options.item && options.item.type) {
            category = options.item.type;
        }
        var id = options.item ? options.item.id : "";
        var config = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getItemConfiguration(options.isItem ? category : "FOLDER");
        var showTools = true;
        if (options.controlState === _globals__WEBPACK_IMPORTED_MODULE_12__.ControlState.Print || options.controlState === _globals__WEBPACK_IMPORTED_MODULE_12__.ControlState.Tooltip ||
            options.controlState === _globals__WEBPACK_IMPORTED_MODULE_12__.ControlState.DialogCreate || options.controlState === _globals__WEBPACK_IMPORTED_MODULE_12__.ControlState.HistoryView) {
            showTools = false;
        }
        var signedDocuments; // in case of signed report this is a list of instances (SIGN) created
        // main logic to create UI
        if (options.isItem) {
            if (options.controlState === _globals__WEBPACK_IMPORTED_MODULE_12__.ControlState.DialogCreate) {
                if (this.dhf_config.categories.documentForms.indexOf(category) !== -1) {
                    // start wizard to create new controlled doc
                    RenderDocDefinitionWizard(body, controls);
                }
            }
            else if (showTools) {
                let container = $("<div class='controlContainer'>").appendTo(body);
                // show tools to preview and generate signed doc
                $("<div style='padding: 12px 0;' class='baseControlHelp'>Manage Documents</div>").appendTo(container);
                let rt = $("<div style='margin-bottom:12px' class='baseControl rowFlex'>").appendTo(container);
                that.showPreviewDoc(rt, options.id, controls);
                if (_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.canReport(options.type)) {
                    rt.append(createPreviewReportButton(category, controls, options.item));
                    rt.append(createExcelButton(category, controls, options.item));
                    this.createCompareButton(rt, options, controls);
                    if (_globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.isEditor()) {
                        // can create signed doc
                        var dhfConfigTool = createSignatureButton(category, controls, this.getArchiveButtonName());
                        rt.append(dhfConfigTool);
                        if (_globals__WEBPACK_IMPORTED_MODULE_12__.app.canEditItem(options.item) && !options.locked) {
                            var x = $("<div class='btn-group'>");
                            rt.append(x);
                            this.appendConfigTool(x, config, options.item);
                        }
                    }
                }
                else {
                    rt.append("<div class='inlineHelp'>You have no rights to download documents</div>");
                }
                var linkTypes = [];
                $.each(this.dhf_config.categories.documentSigned, function (idx, cat) {
                    linkTypes.push({ type: cat });
                });
                // show previously created signed docs
                signedDocuments = $("<div class='controlContainer' >").linkCollection({
                    // TODO(modules): I added item to the definition -- error?
                    item: options.item,
                    parameter: {
                        "linkTypes": linkTypes,
                        "readonly": true,
                        "none": "no signed documents have been created so far"
                    },
                    fieldValue: options.item.downLinks,
                    help: "Previously created signed documents"
                });
                body.append(signedDocuments);
            }
        }
        else if (options.controlState === _globals__WEBPACK_IMPORTED_MODULE_12__.ControlState.FormEdit) {
            body.append($("<span class='baseControlHelp'>Tools</span>"));
            var folderEdit = $("<div class='hidden-print baseControl'></div>");
            body.append(folderEdit);
            var createTools = new _UI_Tools_ItemCreationView__WEBPACK_IMPORTED_MODULE_7__.ItemCreationTools();
            var createButtons = [
                { type: options.item.type, name: "Folder", folder: true },
                { type: options.item.type, name: "DOCX", import: true, buttonName: "Import" },
                { type: options.item.type, name: _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getCategoryLabel(category), }
            ];
            createTools.renderButtons({
                parent: options.item.id,
                control: folderEdit,
                linkTypes: createButtons,
                dontOpenNewItem: false
            });
            let templateProjects = _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getCustomerSettingJSON(_UI_Controls_markAsTemplate__WEBPACK_IMPORTED_MODULE_4__.MarkAsTemplateImpl.PROJECT_SETTING_Projects);
            if (templateProjects && templateProjects.projects && templateProjects.projects.length) {
                let accessibleProjects = _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getProjectList(true).map(function (ap) { return ap.shortLabel; });
                let templateSources = templateProjects.projects.filter(function (p) { return accessibleProjects.indexOf(p) != -1; });
                let templateErrors = templateProjects.projects.filter(function (p) { return accessibleProjects.indexOf(p) == -1; });
                appendTemplates(folderEdit, templateSources, 0, [], templateErrors);
            }
        }
        function appendTemplates(folderEdit, projects, next, templateOptions, errors) {
            if (next >= projects.length) {
                if (templateOptions.length) {
                    let ddb = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.createDropDownButton("Create from <b>Template</b>", templateOptions, false, "createByTemplateId", true);
                    folderEdit.append(ddb);
                    ddb.addClass("ddAlignBottom");
                }
                if (errors.length) {
                    folderEdit.append($("<div style='padding: 12px 0;font-style: italic;'>").html("There are also templates in some projects where you have no read access: " + errors.join()));
                }
                return;
            }
            _globals__WEBPACK_IMPORTED_MODULE_12__.app.readSettingJSONAsync(_UI_Controls_markAsTemplate__WEBPACK_IMPORTED_MODULE_4__.MarkAsTemplateImpl.PROJECT_SETTING, projects[next], true).done(function (templates) {
                if (templates && templates.templates) {
                    // find templates for this project
                    $.each(templates.templates, function (idx, ps) {
                        if (ps.canUseIn.indexOf(_globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getProject()) != -1) {
                            templateOptions.push({
                                name: ps.fromProject + "/" + ps.fromSign + " " + ps.fromName,
                                click: function () { that.createFromTemplate(ps.fromProject, ps.fromSign, ps.fromName, { parent: _globals__WEBPACK_IMPORTED_MODULE_12__.app.getCurrentItemId() }); }
                            });
                        }
                    });
                }
                appendTemplates(folderEdit, projects, next + 1, templateOptions, errors);
            }).fail(function () {
                _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.hideError();
                errors.push(projects[next]);
                appendTemplates(folderEdit, projects, next + 1, templateOptions, errors);
            });
        }
        function addFileOption(type, controls, formats, name, format) {
            var pos = (mDHF.getDefaultFormat(type) === format) ? 0 : formats.length;
            formats.splice(pos, 0, {
                name: name, click: function () {
                    that.createConfirmedDownloadOrSIGN(controls, async function () {
                        _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.ReportGenerator.CreateDoc(id, { format: format }, await that.getFilterValue(that.getFilterCtrl(type, controls)));
                    });
                    return false;
                }
            });
        }
        function createPreviewReportButton(type, controls, item) {
            var formats = [];
            if (!that.hideFileOption(type, "docx")) {
                addFileOption(type, controls, formats, "Word", "docx");
                if (that.hasFileAttachments(type, controls, item)) {
                    addFileOption(type, controls, formats, "Word with attachments", "zipdocx");
                }
            }
            if (!that.hideFileOption(type, "pdf")) {
                addFileOption(type, controls, formats, "PDF", "pdf");
                if (that.hasFileAttachments(type, controls, item)) {
                    addFileOption(type, controls, formats, "PDF with attachments", "zippdf");
                }
            }
            if (!that.hideFileOption(type, "html")) {
                addFileOption(type, controls, formats, "HTML", "html");
            }
            if (that.hasPackage(controls, item)) {
                addFileOption(type, controls, formats, "Package", "package");
            }
            return _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.createDropDownButton("Download document", formats, false, "btnDownload");
        }
        function createExcelButton(type, controls, item) {
            if (!that.hideFileOption(type, "xlsx")) {
                if (PluginManagerDocuments.hasCustomSection(item)) {
                    return PluginManagerDocuments.excelButtonControl(() => {
                        that.createConfirmedDownloadOrSIGN(controls, async function () {
                            _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.ReportGenerator.CreateDoc(id, { format: "xlsx" }, await that.getFilterValue(that.getFilterCtrl(type, controls)));
                        });
                        return false;
                    });
                }
            }
        }
        function createSignatureButton(type, controls, btnName) {
            var filterControl = that.getFilterCtrl(type, controls);
            var formats = [{
                    name: "SIGN",
                    click: function () {
                        that.createSIGN(id, signedDocuments, filterControl, controls);
                    },
                }];
            return _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.createDropDownButton(btnName, formats, false, "archiveBtnId");
        }
        function RenderDocDefinitionWizard(body, controls) {
            var dlgInner = body.parent();
            var dlgOuter = dlgInner.parent();
            var createButton;
            var nextButton = $('<button type="button" class="btnDoIt2 ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only btn" role="button" aria-disabled="false">');
            // hide all controls
            for (var idx = 0; idx < controls.length; idx++) {
                controls[idx].control.hide();
            }
            window.setTimeout(function () {
                var niceSize = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.getNiceDialogSize(730, 550);
                dlgOuter.dialog("option", "height", niceSize.height);
                dlgOuter.dialog("option", "width", niceSize.width);
                $(".dlgCreateMultiple", dlgOuter.parent()).hide();
                nextButton.append('<span class="ui-button-text">Next</span>');
                createButton = $(".ui-dialog-buttonpane button:contains('Create')", _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.parent());
                createButton.hide();
                createButton.after(nextButton);
            }, 1);
            function updateControls(wizardData) {
                //TODO : Move this to business logic.
                var dhfItemIdx = 0;
                for (var idx = 0; idx < controls.length; idx++) {
                    if (_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldType(category, controls[idx].fieldId) === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_13__.FieldDescriptions.Field_dhf) {
                        // this has been configured before...
                        if (dhfItemIdx < wizardData.dhfItems.length) {
                            controls[idx].control.getController().setValue(JSON.stringify(wizardData.dhfItems[dhfItemIdx]));
                            dhfItemIdx++;
                        }
                        else if (dhfItemIdx === wizardData.dhfItems.length) {
                            var dhfField = { type: "document_options", name: "Document Options", fieldValue: "", ctrlConfig: { auto_number: true, omit_title: true } };
                            controls[idx].control.getController().setValue(JSON.stringify(dhfField));
                            dhfItemIdx++;
                        }
                    }
                    else if (controls[idx].name === DOC_NUM_NAME) {
                        controls[idx].control.getController().setValue(wizardData.dhfNumber);
                    }
                    else if (controls[idx].fieldType === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_13__.FieldDescriptions.Field_guid) {
                        controls[idx].control.getController().setValue(wizardData.dhfGUID);
                    }
                    else if (controls[idx].name === "Title") {
                        controls[idx].control.getController().setValue(wizardData.dhfName, true);
                    }
                    else if (controls[idx].name === "reportId") {
                        controls[idx].control.getController().setValue("dhf_generic");
                    }
                }
                createButton.trigger("click");
            }
            that.showDHFCreateWizard(category, dlgInner, nextButton, updateControls, false);
        }
    }
    static hasCustomSection(item) {
        for (const keyString in item) {
            const key = parseInt(keyString);
            if (isNaN(key)) {
                // skip, something's wrong with the key
            }
            else {
                const value = item[key];
                if (typeof value === "string") {
                    try {
                        const section = JSON.parse(value);
                        if (section != null && section.type === "CustomSection") {
                            return true;
                        }
                    }
                    catch (e) {
                        // Not JSON, next...
                    }
                }
            }
        }
        return false;
    }
    createSIGN(id, signedDocuments, filterControl, controls) {
        let that = this;
        function fill0(sn, len) {
            let sns = sn.toString();
            while (sns.length < len) {
                sns = "0" + sns;
            }
            return sns;
        }
        function last2(x) {
            return x.substr(x.length - 2);
        }
        let versionFromTable = "";
        async function createSignDoc(signatures) {
            var transfer = [];
            // build name of signed doc
            let hasTitle = false;
            let hasHideTitle = false;
            var signName = "";
            var signDocNumber = "";
            // if document has a DOC NUMBER field, create the title of the SIGN
            var dnid = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldId(that.item.type, DOC_NUM_NAME);
            if (that.item[dnid] && that.item[dnid] !== "no id") {
                let docNumber = that.item[dnid];
                let sn = parseInt(that.item.id.split("-")[1]);
                hasTitle = docNumber.indexOf("_title_") !== -1;
                hasHideTitle = docNumber.indexOf("_notitle_") !== -1;
                signDocNumber = docNumber
                    .replace("_notitle_", "") // just a dummy placeholder to ignore the DOC's title
                    .replace("_id_", that.item.id)
                    .replace("_revision_", versionFromTable)
                    .replace("_serial_", fill0(sn, 3)) // serial XX -> 0XX
                    .replace("_serial1_", fill0(sn, 1)) // serial XX -> XX
                    .replace("_serial2_", fill0(sn, 2)) // serial XX -> XX
                    .replace("_serial3_", fill0(sn, 3)) // serial XX -> 0XX
                    .replace("_serial4_", fill0(sn, 4)) // serial XX -> 00XX
                    .replace("_project_", _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getProject())
                    .replace("_title_", that.item.title)
                    .replace("_YYYY_", new Date().getFullYear().toString())
                    .replace("_YY_", last2("00" + (new Date().getFullYear() - 2000).toString()))
                    .replace("_MM_", last2("00" + (new Date().getMonth() + 1).toString()))
                    .replace("_DD_", last2("00" + (new Date().getDate()).toString()))
                    .replace("_YYYYMMDD_", new Date().getFullYear().toString() +
                    last2("00" + (new Date().getMonth() + 1).toString()) + last2("00" + (new Date().getDate()).toString()));
                signName = signDocNumber;
            }
            // add / use item title to SIGN item name
            if (!hasTitle && !hasHideTitle) {
                signName = signName ? (signName + " " + that.item.title) : that.item.title;
            }
            // find values which need to be transferred (they need to have same label and copyfromdoc set to true
            var signConfig = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getItemConfiguration(that.dhf_config.categories.signAs);
            var docConfig = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getItemConfiguration(that.item.type);
            $.each(signConfig.fieldList, function (configIdx, config) {
                if (config.parameterJson && config.parameterJson.copyfromdoc) {
                    var toId = config.id;
                    $.each(docConfig.fieldList, function (docIdx, docConfig) {
                        if (docConfig.label.toLowerCase() === config.label.toLowerCase()) {
                            var fromId = docConfig.id;
                            transfer.push({ fromId: fromId.toString(), toId: toId.toString() });
                        }
                    });
                }
            });
            _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.ReportGenerator.CreateSignedDoc(id, signatures, signedDocuments, await that.getFilterValue(filterControl), signName, transfer, [], function (signID) {
                var signatureInfo = that.getSignatureInfo();
            });
        }
        let revisionTableControl = null;
        let revisionTableColumn = null;
        for (let control of controls) {
            if (control.dhfValue && control.dhfValue && control.dhfValue.ctrlConfig && control.dhfValue.ctrlConfig.columns) {
                for (let column of control.dhfValue.ctrlConfig.columns) {
                    if (column.columnType == "type12") {
                        revisionTableControl = control;
                        revisionTableColumn = column.field;
                    }
                }
            }
        }
        if (revisionTableControl) {
            that.verifyVersionInfo(id, revisionTableControl, revisionTableColumn).done((version) => {
                versionFromTable = version;
                that.verifyVersionTableComplete(revisionTableControl).done(() => {
                    that.createConfirmedDownloadOrSIGN(controls, createSignDoc);
                });
            });
        }
        else {
            that.createConfirmedDownloadOrSIGN(controls, createSignDoc);
        }
    }
    // make sure all values are set
    verifyVersionTableComplete(revisionTableControl) {
        let that = this;
        let res = $.Deferred();
        let table = (revisionTableControl.dhfValue.fieldValue ? JSON.parse(revisionTableControl.dhfValue.fieldValue) : null);
        if (!table || !table.length) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showConfirm(-1, { title: `The table '${revisionTableControl.dhfValue.name}' with the revision field is empty!`, ok: "Create SIGN", nok: "Cancel" }, () => { res.resolve(""); }, () => { res.reject(); });
            return res;
        }
        else {
            let lastRow = table[table.length - 1];
            for (let column of revisionTableControl.dhfValue.ctrlConfig.columns) {
                if (!lastRow[column.field]) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showConfirm(-1, { title: `The field '${column.name}' in table '${revisionTableControl.dhfValue.name}' is empty!`, ok: "Create SIGN", nok: "Cancel" }, () => { res.resolve(""); }, () => { res.reject(); });
                    return res;
                }
            }
        }
        // no problem!
        res.resolve();
        return res;
    }
    // compares the current Revision from the table with the one from the SIGN with the highest id
    verifyVersionInfo(docId, revisionTableControl, revisionTableColumn) {
        let that = this;
        let res = $.Deferred();
        let currentRevision = revisionTableControl.dhfValue ? this.getVersionFromTable(revisionTableControl.dhfValue.fieldValue, revisionTableColumn) : "";
        let revisionTable = revisionTableControl.dhfValue ? revisionTableControl.dhfValue.name : "";
        if (!currentRevision) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showConfirm(-1, { title: `There is no revision defined in table '${revisionTable}'!`, ok: "Create SIGN", nok: "Cancel" }, () => { res.resolve(""); }, () => { res.reject(); });
        }
        else {
            this.getOtherSigns("", docId).done((otherSIGNs) => {
                if (!otherSIGNs.length) {
                    // first sign... to be created so all is good
                    res.resolve(currentRevision);
                }
                else {
                    let highest = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(otherSIGNs[0]).number;
                    for (let next of otherSIGNs) {
                        highest = Math.max(_matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(next).number, highest);
                    }
                    let highestSIGNId = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(otherSIGNs[0]).type + "-" + highest;
                    _globals__WEBPACK_IMPORTED_MODULE_12__.app.getItemAsync(highestSIGNId).done(function (signItem) {
                        // get the date the sign was created
                        let signCreationDate = new Date(signItem.history[signItem.history.length - 1].date);
                        // go through history of DOC and find the version which existed just before creating the SIGN
                        let docRevisionBeforeSign = that.item.history.length - 1;
                        while (docRevisionBeforeSign >= 0 && new Date(that.item.history[docRevisionBeforeSign].date) <= signCreationDate) {
                            docRevisionBeforeSign--;
                        }
                        docRevisionBeforeSign = that.item.history[docRevisionBeforeSign + 1].version;
                        _globals__WEBPACK_IMPORTED_MODULE_12__.app.getItemAsync(docId, docRevisionBeforeSign).done(function (docBeforeSign) {
                            // now we have the old doc. The revision table might anywhere in one of the properties
                            let previousRevision = "";
                            for (let prop in docBeforeSign) {
                                let valStr = docBeforeSign[prop];
                                if (valStr && valStr.length > 2 && valStr[0] == "{") {
                                    try {
                                        let valJson = JSON.parse(valStr); // this might be a table
                                        if (valJson.ctrlConfig && valJson.ctrlConfig.columns && valJson.ctrlConfig.columns.length) { // pretty sure this is a table
                                            let revisionColumns = valJson.ctrlConfig.columns.filter(column => column.columnType == "type12");
                                            if (revisionColumns.length > 0) { // this is a table with a revision column! we take this
                                                let valFieldStr = valJson.fieldValue; // check if there is a value stored in the table
                                                if (valFieldStr && valFieldStr.length > 2 && valFieldStr[0] == "[") {
                                                    previousRevision = that.getVersionFromTable(valFieldStr, revisionColumns[0].field);
                                                }
                                            }
                                        }
                                    }
                                    catch (e) {
                                    }
                                }
                            }
                            if (currentRevision != previousRevision) {
                                // we assume all is good...
                                res.resolve(currentRevision);
                                return res;
                            }
                            else {
                                _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showConfirm(-1, { title: `The current revision in table '${revisionTable}' is the same as it was in the last created SIGN!`, ok: "Create SIGN", nok: "Cancel" }, () => {
                                    res.resolve(currentRevision);
                                    return res;
                                }, () => {
                                    res.reject();
                                    return res;
                                });
                            }
                        }).fail(function (error) {
                            res.reject(error);
                        });
                    });
                }
            });
        }
        return res;
    }
    getVersionFromTable(table, column) {
        if (!table)
            return "";
        let currentTable = JSON.parse(table);
        if (currentTable.length) {
            let lastRow = currentTable[currentTable.length - 1];
            return lastRow[column];
        }
        return "";
    }
    hasPackage(controls, item) {
        for (var idx = 0; idx < controls.length; idx++) {
            if (controls[idx].fieldId && item[controls[idx].fieldId] && _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldType(item.type, controls[idx].fieldId) === "dhf") {
                // this is a configured dhf field
                let parsed = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.JSON.fromString(item[controls[idx].fieldId]);
                if (parsed.status == "ok") {
                    if (parsed.value.type == "package") {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    createConfirmedDownloadOrSIGN(controls, createFct) {
        let that = this;
        if (!that.docHasContent(controls)) {
            return;
        }
        // check if the document contains smart text and the user needs to verify that it's correct
        var config = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getSmartText();
        if (!config || !config.replacements) {
            config = { "replacements": [] };
        }
        var table = $("<table class='table table-bordered text-left'>");
        $.each(config.replacements, function (optIdx, opt) {
            if (opt.warn) {
                var tr = $("<tr>");
                tr.append($("<td>").html(opt.what));
                tr.append($("<td>").html(opt.with));
                table.append(tr);
            }
        });
        let dateNow = (new Date()).toDateString();
        let allSignatures = that.getSignatures(controls);
        let signatures = allSignatures.filter(function (user) {
            return user && (_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getUserIds().indexOf(user) != -1);
        });
        let msgs = [];
        if (signatures.length != allSignatures.length) {
            msgs.push("There are missing users or users without access in a signature table!");
        }
        if ($(".refreshNeeded:visible").length != 0) {
            msgs.push("Some item selections based on search expressions have not been updated!");
        }
        if ($("tr", table).length > 0 && (that.wasInformedToday !== dateNow || that.wasInformedTodayAbout !== table.html())) {
            msgs.push("Verify whether the following smart text blocks are correct<br/>" + $('<div>').append(table.clone()).html());
        }
        if (msgs.length != 0) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showConfirm(6, { title: msgs.join("<br><br>"), ok: "Yes, continue" }, function () {
                // remember that user was informed about something today
                that.wasInformedToday = dateNow;
                that.wasInformedTodayAbout = table.html();
                createFct(signatures);
            }, function () {
            });
        }
        else {
            createFct(signatures);
        }
    }
    // return number of required signatures (in SIGN docs) and number of given signatures
    getSignatureInfo(item) {
        if (!item) {
            item = this.item;
        }
        return _UI_Controls_docBase___WEBPACK_IMPORTED_MODULE_3__.DocBaseImpl.readSignatureInfo(item);
    }
    getCached(options) {
        let signCache = {};
        let signCacheFields = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldsOfType("signCache", options.type);
        if (signCacheFields.length == 1) {
            let signCacheField = options.item[signCacheFields[0].field.id];
            if (signCacheField) {
                let cached = JSON.parse(signCacheField);
                $.each(cached, function (idx, cache) {
                    let key = cache.fileName.split('.').pop().toLowerCase();
                    signCache[key] = cache.fileId;
                });
            }
        }
        return signCache;
    }
    renderSignDownload(options, body, controls) {
        let that = this;
        // if there's a control to cache signs, get it (note at this time it's not yet rendered, so no need to read it's content)
        let signCache = this.getCached(options);
        // the sign cache is now a lookup per extensions, e.g. signCache["pdf"] = "5745?key\u003dkey_2d6a3cju4dr5qnm9ogvstfqkn2";
        if (options.controlState === _globals__WEBPACK_IMPORTED_MODULE_12__.ControlState.Print || options.controlState === _globals__WEBPACK_IMPORTED_MODULE_12__.ControlState.HistoryView || options.controlState === _globals__WEBPACK_IMPORTED_MODULE_12__.ControlState.Tooltip) {
            return;
        }
        var defaultFormat = mDHF.getDefaultFormat(options.type);
        var formats = [];
        function addOption(format, name, signCache) {
            var pos = (defaultFormat === format) ? 0 : formats.length;
            formats.splice(pos, 0, {
                name: name,
                click: function () {
                    if (signCache[format]) {
                        startDownloadCached(signCache[format]);
                    }
                    else {
                        // create and download the file
                        startDownload(format);
                    }
                }
            });
        }
        if (!that.hideFileOption(options.type, "docx")) {
            addOption("docx", "Word", signCache);
            if (this.hasFileAttachments(options.type, controls, options.item)) {
                addOption("zipdocx", "Word with attachments", {});
            }
        }
        if (!that.hideFileOption(options.type, "pdf")) {
            addOption("pdf", "PDF", signCache);
            if (this.hasFileAttachments(options.type, controls, options.item)) {
                addOption("zippdf", "PDF with attachments", {});
            }
        }
        if (!that.hideFileOption(options.type, "html")) {
            addOption("html", "HTML", signCache);
        }
        if (options.item.docHasPackage) {
            addOption("package", "Package", {});
        }
        var signatureInfo = this.getSignatureInfo();
        // default buttons
        if (signatureInfo.missingSignatures) {
            var request = $("<button class='btn btn-default' style='margin-right:5px !important'>Request Signatures</button>");
            body.append(request);
            request.click(function () {
                var message = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Mail.getCannedMessage("please_sign", "", options.item.id);
                _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Mail.sendMailDlg(signatureInfo.missing.join(","), null, "Please review and sign " + options.item.id, message, "");
            });
        }
        else {
            let markAsTemplates = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldsOfType("markAsTemplate", this.item.type);
            let can = "release_note";
            let subject = "A document has been released ";
            let button = "Send Release Mail";
            let users = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getUserIds();
            if (markAsTemplates.length == 1 && _UI_Controls_markAsTemplate__WEBPACK_IMPORTED_MODULE_4__.MarkAsTemplateImpl.getRequiredApprovals(this.item[markAsTemplates[0].field.id]).length > 0) {
                can = "approve_note";
                subject = "Approval for template ";
                button = "Ask for approval ";
                users = _UI_Controls_markAsTemplate__WEBPACK_IMPORTED_MODULE_4__.MarkAsTemplateImpl.getRequiredApprovals(this.item[markAsTemplates[0].field.id]);
            }
            // normal document which has been approved and completely signed
            var request = $("<button class='btn btn-default' style='margin-right:5px !important'>" + button + "</button>");
            body.append(request);
            request.click(function () {
                var message = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Mail.getCannedMessage(can, "", options.item.id);
                var to = users.filter(function (user) { return user != _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getUser(); });
                _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Mail.sendMailDlg(to.join(), null, subject + options.item.id, message, "");
            });
        }
        if (_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.canReport(options.type)) {
            var download = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.createDropDownButton("Download document", formats, false, "btnDownload");
            body.append(download);
            if (!that.hideFileOption(options.type, "xlsx")) {
                that.getBaseDOCofSIGN(_globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getProject(), options.item)
                    .done(doc => {
                    if (PluginManagerDocuments.hasCustomSection(doc)) {
                        download.after(PluginManagerDocuments.excelButtonControl(() => {
                            startDownload("xlsx");
                            return false;
                        }));
                    }
                });
            }
        }
        else {
            body.append("<div class='inlineHelp'>You have no rights to download documents</div>");
        }
        this.createCompareButton(body, options, controls);
        function startDownload(format) {
            // MATRIX-3721 if user modified title (or something else), ask to save first
            if (_globals__WEBPACK_IMPORTED_MODULE_12__.app.getNeedsSave()) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showError("Save Item", "Please save before downloading the signed item.");
                return;
            }
            // MATRIX-4863 wrap in function for use in async download
            function performDownload() {
                // MATRIX-3721 force the item to be readonly, this prevents tampering while the server (silently creates a new version)
                // unless the user selects something else and comes back (that we need to catch somewhere else...)
                _globals__WEBPACK_IMPORTED_MODULE_12__.matrixApplicationUI.forceReadonly(options.item.id);
                _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.ReportGenerator.DownloadSignedDoc(options.item.id, { format: format });
                var signatureInfo = that.getSignatureInfo();
                if (signatureInfo.missingSignatures && that.dhf_config.warnMissingSign) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showAck(-1, "There are still some signatures missing");
                }
            }
            if (format == "xlsx") {
                that.getBaseDOCofSIGN(_globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getProject(), options.item)
                    .done(doc => {
                    if (PluginManagerDocuments.hasCustomSection(doc)) {
                        performDownload();
                    }
                    else {
                        _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showError("No Custom section", "Only DOC/SIGN with a Custom section can be downloaded as an Excel file.");
                    }
                })
                    .fail(error => {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showError("Error checking DOC", "Unable to load original DOC to check for Excel data");
                });
            }
            else {
                performDownload();
            }
        }
        function startDownloadCached(target) {
            // target is a file attachment url like "5745?key\u003dkey_2d6a3cju4dr5qnm9ogvstfqkn2"
            let clean = target.replace("\u003d", "=");
            let param = (clean.split("?")[1]).split("="); // ["key", "key_2d6a3cju4dr5qnm9ogvstfqkn2"]
            let params = {};
            params[param[0]] = param[1]; // params= {key:"key_2d6a3cju4dr5qnm9ogvstfqkn2"}
            _globals__WEBPACK_IMPORTED_MODULE_12__.app.downloadFromUrl("file/" + clean.split("?")[0], params); // 5745, para,s
        }
    }
    getOtherSigns(thisSign, thisDoc) {
        let that = this;
        let res = $.Deferred();
        let otherSigns = [];
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.getItemAsync(thisDoc).done(function (doc) {
            $.each(doc.downLinks, function (idx, sign) {
                let ref = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(sign.to).id;
                if (that.isDocumentType(_matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(sign.to).type) && ref !== thisSign) {
                    otherSigns.push(ref);
                }
            });
            res.resolve(otherSigns);
        });
        return res;
    }
    createCompareButton(rt, options, controls) {
        let that = this;
        // add button for redlining
        let placeHolderRL = $("<div class='btnCompare'>");
        rt.append(placeHolderRL);
        var versionSelectRL = [];
        let thisSign;
        let thisDoc;
        // find the mother DOC or use as mother DOC if it is already a doc
        if (options.type === "SIGN" && options.item.upLinkList && options.item.upLinkList.length > 0) {
            let ref = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(options.item.upLinkList[0].itemRef).id;
            thisDoc = ref;
            thisSign = options.id;
            versionSelectRL.push({ name: "Current DOC", click: function () { that.redlineDocuments(ref); } });
        }
        else {
            thisDoc = options.id;
        }
        this.getOtherSigns(thisSign, thisDoc).done(function (otherSigns) {
            $.each(otherSigns, function (idx, otherSign) {
                versionSelectRL.splice(0, 0, { name: otherSign + " " + _globals__WEBPACK_IMPORTED_MODULE_12__.app.getItemTitle(otherSign), click: function () { that.redlineDocuments(otherSign); } });
            });
            if (versionSelectRL.length === 1) {
                placeHolderRL.replaceWith(_matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.createDropDownButton("Redline against " + versionSelectRL[0].name, versionSelectRL, false, "btnCompare"));
            }
            else if (versionSelectRL.length > 0) {
                placeHolderRL.replaceWith(_matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.createDropDownButton("Redline against ...", versionSelectRL, false, "btnCompare"));
            }
            else {
                // nothing released yet
                placeHolderRL.remove();
            }
        });
        // add button for side by side compare
        var extras = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getExtrasConfig();
        if (extras && _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.JSON.isTrue(extras.compareInsideX)) {
            let placeHolder = $("<div class='btnCompare'>");
            rt.append(placeHolder);
            var versionSelect = [];
            let thisSign;
            let thisDoc;
            // find the mother DOC or use as mother DOC if it is already a doc
            if (that.isDocumentFormType(options.item.type)) {
                thisDoc = options.id;
            }
            else if (options.item.upLinkList) {
                let docsInList = options.item.upLinkList.filter(function (ul) { return that.isDocumentFormType(_matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(ul.itemRef).type); });
                if (docsInList.length) {
                    let ref = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(docsInList[0].itemRef).id;
                    thisDoc = ref;
                    thisSign = options.id;
                    versionSelect.push({ name: thisDoc + " " + _globals__WEBPACK_IMPORTED_MODULE_12__.app.getItemTitle(thisDoc), click: function () { that.compareDocuments(thisDoc, controls); } });
                }
            }
            if (!thisDoc) {
                // no more history
                placeHolder.remove();
                return;
            }
            that.getOtherSigns(thisSign, thisDoc).done(function (otherSigns) {
                $.each(otherSigns, function (idx, otherSign) {
                    versionSelect.push({ name: otherSign + " " + _globals__WEBPACK_IMPORTED_MODULE_12__.app.getItemTitle(otherSign), click: function () { that.compareDocuments(otherSign, controls); } });
                });
                if (versionSelect.length === 1) {
                    placeHolder.replaceWith(_matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.createDropDownButton("Compare with " + versionSelect[0].name, versionSelect, false, "btnCompare"));
                }
                else if (versionSelect.length > 0) {
                    placeHolder.replaceWith(_matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.createDropDownButton("Compare to ...", versionSelect, false, "btnCompare"));
                }
                else {
                    // nothing released yet
                    placeHolder.remove();
                }
            });
        }
    }
    async compareDocuments(target, otherControls) {
        let that = this;
        let reportProc;
        let ui = $("<div style='width:100%'>");
        ui.append(_matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.getSpinningWait("retrieving documents..."));
        let left;
        let right;
        // show dialog
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.html("").append(ui);
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.addClass("dlg-v-scroll");
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.removeClass("dlg-no-scroll");
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.dialog({
            autoOpen: true,
            title: "Compare documents",
            height: _globals__WEBPACK_IMPORTED_MODULE_12__.app.itemForm.height() * 0.9,
            width: $(document).width() * 0.9,
            modal: true,
            close: function () {
                _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.removeClass("forcePrint");
                $(".compareTools").remove();
            },
            open: function () {
                _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.addClass("forcePrint");
            },
            resizeStop: function (event, ui) {
                _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.resizeDlgContent([]);
            },
            buttons: [{
                    text: 'Ok',
                    class: 'btnCancelIt',
                    click: function () {
                        _globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.dialog("close");
                    }
                }]
        }).resizeDlgContent([], false);
        let otherType = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(target).type;
        if (this.isDocumentFormType(otherType)) {
            // the other document is a DOC need to retrieve it to know if there's any label filters to take into account
            _globals__WEBPACK_IMPORTED_MODULE_12__.app.getItemAsync(target).done(function (otherDOC) {
                let docFilter = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFields(otherType).filter(function (field) {
                    return field.fieldType == "docFilter";
                });
                let otherOptions = { format: "html" };
                if (docFilter.length && otherDOC[docFilter[0].id]) {
                    let filter = JSON.parse(otherDOC[docFilter[0].id]);
                    if (filter.length) {
                        otherOptions.filter = filter.join(",");
                    }
                }
                _globals__WEBPACK_IMPORTED_MODULE_12__.app.startCreateDocumentAsync(target, otherOptions).done(function (result) {
                    mDHF.loadDocument(result.jobId, function (htmlDOM) {
                        right = htmlDOM;
                        that.compareDocumentsContent(that.item.id, target, left, right, ui);
                    });
                });
            });
        }
        else {
            _globals__WEBPACK_IMPORTED_MODULE_12__.app.startCreateDocumentAsync(target, { format: "html" }).done(function (result) {
                mDHF.loadDocument(result.jobId, function (htmlDOM) {
                    right = htmlDOM;
                    that.compareDocumentsContent(that.item.id, target, left, right, ui);
                });
            });
        }
        // start report generation for this DOC or SIGN, if it is a DOC make sure label filters are active
        let thisOptions = { format: "html" };
        if (this.isDocumentFormType(this.item.type) && otherControls && otherControls.length) {
            let labels = await that.getFilterValue(that.getFilterCtrl(this.item.type, otherControls));
            if (labels)
                thisOptions.filter = labels;
        }
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.startCreateDocumentAsync(this.item.id, thisOptions).done(function (result) {
            mDHF.loadDocument(result.jobId, function (htmlDOM) {
                left = htmlDOM;
                that.compareDocumentsContent(that.item.id, target, left, right, ui);
            });
        });
    }
    redlineDocuments(target) {
        let that = this;
        if (_globals__WEBPACK_IMPORTED_MODULE_12__.app.needsSave()) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showError("Please Save", "Plase save before redlining documents.");
            return;
        }
        let ui = $("<div style='width:100%'>");
        ui.append(_matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.getSpinningWait("examining documents..."));
        // show dialog
        let dlg = $("<div class='forcePrint'>").appendTo($("body"));
        let redlining = new _client_plugins_Redlining__WEBPACK_IMPORTED_MODULE_9__.Redlining();
        _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showDialog(dlg, "Redline", ui, $(document).width() * 0.9, _globals__WEBPACK_IMPORTED_MODULE_12__.app.itemForm.height() * 0.9, [{
                text: 'Ok',
                class: 'btnCancelIt',
                click: function () {
                    dlg.dialog("close");
                }
            }], _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_11__.UIToolsConstants.Scroll.Vertical, true, true, () => { redlining.cancelCompare(); dlg.remove(); }, () => { }, () => { dlg.resizeDlgContent([]); });
        redlining.compareDocuments(ui, that.item.id, target);
    }
    filterAlignItems(showDifferent, showSorted) {
        // hide all
        $(".compareItem").hide();
        if (showDifferent && showSorted) {
            // not sorted AND not identical
            //  show sorted                 show different
            $(".compareItem").not(".compareItemOriginal").not(".compareItemSame").show();
        }
        else if (showDifferent && !showSorted) {
            // not sorted AND not identical
            //  show original         show different
            $(".compareItemOriginal").not(".compareItemSame").show();
        }
        else if (!showDifferent && showSorted) {
            $(".compareItem").not(".compareItemOriginal").show();
        }
        else {
            $(".compareItem.compareItemOriginal").show();
        }
    }
    compareDocumentsContent(thisId, otherId, left, right, ui) {
        let that = this;
        let itemHideIdentical = false;
        let itemSortAlign = false;
        if (!left || !right) {
            return;
        }
        left = new _matrixlib_index__WEBPACK_IMPORTED_MODULE_1__.HTMLCleaner($(left).html(), false).getClean(_matrixlib_index__WEBPACK_IMPORTED_MODULE_1__.HTMLCleaner.CleanLevel.Strict, true);
        right = new _matrixlib_index__WEBPACK_IMPORTED_MODULE_1__.HTMLCleaner($(right).html(), false).getClean(_matrixlib_index__WEBPACK_IMPORTED_MODULE_1__.HTMLCleaner.CleanLevel.Strict, true);
        let param = {
            arg: JSON.stringify({ versions: [left, right] })
        };
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.compareHTML(param).done(function (result) {
            ui.html("");
            let ctrls = $("<div class='compareTools'>").appendTo(_globals__WEBPACK_IMPORTED_MODULE_12__.app.dlgForm.parent().find(".ui-dialog-titlebar"));
            let sectionTools = $("<div class='compareToolsGroup'>").appendTo(ctrls);
            let itemTools = $("<div class='compareToolsGroup'>").appendTo(ctrls);
            $('<span class="compareToolsHeader">Sections:</span>').appendTo(sectionTools);
            $('<div class="checkbox compareTool" ><label><input type="checkbox">hide identical sections</label></div>').appendTo(sectionTools).click(function (event) {
                $("input", $(event.delegateTarget)).prop('checked') ? $(".compareRowSame").hide() : $(".compareRowSame").show();
            });
            $(`<div class="checkbox compareTool" ><label><input type="checkbox">hide sections only in ${thisId}</label></div>`).appendTo(sectionTools).click(function (event) {
                $("input", $(event.delegateTarget)).prop('checked') ? $(".compareLeftOnly").hide() : $(".compareLeftOnly").show();
            });
            $(`<div class="checkbox compareTool" ><label><input type="checkbox">hide sections only in ${otherId}</label></div>`).appendTo(sectionTools).click(function (event) {
                $("input", $(event.delegateTarget)).prop('checked') ? $(".compareRightOnly").hide() : $(".compareRightOnly").show();
            });
            $('<span class="compareToolsHeader">Items:</span>').appendTo(itemTools);
            $('<div class="checkbox compareTool" ><label><input type="checkbox">hide identical items</label></div>').appendTo(itemTools).click(function (event) {
                itemHideIdentical = $("input", $(event.delegateTarget)).prop('checked');
                that.filterAlignItems(itemHideIdentical, itemSortAlign);
            });
            $('<div class="checkbox compareTool" ><label><input type="checkbox">sort and align items</label></div>').appendTo(itemTools).click(function (event) {
                itemSortAlign = $("input", $(event.delegateTarget)).prop('checked');
                that.filterAlignItems(itemHideIdentical, itemSortAlign);
            });
            let headers = $("<div class='compareHeaders'>").appendTo(ui);
            $("<div class='compareHeader'>").appendTo(headers).html(`This document (${thisId})`);
            $("<div class='compareHeader'>").appendTo(headers).html(`Other document (${otherId})`);
            that.fillSideBySide($(result.html[0]), $(result.html[1]), ui);
        });
    }
    fillSideBySide(left, right, ui) {
        let buffer = $("<div style='display:none'>").appendTo("body");
        buffer.append(left);
        let row = $("<div>");
        let leftUI = $("<div>");
        let rightUI = $("<div>");
        // add left report - each section one row
        let ssc = $($(".subchapter", buffer)[0]);
        while (ssc && ssc.length > 0) {
            if (ssc.hasClass("subchapter")) {
                row = $("<div class='compareRow compareLeftOnly'>").appendTo(ui);
                leftUI = $("<div class='compareLeft'>").appendTo(row);
                rightUI = $("<div class='compareRight'>").appendTo(row);
            }
            let next = ssc.next();
            leftUI.append(ssc);
            ssc = next;
        }
        ;
        // add right report - if same section (title) exists in left only match it, if not append
        buffer.html("");
        buffer.append(right);
        ssc = $($(".subchapter", buffer)[0]);
        while (ssc && ssc.length > 0) {
            if (ssc.hasClass("subchapter")) {
                row = null;
                $(".compareRow.compareLeftOnly", ui).each(function (lri, lr) {
                    if ($.trim($(".subchapter", lr).text()) == $.trim(ssc.text())) {
                        row = $(lr);
                        row.removeClass("compareLeftOnly");
                        rightUI = $(".compareRight", row);
                        return;
                    }
                    ;
                });
                if (!row) {
                    row = $("<div class='compareRow compareRightOnly'>").appendTo(ui);
                    leftUI = $("<div class='compareLeft'>").appendTo(row);
                    rightUI = $("<div class='compareRight'>").appendTo(row);
                }
            }
            let next = ssc.next();
            rightUI.append(ssc);
            ssc = next;
        }
        ;
        // find sections which match
        $(".compareRow", ui).each(function (ridx, row) {
            // remove all itemspacers (these are added by report engine to have space between items)
            $(".compareRow .itemspacer").remove();
            if (!$(row).hasClass("compareRightOnly") && !$(row).hasClass("compareLeftOnly")) {
                leftUI = $(row).find(".compareLeft");
                rightUI = $(row).find(".compareRight");
                if (leftUI.html() === rightUI.html()) {
                    $(row).addClass("compareRowSame");
                }
                // build lists of all items in sections left and right
                let sortLeft = [];
                let sortRight = [];
                // buffer with name
                $.each($(".wide_item_title", leftUI), function (lii, leftItem) {
                    let lt = $(leftItem).closest("table");
                    lt.addClass("compareItem");
                    sortLeft.push({ itemId: $("a", $(leftItem)).text(), item: lt, existsInBoth: false });
                });
                $.each($(".wide_item_title", rightUI), function (lii, rightItem) {
                    let rt = $(rightItem).closest("table");
                    rt.addClass("compareItem");
                    sortRight.push({ itemId: $("a", $(rightItem)).text(), item: rt, existsInBoth: false });
                });
                // if there are any items either left or right, mark everything in both sections
                if (sortLeft.length > 0 || sortRight.length > 0) {
                    leftUI.children().each(function (idx, c) {
                        $(c).addClass("compareItemOriginal");
                    });
                    rightUI.children().each(function (idx, c) {
                        $(c).addClass("compareItemOriginal");
                    });
                }
                // mark matching and identical items
                $.each(sortLeft, function (lii, lt) {
                    $.each(sortRight, function (rii, rt) {
                        if (lt.itemId == rt.itemId) {
                            lt.existsInBoth = true;
                            rt.existsInBoth = true;
                        }
                        if (lt.item.html() == rt.item.html()) {
                            lt.item.addClass("compareItemSame");
                            rt.item.addClass("compareItemSame");
                        }
                    });
                });
                // sort: first matching in top, than by item id
                sortLeft = sortLeft.sort(function (a, b) {
                    if (a.existsInBoth && !b.existsInBoth) {
                        return -1;
                    }
                    if (b.existsInBoth && !a.existsInBoth) {
                        return 1;
                    }
                    let an = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(a.itemId);
                    let bn = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(b.itemId);
                    let at = an.type + an.isFolder ? "-F" : "";
                    let bt = bn.type + bn.isFolder ? "-F" : "";
                    return at < bt || (at == bt && an.number < bn.number) ? -1 : 1; // there should not be doubles
                });
                sortRight = sortRight.sort(function (a, b) {
                    if (a.existsInBoth && !b.existsInBoth) {
                        return -1;
                    }
                    if (b.existsInBoth && !a.existsInBoth) {
                        return 1;
                    }
                    let an = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(a.itemId);
                    let bn = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(b.itemId);
                    let at = an.type + an.isFolder ? "-F" : "";
                    let bt = bn.type + bn.isFolder ? "-F" : "";
                    return at < bt || (at == bt && an.number < bn.number) ? -1 : 1; // there should not be doubles
                });
                // insert copies of sorted items
                $.each(sortLeft, function (idx, sl) {
                    if (sl.existsInBoth) {
                        // find right idx
                        let rightIdx = 0;
                        // identical id in right must exist
                        while (sortRight[rightIdx].itemId != sl.itemId) {
                            rightIdx++;
                        }
                        let nl = sl.item.clone();
                        nl.removeClass("compareItemOriginal");
                        nl.addClass("compareItemSorted");
                        leftUI.append(nl);
                        let nr = sortRight[rightIdx].item.clone();
                        nr.removeClass("compareItemOriginal");
                        nr.addClass("compareItemSorted");
                        rightUI.append(nr);
                        if (nl.height() > nr.height()) {
                            nr.css("cssText", "margin-bottom:" + (6 + nl.height() - nr.height()) + "px !important");
                            // 10 is the margin of compareitem (which is not part of hight calculation) - 4 pixels magic...
                        }
                        else if (nl.height() < nr.height()) {
                            nl.css("cssText", "margin-bottom:" + (6 + nr.height() - nl.height()) + "px !important");
                        }
                        nl.hide();
                        nr.hide();
                    }
                    else {
                        let nl = sl.item.clone();
                        nl.removeClass("compareItemOriginal");
                        nl.addClass("compareItemSorted");
                        leftUI.append(nl);
                        let nr = $("<div class='compareItem compareItemSorted'>");
                        rightUI.append(nr);
                        nr.height(nl.height());
                        nl.hide();
                        nr.hide();
                    }
                });
                $.each(sortRight, function (idx, sr) {
                    if (sr.existsInBoth) {
                        // did this already
                    }
                    else {
                        let nr = sr.item.clone();
                        nr.removeClass("compareItemOriginal ");
                        nr.addClass("compareItemSorted");
                        rightUI.append(nr);
                        let nl = $("<div class='compareItem compareItemSorted'>");
                        leftUI.append(nl);
                        nl.height(nr.height());
                        nl.hide();
                        nr.hide();
                    }
                });
            }
        });
        buffer.html("");
    }
    getDocumentStatus(item) {
        let status = {};
        let markAsTemplates = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldsOfType("markAsTemplate", item.type);
        let requiredTemplateApprovals = [];
        let templateApprovalStatus = {};
        if (markAsTemplates.length == 1) {
            requiredTemplateApprovals = _UI_Controls_markAsTemplate__WEBPACK_IMPORTED_MODULE_4__.MarkAsTemplateImpl.getRequiredApprovals(item[markAsTemplates[0].field.id]);
            templateApprovalStatus = _UI_Controls_markAsTemplate__WEBPACK_IMPORTED_MODULE_4__.MarkAsTemplateImpl.getTemplateSignatureStatus(item[markAsTemplates[0].field.id]);
        }
        let signatureStatus = _UI_Controls_docBase___WEBPACK_IMPORTED_MODULE_3__.DocBaseImpl.readSignatureInfo(item);
        if (this.isDocumentFormType(item.type)) {
            status.isDoc = true;
            if (requiredTemplateApprovals.length > 0) {
                status.isDocWithTemplate = true;
            }
            else if (markAsTemplates.length == 1 && requiredTemplateApprovals.length == 0) {
                status.isDocWithEmptyTemplate = true;
            }
            // check if there's a signature table and that the status is
            $.each(item, function (key, val) {
                if (val && _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getFieldType(item.type, key) === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_13__.FieldDescriptions.Field_dhf) {
                    // special dhf control
                    var fieldVal = JSON.parse(val);
                    if (fieldVal.type.toLocaleLowerCase() === "signaturebox") {
                        if (fieldVal.fieldValue && JSON.parse(fieldVal.fieldValue).length) {
                            status.isDocWithFilledSignatureTable = true;
                        }
                        else {
                            status.isDocWithEmptySignatureTable = true;
                        }
                    }
                }
            });
            if (!status.isDocWithFilledSignatureTable && !status.isDocWithEmptySignatureTable) {
                status.isDocWithoutSignatureTable = true;
            }
        }
        else if (this.isSignedType(item.type)) {
            status.isSign = true;
            if (requiredTemplateApprovals.length > 0) {
                status.isSignNeedingTemplateApproval = true;
                if (requiredTemplateApprovals.indexOf(_globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getUser()) != -1) {
                    status.isSignNeedingTemplateMyApproval = true;
                }
            }
            else if (templateApprovalStatus.givenSignatures) {
                status.isSignApprovedTemplate = true;
            }
            else if (signatureStatus.hasSignature && signatureStatus.missingSignatures) {
                status.isSignNeedingSignature = true;
            }
            else if (signatureStatus.hasSignature) {
                status.isSignCompletlySigned = true;
            }
            if (!status.isSignNeedingTemplateApproval && !status.isSignApprovedTemplate && !status.isSignNeedingSignature && !status.isSignCompletlySigned) {
                status.isSignNoSignatureNoTemplate = true;
            }
        }
        else {
            // not a doc not a sign
        }
        return status;
    }
    static excelButtonControl(click) {
        const tooltip = `Export Custom sections to an Excel file.\nThis only works with Custom sections, other parts of the document are ignored.\nThe Custom sections should ideally be tables.`;
        return $(`<button class='btn btn-default' title='${tooltip}' style='margin-right:5px'>Excel Export</button>`)
            .click(click);
    }
}
class ColumnTypesInfo {
    constructor(config) {
        this.editorOfType = {
            type0: _FieldHandlers__WEBPACK_IMPORTED_MODULE_14__.ColumnEditor.textline,
            type1: _FieldHandlers__WEBPACK_IMPORTED_MODULE_14__.ColumnEditor.text,
            type2: _FieldHandlers__WEBPACK_IMPORTED_MODULE_14__.ColumnEditor.versionletter,
            type3: _FieldHandlers__WEBPACK_IMPORTED_MODULE_14__.ColumnEditor.none,
            type4: _FieldHandlers__WEBPACK_IMPORTED_MODULE_14__.ColumnEditor.user,
            type5: _FieldHandlers__WEBPACK_IMPORTED_MODULE_14__.ColumnEditor.none,
            type6: _FieldHandlers__WEBPACK_IMPORTED_MODULE_14__.ColumnEditor.signaturemeaning,
            type7: _FieldHandlers__WEBPACK_IMPORTED_MODULE_14__.ColumnEditor.eco,
            type8: _FieldHandlers__WEBPACK_IMPORTED_MODULE_14__.ColumnEditor.ecocapa,
            type9: _FieldHandlers__WEBPACK_IMPORTED_MODULE_14__.ColumnEditor.date,
            //        type10:ColumnEditor.groupuser, // allow user to select a group or a user to sign
            type11: _FieldHandlers__WEBPACK_IMPORTED_MODULE_14__.ColumnEditor.group,
            type12: _FieldHandlers__WEBPACK_IMPORTED_MODULE_14__.ColumnEditor.revision,
            type13: _FieldHandlers__WEBPACK_IMPORTED_MODULE_14__.ColumnEditor.date_today,
            type14: _FieldHandlers__WEBPACK_IMPORTED_MODULE_14__.ColumnEditor.number
        };
        this.nameOfType = {
            type0: "Text Line",
            type14: "Number",
            type1: "Rich Text",
            type4: "Name",
            type9: "Date",
            type13: "Date (auto)",
            type2: "Version Letter",
            type6: "Signature Meaning",
            type3: "eSignature Signature",
            type5: "eSignature Date",
            type7: "ECO",
            type8: "ECO/CAPA",
            //        type10: "Name / Group",
            type11: "Group / Role",
            type12: "Revision"
        };
        this.config = config;
    }
    getCustomTypeDef(type) {
        if (this.config.customColumns) {
            for (var idx = 0; idx < this.config.customColumns.length; idx++) {
                if (this.config.customColumns[idx].type === type) {
                    return this.config.customColumns[idx];
                }
            }
        }
        return null;
    }
    getCustomDropDownOptions(type) {
        if (this.config.customColumns) {
            for (var idx = 0; idx < this.config.customColumns.length; idx++) {
                if (this.config.customColumns[idx].type === type) {
                    return this.config.customColumns[idx].options;
                }
            }
        }
        return null;
    }
    getNames(currentColumns) {
        let names = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.JSON.clone(this.nameOfType);
        //type7: "ECO", // don't show as option
        //type8: "ECO/CAPA",// don't show as option
        if (currentColumns.indexOf("type7") == -1) {
            delete names.type7;
        }
        if (currentColumns.indexOf("type8") == -1) {
            delete names.type8;
        }
        if (this.config.customColumns) {
            for (var idx = 0; idx < this.config.customColumns.length; idx++) {
                names[this.config.customColumns[idx].type] = this.config.customColumns[idx].name;
            }
        }
        return names;
    }
    getEditorOfType(type) {
        var colDef = this.getCustomTypeDef(type);
        if (colDef) {
            return (colDef.editor ? colDef.editor : "select");
        }
        return (this.editorOfType[type]);
    }
    getOptionsOfType(type) {
        var colDef = this.getCustomTypeDef(type);
        if (colDef) {
            return colDef.options;
        }
        return [];
    }
    getNameOfType(type) {
        var colDef = this.getCustomTypeDef(type);
        if (colDef) {
            return colDef.name;
        }
        return this.nameOfType[type];
    }
}
var mDHF;
function InitializePluginManagerDocuments() {
    mDHF = new PluginManagerDocuments();
    _PluginManager__WEBPACK_IMPORTED_MODULE_0__.plugins.register(mDHF);
}


/***/ }),
/* 14 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RestDB: () => (/* binding */ RestDB)
/* harmony export */ });
/* harmony import */ var _DBCache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(15);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _PluginManagerDocuments__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(13);
/* harmony import */ var _PluginManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(12);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _TestManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(52);







class RestDB {
    constructor(init) {
        this.restConnection = init;
    }
    setProject(project) {
        this._project = project;
        this.restConnection.setProject(project);
    }
    setSettingJSON(key, valueJSON) {
        let that = this;
        var res = $.Deferred();
        var newSetting = JSON.stringify(valueJSON);
        try {
            var check = JSON.parse(newSetting);
            let setSetting = {
                value: newSetting,
                key: key,
                reason: "setting change"
            };
            this.restConnection.postServer(this._project + "/setting", setSetting).done(function () {
                _globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.ItemConfig.setSettingJSON(key, valueJSON);
                res.resolve();
            }).fail(function (jqxhr, textStatus, error) {
                that.showRestError(jqxhr, textStatus, error);
                res.reject();
            });
        }
        catch (err) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Bad value of setting.", "Error was:" + err);
            res.reject();
        }
        return res;
    }
    readSettingJSONAsync(key, otherProject, noRetry) {
        var res = $.Deferred();
        this.restConnection.getServer((otherProject ? otherProject : _globals__WEBPACK_IMPORTED_MODULE_4__.matrixSession.getProject()) + "/setting", noRetry).done(function (settings) {
            var found = false;
            if (settings.settingList) {
                $.each(settings.settingList, function (idx, setting) {
                    if (setting.key === key && setting.value && setting.value.indexOf('{') !== -1) {
                        // assume it a json
                        var val = _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.JSON.fromString(setting.value);
                        if (val.status === "ok") {
                            found = true;
                            res.resolve(val.value);
                        }
                    }
                });
            }
            if (!found) {
                res.resolve({});
            }
        }).fail(function () {
            res.reject();
        });
        return res;
    }
    setSettingCustomerJSON(settingId, valueJSON) {
        let that = this;
        let res = $.Deferred();
        _globals__WEBPACK_IMPORTED_MODULE_4__.restConnection.postServer("all/setting", {
            key: settingId,
            value: JSON.stringify(valueJSON),
            reason: "setting change"
        }).done(function (result) {
            res.resolve();
        }).fail(function (jqxhr, textStatus, error) {
            that.showRestError(jqxhr, textStatus, error);
            res.reject();
        });
        return res;
    }
    readSettingCustomerJSONAsync(key) {
        var res = $.Deferred();
        this.restConnection.getServer("all/setting").done(function (settings) {
            var found = false;
            if (settings.settingList) {
                $.each(settings.settingList, function (idx, setting) {
                    if (setting.key === key && setting.value && setting.value.indexOf('{') !== -1) {
                        // assume it a json
                        var val = _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.JSON.fromString(setting.value);
                        if (val.status === "ok") {
                            found = true;
                            res.resolve(val.value);
                        }
                    }
                });
            }
            if (!found) {
                res.resolve({});
            }
        });
        return res;
    }
    // set or overwrite the default cache: used by jira addon to avoid caching
    setCache(externalCache) {
        this.dbCache = externalCache;
    }
    retrieveTreeAsync() {
        let that = this;
        var res = $.Deferred();
        let date = _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.URL.getParameterByName(window.location.href, "atDate");
        let dp = date ? ("&atDate=" + date) : "";
        if (date) {
            _globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.ItemConfig.activateTimewarp(date);
        }
        this.retrieveConfigAsync().done(function (project) {
            that.restConnection.getProject("tree?fancy" + dp).done(async function (result) {
                result = RestDB.filterLegacyReportCat(result);
                _PluginManager__WEBPACK_IMPORTED_MODULE_3__.plugins.initProject(that._project);
                _TestManager__WEBPACK_IMPORTED_MODULE_5__.mTM.InitializeProject();
                that.dbCache = new _DBCache__WEBPACK_IMPORTED_MODULE_0__.DBCache();
                await that.dbCache.initMatrixTree(result, _globals__WEBPACK_IMPORTED_MODULE_4__.app.isMedical());
                res.resolve({ tree: result, project: project });
            });
        });
        return res;
    }
    retrieveTreeAndItem(itemId) {
        let that = this;
        var res = $.Deferred();
        let date = _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.URL.getParameterByName(window.location.href, "atDate");
        let dp = date ? ("&atDate=" + date) : "";
        if (date) {
            _globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.ItemConfig.activateTimewarp(date);
        }
        this.retrieveConfigAsync().done(function (project) {
            if (itemId) {
                // check whether to show an item / folder (and not a dashboard or something)
                let isItem = (_globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.ItemConfig.getCategories(true).indexOf(_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(itemId).type) != -1);
                let itemToGet = isItem ? itemId : "F-DOC-1";
                let history = "?history=true";
                that.restConnection.getProject("item/" + itemToGet + history + "&withTree=1", false).done(async function (result) {
                    // init tree
                    let tree = RestDB.filterLegacyReportCat(result.contextTree.children);
                    for (let t of tree) {
                        if (t.id.startsWith("F-") && !t.children) {
                            t.children = [];
                        }
                    }
                    _PluginManager__WEBPACK_IMPORTED_MODULE_3__.plugins.initProject(that._project);
                    _TestManager__WEBPACK_IMPORTED_MODULE_5__.mTM.InitializeProject();
                    _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.ContextFrames.init();
                    that.dbCache = new _DBCache__WEBPACK_IMPORTED_MODULE_0__.DBCache();
                    await that.dbCache.initMatrixTree(tree, _globals__WEBPACK_IMPORTED_MODULE_4__.app.isMedical());
                    let item = that.parseItemJSON(itemId, result);
                    if (that.dbCache.isFolder(itemId)) {
                        item['children'] = [];
                    }
                    res.resolve({ item: isItem ? item : null, tree: tree, project: project });
                }).fail(function (error) {
                    // item might have been deleted
                    that.loadTreeWithoutItem(dp).done((db) => {
                        res.resolve({ item: null, tree: db, project: project });
                    });
                });
            }
            else {
                that.loadTreeWithoutItem(dp).done((db) => {
                    res.resolve({ item: null, tree: db, project: project });
                });
            }
        });
        return res;
    }
    loadTreeWithoutItem(dp) {
        let that = this;
        let res = $.Deferred();
        that.restConnection.getProject("tree?fancy" + dp).done(async function (result) {
            result = RestDB.filterLegacyReportCat(result);
            _PluginManager__WEBPACK_IMPORTED_MODULE_3__.plugins.initProject(that._project);
            _TestManager__WEBPACK_IMPORTED_MODULE_5__.mTM.InitializeProject();
            that.dbCache = new _DBCache__WEBPACK_IMPORTED_MODULE_0__.DBCache();
            await that.dbCache.initMatrixTree(result, _globals__WEBPACK_IMPORTED_MODULE_4__.app.isMedical());
            res.resolve(result);
        });
        return res;
    }
    static filterLegacyReportCat(result) {
        let enableLegacyReport = _globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.ItemConfig != undefined ? _globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.ItemConfig.getExtrasConfig().enableLegacyReport : undefined;
        if (enableLegacyReport == undefined || enableLegacyReport == "0") {
            //Let remove legacy report cat from the tree
            let fReport1Index = result.findIndex((o) => { return o.id == "F-REPORT-1"; });
            if (fReport1Index != -1) {
                result[fReport1Index].children = [];
            }
        }
        if (enableLegacyReport == "1") {
            result = result.filter((item) => { return item.id != "F-REPORT-1"; });
        }
        return result;
    }
    doesExist(itemId) {
        return this.dbCache.doesExist(itemId);
    }
    getChildrenIds(parentId) {
        return this.dbCache.getChildrenIds(parentId);
    }
    getItemFromTree(itemId) {
        return this.dbCache.getItemFromCache(itemId);
    }
    getItemAsync(itemId, ignoreErrors, includeHistory) {
        let that = this;
        var res = $.Deferred();
        let history = includeHistory ? "?history=true" : "";
        if (this.dbCache.isFolder(itemId)) {
            this.restConnection.getProject("item/" + itemId + history, ignoreErrors).done(function (result) {
                var item = that.parseItemJSON(itemId, result);
                item['children'] = [];
                res.resolve(item);
            }).fail(function (error) {
                res.reject(error);
            });
        }
        else {
            this.restConnection.getProject("item/" + itemId + history, ignoreErrors).done(function (result) {
                //TODO update tree (e.g if title changed or parent?)
                var item = that.parseItemJSON(itemId, result);
                res.resolve(item);
            }).fail(function (error) {
                res.reject(error);
            });
        }
        return res;
    }
    getNeedlesAsync(searchExpr, up, down, fields, labels, ignoreFilters) {
        var res = $.Deferred();
        let params = {};
        if (up || down)
            params.links = up && down ? "down,up" : up ? "up" : "down";
        if (fields)
            params.fieldsOut = fields;
        if (labels)
            params.labels = 1;
        let items = [];
        params.search = "mrql:" + searchExpr;
        var labelFilter = _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.LabelTools.getFilter();
        if (!ignoreFilters && labelFilter && labelFilter.length > 0) {
            params.filter = labelFilter;
        }
        _globals__WEBPACK_IMPORTED_MODULE_4__.restConnection.postProject("needle", params, true).done(function (results) {
            $.each(results.needles, function (idx, needle) {
                var item = {
                    id: _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(needle.itemOrFolderRef).id,
                    title: needle.title,
                    type: _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(needle.itemOrFolderRef).type,
                    downLinks: [],
                    upLinks: [],
                    modDate: needle.lastModDate,
                    creationDate: needle.creationDate,
                    isUnselected: 0,
                    labels: needle.labels ? needle.labels.split(",").map(function (label) { return label.substr(1, label.length - 2); }) : []
                };
                if (needle.fieldVal) {
                    $.each(needle.fieldVal, function (jdx, fieldVal) {
                        item[fieldVal.id.toString()] = fieldVal.value;
                    });
                }
                for (var idx = 0; needle.downLinkList && idx < needle.downLinkList.length; idx++) {
                    var tol = needle.downLinkList[idx].itemRef;
                    item.downLinks.push({ to: _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(tol).id, title: needle.downLinkList[idx].title, modDate: needle.downLinkList[idx].modDate });
                }
                for (var idx = 0; needle.upLinkList && idx < needle.upLinkList.length; idx++) {
                    var tol = needle.upLinkList[idx].itemRef;
                    item.upLinks.push({ to: _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(tol).id, title: needle.upLinkList[idx].title, modDate: needle.upLinkList[idx].modDate });
                }
                items.push(item);
            });
            res.resolve(items);
        }).fail(function () {
            res.reject();
        });
        return res;
    }
    getItemProjectAsync(project, itemId, ignoreErrors, includeHistory) {
        let that = this;
        var res = $.Deferred();
        let history = includeHistory ? "?history=true" : "";
        this.restConnection.getServer(project + "/item/" + itemId + history, ignoreErrors).done(function (result) {
            var item = that.parseItemJSON(itemId, result);
            res.resolve(item);
        }).fail(function (error) {
            res.reject(error);
        });
        return res;
    }
    getProjectItemAsync(project, itemId, includeHistory) {
        let that = this;
        var res = $.Deferred();
        let history = includeHistory ? "?history=true" : "";
        this.restConnection.getServer(project + "/item/" + itemId + history).done(function (result) {
            var item = that.parseItemJSON(itemId, result);
            res.resolve(item);
        }).fail(function (error) {
            res.reject(error);
        });
        return res;
    }
    startReportAsync(itemId, reportOptions) {
        var res = $.Deferred();
        reportOptions["url"] = _globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.matrixBaseUrl;
        reportOptions["resturl"] = _globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.matrixRestUrl;
        if (_globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.ItemConfig.getTimeWarp()) {
            reportOptions["atDate"] = _globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.ItemConfig.getTimeWarp();
        }
        let isSign = _PluginManagerDocuments__WEBPACK_IMPORTED_MODULE_2__.mDHF.isSignedType(_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(itemId).type);
        this.restConnection.postProject(((reportOptions.inline && isSign) ? "signedreport/" : "report/") + itemId, reportOptions).done(function (result) {
            res.resolve(result);
        });
        return res;
    }
    canLaunchReport() {
        return this.restConnection.getServer("all/job");
    }
    startCreateDocumentAsync(itemId, reportOptions) {
        var res = $.Deferred();
        reportOptions["url"] = _globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.matrixBaseUrl;
        reportOptions["resturl"] = _globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.matrixRestUrl;
        let isSign = _PluginManagerDocuments__WEBPACK_IMPORTED_MODULE_2__.mDHF.isSignedType(_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(itemId).type);
        this.restConnection.postProject((isSign ? "signedreport/" : "report/") + itemId, reportOptions).done(function (result) {
            res.resolve(result);
        });
        return res;
    }
    getReportDetails(jobId) {
        var res = $.Deferred();
        var fileparam = "";
        this.restConnection.getProject("job/" + jobId + fileparam).done(function (result) {
            res.resolve(result);
        });
        return res;
    }
    compareHTML(compareParams) {
        return this.restConnection.postServer("all/compareHtml", compareParams);
    }
    download(jobId, file, param) {
        var fileparam = "/" + file;
        this.restConnection.download("job/" + jobId + fileparam, param);
    }
    downloadFromUrl(url, param) {
        this.restConnection.download(url, param);
    }
    downloadInMemory(jobId, file, dataType) {
        var res = $.Deferred();
        var fileparam = "/" + file;
        this.restConnection.getFile("job/" + jobId + fileparam, dataType).done(function (result) {
            res.resolve(result);
        });
        return res;
    }
    downloadInMemoryFromUrl(url) {
        var res = $.Deferred();
        this.restConnection.getFile(url).done(function (result) {
            res.resolve(result);
        });
        return res;
    }
    getType(itemId) {
        if (this.dbCache) {
            return this.dbCache.getType(itemId);
        }
        return "_";
    }
    touchAsync(itemId, depth, comment) {
        return this.restConnection.putProject("touch/" + itemId, { reason: comment, nbLayers: depth }, itemId);
    }
    getIcon(itemId) {
        return this.dbCache.getIcon(itemId);
    }
    parseSearchResult(needle, fieldList) {
        let fullitem = _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(needle.itemOrFolderRef);
        let sr = {
            itemId: fullitem.id, version: fullitem.version, title: needle.title, downlinks: [], uplinks: [], labels: []
        };
        if (fieldList && fieldList.length > 0) {
            sr.fieldVal = needle.fieldVal;
        }
        if (needle.downLinkList) {
            $.each(needle.downLinkList, function (idx, link) {
                sr.downlinks.push(_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(link.itemRef).id);
            });
        }
        if (needle.upLinkList) {
            $.each(needle.upLinkList, function (idx, link) {
                sr.uplinks.push(_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(link.itemRef).id);
            });
        }
        if (needle.labels) {
            let labels = needle.labels.split(",");
            $.each(labels, function (idx, label) {
                sr.labels.push(label.substr(1, label.length - 2));
            });
        }
        return sr;
    }
    searchAsyncMinimalOutput(term, filter, ignoreFilters, crossProject) {
        var res = $.Deferred();
        // Add the minimal outputMode flag
        var params = { search: term };
        if (!ignoreFilters && filter && filter.length > 0) {
            params.filter = filter;
        }
        else {
            var labelFilter = _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.LabelTools.getFilter();
            if (!ignoreFilters && labelFilter && labelFilter.length > 0) {
                params.filter = labelFilter;
            }
        }
        if (params.search.length > 0) {
            if (crossProject) {
                this.restConnection.postServer(crossProject + "/needleminimal", params, true).done(function (result) {
                    res.resolve(result);
                }).fail(function (jqxhr, textStatus, error) {
                    res.reject(jqxhr, textStatus, error);
                });
            }
            else {
                this.restConnection.postProject("needleminimal", params, true).done(function (result) {
                    res.resolve(result);
                }).fail(function (jqxhr, textStatus, error) {
                    res.reject(jqxhr, textStatus, error);
                });
            }
        }
        else {
            res.reject();
        }
        return res;
    }
    searchAsync(term, filter, ignoreFilters, fieldList, crossProject, labels, down, up, treeOrder) {
        let that = this;
        var res = $.Deferred();
        var params = { search: term, id: "" };
        if (ignoreFilters && filter && filter.length > 0) {
            params.filter = filter;
        }
        else {
            var labelFilter = _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.LabelTools.getFilter();
            if (!ignoreFilters && labelFilter && labelFilter.length > 0) {
                params.filter = labelFilter;
            }
        }
        if (fieldList && fieldList.length > 0) {
            params.fieldsOut = fieldList;
        }
        if (treeOrder) {
            params.treeOrder = 1;
        }
        if (labels) {
            params.labels = 1;
        }
        if (down && up) {
            params.links = "up,down";
        }
        else if (down) {
            params.links = "down";
        }
        else if (up) {
            params.links = "up";
        }
        if (_globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.ItemConfig.getTimeWarp()) {
            params.atDate = _globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.ItemConfig.getTimeWarp();
        }
        if (params) {
            if (crossProject) {
                this.restConnection.postServer(crossProject + "/needle", params, true).done(function (result) {
                    var hoi = [];
                    for (var idx = 0; idx < result.needles.length; idx++) {
                        hoi.push(that.parseSearchResult(result.needles[idx], fieldList));
                    }
                    res.resolve(hoi);
                }).fail(function (jqxhr, textStatus, error) {
                    res.reject(jqxhr, textStatus, error);
                });
            }
            else {
                this.restConnection.postProject("needle?", params, true).done(function (result) {
                    var hoi = [];
                    for (var idx = 0; idx < result.needles.length; idx++) {
                        hoi.push(that.parseSearchResult(result.needles[idx], fieldList));
                    }
                    res.resolve(hoi);
                }).fail(function (jqxhr, textStatus, error) {
                    res.reject(jqxhr, textStatus, error);
                });
            }
        }
        else {
            res.reject();
        }
        return res;
    }
    getVersionAsync(itemId, version, includeHistory) {
        let that = this;
        var res = $.Deferred();
        if (this.dbCache.isFolder(itemId)) {
            res.resolve();
        }
        else {
            let history = includeHistory ? "?history=true" : "";
            this.restConnection.getProject("item/" + itemId + "-v" + version + history).done(function (result) {
                //TODO update tree (e.g if title changed or parent?)
                var item = that.parseItemJSON(itemId, result);
                res.resolve(item);
            }).fail(function (error) {
                res.reject(error);
            });
        }
        return res;
    }
    // get an item from another project
    getProjectVersionAsync(project, itemId, version, includeHistory) {
        let that = this;
        var res = $.Deferred();
        if (this.dbCache.isFolder(itemId)) {
            res.resolve();
        }
        else {
            let history = includeHistory ? "?history=true" : "";
            this.restConnection.getServer(project + "/item/" + itemId + "-v" + version + history).done(function (result) {
                var item = that.parseItemJSON(itemId, result);
                res.resolve(item);
            }).fail(function (error) {
                res.reject(error);
            });
        }
        return res;
    }
    // get /cat from another project
    getProjectCat(project) {
        var res = $.Deferred();
        this.restConnection.getServer(project + "/cat").done(function (result) {
            res.resolve(result);
        }).fail(function (error) {
            res.reject(error);
        });
        return res;
    }
    getAuditLogAsync(startAt, maxResults, param) {
        if (!param) {
            param = {};
        }
        param.startAt = startAt;
        param.maxResults = maxResults;
        return this.restConnection.getProject("audit" + "?" + $.param(param, true));
    }
    getAuditDetailsAsync(auditId) {
        var res = $.Deferred();
        let param = {
            auditIdMin: auditId,
            auditIdMax: auditId,
            tech: "yes",
            resolveRef: 1
        };
        this.restConnection.getProject("audit" + "?" + $.param(param, true)).done(function (auditDetails) {
            if (auditDetails.audit && auditDetails.audit.length === 1) {
                res.resolve(auditDetails.audit[0]);
            }
            else {
                res.reject("no audit details with this number");
            }
        }).fail(function (error) {
            res.reject(error);
        });
        return res;
    }
    getAvailableReportsAsync() {
        return this.restConnection.getServer("all/reports");
    }
    getTree(subtreeFilter) {
        return this.dbCache.getTree(subtreeFilter);
    }
    getParentId(itemId) {
        return this.dbCache.getParentId(itemId);
    }
    // return a list of parents of category root
    getCategoryBreadcrumbs(category) {
        return this.dbCache.getCategoryBreadcrumbs(category);
    }
    // return a list of item, parent of item, parent of parent of item...
    getBreadcrumbs(itemId) {
        return this.dbCache.getBreadcrumbs(itemId);
    }
    /* set style of item / folder
        computeFolder: 0=look (folder style from lookup)
        computeFolder: 1=all (all children in folder have style: folder has style)
        computeFolder: 2=any (any of the children has style: folder has style) */
    setStyle(itemIds, style, computeFolder) {
        return this.dbCache.setStyle(itemIds, style, computeFolder);
    }
    getRootOfType(type) {
        return this.dbCache.getRootOfType(type);
    }
    hasChildren(itemId) {
        return this.dbCache.hasChildren(itemId);
    }
    isFolder(itemId) {
        return this.dbCache.isFolder(itemId);
    }
    getItemTitle(itemId) {
        return this.dbCache.getItemTitle(itemId);
    }
    isHiddenLink(itemId) {
        return this.dbCache.isHiddenLink(itemId);
    }
    setHiddenLink(itemId, hidden) {
        this.dbCache.setHiddenLink(itemId, hidden);
    }
    createItemAsync(itemJson, comment, actions, parentId, dontFailOnCleanup) {
        let that = this;
        var res2 = $.Deferred();
        if (itemJson.children) {
            let postItFolder = {
                label: itemJson.title,
                parent: parentId,
                reason: comment
            };
            for (var par in itemJson) {
                if (!itemJson.hasOwnProperty(par))
                    continue;
                if (postItFolder.hasOwnProperty(par))
                    continue;
                if (par === "type")
                    continue;
                if (par === "children")
                    continue;
                if (par === "title")
                    continue;
                if (par === "labels" || par === "linksUp" || par === "linksDown") {
                    continue;
                }
                let c = par;
                postItFolder["fx" + par] = itemJson[par];
            }
            if (dontFailOnCleanup) {
                postItFolder.failOnCleanup = 0;
            }
            this.restConnection.postProject("folder", postItFolder).done(function (result) {
                //TODO GET not serial BUT complete number like REQ-4 from rest
                itemJson.id = "F-" + itemJson.type + "-" + result.serial;
                res2.resolve(that.dbCache.insertItem(itemJson, parentId));
            });
        }
        else {
            let postItItem = {
                title: itemJson.title,
                folder: parentId,
                reason: comment,
                linksUp: "",
                linksDown: ""
            };
            for (var par in itemJson) {
                if (!itemJson.hasOwnProperty(par))
                    continue;
                if (postItItem.hasOwnProperty(par))
                    continue;
                if (par === "type")
                    continue;
                if (par === "labels") {
                    postItItem.labels = itemJson.labels;
                    continue;
                }
                if (par === "linksUp") {
                    postItItem.linksUp = itemJson.linksUp;
                    continue;
                }
                if (par === "linksDown") {
                    postItItem.linksDown = itemJson.linksDown;
                    continue;
                }
                postItItem["fx" + par] = itemJson[par];
            }
            if (dontFailOnCleanup) {
                postItItem.failOnCleanup = 0;
            }
            this.restConnection.postProject("item", postItItem).done(function (result) {
                itemJson.id = itemJson.type + "-" + result.serial;
                var idbparent = that.dbCache.insertItem(itemJson, parentId);
                res2.resolve(idbparent);
            });
        }
        return res2;
    }
    signItemAsync(itemId, password, comment, meaning) {
        var res = $.Deferred();
        let signature = {
            password: password
        };
        if (meaning) {
            signature.acceptComments = meaning;
        }
        this.restConnection.postProject("sign/" + itemId, signature).done(function (result) {
            res.resolve(result);
        }).fail(function (jqxhr, textStatus, error) {
            res.reject(error);
        });
        return res;
    }
    checkPassword(password) {
        return this.restConnection.postServer("/user/" + _globals__WEBPACK_IMPORTED_MODULE_4__.matrixSession.getUser() + "/check", { password: password });
    }
    convertDocAsync(fileNo, comment, targetDocumentFolder, useOriginal) {
        let that = this;
        var res = $.Deferred();
        let convert = {
            fileNo: fileNo,
            reason: comment,
        };
        if (useOriginal) {
            convert.useAsField = 1;
        }
        if (targetDocumentFolder) {
            convert.targetDocumentFolder = targetDocumentFolder;
        }
        this.restConnection.postProject("wordconvert", convert).done(function (result) {
            res.resolve(result);
        }).fail(function (jqxhr, textStatus, error) {
            res.reject(error);
        });
        return res;
    }
    restoreItemAsync(itemId, title, version, comment) {
        let that = this;
        var res = $.Deferred();
        var postIt = {
            reason: comment
        };
        var arg = itemId;
        if (version) {
            postIt.at = version;
        }
        this.restConnection.postProject("item/" + arg, postIt).done(function (result) {
            that.dbCache.deleteItem(itemId);
            var itemJson = { title: title, id: itemId, type: _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(itemId).type };
            that.dbCache.insertItem(itemJson, result.newParent);
            res.resolve({ itemId: itemId, version: version, response: result });
        });
        return res;
    }
    updateItemAsync(itemJson, comment, auditAction, requireVersion) {
        let that = this;
        var res = $.Deferred();
        var putIt = { reason: comment };
        if (typeof itemJson.title !== "undefined") {
            putIt.title = itemJson.title;
        }
        if (auditAction) {
            putIt["auditAction"] = auditAction;
        }
        if (requireVersion) {
            putIt["currentVersion"] = requireVersion;
        }
        for (var par in itemJson) {
            if (!itemJson.hasOwnProperty(par))
                continue;
            if (putIt.hasOwnProperty(par))
                continue;
            if (par === "type")
                continue;
            if (par === "category")
                continue;
            if (par === "links")
                continue;
            if (par === "title")
                continue;
            if (par === "id")
                continue;
            if (isNaN(par)) {
                // it's attribute other than a field
                putIt[par] = itemJson[par];
            }
            else {
                // it's a number so we assume it's a field
                putIt["fx" + par] = itemJson[par];
            }
        }
        this.restConnection.putProject("item/" + itemJson.id, putIt, itemJson.id).done(function (result) {
            if (result !== "putEditItem | You need to set a title argument") {
                var item = that.parseItemJSON(itemJson.id, result);
                if (that.dbCache.isFolder(itemJson.id)) {
                    item['children'] = [];
                }
                that.dbCache.updateItem(itemJson);
                res.resolve(item);
            }
            else {
                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Logger.log("error", "PUT of " + itemJson.id + " FAILED. Error was: putEditItem | You need to set a title argument");
            }
        }).fail(function () {
            // MATRIX-3815
            res.reject("saving failed");
        });
        return res;
    }
    moveItemsAsync(itemIds, newFolder, newPosition, comment) {
        let that = this;
        var res = $.Deferred();
        if (itemIds.indexOf(",") == -1) {
            var putIt = {
                reason: comment,
                newFolder: newFolder,
                newPosition: newPosition + 1
            };
            this.restConnection.putProject("item/" + itemIds, putIt).done(function () {
                that.dbCache.moveItem(itemIds, newFolder, newPosition);
                res.resolve();
            }).fail(function () {
                res.reject();
            });
        }
        else {
            let moveIt = {
                items: itemIds,
                reason: comment
            };
            this.restConnection.postProject("movein/" + newFolder, moveIt).done(function () {
                res.resolve();
            }).fail(function () {
                res.reject();
            });
        }
        return res;
    }
    updateCache(newItem) {
        this.dbCache.insertItem(newItem.item, newItem.parent);
    }
    // replaces the target, a child inside the target or creates a new child with source
    copyFrom(target, source) {
        return this.dbCache.copyFrom(target, source);
    }
    deleteItemAsync(itemId, comment, force) {
        let that = this;
        var res = $.Deferred();
        var par = {
            reason: comment,
            confirm: "no"
        };
        if (force) {
            par.confirm = 'yes';
        }
        this.restConnection.deleteProjectAsync("item/" + itemId, par).done(function () {
            var parentItem = that.dbCache.getParentId(itemId);
            that.dbCache.deleteItem(itemId);
            res.resolve(parentItem);
        }).fail(function () {
            res.reject();
        });
        return res;
    }
    uploadFileProjectAsync(file, progress) {
        return this.restConnection.uploadFileProjectAsync(file, progress);
    }
    fetchFileAsync(url, progress) {
        return this.restConnection.fetchFileAsync(url, progress);
    }
    addDownLinkAsync(fromId, toId, comment) {
        var res = $.Deferred();
        this.restConnection.postProject("itemlink/" + fromId + "/" + toId, { reason: comment }).done(function () {
            res.resolve();
        }).fail(function (jqxhr, textStatus, error) {
            res.reject(jqxhr, textStatus, error);
        });
        return res;
    }
    removeDownLinkAsync(fromId, toId, comment) {
        var res = $.Deferred();
        this.restConnection.deleteProjectAsync("itemlink/" + fromId + "/" + toId, { reason: comment }).done(function () {
            res.resolve();
        }).fail(function () {
            res.reject();
        });
        return res;
    }
    retrieveConfigAsync() {
        var res = $.Deferred();
        this.restConnection.getProject("").done(function (result) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.DateTime.initDateTimeSettings();
            _globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.ItemConfig.init(result);
            res.resolve(result);
        });
        return res;
    }
    showRestError(jqxhr, textStatus, error) {
        _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Server connection error!", _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.getDisplayError(jqxhr, textStatus, error));
    }
    parseItemJSON(itemId, result) {
        var item = {
            id: itemId,
            title: result.title,
            type: this.dbCache.getType(itemId),
            downLinks: [],
            upLinks: [],
            modDate: result.modDate,
            isUnselected: result.isUnselected,
            labels: result.labels ? result.labels : [],
            maxVersion: result.maxVersion
        };
        if (result.docHasPackage) {
            item.docHasPackage = result.docHasPackage;
        }
        if (!result.maxVersion) {
            item.isDeleted = true;
        }
        if (result.fieldValList) {
            for (var fieldVal in result.fieldValList.fieldVal) {
                item[result.fieldValList.fieldVal[fieldVal].id.toString()] = result.fieldValList.fieldVal[fieldVal].value;
            }
        }
        for (var idx = 0; result.downLinkList && idx < result.downLinkList.length; idx++) {
            var tol = result.downLinkList[idx].itemRef;
            item.downLinks.push({ to: _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(tol).id, title: result.downLinkList[idx].title, modDate: result.downLinkList[idx].modDate });
        }
        for (var idx = 0; result.upLinkList && idx < result.upLinkList.length; idx++) {
            var tol = result.upLinkList[idx].itemRef;
            item.upLinks.push({ to: _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(tol).id, title: result.upLinkList[idx].title, modDate: result.upLinkList[idx].modDate });
        }
        // copy original up list
        item.upLinkList = result.upLinkList;
        if (result.availableFormats) {
            item["availableFormats"] = result.availableFormats;
        }
        if (result.selectSubTree) {
            item["selectSubTree"] = result.selectSubTree;
        }
        if (result.requireSubTree) {
            item["requireSubTree"] = result.requireSubTree;
        }
        if (result.crossLinks) {
            item.crossLinks = result.crossLinks;
        }
        var hoi = [];
        for (var idx = 0; result.itemHistoryList && idx < result.itemHistoryList.itemHistory.length; idx++) {
            var theAction = result.itemHistoryList.itemHistory[idx];
            var historyInfo = {
                id: itemId,
                user: theAction.createdByUserLogin,
                action: theAction.auditAction,
                version: theAction.version,
                date: theAction.createdAt,
                dateUserFormat: theAction.createdAtUserFormat,
                title: theAction.title,
                comment: theAction.reason
            };
            // now use the information that undeleted items have been deleted just before
            if (theAction.auditAction === "undelete") {
                if (result.itemHistoryList.itemHistory.length > idx + 1) {
                    var theDelete = result.itemHistoryList.itemHistory[idx + 1];
                    if (theDelete.auditAction !== "delete") {
                        historyInfo["deletedate"] = theDelete.deletedAtUserFormat;
                    }
                }
            }
            hoi.push(historyInfo);
        }
        item['history'] = hoi;
        return item;
    }
}


/***/ }),
/* 15 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DBCache: () => (/* binding */ DBCache)
/* harmony export */ });
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _PluginManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(12);
/* harmony import */ var _PluginManagerDocuments__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(13);
/* harmony import */ var _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2);
/* harmony import */ var _UI_Components__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(16);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(5);







class DBCache {
    constructor() {
        this.db = [];
        this.activities = [];
        this.breadCrumbs = {};
    }
    createVirtualFolder(id, title, icon, color) {
        let folder = { children: [],
            iconClass: icon ? icon : "",
            id: id,
            title: title,
            type: "_" + id
        };
        let cst = {
            settingList: [{
                    key: "texticon",
                    value: JSON.stringify({
                        color: color ? color : _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_3__.UIToolsConstants.CIColorsGrey.G3_GreyDark.color,
                        text: id
                    }),
                    secret: false
                }],
            categoryId: id,
            categoryShort: "_" + id
        };
        _globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.addCategorySetting(cst);
        return folder;
    }
    createVirtualItem(order, id, title, icon) {
        let item = {
            iconClass: icon ? icon : "",
            id: id,
            title: title,
            type: "_" + id,
            order: order
        };
        return item;
    }
    sortChildren(itemId) {
        let obj = this.findInDB(this.db, itemId);
        if (!obj || !obj.children || obj.children.length == 0) {
            // nothing to sort
            return;
        }
        obj.children.sort(function (a, b) { return a.title < b.title ? -1 : 1; });
    }
    async initMatrixTree(init, includeActivity) {
        let that = this;
        // a cache for breadcrumbs
        this.breadCrumbs = {};
        // create the nodes for the WORK tab
        let myWork = this.createVirtualFolder("MYWORK", "My Work");
        let dashboards = this.createVirtualFolder("DASHBOARDS", "Dashboards");
        let tools = this.createVirtualFolder("TOOLS", "Tools");
        let qms = this.createVirtualFolder("QMS", "QMS");
        let auditTools = this.createVirtualFolder("AUDIT", "Audit Tools");
        let connectionTools = this.createVirtualFolder("ADDONS", "Add Ons");
        let branches = this.createVirtualFolder("BRANCHES", "Branching");
        let imports = this.createVirtualFolder("COMPOSE", "Compose");
        let otherTools = this.createVirtualFolder("OTHER", "Other");
        let drawers = [myWork, auditTools, branches, imports, dashboards, connectionTools, tools, otherTools, qms];
        //
        if (includeActivity) {
            if (!_globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getTimeWarp()) {
                auditTools.children.push(this.createVirtualItem(2000, "DELETED", "Deleted Items", "fal fa-trash"));
            }
            if (_globals__WEBPACK_IMPORTED_MODULE_5__.matrixSession.hasAgileSync() && !_globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getTimeWarp()) {
                connectionTools.children.push(this.createVirtualItem(1000, "SYNC", "Agile Sync", "fal fa-sync-alt"));
            }
            ;
            if (_globals__WEBPACK_IMPORTED_MODULE_5__.app.auditTrailAvailable()) {
                auditTools.children.push(this.createVirtualItem(4000, "TAGS", "Tags", "fal fa-tags"));
                auditTools.children.push(this.createVirtualItem(1000, "CHANGES", "Changes", "fal fa-calendar-alt"));
                if (_globals__WEBPACK_IMPORTED_MODULE_5__.matrixSession.hasDocs() && !_globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getTimeWarp()) {
                    auditTools.children.push(this.createVirtualItem(5000, "DOCS", "Document Changes and Downloads", "fal fa-file-alt"));
                }
                if (_globals__WEBPACK_IMPORTED_MODULE_5__.matrixSession.hasDocs() && !_globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getTimeWarp()) {
                    myWork.children.push(this.createVirtualItem(3000, "MYDOCS", "My Signatures", "fal fa-file-signature"));
                }
            }
            let toolIcons = ["utensil-knife", "shovel-snow", "hammer", "screwdriver", "axe", "shovel", "knife-kitchen"];
            let pages = await _PluginManager__WEBPACK_IMPORTED_MODULE_1__.plugins.getProjectPages();
            for (let page of pages) {
                // default place for addons = TOOLS
                page.folder = page.folder ? page.folder : "OTHER";
                page.folderTitle = page.folderTitle ? page.folderTitle : "Other Tools";
                let targets = drawers.filter(function (d) {
                    return d.id == page.folder;
                });
                if (targets.length == 0) {
                    let targetFolder = that.createVirtualFolder(page.folder, page.folderTitle);
                    drawers.push(targetFolder);
                    targets = [targetFolder];
                }
                targets[0].children.push(that.createVirtualItem(page.order, page.id, page.title, page.icon ? page.icon : ("fal fa-" + toolIcons[idx % toolIcons.length])));
            }
        }
        if ((typeof _PluginManagerDocuments__WEBPACK_IMPORTED_MODULE_2__.mDHF !== "undefined" || includeActivity) && _globals__WEBPACK_IMPORTED_MODULE_5__.app) {
            // remove the empty drawers
            drawers = drawers.filter(function (d) {
                return d.children.length > 0;
            });
            // sort the items in the drawer
            $.each(drawers, function (dIdx, drawer) {
                drawer.children.sort(function (tool1, tool2) {
                    if (tool1.order < tool2.order)
                        return -1;
                    if (tool1.order > tool2.order)
                        return 1;
                    if (tool1.id < tool2.id)
                        return -1;
                    if (tool1.id > tool2.id)
                        return 1;
                    return 0;
                });
            });
            // add to navbar
            if (_UI_Components__WEBPACK_IMPORTED_MODULE_4__.NavBar.isEnabled()) {
                let folderNames = [];
                $.each(drawers, function (dIdx, drawer) {
                    that.db.push(drawer);
                    folderNames.push(drawer.id);
                });
                _UI_Components__WEBPACK_IMPORTED_MODULE_4__.NavBar.setWorkFolders(folderNames);
            }
            else {
                let work = this.createVirtualFolder("TOOLS", "Tools");
                work.children = drawers;
                // add to project folder
                this.db.push({
                    children: [work],
                    icon: "projectw.png",
                    id: "F-PROJECT",
                    title: (_PluginManagerDocuments__WEBPACK_IMPORTED_MODULE_2__.mDHF && _PluginManagerDocuments__WEBPACK_IMPORTED_MODULE_2__.mDHF.getToolFolderName()) ? _PluginManagerDocuments__WEBPACK_IMPORTED_MODULE_2__.mDHF.getToolFolderName() : "Project, Reports & Controlled Documents",
                    type: "_PROJECT"
                });
            }
        }
        this.groupDefintion = _globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig ? _globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getCategoryGroupConfig() : null;
        if (this.groupDefintion) {
            $.each(this.groupDefintion.groups, function (gidx, group) {
                // MATRIX-1557 delete group kids cache
                group.kids = null;
            });
        }
        this.groupPos = this.db.length; // default pos for groups
        // add all items not in a group
        for (var idx = 0; idx < init.length; idx++) {
            if (typeof _PluginManagerDocuments__WEBPACK_IMPORTED_MODULE_2__.mDHF !== "undefined" && _PluginManagerDocuments__WEBPACK_IMPORTED_MODULE_2__.mDHF.isDocumentType(init[idx].type) && _PluginManagerDocuments__WEBPACK_IMPORTED_MODULE_2__.mDHF.showInProjectFolder(init[idx].type) && !_UI_Components__WEBPACK_IMPORTED_MODULE_4__.NavBar.isEnabled()) {
                this.db[0].children.push(init[idx]);
            }
            else {
                var inGroup = false;
                if (this.groupDefintion) {
                    // casting group from definition to allow to add kids
                    $.each(this.groupDefintion.groups, function (gidx, group) {
                        // [{"name":"Design Input", "color":"brown","text":"DI", "categories":["DI1","DI2","DI3","DI3"]}]
                        if (!group.kids) {
                            group.kids = [];
                        }
                        if (group.categories.indexOf(init[idx].type) !== -1) {
                            inGroup = true;
                            group.kids.push(init[idx]);
                        }
                    });
                }
                if (!inGroup) {
                    this.db.push(init[idx]);
                }
            }
        }
        // insert groups
        if (this.groupDefintion) {
            var autoPos = 0; // in case there is no position specified
            // casting group to allow to add DB items
            $.each(this.groupDefintion.groups, function (gidx, group) {
                //         [{"name":"Design Input", "color":"brown","text":"DI", "categories":["DI1","DI2","DI3","DI3"],"helpPage":"www.matrixreq.com"}]
                var gi = {
                    children: group.kids,
                    icon: "project.png",
                    id: "F-" + group.text,
                    title: group.name,
                    type: "_" + group.text
                };
                var position = that.groupPos + (group.position ? group.position : autoPos);
                autoPos++;
                if (position >= that.db.length) {
                    that.db.push(gi);
                }
                else {
                    that.db.splice(position, 0, gi);
                }
                let cst = {
                    settingList: [{
                            key: "texticon",
                            value: JSON.stringify({
                                color: group.color,
                                text: group.text
                            }),
                            secret: false
                        }],
                    categoryId: "_" + group.text,
                    categoryShort: "_" + group.text
                };
                _globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.addCategorySetting(cst);
            });
        }
        _PluginManager__WEBPACK_IMPORTED_MODULE_1__.plugins.filterProject(this.db);
    }
    initConfigTree(init) {
        let that = this;
        // add all items not in a group
        for (var idx = 0; idx < init.length; idx++) {
            this.db.push(init[idx]);
        }
    }
    /** getTree returns a tree or a sub tree of the project.
     * this call is synchronous. The database tree is created once during the
     * initialization and filtered after as needed.
     *
     * @param {type} subtreeFilter
     * @returns tree object
     */
    getTree(subtreeFilter) {
        if ((typeof subtreeFilter) === 'undefined' || subtreeFilter.length === 0) {
            return this.db;
        }
        var st = [];
        for (var idx = 0; idx < this.db.length; idx++) {
            if (subtreeFilter.indexOf(this.db[idx].type) !== -1) {
                st.push(this.db[idx]);
            }
            if (this.db[idx].type[0] === "_") {
                // also look in project filter. There are some 'hidden' trees like REPORT, ECO, CAPA, SIGN...
                // examples of these meta folders are _PROJECT
                var stree = this.db[idx].children;
                for (var sdx = 0; sdx < stree.length; sdx++) {
                    if (subtreeFilter.indexOf(stree[sdx].type) !== -1) {
                        st.push(stree[sdx]);
                    }
                }
            }
        }
        return st;
    }
    getParentId(itemId) {
        return this.findParentId(this.db, itemId);
    }
    // this is actually really expensive (it's a depth first search, so for category roots we cache the results)
    getCategoryBreadcrumbs(category) {
        if (!this.breadCrumbs[category]) {
            this.breadCrumbs[category] = this.getBreadcrumbs("F-" + category + "-1");
        }
        return this.breadCrumbs[category];
    }
    // this is actually really expensive (it's a depth first search, so for category roots we cache the results)
    getBreadcrumbs(itemId) {
        let all = [itemId];
        this.findParentId(this.db, itemId, all);
        return all;
    }
    getType(itemId) {
        var ir = _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Item.parseRef(itemId);
        if (ir.type !== "") {
            return ir.type;
        }
        // otherwise the id is not a normal id, but something special, like "-1" for "Deleted items... ask the DB
        var obj = this.findInDB(this.db, itemId);
        if (obj && obj.type) {
            return obj.type;
        }
        // no idea...
        return "";
    }
    getIcon(itemId) {
        var obj = this.findInDB(this.db, itemId);
        if (obj && obj.icon) {
            return obj.icon;
        }
        return null;
    }
    /* set style of item / folder
        computeFolder: 0=look (folder style from lookup)
        computeFolder: 1=all (all children in folder have style: folder has style)
        computeFolder: 2=any (any of the children has style: folder has style) */
    setStyle(itemIds, style, computeFolder) {
        this.setStyleRec(this.db, itemIds, style, computeFolder);
    }
    setStyleRec(folder, itemIds, style, computeFolder) {
        let that = this;
        let allOrAny = computeFolder == 1 ? true : false;
        $.each(folder, function (idx, idb) {
            if (idb.children) {
                if (idb.children.length == 0 && computeFolder == 1) {
                    allOrAny = false;
                }
                else {
                    // a folder
                    let children = that.setStyleRec(idb.children, itemIds, style, computeFolder);
                    let color = false;
                    switch (computeFolder) {
                        case 0:
                            color = itemIds.indexOf(idb.id) != -1;
                            break;
                        case 1:
                            allOrAny = allOrAny && children;
                            color = children;
                            break;
                        case 2:
                            allOrAny = allOrAny || children;
                            color = children;
                            break;
                    }
                    if (color && (idb.children.length || computeFolder == 0)) {
                        idb.extraStyle = style;
                    }
                    ;
                }
            }
            else {
                // an item
                if (itemIds.indexOf(idb.id) != -1) {
                    idb.extraStyle = style;
                    if (computeFolder == 2) {
                        allOrAny = true;
                    }
                }
                else if (computeFolder == 1) {
                    allOrAny = false;
                }
            }
        });
        return allOrAny;
    }
    isFolder(itemId) {
        var obj = this.findInDB(this.db, itemId);
        if (!obj)
            return false;
        return obj.children ? true : false;
    }
    getItemTitle(itemId) {
        var obj = this.findInDB(this.db, itemId);
        if (!obj)
            return _globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ITEM_DOES_NOT_EXIST;
        return obj.title;
    }
    getItemType(itemId) {
        var obj = this.findInDB(this.db, itemId);
        if (!obj)
            return _globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ITEM_DOES_NOT_EXIST;
        return obj.type;
    }
    isHiddenLink(itemId) {
        var obj = this.findInDB(this.db, itemId);
        if (!obj)
            return true;
        return obj.isUnselected && obj.isUnselected === 1;
    }
    setHiddenLink(itemId, hidden) {
        var obj = this.findInDB(this.db, itemId);
        if (obj)
            obj.isUnselected = hidden;
    }
    hasChildren(itemId) {
        var children = this.findInDB(this.db, itemId).children;
        return (children && children.length > 0);
    }
    doesExist(itemId) {
        var obj = this.findInDB(this.db, itemId);
        return obj ? true : false;
    }
    insertItem(itemJson, parentId) {
        if (typeof parentId !== 'undefined') {
            var parent = this.findInDB(this.db, parentId);
            if (!itemJson.type) {
                itemJson.type = parent.type;
            }
            parent.children.push(itemJson);
            return { parent: parentId, position: parent.children.length - 1, item: itemJson };
        }
        for (var idx = 0; idx < this.db.length; idx++) {
            if (this.db[idx].type === itemJson.type) {
                this.db[idx].children.push(itemJson);
                return { parent: this.db[idx].id, position: this.db[idx].children.length - 1, item: itemJson };
            }
        }
        return null;
    }
    // replaces the target, a child inside the target or creates a new child with source
    copyFrom(target, source) {
        var parent = this.findInDB(this.db, target);
        // check if other tree already exists... if so replace it
        if (!parent) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Logger.log("error", "cannot find parent folder in tree replacement.");
            return false;
        }
        if (parent.id === source.id) {
            this.internalReplace(parent, source);
            return true;
        }
        if (!parent.children) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Logger.log("error", "parent is not a folder.");
            return false;
        }
        for (var idx = 0; idx < parent.children.length; idx++) {
            if (parent.children[idx].id === source.id) {
                // replace child
                this.internalReplace(parent.children[idx], source);
                return true;
            }
        }
        // create a new child and replace
        var newChild = { id: source.id, title: "", type: "" };
        parent.children.push(newChild);
        this.internalReplace(newChild, source);
        return true;
    }
    getRootOfType(category) {
        var groups = [];
        var gdef = _globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getCategoryGroupConfig();
        if (gdef) {
            $.each(gdef.groups, function (gi, g) {
                groups.push("_" + g.text);
            });
        }
        for (var idx = 0; idx < this.db.length; idx++) {
            if (this.db[idx].type === category) {
                return this.db[idx].id;
            }
            if (groups.indexOf(this.db[idx].type) !== -1) {
                for (var j = 0; j < this.db[idx].children.length; j++) {
                    if (this.db[idx].children[j].type === category) {
                        return this.db[idx].children[j].id;
                    }
                }
            }
        }
        return null;
    }
    deleteItem(itemId) {
        return this.deleteItemRec(this.db, itemId);
    }
    moveItem(itemId, newFolder, newPosition) {
        var item = this.findInDB(this.db, itemId);
        if (item) {
            this.deleteItemRec(this.db, itemId);
            this.insertAtRec(this.db, newFolder, newPosition, item);
        }
    }
    updateItem(itemJson) {
        if (typeof itemJson.title == "undefined") {
            // can happen if item is only partially udpated (lables or some fields only)
            return;
        }
        var item = this.findInDB(this.db, itemJson.id);
        if (item) {
            item.title = itemJson.title;
        }
    }
    getChildrenIds(parentId) {
        var ids = [];
        var parent = this.findInDB(this.db, parentId);
        for (var idx = 0; idx < parent.children.length; idx++) {
            ids.push(parent.children[idx].id);
        }
        return ids;
    }
    getItemFromCache(itemId) {
        return this.findInDB(this.db, itemId);
    }
    internalReplace(oldItem, newItem) {
        oldItem.children = newItem.children;
        oldItem.icon = newItem.icon;
        oldItem.isUnselected = newItem.isUnselected;
        oldItem.title = newItem.title;
        oldItem.type = newItem.type;
    }
    findInChildren(node, itemId) {
        if (typeof node.children === 'undefined') {
            return null;
        }
        for (var child = 0; child < node.children.length; child++) {
            var res = this.findInDB(node.children[child], itemId);
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    findInDB(tree, itemId) {
        if (tree.id === itemId) {
            return tree;
        }
        var res = this.findInChildren(tree, itemId);
        if (res) {
            return res;
        }
        for (var idx = 0; idx < tree.length; idx++) {
            if (tree[idx].id === itemId) {
                return tree[idx];
            }
            res = this.findInChildren(tree[idx], itemId);
            if (res) {
                return res;
            }
        }
        return null;
    }
    findParentId(tree, itemId, all) {
        if (tree.id === itemId) { // in case it is a leaf
            return null; // should have found parent!
        }
        if (tree.children) { // in case it is a folder
            for (var idx = 0; idx < tree.children.length; idx++) {
                if (tree.children[idx].id === itemId) {
                    if (all) {
                        all.push(tree.id);
                    }
                    return tree.id;
                }
                // maybe it is a child of it's children
                var res = this.findParentId(tree.children[idx], itemId, all);
                if (res) {
                    if (all) {
                        all.push(tree.id);
                    }
                    return res;
                }
            }
        }
        if (tree.length) { // in case it is a collection of folders
            for (var idx = 0; idx < tree.length; idx++) {
                if (tree[idx].id === itemId) {
                    return null;
                }
                var res = this.findParentId(tree[idx], itemId, all);
                if (res) {
                    return res;
                }
            }
        }
        return null;
    }
    deleteItemRec(tree, itemId) {
        if (typeof tree.children !== 'undefined') {
            for (var idx = 0; idx < tree.children.length; idx++) {
                if (tree.children[idx].id === itemId) {
                    tree.children.splice(idx, 1);
                    return tree;
                }
                var res = this.deleteItemRec(tree.children[idx], itemId);
                if (res) {
                    return res;
                }
            }
        }
        else if (typeof tree.length !== 'undefined') {
            for (var idx = 0; idx < tree.length; idx++) {
                var res = this.deleteItemRec(tree[idx], itemId);
                if (res) {
                    return res;
                }
            }
        }
        return null;
    }
    insertAtRec(tree, newFolder, newPosition, item) {
        //moveDetails:
        // "parentId":sourceNode.parent.key,
        // "index":sourceNode.getIndex()
        if (tree.id === newFolder) {
            if (typeof tree.children !== 'undefined') {
                tree.children.splice(newPosition, 0, item);
                return true;
            }
            else {
                // something went wrong...
                return false;
            }
        }
        else if (typeof tree.children !== 'undefined') {
            // this is a folder
            for (var idx = 0; idx < tree.children.length; idx++) {
                var res = this.insertAtRec(tree.children[idx], newFolder, newPosition, item);
                if (res) {
                    return res;
                }
            }
            return false;
        }
        else if (typeof tree.length !== 'undefined') {
            for (var idx = 0; idx < tree.length; idx++) {
                var res = this.insertAtRec(tree[idx], newFolder, newPosition, item);
                if (res) {
                    return res;
                }
            }
            return false;
        }
        return false;
    }
}


/***/ }),
/* 16 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ItemControl: () => (/* reexport safe */ _ItemForm__WEBPACK_IMPORTED_MODULE_0__.ItemControl),
/* harmony export */   KeyboardShortcuts: () => (/* reexport safe */ _KeyboardShortcuts__WEBPACK_IMPORTED_MODULE_1__.KeyboardShortcuts),
/* harmony export */   ListView: () => (/* reexport safe */ _ProjectList__WEBPACK_IMPORTED_MODULE_4__.ListView),
/* harmony export */   NavBar: () => (/* reexport safe */ _NavigationBar__WEBPACK_IMPORTED_MODULE_2__.NavBar),
/* harmony export */   NavigationBar: () => (/* reexport safe */ _NavigationBar__WEBPACK_IMPORTED_MODULE_2__.NavigationBar),
/* harmony export */   ProjectTree: () => (/* reexport safe */ _ProjectTree__WEBPACK_IMPORTED_MODULE_3__.ProjectTree),
/* harmony export */   ProjectView: () => (/* reexport safe */ _ProjectView__WEBPACK_IMPORTED_MODULE_6__.ProjectView),
/* harmony export */   SearchBox: () => (/* reexport safe */ _SearchBox__WEBPACK_IMPORTED_MODULE_7__.SearchBox),
/* harmony export */   SearchState: () => (/* reexport safe */ _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_5__.SearchState),
/* harmony export */   SearchUpdate: () => (/* reexport safe */ _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_5__.SearchUpdate),
/* harmony export */   SelectMode: () => (/* reexport safe */ _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_5__.SelectMode),
/* harmony export */   TabMode: () => (/* reexport safe */ _NavigationBar__WEBPACK_IMPORTED_MODULE_2__.TabMode),
/* harmony export */   ViewModeSelector: () => (/* reexport safe */ _ViewModeSelector__WEBPACK_IMPORTED_MODULE_8__.ViewModeSelector),
/* harmony export */   initialize: () => (/* reexport safe */ _NavigationBar__WEBPACK_IMPORTED_MODULE_2__.initialize)
/* harmony export */ });
/* harmony import */ var _ItemForm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(17);
/* harmony import */ var _KeyboardShortcuts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(50);
/* harmony import */ var _NavigationBar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(33);
/* harmony import */ var _ProjectTree__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(34);
/* harmony import */ var _ProjectList__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(32);
/* harmony import */ var _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(18);
/* harmony import */ var _ProjectView__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(31);
/* harmony import */ var _SearchBox__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(36);
/* harmony import */ var _ViewModeSelector__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(40);











/***/ }),
/* 17 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ItemControl: () => (/* binding */ ItemControl)
/* harmony export */ });
/* harmony import */ var _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);
/* harmony import */ var _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);
/* harmony import */ var _Controls_titleToolbar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(19);
/* harmony import */ var _Tools_ItemCreationView__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(47);
/* harmony import */ var _client_plugins_beta_Cleanup__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(49);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(5);
/* harmony import */ var _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(24);
// -----------------------------------------------------------
// A normal item control such as a requirements
// -----------------------------------------------------------



// TODO(modules): this is a hacky way to ensure the jquery $.fn.titleToolbar() func is created.






class ItemControl {
    constructor(options) {
        this.defaultOptions = {
            control: null,
            type: null,
            controlState: _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.FormView,
            item: null,
            dummyData: false,
            parent: null,
            changed: function () {
            } // callback to call if value changes
        };
        this.controls = [];
        this._title = $("<div>");
        this._riders = $("<div>");
        this._outerbody = $("<div>"); // outerbody will contain title and body of the item.  the title might be inside the item (e.g. for print rendering)
        this._body = $("<div>");
        let that = this;
        this.settings = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.mergeOptions(this.defaultOptions, options);
        this.title = "";
        if (this.settings.item) {
            try {
                this.title = decodeURIComponent(this.settings.item.title);
            }
            catch (err) {
                this.title = this.settings.item.title;
            }
            if (this.settings.item.type) {
                this.settings.type = this.settings.item.type; // overwrite,if an item has been passed
            }
        }
        this.orginalControlState = this.settings.controlState;
        // check if a locking label is set
        let canUnlock = false;
        this.restrictUnlockTo = [];
        if (this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.FormEdit) {
            let ll = _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getLabelLockConfig();
            if (ll && this.settings.item.labels) {
                let ldefs = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.LabelTools.getLabelDefinitions([this.settings.type]).map(function (ld) { return ld.label; });
                $.each(ll.locks, function (idx, lock) {
                    if (that.settings.item.labels.indexOf(lock.label) !== -1 && ldefs.indexOf(lock.label) != -1) {
                        // locking label is set...
                        that.settings['allowlinkedit'] = that.settings.controlState == _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.FormEdit && (_globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getUISettings().allowAddLinkToLocked || lock.allowTraces);
                        that.settings.controlState = _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.FormView;
                        that.settings['locked'] = lock.label;
                        that.settings['unlockers'] = lock.lockKeeper ? lock.lockKeeper.map(function (keeper) { return _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.SelectUserOrGroup.getGroupDisplayNameFromId(keeper); }).join(", ") : "";
                        let canUnlockThis = _globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.amIAllowedUser(lock.lockKeeper);
                        if (canUnlockThis) {
                            canUnlock = true;
                            that.restrictUnlockTo.push(lock.label);
                        }
                    }
                });
            }
        }
        // initialize object
        // once a SIGN has it's first signature it cannot be changed anymore
        this.settings['isDialog'] = this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.DialogCreate || this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.DialogEdit;
        this.settings['isForm'] = this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.FormEdit || this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.HistoryView || this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.FormView;
        // signed docs cannot be changed as soon as one signature was given
        this.settings['canEditLinks'] = (this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.FormEdit || this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.DialogCreate || this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.DialogEdit);
        this.settings['canEdit'] = this.settings['canEditLinks'];
        // besides labels....
        this.settings['canEditLabels'] = (canUnlock || (this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.FormEdit || this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.DialogCreate));
        // special rule for title and title bar functions: it should for example be possible to delete already signed docs if the user role allows it...
        this.settings['canEditTitle'] = (this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.FormEdit || this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.DialogCreate);
        this.settings['canDelete'] = (this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.FormEdit);
        this.settings['isPrint'] = this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.Print;
        this.settings['isTooltip'] = this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.Tooltip;
        this.settings['id'] = this.settings.item ? this.settings.item.id : "";
        this.links = this.settings.item ? this.settings.item.downLinks : [];
        this.config = _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getItemConfiguration(this.settings.isItem ? this.settings.type : "FOLDER");
        // prepare rendering
        if (this.settings.isForm && this.settings.controlState != _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.HistoryView) {
            $(this.settings.control).addClass("panel panel-default");
        }
        // add title control to correct place and prepare it for printing
        this.controls.push({ control: this._title, name: 'Title' });
        if (this.settings.isPrint) {
            var header = $("<table class='table-bordered printheader'></table>");
            var d = new Date();
            header.append("<tr><td>" +
                "<img class='brandLogo'>" +
                "</td>" +
                "<td id='iph'></td>" +
                "<td class='reportheaderdate'>printed: " + _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.DateTime.renderHumanDate(d) + "</td></tr>");
            var logo = _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getSetting("projectLogo");
            if (logo && logo.indexOf("{") !== -1) {
                var rjs = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.fromString(logo);
                if (rjs.status === 'ok') {
                    logo = rjs.value.fileId;
                }
                header.find(".brandLogo").attr("src", _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.matrixRestUrl + "/" + _globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getProject() + "/file/" + logo);
            }
            else {
                header.find(".brandLogo").attr("src", _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.matrixBaseUrl + "/static/img/logo_report.png");
            }
            if (this.settings.item && !_globals__WEBPACK_IMPORTED_MODULE_6__.app.isFolder(this.settings.id)) {
                header.append("<tr><td>version: " + this.settings.item.history[0].version + " (" +
                    this.settings.item.history[0].user + ")</td>" +
                    "<td>comment: " + this.settings.item.history[0].comment + "</td>" +
                    "<td class='reportheaderdate'>created: " + this.settings.item.history[0].dateUserFormat + "</td></tr>");
            }
            $("#iph", header).append(this._title);
            this.settings.control.append(header);
        }
        if (this.settings.isForm && this.settings.controlState != _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.HistoryView) {
            this._title.addClass("panel-heading");
            this.settings.control.append(this._title);
            this.settings.control.append(this._outerbody);
            this._outerbody.on("scroll", () => { $(".tox-pop").remove(); });
            this._outerbody.addClass("panel-body-v-scroll").addClass("enabledd");
            this._body.addClass("panel-body");
        }
        else { // isDialog or isPrint
            this.settings.control.append(this._outerbody);
            if (this.settings.controlState == _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.HistoryView) {
                this._outerbody.append($("<div class='baseControlHelp'>Title</div>"));
            }
            if (!this.settings.isPrint) {
                this._outerbody.append(this._title);
            }
            this._outerbody.on("scroll", () => { $(".tox-pop").remove(); });
            this._outerbody.addClass("panel-body-v-scroll").addClass("enabledd");
        }
        this.addTabs();
        this._outerbody.append(this._body);
        // create content controls
        this.lastIsDropDown = false;
        var list = this.config.fieldList;
        for (var idx = 0; idx < list.length; idx++) {
            var ctrl = $("<div>");
            this._body.append(ctrl);
            this.controls.push({ control: ctrl, name: list[idx].label, fieldId: list[idx].id });
            this.lastIsDropDown = list[idx].fieldType == _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_dropdown;
        }
        // add special this.controls, e.g. to create items in folders, or reference list or report buttons
        // these exist only if these are not special items
        if (this.settings.controlState != _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.HistoryView) {
            var handled = _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.plugins.renderActionButtons(this.settings, this._body, this.controls);
            if (!handled) {
                handled = _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.mTM.RenderActionButtons(this.settings, this._body);
            }
            if (!handled) {
                if (!handled && this.settings.type.toLowerCase() === "report") {
                    this.renderActionButtonsReport();
                }
                else if (!this.settings.isItem && this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.FormEdit &&
                    !_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getCategorySetting(this.settings.type, "syncInfo") &&
                    !_globals__WEBPACK_IMPORTED_MODULE_6__.app.getImportSource(this.settings.item)) {
                    // a normal folder
                    // add button to create a new folder of this kind
                    var lt = [{ type: this.settings.item.type, name: "Folder", folder: true }];
                    // add button to create an item of this kind
                    var itemTypeName = _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getItemConfiguration(this.settings.item.type).label;
                    lt.push({ type: this.settings.item.type, name: itemTypeName });
                    let controlContainer = $("<div class='baseControl'></div>");
                    // add buttons to UI
                    controlContainer.append($("<span class='baseControlHelp'>Tools</span>"));
                    var folderEdit = $("<div class='hidden-print baseControl rowFlex'></div>");
                    controlContainer.append(folderEdit);
                    this._body.append(controlContainer);
                    var createTools = new _Tools_ItemCreationView__WEBPACK_IMPORTED_MODULE_4__.ItemCreationTools();
                    createTools.renderButtons({
                        parent: this.settings.item.id,
                        dontOpenNewItem: false,
                        control: folderEdit,
                        linkTypes: lt,
                        type: that.settings.type
                    });
                }
            }
        }
    }
    async load() {
        await this.fillControls();
        if (!this.settings.isPrint && !this.settings.isTooltip) {
            this.sendNeedsSave();
            if (this.lastIsDropDown && this.settings.canEdit) {
                this._body.css("padding-bottom", "200px");
            }
        }
        // hide stuff and after a little timeout to allow to show richtext2, hide again
        this.showTab();
        window.setTimeout(() => {
            this.showTab();
        }, 501);
        // to enable dropdown menus at end to open completely
        this.resizeItem();
    }
    // initialize options
    // public interface
    destroy() {
        for (var idx = 0; idx < this.controls.length; idx++) {
            if (this.controls[idx].control.getController().destroy) {
                this.controls[idx].control.getController().destroy();
            }
        }
    }
    async getValues(update, latest) {
        for (var idx = 0; idx < this.controls.length; idx++) {
            if (this.controls[idx].fieldId && this.getFieldType(this.controls[idx].fieldId) !== _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_links) {
                if (this.controls[idx].isDhfType) {
                    update[this.controls[idx].fieldId] = await _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.mDHF.getValue(this.controls[idx]);
                }
                else if (this.controls[idx].fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_labels) {
                    if (this.settings.id && !_globals__WEBPACK_IMPORTED_MODULE_6__.app.isFolder(this.settings.id)) {
                        if (await this.controls[idx].control.getController().getValueAsync(latest)) {
                            var non_review_labels = JSON.parse(await this.controls[idx].control.getController().getValueAsync(latest));
                            non_review_labels = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.LabelTools.resetReviewLabels(non_review_labels, this.settings.type, false);
                            update.labels = non_review_labels.join(",");
                        }
                    }
                }
                else {
                    update[this.controls[idx].fieldId] = await this.controls[idx].control.getController().getValueAsync(latest);
                }
            }
        }
        return update;
    }
    async saveAsync(category, auditAction, valueOverwrites) {
        let that = this;
        let canSaveProceed = true;
        for (const control of this.controls) {
            const internalController = control.control.getController();
            let value = await internalController.getValueAsync();
            if (category != "DOC" && internalController.requiresContent && internalController.requiresContent() && value == "") {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError(`Field "${control.name}" is empty!`, `The Project configuration requires the field ${control.name} to have a value.`);
                canSaveProceed = false;
            }
            if (!_client_plugins_beta_Cleanup__WEBPACK_IMPORTED_MODULE_5__.Cleanup.textOk(value)) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError(`Field "${control.name}" has an invalid character!`, `Remove invalid character to save - they will look probably be rendered as boxes, like \u0002`);
                canSaveProceed = false;
            }
        }
        if (!canSaveProceed) {
            throw ("Can't save");
        }
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.SmartText.updateCaptionsAndReferences();
        async function performSaveAsync(latest) {
            var res = $.Deferred();
            let type = that.settings.type ? that.settings.type : _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.parseRef(that.settings.parent).type;
            await _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.mTM.PreSaveHook(that.settings.isItem, that.settings.item, type, that.controls);
            _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.plugins.callPreSaveHook(that.settings.isItem, type, that.controls).done(async function () {
                // create links and labels and save
                let linksToCreate = { up: [], down: [] };
                let labelsToSet = [];
                for (var idx = 0; idx < that.controls.length; idx++) {
                    if (that.controls[idx].control.getController().linksToCreate) {
                        var lc = that.controls[idx].control.getController().linksToCreate();
                        linksToCreate.up = linksToCreate.up.concat(lc.up);
                        linksToCreate.down = linksToCreate.down.concat(lc.down);
                    }
                    // if a control decides it can trigger labels to be set
                    if (that.controls[idx].control.getController().labelsToSet && that.controls[idx].control.getController().labelsToSet() && that.controls[idx].control.getController().labelsToSet().length > 0) {
                        labelsToSet = labelsToSet.concat(that.controls[idx].control.getController().labelsToSet());
                    }
                }
                if ((that.settings.isForm && that.settings.controlState != _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.HistoryView)
                    || that.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.DialogEdit) { // an item was modified
                    for (var idx = 0; idx < that.controls.length; idx++) {
                        if (valueOverwrites && that.controls[idx].fieldId && valueOverwrites.hasOwnProperty(that.controls[idx].fieldId.toString())) {
                            that.controls[idx].control.getController().setValue(valueOverwrites[that.controls[idx].fieldId]);
                        }
                    }
                    var update = {
                        id: that.settings.id,
                        title: that._title.data("new"),
                        type: that.settings.item.type
                    };
                    if (linksToCreate.up.length > 0) {
                        update["linksUp"] = linksToCreate.up.join();
                    }
                    if (linksToCreate.down.length > 0) {
                        update["linksDown"] = linksToCreate.down.join();
                    }
                    update = await that.getValues(update, latest);
                    if (that.settings.isItem) {
                        if (valueOverwrites && valueOverwrites.labels) {
                            update.labels = valueOverwrites.labels.join(",");
                        }
                    }
                    // now update labels if there is something to update
                    if (labelsToSet.length) {
                        update.labels = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.LabelTools.setLabels(update.labels, labelsToSet);
                    }
                    _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.MR1.triggerBeforeSaveAsync(that, that.settings.item, update).done(function () {
                        _globals__WEBPACK_IMPORTED_MODULE_6__.app.updateItemInDBAsync(update, auditAction, latest ? latest.history.length : that.settings.item.history.length).done(function (result) {
                            update.maxVersion = result.maxVersion;
                            _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.MR1.triggerAfterSave(that, that.settings.item, update);
                            res.resolve(result);
                        }).fail(function (error) {
                            res.reject(error);
                        });
                    }).fail(function () {
                        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("info", "save cancelled by MR1 script");
                        res.reject("MR1 cancelled");
                    });
                }
                else { // an item was created
                    var actions = [];
                    actions.push("Created");
                    var itemJson = {};
                    if (!that.settings.isItem) {
                        itemJson["children"] = []; // make it a folder
                    }
                    for (var idx = 0; idx < that.controls.length; idx++) {
                        if (that.controls[idx].fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_labels && that.settings.isItem) {
                            itemJson.labels = "";
                            var valj = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.fromString(await that.controls[idx].control.getController().getValueAsync());
                            if (valj.status === "ok") {
                                itemJson.labels = valj.value.join();
                            }
                        }
                        else if (that.controls[idx].fieldId) {
                            itemJson[that.controls[idx].fieldId] = await that.controls[idx].control.getController().getValueAsync();
                        }
                    }
                    itemJson.title = that._title.data("new");
                    if (linksToCreate.up.length > 0) {
                        itemJson.linksUp = linksToCreate.up.join();
                    }
                    if (linksToCreate.down.length > 0) {
                        itemJson.linksDown = linksToCreate.down.join();
                    }
                    if (labelsToSet.length) {
                        itemJson.labels = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.LabelTools.setLabels(itemJson.labels, labelsToSet);
                    }
                    _globals__WEBPACK_IMPORTED_MODULE_6__.app.createItemOfTypeAsync(category, itemJson, actions.join(), that.settings.parent).done(function (result) {
                        _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.MR1.triggerAfterItemCreate(result);
                        res.resolve(result);
                    }).fail(function () {
                        res.reject();
                    });
                }
            }).fail(function () {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("warning", "plugin prevented save!");
                res.reject("plugin prevented save!");
                return res;
            });
            return res;
        }
        let needsLatest = false;
        if (this.settings.id) {
            // otherwise this is save during create
            for (var idx = 0; idx < this.controls.length; idx++) {
                if (this.controls[idx].control.getController().needsLatest) {
                    needsLatest = true;
                }
            }
        }
        if (needsLatest) {
            let latest = await _globals__WEBPACK_IMPORTED_MODULE_6__.app.getItemAsync(this.settings.id);
            return performSaveAsync(latest);
        }
        else {
            return performSaveAsync();
        }
    }
    addMove(itemId, newVersion) {
        // fakes a history change without reloading the item, avoiding merge dialog when saving
        if (this.settings && this.settings.id == itemId && this.settings.item && this.settings.item.history) {
            if (this.settings.item.history.filter(function (he) { return he.version == newVersion; }).length == 0) {
                // someone else moved it
                this.settings.item.history.push({ action: "move", comment: "", date: "", dateUserFormat: "", id: itemId, title: "", user: "",
                    version: newVersion });
            }
        }
    }
    resizeItem(force) {
        clearTimeout(this.resizeItTimer);
        this.resizeItTimer = window.setTimeout(() => this.resizeIt(force), 299);
    }
    refreshLinks() {
        for (var cid = 0; cid < this.controls.length; cid++) {
            if (this.controls[cid].control.getController().refreshLinks) {
                this.controls[cid].control.getController().refreshLinks();
            }
        }
    }
    async fillControls() {
        let that = this;
        this.duringFill = true;
        // prepare gate functions
        let gateTitle = false;
        let gated = {}; // if set to true the field will be disabled
        for (var idx = 0; idx < this.config.fieldList.length; idx++) {
            var fieldType = this.config.fieldList[idx].fieldType;
            if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_gateControl) {
                // get the fields value (for existing items)
                let fv = this.settings.item ? this.settings.item[this.config.fieldList[idx].id] : "{}";
                let fvj = (fv ? JSON.parse(fv) : {});
                let allPassed = fvj.passed;
                let gateConfig = this.config.fieldList[idx].parameterJson;
                if (gateConfig && gateConfig.allPass) {
                    if (allPassed && gateConfig.allPass.lockAbove) {
                        // if passed the above will be disabled
                        for (var k = 0; k < idx; k++)
                            gated[this.config.fieldList[k].id] = true;
                    }
                    if (allPassed && gateConfig.allPass.lockTitle) {
                        gateTitle = true;
                    }
                    if (!allPassed && gateConfig.allPass.enableBelow) {
                        // needs to be passed to enable the below
                        for (var k = idx + 1; k < this.config.fieldList.length; k++)
                            gated[this.config.fieldList[k].id] = true;
                    }
                }
                else {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("warning", "badly configured gate control in " + this.settings.type);
                }
            }
        }
        /** in case up or downlinks would be locked because of gate allow them */
        if (_globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getUISettings().allowAddLinkToLocked) {
            for (var k = 0; k < this.config.fieldList.length; k++) {
                if (this.config.fieldList[k].fieldType == _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_uplinkinfo || this.config.fieldList[k].fieldType == _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_links) {
                    gated[this.config.fieldList[k].id] = false;
                }
            }
        }
        // render title
        var th = _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getCategorySetting(this.settings.type, "title");
        let tops = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.mergeOptions(this.settings, {
            help: (th && th.create) ? th.create : "Title",
            title: this.title,
            valueChanged: () => that.sendNeedsSave(),
            isFolder: _globals__WEBPACK_IMPORTED_MODULE_6__.app.isFolder(this.settings.id),
            dummyData: this.settings.dummyData,
            parameter: {
                placeholder: (th && th.placeholder) ? th.placeholder : "enter title"
            }
        });
        if (gateTitle) {
            tops.canEditTitle = false;
            tops.canDelete = false;
            tops.canEdit = false;
        }
        if (!_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.canEditTitle(this.settings.type)) {
            tops.canEditTitle = false;
        }
        if (!_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.canDelete(this.settings.type)) {
            tops.canDelete = false;
        }
        this._title.html("").titleToolbar(tops);
        // draw UI
        let closeControls = [];
        // make a lookup with controls
        let mapControls = {};
        for (var cid = 0; cid < this.controls.length; cid++) {
            mapControls[this.controls[cid].fieldId] = this.controls[cid];
        }
        // go through all configured fields
        // for performance hide
        if (_globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getUISettings().largeFormRender && this.config.fieldList.length > _globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getUISettings().largeFormRender) {
            this.settings.control.hide();
        }
        for (let idx = 0; idx < this.config.fieldList.length; idx++) {
            const fieldConfig = this.config.fieldList[idx];
            const fieldType = fieldConfig.fieldType;
            let ui = mapControls[fieldConfig.id];
            if (!ui) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("warn", `field ${fieldConfig.id} is weird...`);
                break;
            }
            ui.isDhfType = false;
            ui.fieldType = fieldType;
            var fieldValue = "";
            if (this.settings.item && this.settings.item[fieldConfig.id]) {
                fieldValue = this.settings.item[fieldConfig.id];
            }
            // Some field types get their configuration not from the database, but elsewhere.
            // UpdateFieldConfig modifies the fieldConfig.parameterJson object in place to
            // include those settings.
            _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.FieldHandlerFactory.UpdateFieldConfig(_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig, _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.mTM.getConfiguration(), fieldType, this.settings.type, fieldValue, fieldConfig.parameterJson);
            var handler = _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.FieldHandlerFactory.CreateHandler(_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig, fieldType, fieldConfig.parameterJson);
            handler.initData(fieldValue);
            // prepare parameter for rendering
            var ctrlParameter = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.mergeOptions(that.settings, {
                parameter: fieldConfig.parameterJson,
                fieldId: ui.fieldId,
                canEdit: that.settings.canEdit &&
                    _globals__WEBPACK_IMPORTED_MODULE_6__.app.canEditField(that.settings.type, ui.fieldId) &&
                    !gated[ui.fieldId] &&
                    !fieldConfig.parameterJson.readonlyACL,
                help: fieldConfig.label,
                fieldValue: fieldValue,
                fieldHandler: handler,
                fieldType: fieldType,
                valueChanged: function () {
                    that.sendNeedsSave(ui.fieldId, fieldConfig.label);
                }
            });
            if ((fieldType == _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_uplinkinfo || fieldType == _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_links) && !ctrlParameter.canEdit) {
                // maybe links can still be added even though the item is readonly
                if (_globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getUISettings().allowAddLinkToLocked && that.settings['allowlinkedit'] && !ctrlParameter.parameter.readonlyACL) {
                    ctrlParameter.canEdit = true;
                }
                if (that.settings["canEditLinks"]) {
                    ctrlParameter.canEdit = true;
                }
            }
            // whether there should a > to open / close section
            let canCloseSection = that.settings.item &&
                ctrlParameter.isItem &&
                !ctrlParameter.isPrint &&
                ctrlParameter.controlState != _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.HistoryView &&
                ctrlParameter.isForm &&
                _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.mDHF &&
                _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.mDHF.isDocumentType(that.settings.item.type) &&
                !ctrlParameter.parameter.forceOpen;
            if (typeof ctrlParameter.parameter.visibleOption !== 'undefined') {
                if (_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.isTrue(ctrlParameter.parameter.visibleOption)) {
                }
                else if (ctrlParameter.parameter.visibleOption === this.settings.type) {
                }
                else {
                    ui.control.hide();
                }
            }
            if (!_globals__WEBPACK_IMPORTED_MODULE_6__.app.canSeeField(this.settings.type, ui.fieldId)) {
                ui.control.hide();
            }
            ui.control.html("").addClass("controlContainer").addClass("ft_" + fieldType).attr("id", "fid_" + ui.fieldId);
            if (_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.plugins.supportsControl(fieldType)) {
                _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.plugins.createControl(ui.control, ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_report) {
                ui.control.plainText(_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.setOptions(ctrlParameter, { parameter: { rows: 1 } }));
                _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.EmbeddedReport(_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.setOptions(ctrlParameter, { control: ui.control }));
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_richtext) {
                ui.control.richText(ctrlParameter, this);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_publishedItemList) {
                ui.control.hidden(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_publishedFilesList) {
                ui.control.hidden(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_publishedContent) {
                ui.control.publishedContent(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_text) {
                ui.control.plainText(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_section) {
                ui.control.section(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_fileManager || fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_signCache) {
                ui.control.fileManager(_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.setOptions(ctrlParameter, { parameter: { titleBarControl: this._title } }));
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_docFilter) {
                ui.control.docFilter(_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.setOptions(ctrlParameter, { help: "Document Filter" }));
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_workflow) {
                ui.control.workflowControl(_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.setOptions(ctrlParameter, { parameter: { titleBarControl: this._title } }));
            }
            else if (fieldType === "sourceRef") {
                // type should not exist
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("warning", "Found obsolete type sourceRef");
                ui.control.hidden(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_textline || fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_publishedTitle) {
                ui.control.plainText(_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.setOptions(ctrlParameter, { parameter: { rows: 1, allowResize: false } }));
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_signatureControl) {
                canCloseSection = false;
                ui.control.docSign(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_docTraining) {
                ui.control.docTraining(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_docReview) {
                ui.control.docReview(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_user) {
                // Set some UI options for the user control.
                // Data field options were already set above in FieldHandlerFactory.UpdateFieldConfig().
                let groups = null;
                if (!_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.isFalse(ctrlParameter.parameter.showUsers) &&
                    _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.isTrue(ctrlParameter.parameter.showGroups)) {
                    groups = [];
                    groups.push({ value: "groups", label: "groups" });
                    groups.push({ value: "users", label: "users" });
                }
                if (!ctrlParameter.parameter.placeholder) {
                    ctrlParameter.parameter.placeholder = "select user";
                }
                ctrlParameter.parameter.groups = groups;
                ui.control.mxDropdown(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_date) {
                ui.control.dateselect(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_dropdown) {
                ui.control.mxDropdown(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_test_result) {
                ctrlParameter.parameter.sort = false;
                let placeholder = fieldValue ? fieldValue : null;
                ctrlParameter.parameter.placeholder = _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.mTM.getTestRunResultPlaceholder(placeholder);
                ui.control.mxDropdown(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_links) {
                let linkTypes = _globals__WEBPACK_IMPORTED_MODULE_6__.app.getLinkCategories(this.settings.item, ctrlParameter);
                ui.control.linkCollection(_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.setOptions(ctrlParameter, {
                    parameter: {
                        linkTypes: linkTypes
                    },
                    fieldValue: this.links
                }));
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_crosslinks) {
                ui.control.itemSelection(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_steplist ||
                fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_test_steps ||
                fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_test_steps_result) {
                ui.control.tableCtrl(ctrlParameter);
                // ui.control.tableCtrl(ml.JSON.setOptions(options, {parameter: this.getTestStepsConfig(options.type)}));
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_risk) {
                ui.control.riskCtrl(_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.setOptions(ctrlParameter, {
                    links: this.links ? this.links : [] // these are the really existing downlinks (i.e. if someone deleted and item it needs to be removed as mitigation)
                }));
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_risk2) {
                ui.control.riskCtrl2(_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.setOptions(ctrlParameter, {
                    links: this.links ? this.links : [] // these are the really existing downlinks (i.e. if someone deleted and item it needs to be removed as mitigation)
                }));
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_checkbox) {
                canCloseSection = false;
                ui.control.checkBox(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_htmlForm) {
                ui.control.htmlform(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_hidden || fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_filter_file || fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_signature) {
                canCloseSection = false;
                ui.control.hidden(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_hyperlink) {
                ui.control.hyperlink(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_colorPicker) {
                ui.control.colorPicker(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_reportId) {
                ui.control.hidden(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_dhf) {
                canCloseSection = _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.mDHF.renderControl(ui, ctrlParameter, fieldValue);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_sourceref) {
                canCloseSection = !ctrlParameter.parameter.readonly;
                ui.control.sourceRef(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_markAsTemplate) {
                canCloseSection = !ctrlParameter.parameter.readonly;
                ui.control.markAsTemplate(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_guid) {
                canCloseSection = false;
                ui.control.docGUID(_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.setOptions(ctrlParameter, { parameter: { titleBarControl: this._title } }));
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_oid) {
                canCloseSection = false;
                ui.control.docOID(_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.setOptions(ctrlParameter, { parameter: { titleBarControl: this._title } }));
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_versionLive) {
                canCloseSection = false;
                ui.control.hidden(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_version) {
                canCloseSection = false;
                ui.control.hidden(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_currentVersion) {
                ui.control.docVersionInfo(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_uplinkinfo) {
                ui.control.uplinkinfo(_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.setOptions(ctrlParameter, {
                    parameter: {
                        linkTypes: _globals__WEBPACK_IMPORTED_MODULE_6__.app.getLinkCategories(that.settings.item, ctrlParameter)
                    },
                    fieldValue: that.settings.item ? that.settings.item.upLinks : []
                }));
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_labels) {
                canCloseSection = false;
                ctrlParameter.fieldValue = (this.settings.item && this.settings.item.labels) ? JSON.stringify(this.settings.item.labels) : "";
                ui.control.labelsControl(_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.setOptions(ctrlParameter, {
                    restrictEditTo: (that.restrictUnlockTo.length ? that.restrictUnlockTo : null),
                    canEdit: ctrlParameter.canEditLabels && _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.canModifyLabels(that.settings.type),
                    parameter: { titleBarControl: this._title }
                }));
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_syncStatus) {
                ui.control.syncStatus(_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.setOptions(ctrlParameter, { controlState: this.orginalControlState }));
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_syncSourceInfo) {
                ui.control.syncSourceInfo(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_cascadingSelect) {
                ui.control.cascadingSelect(ctrlParameter);
            }
            else if (fieldType === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_gateControl) {
                ui.control.gateControl(ctrlParameter);
            }
            else {
                canCloseSection = false;
                ui.control.errorControl(ctrlParameter);
            }
            if (ctrlParameter.parameter.invisible) {
                canCloseSection = false;
                ui.control.hide();
            }
            if (ctrlParameter.parameter.hide_UI) {
                if (_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.globalShiftDown && _globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.isAdmin()) {
                    $(".baseControl", ui.control).css("opacity", "0.8");
                    $(".baseControlHelp", ui.control).css("opacity", "0.8");
                    $(".baseControlHelp", ui.control).text($(".baseControlHelp", ui.control).text() + " (Hidden for normal user)");
                }
                else {
                    canCloseSection = false;
                    $(".baseControl", ui.control).hide();
                    $(".baseControlHelp", ui.control).hide();
                }
            }
            if ((that.settings.isHistory == undefined || that.settings.isHistory < 1) && canCloseSection && that.allowSectionClose(ui, ctrlParameter)) {
                closeControls.push($(".baseControl", ui.control));
                $(".baseControl", ui.control).hide();
            }
        }
        // undo performance hide
        this.settings.control.show();
        setTimeout(function (ctrlsToHide) {
            for (var idx = 0; idx < ctrlsToHide.length; idx++) {
                // weird if controls are hidden only once tables like audit trail are fcked up
                ctrlsToHide[idx].hide();
                ctrlsToHide[idx].show();
                ctrlsToHide[idx].hide();
            }
        }, 10, closeControls);
        setTimeout(function () {
            if (that.settings.item && that.settings.isForm && that.settings.controlState != _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.HistoryView) {
                _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.MR1.triggerItemDisplayed(that.settings.item, that);
            }
            if (!that.settings.item && that.settings.isDialog) {
                _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.MR1.triggerItemCreate(that, that.settings.isItem, that.settings.type);
            }
        }, 20);
        this.duringFill = false;
    }
    async needsSave() {
        return await this.needsSaveImpl();
    }
    async hasTitle() {
        let title = await this._title.getController().getValueAsync();
        return (title && title != "");
    }
    updateItem(newItem) {
        if (this.settings.id === newItem.id) {
            for (var cid = 0; cid < this.controls.length; cid++) {
                if (this.controls[cid].control.getController().updateItem) {
                    this.controls[cid].control.getController().updateItem(newItem);
                }
            }
        }
    }
    setFieldValue(fieldId, newValue) {
        for (var cid = 0; cid < this.controls.length; cid++) {
            if (this.controls[cid].fieldId == fieldId) {
                this.controls[cid].control.getController().setValue(newValue);
                this.sendNeedsSave();
            }
        }
    }
    async getFieldValue(fieldId) {
        for (var cid = 0; cid < this.controls.length; cid++) {
            if (this.controls[cid].fieldId == fieldId) {
                return await this.controls[cid].control.getController().getValueAsync();
            }
        }
        return null;
    }
    async getCurrentTitle() {
        return await this._title.getController().getValueAsync();
    }
    setViewers(viewers) {
        return this._title.getController().setViewers(viewers);
    }
    getControls(fieldType) {
        var result = [];
        for (var idx = 0; idx < this.config.fieldList.length; idx++) {
            for (var cid = 0; cid < this.controls.length; cid++) {
                if (this.controls[cid].fieldId === this.config.fieldList[idx].id) {
                    if (!fieldType || this.config.fieldList[idx].fieldType === fieldType) {
                        result.push(this.controls[cid].control);
                    }
                }
            }
        }
        return result;
    }
    /** returns (first) control with a given title */
    getControlByName(name) {
        for (var cid = 0; cid < this.controls.length; cid++) {
            if (this.controls[cid].name.toLowerCase() == name.toLowerCase()) {
                return this.controls[cid].control;
            }
        }
        return null;
    }
    /** returns control with a given id */
    getControlById(fieldId) {
        for (var cid = 0; cid < this.controls.length; cid++) {
            if (this.controls[cid].fieldId == fieldId) {
                return this.controls[cid].control;
            }
        }
        return null;
    }
    // check if the version displayed is older than the current one
    wasUpdated(itemId, historyLength) {
        if (this.settings && this.settings.item && this.settings.item.id == itemId && this.settings.item.history && this.settings.item.history.length < historyLength) {
            return true;
        }
        return false;
    }
    // private functions
    addTabs() {
        let that = this;
        if (!this.settings.isForm || this.settings.isHistory) {
            return;
        }
        let tabDefinition = _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getCategorySetting(this.settings.type, "tabs");
        if (!tabDefinition || !tabDefinition.tabs || tabDefinition.tabs.length <= 1) {
            return;
        }
        let tabs = $('<div id="itemTabs" style="color: #333333; background-color: var(--Grey8); margin-top: -4px; padding: 4px; border-top: 1px solid lightgray;">').insertAfter(this._title);
        $.each(tabDefinition.tabs, function (tabIdx, tab) {
            $("<span style='padding:4px;cursor:pointer'>").html(tab.name).appendTo(tabs).click(function () {
                that.showTab(tabIdx);
            });
        });
    }
    showTab(active) {
        if (!this.settings.isForm || this.settings.isHistory) {
            return;
        }
        let tabDefinition = _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getCategorySetting(this.settings.type, "tabs");
        if (!tabDefinition || !tabDefinition.tabs || tabDefinition.tabs.length <= 1) {
            return;
        }
        if (active == undefined) {
            // get favorite tab in this session in this project
            active = 0;
            let lasttab = ItemControl.lastTab[_globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getProject() + ":" + this.settings.type];
            if (lasttab) {
                active = lasttab;
            }
        }
        // remember favorite tab in this session in this project
        ItemControl.lastTab[_globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getProject() + ":" + this.settings.type] = active;
        $("#itemTabs span").css("font-weight", "100");
        $($("#itemTabs span")[active]).css("font-weight", "600");
        $.each(this.controls, function (cidx, control) {
            if (tabDefinition.tabs.filter(function (tab) { return tab.fields.indexOf("" + control.fieldId) != -1; }).length == 0) {
                // field not in a specific tab so don'T hide it (like title bar or labels)
            }
            else if (tabDefinition && tabDefinition.tabs && tabDefinition.tabs.length && control.fieldId && tabDefinition.tabs[active].fields.indexOf("" + control.fieldId) != -1) {
                control.control.show();
            }
            else {
                control.control.hide();
            }
        });
    }
    allowSectionClose(ctrl, ctrlParameter) {
        let isClosed = ctrlParameter.item && _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.projectStorage.getItem('visible' + ctrlParameter.item.id + "_" + ctrl.fieldId) !== 'true';
        // add > control open and close section
        let helpLabel = $("<label for='docfield" + ctrl.fieldId + "'>");
        let baseControlHelp = $(".baseControlHelp", ctrl.control);
        let checkbox = $("<input id='docfield" + ctrl.fieldId + "' class='showHideAdmin' type='checkbox' " + (isClosed ? "" : "checked") + ">");
        // put checkbox before label
        baseControlHelp.parent().prepend(checkbox);
        // put help into label
        baseControlHelp.wrap(helpLabel);
        // put triangle before help text
        baseControlHelp.before("<span class='cbimg fal fa-chevron-right'>");
        checkbox.change(function (e) {
            var visibility = $(e.delegateTarget).is(':checked');
            _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.projectStorage.setItem('visible' + ctrlParameter.item.id + "_" + ctrl.fieldId, visibility ? 'true' : 'false');
            if (!visibility) {
                $(".baseControl", $(e.delegateTarget).closest("div")).hide();
                $(".inlineHelp", $(e.delegateTarget).closest("div")).hide();
            }
            else {
                $(".baseControl", $(e.delegateTarget).closest("div")).show();
                $(".inlineHelp", $(e.delegateTarget).closest("div")).show();
                // make sure table this.controls are nice shown
                if (ctrl.control.getController().redraw) {
                    ctrl.control.getController().redraw();
                }
            }
        });
        return isClosed;
    }
    resizeIt(forceRedraw) {
        //Let calcultate the width of the form
        // add a scrollbar to the form if needed
        if (this.settings.isForm && this.settings.controlState != _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.HistoryView) {
            //this._outerbody.height(this.settings.control.height() - this._title.outerHeight() - 8 - ($(".labelBar").height()? $(".labelBar").height():0));
        }
        else {
            forceRedraw = true; // dialogs should always completely redraw tables otherwise they are badly rendered
        }
        var hasScrollbar = this._outerbody.height() < this._body.height();
        // beautify widths if needed
        for (var idx = 0; idx < this.controls.length; idx++) {
            if (this.controls[idx].control.getController().resizeItem) {
                this.controls[idx].control.getController().resizeItem(this._outerbody.width() - (hasScrollbar ? 15 : 0), forceRedraw);
            }
        }
        if (this.settings.controlState == _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.FormView) {
            $("#main").css("width", `calc(100vw - ${$("#navLeft").width() + $("#sidebar").width() + $("#dragbar").width() + $("#contextframesizer").width() + $("#contextframe").width()}px)`);
        }
    }
    async needsSaveImpl() {
        // label change while readonly..
        let labelChange = false;
        for (var idx = 0; idx < this.controls.length; idx++) {
            if (this.controls[idx] &&
                this.controls[idx].fieldType == _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_labels &&
                this.controls[idx].control &&
                this.controls[idx].control.getController &&
                await this.controls[idx].control.getController().hasChangedAsync()) {
                labelChange = true;
            }
        }
        if (!this.settings.canEdit && !labelChange) {
            return false;
        }
        for (var idx = 0; idx < this.controls.length; idx++) {
            if (this.controls[idx] && this.controls[idx].control && this.controls[idx].control.getController && await this.controls[idx].control.getController().hasChangedAsync() ||
                (this.controls[idx].isDhfType && _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.mDHF.configChanged(this.controls[idx]))) {
                if (!this.startEdit && !this.duringFill && !this.settings.isDialog) {
                    this.startEdit = true;
                }
                return true;
            }
        }
        return false;
    }
    getFieldType(fieldId) {
        return _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getFieldType(this.settings.isItem ? this.settings.type : "FOLDER", fieldId);
    }
    async sendNeedsSave(fieldId, fieldName) {
        if (this.settings.changed) {
            this.settings.changed(await this.needsSave());
        }
        // give the gates a chance to reset themselves
        if (fieldId) {
            for (var idx = 0; idx < this.controls.length; idx++) {
                if (this.controls[idx] && this.controls[idx].fieldType == _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_gateControl) {
                    this.controls[idx].control.getController().changed(fieldId, fieldName);
                }
            }
        }
    }
    renderActionButtonsReport() {
        let that = this;
        var id = this.settings.item ? this.settings.item.id : "";
        if (_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getExtrasConfig().enableLegacyReport == undefined || _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getExtrasConfig().enableLegacyReport == "0") {
            that._body.html(`<p class="controlContainer" >REPORT is a legacy feature since MatrixReq v2.3. If required, ask your administrator to reactivate it.</p>
            <ul><li>Use <span class="link" id="EXPORTDOC">DOC (documents)</span> to create printable reports</li>
            <li>You can export data as EXCEL or XML in here: <span class="link" id="EXPORTURL">EXPORT</span></li>
            <li>You can export the data also in the admin client, selecting the project</li>
            </ul>`);
            $("#EXPORTURL").click(() => _globals__WEBPACK_IMPORTED_MODULE_6__.app.treeSelectionChangeAsync("EXPORT"));
            $("#EXPORTDOC").click(() => _globals__WEBPACK_IMPORTED_MODULE_6__.app.treeSelectionChangeAsync("F-DOC-1"));
            return;
        }
        var showTools = true;
        if (this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.Print || this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.Tooltip ||
            this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.DialogCreate || this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.HistoryView) {
            showTools = false;
        }
        var inputRestriction = false; // by default use input as specified in report
        var inputFilter; // by default no filter
        var inputItems;
        var requiredItems;
        if (this.settings.item && this.settings.item.selectSubTree && this.settings.item.selectSubTree.length) {
            inputRestriction = true;
            inputFilter = [];
            inputItems = [];
            for (var idx = 0; idx < this.settings.item.selectSubTree.length; idx++) {
                var cat = this.settings.item.selectSubTree[idx].category;
                if (_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getCategories().indexOf(cat) !== -1) {
                    inputFilter.push(cat);
                    inputItems.push({ to: this.settings.item.selectSubTree[idx].rootFolder });
                }
            }
        }
        if (this.settings.item && this.settings.item.requireSubTree) {
            requiredItems = [];
            for (var idx = 0; idx < this.settings.item.requireSubTree.length; idx++) {
                var cat = this.settings.item.requireSubTree[idx].category;
                if (_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getCategories().indexOf(cat) !== -1) {
                    requiredItems.push({ to: this.settings.item.requireSubTree[idx].rootFolder });
                }
            }
        }
        function showInputSelectDialog() {
            async function saveAndCloseDialog() {
                var inputItems = await tree.getController().getValueAsync();
                //MATRIX-3722 Local (browser) storage of REPORT selections is screwed and make the REPORT unusable --> Change of the localstorage item and disable the sanitize
                if (rememberCheckbox.prop("checked")) {
                    _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.projectStorage.setItem('remember_items_selection_' + id, JSON.stringify(inputItems), true);
                }
                else {
                    _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.projectStorage.setItem('remember_items_selection_' + id, "", true);
                }
                dlg.dialog("close");
            }
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Search.searchInDialog();
            var preferred = (typeof _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.mDHF !== "undefined") ? _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.mDHF.getDefaultFormat("REPORT") : "docx";
            var formats = [];
            for (var idx = 0; idx < that.settings.item.availableFormats.length; idx++) {
                var pos = (preferred === that.settings.item.availableFormats[idx]) ? 0 : formats.length;
                switch (that.settings.item.availableFormats[idx]) {
                    case "html":
                        formats.splice(pos, 0, {
                            name: "HTML",
                            click: async function () {
                                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.ReportGenerator.CreateReport(id, { format: "html" }, await tree.getController().getValueAsync(), requiredItems);
                                saveAndCloseDialog();
                                return false;
                            }
                        });
                        break;
                    case "docx":
                        formats.splice(pos, 0, {
                            name: "Word",
                            click: async function () {
                                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.ReportGenerator.CreateReport(id, { format: "docx" }, await tree.getController().getValueAsync(), requiredItems);
                                saveAndCloseDialog();
                                return false;
                            }
                        });
                        break;
                    case "pdf":
                        formats.splice(pos, 0, {
                            name: "PDF",
                            click: async function () {
                                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.ReportGenerator.CreateReport(id, { format: "pdf" }, await tree.getController().getValueAsync(), requiredItems);
                                saveAndCloseDialog();
                                return false;
                            }
                        });
                        break;
                    case "xml":
                        formats.splice(pos, 0, {
                            name: "XML",
                            click: async function () {
                                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.ReportGenerator.CreateReport(id, { format: "xml" }, await tree.getController().getValueAsync(), requiredItems);
                                saveAndCloseDialog();
                                return false;
                            }
                        });
                        break;
                    default:
                        break;
                }
            }
            var linkTypes = [];
            for (var idx = 0; idx < inputFilter.length; idx++) {
                linkTypes.push(inputFilter[idx]);
            }
            var selectedItems = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.clone(inputItems);
            // check if selection was stored
            //MATRIX-3722 Local (browser) storage of REPORT selections is screwed and make the REPORT unusable --> Change of the localstorage item and disable the sanitize
            var selectionStored = _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.projectStorage.getItem('remember_items_selection_' + id, true);
            if (selectionStored && selectionStored !== "") {
                selectedItems = JSON.parse(selectionStored);
            }
            // build tree with default (root nodes) or selected items
            var tree = $("<div>").projectView({
                tree: _globals__WEBPACK_IMPORTED_MODULE_6__.app.getTree(linkTypes),
                controlState: _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.DialogCreate,
                selectedItems: selectedItems,
                canSelectItems: true,
                selectMode: _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__.SelectMode.auto,
                collectionChanged: function (count) {
                }
            });
            var rememberCheckbox;
            let dlg = $("#selectItemDlg");
            dlg.html("");
            dlg.removeClass("dlg-v-scroll");
            dlg.addClass("dlg-no-scroll");
            dlg.append(tree);
            var niceSize = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.getNiceDialogSize(500, 400);
            dlg.dialog({
                autoOpen: true,
                title: that.settings.item.title + " Report - Select Input",
                height: niceSize.height,
                width: niceSize.width,
                modal: true,
                close: function () {
                    dlg.parent().html('');
                    dlg.css('display', "none");
                    // dlg is gone, remove highlights and back to global highlighting
                    _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Search.endSearchInDialog();
                },
                resizeStop: function () {
                    dlg.resizeDlgContent([tree]);
                },
                open: function () {
                    if (formats.length > 0) {
                        $(".ui-dialog-buttonpane button:contains('Ok')", dlg.parent()).replaceWith(_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.createDropDownButton("Create", formats, true));
                    }
                    rememberCheckbox = $('<input type="checkbox" name="remember" ' + (selectionStored ? "checked" : "") + '>');
                    $('.ui-dialog-buttonpane button:contains(Remember)', dlg.parent()).replaceWith($('<label class="dlgCreateMultiple">').append(rememberCheckbox).append('Remember Selection'));
                },
                buttons: [{
                        text: 'Remember',
                        class: '',
                        click: function () { }
                    }, {
                        text: 'Ok',
                        class: 'btnDoIt',
                        click: function () { }
                    }, {
                        text: 'Cancel',
                        class: 'btnCancelIt',
                        click: function () {
                            dlg.dialog("close");
                        }
                    }]
            }).resizeDlgContent([tree], false);
        }
        function createReportButton(name) {
            var formats = [];
            var preferred = (typeof _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.mDHF !== "undefined") ? _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.mDHF.getDefaultFormat("REPORT") : "docx";
            for (var idx = 0; idx < that.settings.item.availableFormats.length; idx++) {
                var pos = (preferred === that.settings.item.availableFormats[idx]) ? 0 : formats.length;
                switch (that.settings.item.availableFormats[idx]) {
                    case "html":
                        formats.splice(pos, 0, { name: "HTML", click: function () {
                                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.ReportGenerator.CreateReport(id, { format: "html" }, inputRestriction ? inputItems : null, requiredItems);
                                return false;
                            } });
                        break;
                    case "docx":
                        formats.splice(pos, 0, { name: "Word", click: function () {
                                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.ReportGenerator.CreateReport(id, { format: "docx" }, inputRestriction ? inputItems : null, requiredItems);
                                return false;
                            } });
                        break;
                    case "pdf":
                        formats.splice(pos, 0, { name: "PDF", click: function () {
                                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.ReportGenerator.CreateReport(id, { format: "pdf" }, inputRestriction ? inputItems : null, requiredItems);
                                return false;
                            } });
                        break;
                    case "xml":
                        formats.splice(pos, 0, { name: "XML", click: function () {
                                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.ReportGenerator.CreateReport(id, { format: "xml" }, inputRestriction ? inputItems : null, requiredItems);
                                return false;
                            } });
                        break;
                    case "zip":
                        formats.splice(pos, 0, { name: "Word with attachments", click: function () {
                                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.ReportGenerator.CreateReport(id, { format: "zipdocx" }, inputRestriction ? inputItems : null, requiredItems);
                                return false;
                            } });
                        break;
                    default:
                        break;
                }
            }
            return _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.createDropDownButton(name, formats, false);
        }
        function RenderReportDefinitionDialog(body, controls) {
            var selectedReport = null;
            var dlgInner = body.parent();
            var dlgOuter = dlgInner.parent();
            var titleCtrl;
            var decriptionCtrl;
            var decriptionCtrlValue;
            var reportIdCtrl;
            for (var idx = 0; idx < controls.length; idx++) {
                if (controls[idx].name === "Title") {
                    titleCtrl = controls[idx].control;
                    titleCtrl.hide();
                }
                else if (controls[idx].name === "Description") {
                    decriptionCtrl = controls[idx].control;
                }
                else if (controls[idx].name === "reportId") {
                    reportIdCtrl = controls[idx].control;
                    reportIdCtrl.hide();
                }
            }
            setTimeout(function () {
                dlgOuter.dialog("option", "height", 500);
                dlgOuter.dialog("option", "width", 730);
                $(".dlgCreateMultiple", dlgOuter.parent()).hide();
            }, 1);
            _globals__WEBPACK_IMPORTED_MODULE_6__.app.getAvailableReportsAsync().done(function (availableReports) {
                var reportSelection = [];
                var groups = [];
                var groupList = [];
                for (var idx = 0; idx < availableReports.reportList.length; idx++) {
                    var group = availableReports.reportList[idx].group;
                    group = group ? group : "hidden"; // by default do not show 1.5 and earlier reports
                    if (group.indexOf("MR_") === 0) {
                        var dhf_config = _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getDHFConfig();
                        if (dhf_config && dhf_config.customReports && dhf_config.customReports.group === group) {
                            group = "Custom";
                        }
                        else {
                            group = "hidden";
                        }
                    }
                    if (availableReports.reportList[idx].label.toLowerCase() !== "legacy" &&
                        availableReports.reportList[idx].id.toLowerCase() !== "dhf_generic" &&
                        group !== "hidden") {
                        reportSelection.push({
                            id: availableReports.reportList[idx].id,
                            label: availableReports.reportList[idx].label,
                            class: group
                        });
                        if (groups.indexOf(group) === -1) {
                            groups.push(group);
                            groupList.push({ value: group, label: group });
                        }
                    }
                }
                async function selectReport(selId) {
                    for (var idx = 0; idx < availableReports.reportList.length; idx++) {
                        if (availableReports.reportList[idx].id === selId) {
                            selectedReport = availableReports.reportList[idx];
                        }
                    }
                    titleCtrl.getController().titleCreationMode();
                    titleCtrl.getController().setValue(selectedReport.label, true);
                    if (!decriptionCtrlValue || decriptionCtrlValue === $($("<div>").html(await decriptionCtrl.getController().getValueAsync())).text()) {
                        // not changed, set to selected item
                        decriptionCtrl.getController().setValue(selectedReport.description);
                        decriptionCtrlValue = $($("<div>").html(await decriptionCtrl.getController().getValueAsync())).text();
                    }
                    reportIdCtrl.getController().setValue(selectedReport.id);
                }
                var reportSelector = $("<div>");
                reportSelector.mxDropdown({
                    controlState: _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.DialogCreate,
                    canEdit: true,
                    dummyData: false,
                    help: 'Select Report Template',
                    fieldValue: "",
                    valueChanged: async function () {
                        selectReport(await reportSelector.getController().getValueAsync());
                    },
                    parameter: {
                        placeholder: 'select report',
                        readonly: false,
                        maxItems: 1,
                        options: reportSelection,
                        groups: groupList,
                        create: false,
                        sort: true // true sort options
                    }
                });
                dlgInner.prepend(reportSelector);
            });
        }
        if (that.settings.isItem) {
            if (that.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.DialogCreate) {
                RenderReportDefinitionDialog(that._body, that.controls);
            }
            else if (showTools) {
                var rt = $("<div style='padding-top:12px;padding-bottom:12px;'>");
                that._body.append(rt);
                if (_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.canReport("REPORT")) {
                    if (inputRestriction) {
                        // user can select input items from tree -> pop up a dialog an let choose
                        var inputSelectionGroup = $("<div  class='hidden-print inputSelectionGroup'></div>");
                        rt.append(inputSelectionGroup);
                        inputSelectionGroup.append($("<button id='createReportButton' class='btn btn-default'>").html("Create Report").click(function () {
                            showInputSelectDialog();
                        }));
                    }
                    else {
                        // uses all input let's create report
                        rt.append(createReportButton("Create Report"));
                    }
                }
                else {
                    rt.append("<div class='inlineHelp'>You have no rights to download documents</div>");
                }
            }
        }
        else if (that.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.FormEdit && _globals__WEBPACK_IMPORTED_MODULE_6__.app.canCreateItemType("REPORT")) {
            that._body.append($("<span class='baseControlHelp'>Tools</span>"));
            var folderEdit = $("<div class='hidden-print baseControl'></div>");
            that._body.append(folderEdit);
            var createTools = new _Tools_ItemCreationView__WEBPACK_IMPORTED_MODULE_4__.ItemCreationTools();
            var createButtons = [{ type: that.settings.item.type, name: "Folder", folder: true }, { type: that.settings.item.type, name: "Report Template" }];
            createTools.renderButtons({
                parent: that.settings.item.id,
                dontOpenNewItem: false,
                control: folderEdit,
                linkTypes: createButtons,
                type: that.settings.type
            });
        }
    }
}
ItemControl.lastTab = {};


/***/ }),
/* 18 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SearchState: () => (/* binding */ SearchState),
/* harmony export */   SearchUpdate: () => (/* binding */ SearchUpdate),
/* harmony export */   SelectMode: () => (/* binding */ SelectMode)
/* harmony export */ });

var SelectMode;
(function (SelectMode) {
    /*** DO NOT CHANGED numbers use from baseControl */
    SelectMode[SelectMode["none"] = 0] = "none";
    SelectMode[SelectMode["items"] = 1] = "items";
    SelectMode[SelectMode["folders"] = 2] = "folders";
    SelectMode[SelectMode["singleItem"] = 3] = "singleItem";
    SelectMode[SelectMode["singleFolder"] = 4] = "singleFolder";
    SelectMode[SelectMode["independent"] = 5] = "independent";
    SelectMode[SelectMode["auto"] = 6] = "auto";
    SelectMode[SelectMode["independentAuto"] = 7] = "independentAuto";
    SelectMode[SelectMode["autoPrecise"] = 8] = "autoPrecise"; //  if you select a folder it select everything within, if you unselect something it unselects all parents
})(SelectMode || (SelectMode = {}));
var SearchState;
(function (SearchState) {
    SearchState[SearchState["NoSearch"] = 0] = "NoSearch";
    SearchState[SearchState["FilterDone"] = 1] = "FilterDone";
    SearchState[SearchState["ServerRunning"] = 2] = "ServerRunning";
    SearchState[SearchState["ServerDone"] = 3] = "ServerDone"; // the search results returned
})(SearchState || (SearchState = {}));
var SearchUpdate;
(function (SearchUpdate) {
    SearchUpdate[SearchUpdate["inserted_node"] = 1] = "inserted_node";
    SearchUpdate[SearchUpdate["updated_rec"] = 2] = "updated_rec";
    SearchUpdate[SearchUpdate["filter_status_changed"] = 3] = "filter_status_changed";
    SearchUpdate[SearchUpdate["title_changed"] = 4] = "title_changed";
    SearchUpdate[SearchUpdate["item_dropped"] = 5] = "item_dropped"; // an item was draged and dropped to a new place (if this happens after creating it , it must be refreshed)
})(SearchUpdate || (SearchUpdate = {}));


/***/ }),
/* 19 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TitleToolbarImpl: () => (/* binding */ TitleToolbarImpl)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _businesslogic_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11);
/* harmony import */ var _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var _BaseControl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(20);
/* harmony import */ var _markAsTemplate__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(21);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(1);
/* harmony import */ var _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(9);
/* harmony import */ var _Tools_ItemHistoryView__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(29);
/* harmony import */ var _Tools_ItemReferenceView__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(46);
/* harmony import */ var _businesslogic_ComponentImport__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(35);
/* harmony import */ var _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(24);
/// <reference types="matrixrequirements-type-declarations" />;















$.fn.titleToolbar = function (options) {
    if (!options.fieldHandler) {
        options.fieldHandler = _businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.FieldHandlerFactory.CreateHandler(_globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig, _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_10__.FieldDescriptions.Field_dummy, options);
        options.fieldHandler.initData(JSON.stringify(options.fieldValue));
    }
    let baseControl = new TitleToolbarImpl(this, options.fieldHandler);
    this.getController = () => { return baseControl; };
    baseControl.init(options);
    return this;
};
class TitleToolbarImpl extends _BaseControl__WEBPACK_IMPORTED_MODULE_3__.BaseControl {
    constructor(control, fieldHandler) {
        super(control, fieldHandler);
    }
    init(options) {
        let that = this;
        this._refDlgIcon = null;
        var defaultOptions = {
            id: "",
            title: "",
            controlState: _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.FormView,
            dummyData: false,
            valueChanged: function () {
            },
            canEdit: false,
            canEditTitle: false,
            canDelete: false,
            validate: true,
            parameter: {
                readonly: false,
                placeholder: "enter title"
            }
        };
        this.isInHiddenMode = false;
        this.settings = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.JSON.mergeOptions(defaultOptions, options);
        this.warnedAboutOutOfDate = false;
        var showTools = this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.FormEdit || this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.FormView;
        var title = this.settings.title;
        if (this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.DialogCreate) {
            this._root.append($("<span class='pull-left baseControlHelp itemTitleDemand'>" + this.settings.help + "</span>"));
        }
        this._root.data("original", this.settings.title);
        this._root.data("new", this.settings.title);
        // create title bar
        if (showTools) {
            this._root.addClass("itemTitleBar");
        }
        else if (this.settings.canEdit) {
            this._root.addClass("itemTitleBarNoTools");
        }
        else {
            this._root.addClass("itemTitleBarNoToolsNoEdit");
        }
        let importSource = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.isConfigClient() ? null : _globals__WEBPACK_IMPORTED_MODULE_0__.app.getImportSource(this.settings.item);
        this.link = $("<div>").refLink({
            folder: false,
            placeholder: this.settings.parameter.placeholder,
            id: this.settings.id,
            title: title,
            style: ((this.settings.canEdit && this.settings.canEditTitle) ? _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_6__.refLinkStyle.edit : _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_6__.refLinkStyle.link),
            tooltip: _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_6__.refLinkTooltip.none,
            callback: function (id, newText) {
                if (!that.isInHiddenMode) {
                    if (that.settings.type == "DOC" && newText.indexOf("\\") != -1) {
                        _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showError("Invalid character in DOC title", "backslashes are not allowed!");
                    }
                    that._root.data("new", newText);
                    if (that.settings.valueChanged) {
                        that.settings.valueChanged.apply(null);
                    }
                }
            },
            validate: this.settings.validate,
            includeSourceLink: (!showTools && importSource && importSource.relation == _businesslogic_ComponentImport__WEBPACK_IMPORTED_MODULE_9__.EImportMode.Include)
                ? `included from${importSource.downItem.projectShort}/${importSource.downItem.itemRefWithVersion}`
                : ""
        });
        $(".refId", this.link).click(function () {
            if (that.settings.controlState != _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.FormEdit && that.settings.controlState != _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.FormView) {
                // nothing to show
                return;
            }
            else if (_matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(that.settings.id).isFolder) {
                return;
            }
            else {
                let currentPanel = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixApplicationUI.currentPanel;
                if (currentPanel.toggleZen) {
                    currentPanel.toggleZen();
                }
            }
        });
        this.showOutOfDateIcon();
        this.link.addClass('itemTitle rowFlex');
        if (this.settings.locked) {
            let labelTools = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.CreateNewLabelTools();
            let dn = labelTools.getDisplayName(this.settings.locked);
            let lockedBy = $("<span class='lockedItem'>").html("<i class='fa fa-lock-alt'></i> (locked)");
            // tooltip with info why it is locked and how it can be unlocked
            $(".refId", this.link).append(lockedBy);
            let tooltip = "Locked by label '" + this.settings.locked + (dn ? (": " + dn) : "") + "'";
            tooltip += this.settings.unlockers ? (". Can be unlocked by: " + this.settings.unlockers + ".") : ". Cannot be unlocked in UI.";
            lockedBy.tooltip({ title: tooltip, placement: "bottom" });
        }
        this._root.append(this.link);
        if (this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.DialogCreate && !this.settings.noAutoActivation) {
            setTimeout(function () {
                $(".refTitle", that.link).click();
            }, 500);
        }
        if (this.settings.controlState !== _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.DialogCreate) {
            this.link.find(".refId").append($("<div class='pull-right itemViewers'>"));
        }
        $(this._root).on('focusout.editable', function (e) {
            $('.editable-open').parent().find("form").trigger('submit');
            console.log("title submitted");
        });
        if (showTools) { // add titlebar tools
            var itemTools = $("<div class=' hidden-print toolsBarButtonsContainer'></div>");
            this._root.append(itemTools);
            var miTouch = $('<li title="Create new version of item"><a href="javascript:void(0)" id="toolTouch">Touch</a></li>').click(function () {
                _globals__WEBPACK_IMPORTED_MODULE_0__.app.touchAsync(that.settings.id, 1);
            });
            var bShare = $('<div class="btn-group">' +
                ' <button id="shareButton"  tabindex="-1" type="button" title data-original-title="Tools" data-toggle="dropdown" class="btn btn-item btn-sm dropdown-toggle">' +
                '<span class="fal fa-ellipsis-v-alt"></span></button>' +
                ' <ul class="sharemenu dropdown-menu dropdown-menu-sub pull-right" role="menu">' +
                ' </ul>' +
                '</div>');
            var bShareMenu = $('ul', bShare);
            var extras = _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getExtrasConfig();
            if (!this.settings.locked && !this.settings.isFolder && _globals__WEBPACK_IMPORTED_MODULE_0__.app.touchToolAvailable(this.settings.item) && (!extras || !_matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.JSON.isTrue(extras.noTouch))) {
                bShareMenu.append(miTouch);
            }
            if (!_businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.mDHF.isDocumentType(this.settings.type)) {
                if (_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUISettings().legacyPrint) {
                    var miPrint = $('<li title="prepare to print"><a href="javascript:void(0)">Print</a></li>').click(function () {
                        _globals__WEBPACK_IMPORTED_MODULE_0__.app.print();
                    });
                    bShareMenu.append(miPrint);
                }
            }
            if (_globals__WEBPACK_IMPORTED_MODULE_0__.app.mailToolAvailable()) {
                var miMail = $('<li class="mailMenu"><a id="toolSendTo" href="javascript:void(0)">Send link by mail</a></li>');
                miMail.click(function (event) {
                    var itemId = _globals__WEBPACK_IMPORTED_MODULE_0__.app.getCurrentItemId();
                    var message = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Mail.getCannedMessage("link", "", itemId);
                    _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Mail.sendMailDlg("", null, itemId, message, "");
                });
                bShareMenu.append(miMail);
            }
            else {
                var miMail = $('<li class="mailMenu"><a href="mailto:?subject=' + this.settings.id + '&amp;body=' + location + '">Email</a></li>');
                bShareMenu.append(miMail);
            }
            var labelTools = $('<div class="labelTools">');
            if (_globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getLabelsConfig() && _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getLabelsConfig().useLabelBar) {
                let labelBar = $("<div class='labelBar'>");
                this._root.after(labelBar);
                labelBar.append(labelTools);
            }
            else {
                itemTools.after(labelTools);
            }
            var workflowTools = $('<div class="btn-group workflowTools">');
            itemTools.append(workflowTools);
            if (!this.settings.isFolder && (_globals__WEBPACK_IMPORTED_MODULE_0__.app.hasLinks(this.settings.item) || (_businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.mTM.getCloneSources() && _businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.mTM.getCloneSources().indexOf(this.settings.type) != -1))) {
                this._refDlgIcon = $(`<i class="fal fa-sitemap" aria-hidden="true" />`);
                var refDlgButton = $("<button id='referenceToolBtn' tabindex='-1' title data-original-title='References' class='btn btn-item'>").append(this._refDlgIcon);
                var refDlgGroup = $("<div class='btn-group'>").append(refDlgButton).click(function () {
                    var rt = new _Tools_ItemReferenceView__WEBPACK_IMPORTED_MODULE_8__.ReferenceTools();
                    rt.showReferenceDialog({ item: that.settings.item, canEdit: that.settings.canEdit });
                });
                itemTools.append(refDlgGroup);
                this.updateItem();
            }
            if (!this.settings.isFolder) {
                // there is no easy way to get history of folder
                var historyTools = new _Tools_ItemHistoryView__WEBPACK_IMPORTED_MODULE_7__.HistoryTools();
                historyTools.renderButtons({
                    control: itemTools,
                    id: this.settings.id,
                    isFolder: this.settings.isFolder,
                    item: this.settings.item,
                    readOnly: !this.settings.canEdit
                });
                if (importSource) {
                    let sourceInfo = (importSource.relation == _businesslogic_ComponentImport__WEBPACK_IMPORTED_MODULE_9__.EImportMode.Include ? "included from " : "copied from ") + importSource.downItem.projectShort + "/" + importSource.downItem.itemRefWithVersion;
                    let sourceLink = $(`<div  class='btn-group'><button id='originalItemBtn' tabindex='-1' title data-original-title='${sourceInfo}' class='btn btn-item'> <span class='fal fa-external-link-alt'></span></button></div>`);
                    sourceLink.click(() => window.open(_globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.matrixBaseUrl + "/" + importSource.downItem.projectShort + "/" + importSource.downItem.itemRefWithVersion.split("-v")[0]));
                    itemTools.append(sourceLink);
                }
                let usedBy = _globals__WEBPACK_IMPORTED_MODULE_0__.app.getUsedBy(this.settings.item);
                if (usedBy) {
                    let linkList = $("<ul>");
                    for (let useByLink of usedBy) {
                        let targetType = useByLink.relation == _businesslogic_ComponentImport__WEBPACK_IMPORTED_MODULE_9__.EImportMode.Include ? "included as" : "copied as";
                        let targetInfo = useByLink.upItem.projectShort + "/" + useByLink.upItem.itemRefWithVersion;
                        $(`<li>${targetType} <span data-target='${targetInfo.split("-v")[0]}' class='refIdHyper includedLink'>${targetInfo}</span></li>`).appendTo(linkList);
                    }
                    let targetLink = $(`<div  class='btn-group'><button id='originalItemBtn' tabindex='-1' title data-original-title='used by' class='btn btn-item'> <span class='fal fa-external-link-square-alt'></span></button></div>`);
                    itemTools.append(targetLink);
                    targetLink.click(() => {
                        let usedByDlg = $("<div>").appendTo($("body"));
                        _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showDialog(usedByDlg, "Item used by", linkList, 300, 200, [{
                                text: "Close",
                                class: 'btnDoIt',
                                click: function () {
                                    usedByDlg.dialog("close");
                                }
                            }], _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_2__.UIToolsConstants.Scroll.Vertical, true, true, () => {
                            usedByDlg.remove();
                        }, () => {
                            $(".includedLink", linkList).click((e) => {
                                window.open(_globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.matrixBaseUrl + "/" + $(e.delegateTarget).data("target"));
                            });
                        }, () => { });
                    });
                }
            }
            // The TestManager customizes folder menus in some cases.
            _businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.mTM.UpdateFolderMenu(bShareMenu, this.settings.item);
            let itemParsed = _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Item.parseRef(this.settings.item.id);
            let root = itemParsed.number == 1 && itemParsed.isFolder;
            if (this.settings.canEdit && _globals__WEBPACK_IMPORTED_MODULE_0__.app.canDeleteItem(this.settings.item) && !root) {
                var bDelete = $("<li class=\"deleteMenu\">Delete</li>");
                bShareMenu.prepend("<li class='divider'></li>");
                bShareMenu.prepend(bDelete);
                bDelete.click(function () {
                    var whatToDelete = that.settings.id;
                    _businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.MR1.triggerBeforeDeleteAsync(that.settings.item).done(function () {
                        let isTemplate = _businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.mDHF.isUsedAsTemplate(that.settings.item.id);
                        let message = isTemplate ?
                            (that.settings.item.id + " is used as template. Deleting will also remove the templates!")
                            : ("Delete '" + that.settings.item.id + " " + title + " '?");
                        let ok = isTemplate ?
                            ("Delete and remove templates")
                            : ("Delete");
                        _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showConfirm(1, { title: message, ok: ok }, function () {
                            let deletedItems = _globals__WEBPACK_IMPORTED_MODULE_0__.app.getChildrenIdsRec(whatToDelete);
                            _globals__WEBPACK_IMPORTED_MODULE_0__.app.deleteItem(whatToDelete).done(function () {
                                _markAsTemplate__WEBPACK_IMPORTED_MODULE_4__.MarkAsTemplateImpl.removeFromTemplates(deletedItems);
                                _businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.MR1.triggerAfterDelete(that.settings.item);
                                if (isTemplate) {
                                    _businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.mDHF.removeAsTemplate(that.settings.item.id);
                                }
                            });
                        }, function () {
                        });
                    }).fail(function () {
                        _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.Logger.log("warn", "delete cancelled using MR1");
                    });
                });
            }
            itemTools.append(bShare);
            itemTools.append(_matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.ContextFrames.getExpender());
            $("button", itemTools).tooltip({ placement: "bottom" });
            // moved after adding history (for jobs plugin to be able to remove it;-)
            _businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.plugins.updateMenu(_businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.pluginHooks.shares, bShareMenu);
        }
    }
    // public interface
    async hasChangedAsync() {
        return this._root.data("original") !== this._root.data("new");
    }
    async getValueAsync() {
        return this._root.data("new");
    }
    setValue(newTitle, fireUpdate) {
        this._root.data("new", newTitle);
        this._root.find("input").val(newTitle);
        this._root.find(".refTitle").html(newTitle);
        if (fireUpdate && this.settings.valueChanged) {
            this.settings.valueChanged.apply(null);
        }
    }
    getText() { }
    getValueRaw() { }
    titleCreationMode() {
        // special mode where control is hidden and used by report generator to set the value
        this._root.hide();
        this.isInHiddenMode = true;
    }
    destroy() {
        if (this.link) {
            this.link.destroy();
        }
    }
    resizeItem() {
    }
    setViewers(viewers) {
        let that = this;
        if (viewers.item !== this.settings.item.id) {
            // that can happen
            // e.g. if use changes item and does not type for a while, the old item will be pinged
            return;
        }
        $(".itemViewers", this._root).html("");
        let ignoredFirstMe = false;
        let otherEditor = (viewers.editor && !viewers.editor.thisSocket) ? viewers.editor.user : "";
        if (viewers.editor && this.settings.type != "XTC" && this.settings.type != "SIGN") {
            $("#thisItemIsDated").hide();
        }
        else {
            $("#thisItemIsDated").show();
        }
        $.each(viewers.users, function (vidx, viewer) {
            if (viewer == _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser() && !ignoredFirstMe) {
                // I myself appear at most once in an item
                ignoredFirstMe = true;
                return;
            }
            let user = _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getUserInfo(viewer);
            if (!user) {
                // that's a spying super user;-)
                return;
            }
            let name = (user.firstName ? user.firstName : "") + " " + (user.lastName ? user.lastName : "");
            if (name == " ")
                name = viewer;
            let itemAccess = "itemViewer";
            if (otherEditor == viewer) {
                otherEditor = ""; // there can only be one
                itemAccess = "itemEditor";
                name += " - is editing this item";
            }
            let spanItemViewer = $("<div class='" + itemAccess + "' title='" + name + "'></div>");
            spanItemViewer.append(_matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.getAvatar(user.login, 32));
            $(".itemViewers", that._root).append(spanItemViewer);
        });
    }
    updateItem(newItem) {
        let that = this;
        if (newItem) {
            if (newItem.id !== this.settings.item.id) {
                // that can happen
                // e.g. if use changes item and does not type for a while, the old item will be pinged
                // console.write("newItem.id !== settings.item.id");
                return;
            }
            if (newItem.history.length && newItem.history.length !== this.settings.item.history.length &&
                !(newItem.history.length === this.settings.item.history.length + 1 && newItem.history[0].action === "move" && newItem.history[0].user === _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser()) // no warning after simple move by this user! MATRIX-1416
            ) {
                if (!this.warnedAboutOutOfDate) {
                    var message = "User " + newItem.history[0].user + " changed item after you loaded it <br><br> Last change at " + newItem.history[0].dateUserFormat;
                    _matrixlib__WEBPACK_IMPORTED_MODULE_5__.ml.UI.showConfirm(-12, { title: message, ok: "Update to new", nok: "Keep displaying old" }, function () {
                        _globals__WEBPACK_IMPORTED_MODULE_0__.app.cancel();
                    }, function () {
                        that.warnedAboutOutOfDate = true;
                        that._root.addClass("staleItem");
                        $(".itemTitle", that._root).tooltip({
                            title: message + " ",
                            placement: "right",
                            html: true,
                            template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner" style="max-width:800px"></div></div>'
                        });
                    });
                }
            }
            this.settings.item.downLinks = newItem.downLinks;
            this.settings.item.upLinks = newItem.upLinks;
        }
        if (this._refDlgIcon) {
            var downMissing = _globals__WEBPACK_IMPORTED_MODULE_0__.app.isDownLinkMissing(this.settings.item);
            var upMissing = _globals__WEBPACK_IMPORTED_MODULE_0__.app.isUpLinkMissing(this.settings.item);
            this._refDlgIcon.removeClass("refGood").removeClass("refOutdated").removeClass("refMissing");
            if (upMissing || downMissing) {
                this._refDlgIcon.addClass("refMissing");
            }
            else if (_globals__WEBPACK_IMPORTED_MODULE_0__.app.isAnyLinkOutdated(this.settings.item)) {
                this._refDlgIcon.addClass("refOutdated");
            }
            else {
                this._refDlgIcon.addClass("refGood");
            }
        }
    }
    toggleOutOfDateIcon() {
    }
    showOutOfDateIcon() {
        let that = this;
        if (this.settings.controlState == _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.FormEdit && this.settings.item && this.settings.item.history && this.settings.item.upLinks && this.settings.item.upLinks.length) {
            // check if item is potentially out of date
            let isXTCorSIGN = this.settings.type == "XTC" || this.settings.type == "SIGN";
            // for XTC take time of creation of XTC, for other the last modification time
            let thisTime = this.settings.item.history[isXTCorSIGN ? this.settings.item.history.length - 1 : 0].date;
            // get the last modification date of all parents
            let parentLastChange = new Date(this.settings.item.upLinks[0].modDate);
            for (let parent of this.settings.item.upLinks) {
                if (new Date(parent.modDate) > parentLastChange) {
                    parentLastChange = new Date(parent.modDate);
                }
            }
            if (new Date(thisTime) < parentLastChange) {
                let clickToTouch = this.settings.canEdit ? " Click to touch" : "";
                let message = isXTCorSIGN ? ("the underlying " + (this.settings.type == "XTC" ? "test" : "DOC") + " was changed after the " + this.settings.type + " was created") : ("at least one uplinked item is newer than this item." + clickToTouch);
                let icon = $(`<span id="thisItemIsDated" class="fal fa-history datedLink" title="${message}"></span>`);
                if (this.settings.canEdit && !isXTCorSIGN) {
                    icon.css("cursor", "pointer").click(() => {
                        _globals__WEBPACK_IMPORTED_MODULE_0__.app.touchAsync(that.settings.id, 1);
                    });
                }
                this.link.find(".refId").append(icon);
            }
        }
    }
}


/***/ }),
/* 20 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseControl: () => (/* binding */ BaseControl)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/// <reference types="bootstrap" />


class BaseControl {
    constructor(control, fieldHandler) {
        this._root = control;
        this.needsLatest = false;
        this.fieldHandler = fieldHandler;
    }
    getFieldHandler() {
        return this.fieldHandler;
    }
    setFieldHandler(fieldHandler) {
        this.fieldHandler = fieldHandler;
    }
    createHelp(settings) {
        var helpline = $("<span class='baseControlHelp'>" + settings.help + "</span>");
        helpline.data("fieldId", settings.fieldId);
        if (settings.parameter.externalHelp && settings.controlState !== _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.Print) {
            var showHelp = $("<a href='https://" + settings.parameter.externalHelp + "' target='_blank'> <span class='fa fa-info-circle'></span></a>");
            helpline.append(showHelp);
        }
        if (settings.parameter.popupHelp && settings.controlState !== _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.Print) {
            var showHelp = $("<span class='fa fa-question-circle showMore' style='padding-left:10px'></span>");
            showHelp.tooltip({
                html: true,
                title: settings.parameter.popupHelp,
                container: 'body',
                template: '<div class="tooltip smarttext-tooltip" role="tooltip"><div class="tooltip-arrow smarttext-tooltip-arrow"></div><div class="tooltip-inner smarttext-tooltip-inner"></div></div>'
            });
            helpline.append(showHelp);
        }
        if (settings.parameter.inlineHelp && settings.controlState !== _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.Print) {
            var showHelp = $("<div class='inlineHelp'>");
            showHelp.html(settings.parameter.inlineHelp);
            helpline.append(showHelp);
        }
        return helpline;
    }
}


/***/ }),
/* 21 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MarkAsTemplateImpl: () => (/* binding */ MarkAsTemplateImpl)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _businesslogic_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);
/* harmony import */ var _docSign__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(22);
/* harmony import */ var _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(24);







$.fn.markAsTemplate = function (options) {
    if (!options.fieldHandler) {
        options.fieldHandler = _businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.FieldHandlerFactory.CreateHandler(_globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig, _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_4__.FieldDescriptions.Field_markAsTemplate, options);
        options.fieldHandler.initData(JSON.stringify(options.fieldValue));
    }
    let baseControl = new MarkAsTemplateImpl(this, options.fieldHandler);
    this.getController = () => { return baseControl; };
    baseControl.init(options);
    return this;
};
class MarkAsTemplateImpl extends _docSign__WEBPACK_IMPORTED_MODULE_3__.DocSignImpl {
    constructor(control, fieldHandler) {
        super(control, fieldHandler);
        this.publishTo = [];
    }
    formatUserLogin(userLogin) {
        return _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.hasUserInfo(userLogin)
            ? userLogin
            : `<s>${userLogin}</s>`;
    }
    init(options) {
        let that = this;
        var defaultOptions = {
            controlState: _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.FormView,
            canEdit: false,
            valueChanged: function () {
            },
            parameter: {
            // item the item containing the rest of the information
            }
        };
        this.settings = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.mergeOptions(defaultOptions, options);
        // changes shall not overwrite other people's changes
        this.needsLatest = true;
        // get current value
        this.originalValue = (this.settings.fieldValue ? JSON.parse(this.settings.fieldValue) : {
            signatures: []
        });
        this.newValue = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.clone(this.originalValue);
        if (options.controlState == _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.Tooltip) {
            return;
        }
        let docTypes = _businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.mDHF.getDocumentFormTypes(); // ["DOC"]
        let templateTypes = _businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.mDHF.getDocumentTemplatesTypes(); // ["SIGN"] could be ["SIGN","DOC"]
        if (docTypes.indexOf(options.type) != -1) {
            // in print version do not show anything
            if (options.controlState == _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.Print) {
                return;
            }
            // this is a DOC, user needs to decide who needs to sign the template to release it
            this.showSignatureTableEdit();
            return;
        }
        if (templateTypes.indexOf(options.type) == -1) {
            // neither a DOC not a SIGN...
            this._root.html("config error: This category cannot be used as template - contact support.");
            return;
        }
        // so this is a SIGN and it's a DOC which still exists
        let signs = this.getTemplateSignatureStatus();
        if (signs.signatures.length == 0) {
            // in print version do not show anything
            if (options.controlState == _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.Print) {
                this.hideSignatureCtrl();
            }
            // this is a normal document as SIGN .. ignore all template  stuff
            return;
        }
        // this is a SIGN or something which has been created from a DOC
        let uplinks = options.item.upLinkList ? options.item.upLinkList.filter(function (uplink) { return docTypes.indexOf(_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.parseRef(uplink.itemRef).type) != -1; }) : [];
        if (uplinks && uplinks.length) {
            // this is actually a template, so the template needs approvals
            // hide signature box
            this.hideSignatureCtrl();
            // print approval box / template publishing feature
            if (signs.missingSignatures) {
                if (this.settings.help.indexOf("|") != -1 && this.settings.help.lastIndexOf("|") != -1)
                    this.settings.help = this.getHelpPart(1) ? this.getHelpPart(1) : (this.settings.help + " - (required approvals)");
                if (this.settings.parameter && this.settings.parameter.inlineHelp && this.settings.parameter.inlineHelp.indexOf("|") != -1) {
                    this.settings.parameter.inlineHelp = this.settings.parameter.inlineHelp.split("|")[0];
                }
                let help = this._root.append(super.createHelp(this.settings));
                this.pub = $("<div class='baseControl'>").appendTo(this._root);
                this.askForSignatures(signs);
            }
            else {
                this.settings.help = this.getHelpPart(2) ? this.getHelpPart(2) : (this.settings.help + " - (distribution to projects)");
                let help = this._root.append(super.createHelp(this.settings));
                if (this.settings.parameter && this.settings.parameter.inlineHelp && this.settings.parameter.inlineHelp.indexOf("|") != -1) {
                    this.settings.parameter.inlineHelp = this.settings.parameter.inlineHelp.split("|")[0];
                }
                this.pub = $("<div class='baseControl'>").appendTo(this._root);
                let vl = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.parseRef(uplinks[0].itemRef).id;
                if (signs.signatures.length > 0) {
                    let approvedBy = $("<div class='inlineHelp approvedBy'>").appendTo(this.pub);
                    let text = "Approved by ";
                    $.each(signs.signatures, function (sidx, s) {
                        text += that.formatUserLogin(s.userid) + " (" + _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.DateTime.renderHumanDate(new Date(s.signDate)) + " )" + ((sidx < signs.signatures.length - 1) ? ", " : "");
                    });
                    approvedBy.html(text);
                }
                if (options.controlState == _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.Print) {
                    return;
                }
                this.showProjects(vl, options.id);
            }
        }
        else {
            let help = this._root.append(super.createHelp(this.settings));
            this.pub = $("<div class='baseControl'>").appendTo(this._root);
            this.pub.html("Cannot be used as template: underlying " + docTypes.join(",") + " has been deleted.");
        }
    }
    getHelpPart(part) {
        let parts = this.settings.help.split("|");
        return (parts.length == 3) ? parts[part] : null;
    }
    // public interface
    async hasChangedAsync() {
        return JSON.stringify(this.originalValue) != JSON.stringify(this.newValue);
    }
    async getValueAsync() {
        return JSON.stringify(this.newValue);
    }
    setValue() {
        return "";
    }
    destroy() {
    }
    resizeItem() {
    }
    static getRequiredApprovals(value) {
        let required = [];
        if (!value)
            return required;
        let jval = JSON.parse(value);
        if (!jval.signatures)
            return required;
        for (let idx = 0; idx < jval.signatures.length; idx++) {
            if (!jval.signatures[idx].datetime) {
                required.push(jval.signatures[idx].user);
            }
        }
        return required;
    }
    static getTemplateSignatureStatus(value) {
        let signatureStatus = {
            signatures: [],
            missing: [],
            given: [],
            signatureDate: {},
            missingSignatures: 0,
            givenSignatures: 0,
            needSignature: false,
            hasSignature: false,
            isTemplate: true
        };
        if (!value)
            return signatureStatus;
        let jval = JSON.parse(value);
        if (!jval.signatures)
            return signatureStatus;
        // matrixspecs
        $.each(jval.signatures, function (key, val) {
            if (val.user) { // workaround handle existing docs with BUG MATRIX-2442 correctly
                signatureStatus.signatures.push({ orgid: val.user, userid: val.user, signDateCustomer: _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.DateTime.renderHumanDate(new Date(val.datetime)), signDate: val.datetime, signaturefileid: "" });
                if (val.datetime) {
                    signatureStatus.given.push(val.user);
                    signatureStatus.givenSignatures++;
                    signatureStatus.hasSignature = signatureStatus.hasSignature || (val.user == _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser());
                }
                else {
                    signatureStatus.missing.push(val.user);
                    signatureStatus.missingSignatures++;
                    signatureStatus.needSignature = signatureStatus.needSignature || (val.user == _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser());
                }
                signatureStatus.signatureDate[val.user] = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.DateTime.renderHumanDate(new Date(val.datetime));
            }
        });
        return signatureStatus;
    }
    static removeFromTemplates(deletedItems) {
        let cached = _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getSettingJSON(MarkAsTemplateImpl.PROJECT_SETTING);
        // check if any item is used as template if not // nothing to do
        if (!cached || !cached.templates || cached.templates.filter(function (temp) { return deletedItems.indexOf(temp.fromSign) != -1; }).length == 0) {
            return;
        }
        // get most recent setting
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.readSettingJSONAsync(MarkAsTemplateImpl.PROJECT_SETTING).done(function (templates) {
            templates.templates = templates.templates.filter(function (temp) { return deletedItems.indexOf(temp.fromSign) == -1; });
            _globals__WEBPACK_IMPORTED_MODULE_0__.app.setSettingJSON(MarkAsTemplateImpl.PROJECT_SETTING, templates);
        });
    }
    hideSignatureCtrl() {
        $(".ft_signatureControl").hide();
        window.setTimeout(function () {
            // just to be sure...
            $(".ft_signatureControl").hide();
        }, 100);
    }
    showProjects(sourceDoc, sourceSign) {
        let that = this;
        // get current project setting
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.readSettingJSONAsync(MarkAsTemplateImpl.PROJECT_SETTING).done(function (result) {
            let templates = result;
            if (!templates || !templates.templates) {
                templates = { templates: [] };
            }
            // print table
            that.publishTo = [];
            that.showCurrentUsages(templates.templates, sourceDoc, sourceSign);
            let pb = $("<button id='pubTemp' class='btn btn-default btn-sm'>Publish as template for selected projects</button>").appendTo(that.pub);
            pb.click(function () {
                // make sure to have latest and greatest
                _globals__WEBPACK_IMPORTED_MODULE_0__.app.readSettingJSONAsync(MarkAsTemplateImpl.PROJECT_SETTING).done(function (result) {
                    templates = result;
                    if (!templates || !templates.templates) {
                        templates = { templates: [] };
                    }
                    // update
                    $.each(templates.templates, function (idx, ps) {
                        if (ps.fromProject == _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getProject() && ps.fromSign != sourceSign) {
                            if (ps.fromDOC == sourceDoc) {
                                // for other items based on the same docs, remove everything which is being published somewhere else
                                ps.canUseIn = ps.canUseIn.filter(function (p) {
                                    let doPublish = that.publishTo.indexOf(p) != -1;
                                    return !doPublish;
                                });
                            }
                        }
                    });
                    // remove templates which are not visible in any projects
                    templates.templates = templates.templates.filter(function (temp) {
                        return temp.canUseIn.length > 0;
                    });
                    // remove publishing info for this sign
                    templates.templates = templates.templates.filter(function (temp) {
                        return temp.fromProject != _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getProject() || temp.fromSign != sourceSign;
                    });
                    // add publishing info for this sign
                    templates.templates.push({ fromProject: _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getProject(), fromDOC: sourceDoc, fromSign: sourceSign, fromName: _globals__WEBPACK_IMPORTED_MODULE_0__.app.getItemTitle(sourceSign), canUseIn: _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.clone(that.publishTo) });
                    _globals__WEBPACK_IMPORTED_MODULE_0__.app.setSettingJSON(MarkAsTemplateImpl.PROJECT_SETTING, templates).done(function () {
                        that.pub.html("");
                        that.showProjects(sourceDoc, sourceSign);
                    });
                });
            });
        });
    }
    showCurrentUsages(current, sourceDoc, sourceSign) {
        let that = this;
        // figure out what is currently used as template
        let others = [];
        $.each(current, function (idx, ps) {
            if (ps.fromProject == _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getProject()) {
                if (ps.fromSign == sourceSign) {
                    // this is currently published
                    that.publishTo = ps.canUseIn;
                }
                else if (ps.fromDOC == sourceDoc) {
                    // another version of DOC is used as template in some projects
                    others = others.concat(ps.canUseIn);
                }
            }
        });
        let projects = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getProjectList(false).filter(function (p) { return p.shortLabel != "EMPTY" && p.shortLabel != _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getProject(); });
        let templateProjects = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getCustomerSettingJSON(MarkAsTemplateImpl.PROJECT_SETTING_Projects);
        if (templateProjects && templateProjects.targets && templateProjects.targets.length) {
            projects = projects.filter(function (p) { return templateProjects.targets.indexOf(p.shortLabel) != -1; });
        }
        let hasUsedOther = false; // whether some have other published versions
        $.each(projects, function (idx, project) {
            var short = project.shortLabel;
            hasUsedOther = hasUsedOther || others.indexOf(project.shortLabel) != -1;
            var cb = $("<div>").appendTo(that.pub).checkBox({
                canEdit: true,
                help: (others.indexOf(project.shortLabel) != -1 ? "* " : "") + project.shortLabel + " - " + project.label,
                valueChanged: async function () {
                    if (await cb.getController().getValueAsync()) {
                        that.publishTo.push(short);
                    }
                    else {
                        that.publishTo = that.publishTo.filter(function (p) {
                            return p != short;
                        });
                    }
                    $("#pubTemp").addClass("btn-success");
                },
                parameter: {},
                fieldValue: that.publishTo.indexOf(project.shortLabel) == -1 ? "0" : "1"
            });
        });
        if (hasUsedOther) {
            $("<div>").appendTo(that.pub).html("* Some project(s) use another version of template");
        }
    }
    // show a table in DOC, where author can decide who needs to sign to release the document
    showSignatureTableEdit() {
        let that = this;
        var userDropdown = [];
        var userList = _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getUserNames();
        for (var udx = 0; udx < userList.length; udx++) {
            userDropdown.push({ id: userList[udx].login.toLowerCase(), label: userList[udx].login.toLowerCase() });
        }
        let dd = $("<div>").appendTo(this._root);
        let cb = that.settings.valueChanged;
        let userSelectionChanged = async function () {
            let val = await dd.getController().getValueAsync();
            if (val) {
                that.newValue = {
                    // MATRIX-4764 Don't save deleted user.
                    signatures: MarkAsTemplateImpl.removeDeletedUsers(val.split(",")).map(function (usr) {
                        return { user: usr, datetime: "" };
                    })
                };
            }
            else { // fix MATRIX-2442
                that.newValue = {
                    signatures: []
                };
            }
            if (cb) {
                cb.apply(null);
            }
        };
        let params = {
            fieldValue: that.originalValue.signatures.map(function (us) { return us.user; }).join(","),
            canEdit: true,
            help: that.getHelpPart(0) ? that.getHelpPart(0) : (that.settings.help + " - (required approvals)"),
            parameter: {
                placeholder: "select user who need to sign template",
                create: false,
                options: userDropdown,
                maxItems: 100,
                sort: true,
                inlineHelp: (that.settings.parameter && that.settings.parameter.inlineHelp) ? that.settings.parameter.inlineHelp : ""
            },
            valueChanged: userSelectionChanged
        };
        dd.mxDropdown(params);
        //Fix for MATRIX-4764 Problem with Template approver and deleted users
        let missingUser = that.originalValue.signatures.filter(sig => _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getUserNames().findIndex(user => user.login.toLowerCase() == sig.user) == -1);
        if (missingUser.length > 0) {
            let cleanupUserList = (a) => {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showAck(-1, "These users has been removed sinced they are no longer active : <ul style='margin-left:80px'>" + missingUser.map(o => "<li style='text-align:left;'>" + o.user + "</li>").join("") + "</ul> Please save to correct.", "User list has been cleaned in '" + params.help + "'");
                userSelectionChanged();
                _businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.MR1.onItemDisplayed().unsubscribe(cleanupUserList);
            };
            _businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.MR1.onItemDisplayed().subscribe(this, cleanupUserList);
        }
    }
    static removeDeletedUsers(userList) {
        return userList.filter(u => _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getUserNames().findIndex(un => un.login.toLowerCase() == u.toLowerCase()) != -1);
    }
    getTemplateSignatureStatus() {
        return MarkAsTemplateImpl.getTemplateSignatureStatus(JSON.stringify(this.originalValue));
    }
    // ask for signatures
    askForSignatures(signatureStatus) {
        let that = this;
        let uiCtrl = $("<div>").appendTo(this.pub);
        // render a signature table with current status if there is 1+ signature in document
        this.renderSignatureTable(signatureStatus, uiCtrl, "not yet approved", "you need to approve this template", "approved at");
        if (this.settings.controlState == _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.Print || this.settings.controlState == _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.Tooltip) {
            return;
        }
        // show signature box unless user needs to sign or this is a tooltip, print or other special view
        this.showSignatureField(signatureStatus, uiCtrl, $(uiCtrl.find("td")[0]).width(), "Approve", function (pwd) {
            that.signTemplate(pwd);
        }, true);
    }
    signTemplate(pwd) {
        let that = this;
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.checkPassword(pwd).done(function () {
            // pwd is correct
            // get item with most current approvals
            _globals__WEBPACK_IMPORTED_MODULE_0__.app.getItemAsync(that.settings.id).done(function (item) {
                let current = item[that.settings.fieldId];
                that.originalValue = (current ? JSON.parse(current) : {
                    signatures: []
                });
                that.newValue = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.clone(that.originalValue);
                $.each(that.newValue.signatures, function (idx, sig) {
                    if (sig.user == _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser()) {
                        sig.datetime = new Date().toJSON();
                    }
                });
                _globals__WEBPACK_IMPORTED_MODULE_0__.app.saveAsync(false);
            }).fail(function (error) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("cannot approve template", error);
            });
        }).fail(function (error) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("invalid password", "");
        });
    }
}
MarkAsTemplateImpl.PROJECT_SETTING = "templates";
MarkAsTemplateImpl.PROJECT_SETTING_Projects = "templateProjects";


/***/ }),
/* 22 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DocSignImpl: () => (/* binding */ DocSignImpl)
/* harmony export */ });
/* harmony import */ var _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);
/* harmony import */ var _docBase___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(23);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);
/* harmony import */ var _Parts_UserControl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(25);
/* harmony import */ var _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(2);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(5);
/* harmony import */ var _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(24);









$.fn.docSign = function (options) {
    if (!options.fieldHandler) {
        //No need for a field handler here, so let's create a dummy one.
        options.fieldHandler = _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.FieldHandlerFactory.CreateHandler(_globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig, _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_6__.FieldDescriptions.Field_dummy, options);
        options.fieldHandler.initData(options.fieldValue);
    }
    let baseControl = new DocSignImpl(this, options.fieldHandler);
    this.getController = () => { return baseControl; };
    baseControl.init(options);
    return this;
};
class DocSignImpl extends _docBase___WEBPACK_IMPORTED_MODULE_1__.DocBaseImpl {
    constructor(control, fieldHandler) {
        super(control, fieldHandler);
    }
    init(options) {
        let that = this;
        this._root.append(super.createHelp(options));
        this.uiCtrl = $("<div class='baseControl'>").appendTo(this._root);
        //this.uiCtrl.append("<div style='color:red'>BETA</div>");
        let defaultOptions = {
            controlState: _globals__WEBPACK_IMPORTED_MODULE_5__.ControlState.FormView,
            canEdit: false,
            valueChanged: function () {
            },
            parameter: {
            // item the item containing the rest of the information
            }
        };
        this.settings = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.mergeOptions(defaultOptions, options);
        // changes shall not overwrite other people's changes
        this.needsLatest = true;
        this.data = this.parseValue(this.settings.fieldValue);
        if (this.data.rejectComments && this.data.rejectComments.length) {
            $.each(this.data.rejectComments, function (rcidx, rejectComment) {
                that.uiCtrl.append(`<div style='color:red'>Document was rejected by <b>${rejectComment.user}</b> at <b>${_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.DateTime.renderHumanDate(new Date(rejectComment.createdAt))}</b>. Reason was:</div>`);
                let reason = $(`<div'>${rejectComment.comment}</div>`).appendTo(that.uiCtrl);
                reason.highlightReferences();
            });
        }
        else {
            // document was not rejected
            let signatureStatus = _docBase___WEBPACK_IMPORTED_MODULE_1__.DocBaseImpl.readSignatureInfo(this.settings.item);
            // render a signature table with current status if there is 1+ signature in document
            this.renderSignatureTable(signatureStatus, this.uiCtrl, "not yet signed", "you need to sign this document", "signed at");
            // show signature box unless user needs to sign or this is a tooltip, print or other special view
            if (signatureStatus.needSignature) {
                if (_globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.canSign(options.type)) {
                    this.showSignatureField(signatureStatus, this.uiCtrl, $(this.uiCtrl.find("td")[0]).width(), "Sign", function (pwd) {
                        that.signDocument(pwd);
                    }, false);
                }
                else {
                    this._root.append("<div class='inlineHelp'>You have no rights to sign documents</div>");
                }
            }
            if (!that.isMe(DocSignImpl.iUser)) {
                DocSignImpl.iUser = _globals__WEBPACK_IMPORTED_MODULE_5__.matrixSession.getUser();
                _globals__WEBPACK_IMPORTED_MODULE_5__.restConnection.getServer("user").done(function (allUsers) {
                    DocSignImpl.iHaveSignature = false;
                    for (var idx = 0; idx < allUsers.user.length; idx++) {
                        if (that.isMe(allUsers.user[idx].login)) {
                            DocSignImpl.iHaveSignature = allUsers.user[idx].signatureImage !== "";
                        }
                    }
                });
            }
        }
    }
    // initialize options
    // public interface
    async hasChangedAsync() {
        return false;
    }
    async getValueAsync(currentItem) {
        let that = this;
        return JSON.stringify(this.data);
    }
    destroy() {
    }
    resizeItem() {
        let width = Math.max(100, $(this.uiCtrl.find("td")[0]).width());
        $("input.signatureInfo", this.uiCtrl).width(width);
    }
    parseValue(fieldVal) {
        if (fieldVal) {
            return JSON.parse(fieldVal);
        }
        else {
            return {
                rejectComments: []
            };
        }
    }
    // try to get additional info from original DOC signature table. and than draw the UI
    addSignMeaning(uiCtrl) {
        let that = this;
        let itemId = _globals__WEBPACK_IMPORTED_MODULE_5__.app.getCurrentItemId();
        if (_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.parseRef(itemId).type != "SIGN" || !_globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getDHFConfig().showOriginalSignMeaning) {
            return;
        }
        let dhfFields = _globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getFieldsOfType("dhf").map(field => "" + field.field.id);
        // get the parent DOC
        _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.mDHF.getBaseDOCofSIGN(_globals__WEBPACK_IMPORTED_MODULE_5__.matrixSession.getProject(), that.settings.item).done((theDoc) => {
            for (let field in theDoc) {
                let meanings = _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.mDHF.getSignatureMeanings() ? _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.mDHF.getSignatureMeanings() : {};
                if (dhfFields.indexOf(field) != -1 && theDoc[field]) {
                    let dhfField = JSON.parse(theDoc[field]);
                    if (dhfField.type == "signaturebox" && dhfField.fieldValue && dhfField.ctrlConfig && dhfField.ctrlConfig.columns) {
                        let columns = dhfField.ctrlConfig.columns;
                        let meaningColumn = columns.filter(c => c.columnType == "type6");
                        let userColumn = columns.filter(c => c.columnType == "type4");
                        if (meaningColumn.length && userColumn.length) {
                            let meaningColumnField = meaningColumn[0].field;
                            let userColumnField = userColumn[0].field;
                            let signTable = JSON.parse(dhfField.fieldValue);
                            for (let signDef of signTable) {
                                let user = signDef[userColumnField];
                                let meaning = signDef[meaningColumnField];
                                let meaningHuman = meanings[meaning] ? meanings[meaning] : meaning;
                                if (user && meaningHuman) {
                                    $.each($("tr", $(".signatureTable")), (rowIdx, row) => {
                                        let hasUser = false;
                                        $.each($("td", $(row)), (tdIdx, td) => {
                                            if ($(td).text() == user)
                                                hasUser = true;
                                        });
                                        if (hasUser) {
                                            let meaningTd = $(".OriginalSignMeaning", $(row));
                                            let current = $(meaningTd).text();
                                            current = (current ? (current + ", ") : "") + meaningHuman;
                                            $(meaningTd).text(current);
                                        }
                                    });
                                }
                            }
                        }
                    }
                }
            }
        }).fail(() => {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.error("no original parent of DOC found, columns with signature meaning stays empty...");
        });
    }
    // render signature table (maybe with some extra info from DOC)
    renderSignatureTable(signatureInfo, uiCtrl, notSigned, youSign, signedAt) {
        let that = this;
        if (signatureInfo.signatures.length === 0) {
            $("<div style='margin-bottom: 12px;'><span class='searchResult'>no signatures required</span></div>").appendTo(uiCtrl);
            return;
        }
        let sigInfo = $("<div class='sigInfo'>").appendTo(uiCtrl);
        let statusTable = $("<table class='signatureTable table table-bordered'>");
        let ctrlContainer = $("<div class='baseControl'>");
        sigInfo.append(ctrlContainer.append(statusTable));
        let body = $("<tbody>");
        statusTable.append(body);
        let hasSignComment = false;
        for (let idx = 0; idx < signatureInfo.signatures.length; idx++) {
            let needSign = $("<td>").html("<span class='needsSignature'>" + notSigned + "</span>");
            if (this.isMe(signatureInfo.signatures[idx].userid) && !signatureInfo.signatures[idx].signDate) {
                needSign = $("<td>").html("<span class='needsSignature'>" + youSign + "</span>");
            }
            let dateCustomer = signatureInfo.signatures[idx].signDateCustomer;
            let tr = $("<tr>");
            let user = signatureInfo.signatures[idx].userid;
            let orgid = signatureInfo.signatures[idx].orgid;
            let userDisplayString = _globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.hasUserInfo(user) ? user : `<s>${user}</s>`;
            let userText = `<span title="${_globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getFullName(user)}">${userDisplayString}</span>`;
            if (orgid && orgid != user) {
                userText += `<span class="proxyInfo">(proxy for  <span title="${_globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getFullName(orgid)}">${orgid}</span>)</span>`;
            }
            if (_globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getDHFConfig().showOriginalSignMeaning) {
                tr.append($(`<td class='OriginalSignMeaning'>`));
            }
            if (dateCustomer) {
                tr.append($("<td>").html(userText));
                let signed = $("<td>").appendTo(tr);
                signed.append($("<span>").html(signedAt + " " + dateCustomer));
                if (_globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getDHFConfig().signedMeaning) {
                    let commentCol = $("<td class='commentCol'>").appendTo(tr);
                    if (that.data.acceptComments) {
                        let acceptComment = that.data.acceptComments.filter(comment => comment.user == user && comment.comment);
                        if (acceptComment.length) {
                            hasSignComment = true;
                            commentCol.append($("<div>").html(acceptComment[acceptComment.length - 1].comment));
                        }
                    }
                }
            }
            else if (_globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getDHFConfig().proxyRights && _globals__WEBPACK_IMPORTED_MODULE_5__.matrixSession.amIAllowedUser(_globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getDHFConfig().proxyRights) && that.settings.canEdit) {
                let tdUser = $("<td>").html(`<span>${userText}</span> <button data-proxy="${user}" class="proxy btn btn-xs" style="float:right">proxy</button>`);
                tr.append(tdUser);
                tr.append(needSign);
                if (_globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getDHFConfig().signedMeaning) {
                    let commentCol = $("<td class='commentCol'>").appendTo(tr);
                }
            }
            else {
                tr.append($("<td>").html(userText));
                tr.append(needSign);
                if (_globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getDHFConfig().signedMeaning) {
                    $("<td class='commentCol'>").appendTo(tr);
                }
            }
            body.append(tr);
        }
        if (!hasSignComment) {
            $(".commentCol").hide();
        }
        // fill column with sign meaning from DOC
        if (_globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getDHFConfig().showOriginalSignMeaning) {
            this.addSignMeaning(uiCtrl);
        }
        // handle proxy button
        $(".proxy").click(function (event) {
            let btn = $(event.delegateTarget);
            let user = btn.data("proxy");
            if (_globals__WEBPACK_IMPORTED_MODULE_5__.app.needsSave()) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Cannot change user", "You need to save first.");
                return;
            }
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.SelectUserOrGroup.showSingleSelectDialog(user, "Select Proxy", "Replaces required signature", true, false, (newUser) => {
                if (newUser == user) {
                    // nothing changed
                    return;
                }
                if (signatureInfo.signatures.map(info => info.userid).indexOf(newUser) != -1) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("User exists", "The same user cannot sign for two");
                    return;
                }
                let signatureFieldId = _globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getFieldsOfType("signature", "SIGN")[0].field.id;
                let update = { id: that.settings.item.id, onlyThoseFields: 1, onlyThoseLabels: 1 };
                let oldSign = that.settings.item[signatureFieldId];
                let newSign = oldSign.replace(`user="${user}" userId="${that.getUserId(user)}"`, `user="${newUser}" userId="${that.getUserId(newUser)}"`);
                update["fx" + signatureFieldId] = newSign;
                _globals__WEBPACK_IMPORTED_MODULE_5__.app.updateItemInDBAsync(update, "proxy change").done(function () {
                    _globals__WEBPACK_IMPORTED_MODULE_5__.app.treeSelectionChangeAsync(that.settings.item.id);
                    that.removeNotifications(that.settings.item.id, user);
                });
            }, null);
        });
    }
    // remove signature notifications for one or more users
    removeNotifications(itemId, user) {
        let that = this;
        if (!_globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getDHFConfig().fixNotifications) {
            return;
        }
        _globals__WEBPACK_IMPORTED_MODULE_5__.restConnection.getProject("todo?includeFuture=0&itemRef=" + itemId).done(function (allNotification) {
            let toDelete = allNotification.todos.filter(todo => todo.action && todo.action.todoType == "needSignature" && (!user || user == todo.login));
            that.removeNotificationsRec(toDelete, 0);
        });
    }
    removeNotificationsRec(toDelete, idx) {
        let that = this;
        if (idx >= toDelete.length)
            return;
        _globals__WEBPACK_IMPORTED_MODULE_5__.restConnection.deleteServerAsync(_globals__WEBPACK_IMPORTED_MODULE_5__.matrixSession.getProject() + "/todo/" + toDelete[idx].todoId, {}).done(() => {
            that.removeNotificationsRec(toDelete, idx + 1);
        });
    }
    getUserId(login) {
        let user = _globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getUserNames().filter(info => info.login == login);
        if (user.length != 1)
            return 0;
        let userId = user[0].id;
        if (userId == -1) {
            // this is a user who has access only through a user group. get the real id
            $.each(_globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getUserGroups(), function (ugIdx, ug) {
                $.each(ug.membership, function (mIdx, m) {
                    if (m.login == login) {
                        userId = m.userId;
                    }
                });
            });
        }
        return userId;
    }
    showSignatureField(signatureInfo, uiCtrl, columnSize, btnName, onSign, templateApproval) {
        let that = this;
        if (!signatureInfo.needSignature || this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_5__.ControlState.Print || this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_5__.ControlState.Tooltip || this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_5__.ControlState.HistoryView || this.settings.locked) {
            return;
        }
        var needEnterUserName = _globals__WEBPACK_IMPORTED_MODULE_5__.matrixSession.getCustomerSetting("needEnterUserName") == "1";
        new _Parts_UserControl__WEBPACK_IMPORTED_MODULE_3__.UserControl().askForPassword(uiCtrl, btnName, !needEnterUserName, Math.max(100, columnSize), (name, pwd) => {
            if (!pwd) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("You must supply a password to sign the document", "");
            }
            else if (needEnterUserName && name != _globals__WEBPACK_IMPORTED_MODULE_5__.matrixSession.getUser()) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Please provide your user id", "");
            }
            else {
                onSign(pwd);
            }
        });
        if (!templateApproval) {
            if (_globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getDHFConfig().signatureHint) {
                $(".signatureInfo button").html(_globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getDHFConfig().canReject ? "Reject/Sign*" : "Sign*");
                uiCtrl.append(`<div class="inlineHelp" style="margin-top:12px;font-size:smaller">* ${_globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getDHFConfig().signatureHint}</div>`);
            }
            if (_globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getDHFConfig().canReject || _globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getDHFConfig().signedMeaning) {
                // replace the sign button by a dropdown
                this.replaceSignButton();
            }
        }
    }
    // make the sign button a drop down menu with different options
    replaceSignButton() {
        let that = this;
        let ddOptions = [];
        if (_globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getDHFConfig().signedMeaning && _globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getDHFConfig().signedMeaning.length) {
            for (let meaning of _globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getDHFConfig().signedMeaning) {
                ddOptions.push({ name: meaning, click: () => { that.signFromDropdown(meaning); } });
            }
        }
        else {
            // normal sign
            ddOptions.push({ name: "Sign", click: () => { that.signFromDropdown(); } });
        }
        if (_globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getDHFConfig().canReject) {
            ddOptions.push({ name: "Reject", click: () => {
                    if (_globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getDHFConfig().rejectWithoutPass) {
                        that.rejectSign();
                    }
                    else {
                        that.rejectSignWithPass();
                    }
                } });
        }
        $(".signatureInfo button").replaceWith(_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.createDropDownButton($(".signatureInfo button").html(), ddOptions, false, "signBtn", true));
        $("ul", $(".signatureInfo")).addClass("pull-right");
    }
    rejectSignWithPass() {
        let pwd = $(".signatureInfo input[placeholder='password']").val();
        let name = $("input.signatureInfo").val();
        let needEnterUserName = _globals__WEBPACK_IMPORTED_MODULE_5__.matrixSession.getCustomerSetting("needEnterUserName") == "1";
        if (!pwd) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("You must supply a password to reject the document", "");
        }
        else if (needEnterUserName && name != _globals__WEBPACK_IMPORTED_MODULE_5__.matrixSession.getUser()) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Please provide your user id", "");
        }
        else {
            _globals__WEBPACK_IMPORTED_MODULE_5__.app.checkPassword(pwd).done(() => {
                this.rejectSign();
            }).fail(() => {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Incorrect Password", "");
            });
        }
    }
    // ask user for comment and reject SIGN
    rejectSign() {
        let that = this;
        let subj = $("<div>").richText({
            controlState: _globals__WEBPACK_IMPORTED_MODULE_5__.ControlState.FormEdit,
            canEdit: true,
            help: "Reject message",
            fieldValue: "",
            valueChanged: function () {
            },
            parameter: {}
        });
        let dlg = $("<div>").appendTo($("body"));
        let ui = $("<div style='width:100%;height:100%'>");
        ui.append(subj);
        ui.addClass("dlg-no-scroll");
        ui.removeClass("dlg-v-scroll");
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showDialog(dlg, "Reject SIGN", ui, -730, -470, [{
                text: 'Reject',
                class: 'btnDoIt',
                click: async function () {
                    let text = await subj.getController().getValueAsync();
                    if (_globals__WEBPACK_IMPORTED_MODULE_5__.globalMatrix.ItemConfig.getDHFConfig().rejectNeedsComment && !text) {
                        return false;
                    }
                    _globals__WEBPACK_IMPORTED_MODULE_5__.restConnection.putProject(`sign/${that.settings.item.id}`, { rejectSign: (text ? text : "rejected") }).done(() => {
                        _globals__WEBPACK_IMPORTED_MODULE_5__.app.treeSelectionChangeAsync(that.settings.item.id);
                    });
                    dlg.dialog("close");
                }
            }, {
                text: 'Cancel',
                class: 'btnCancelIt',
                click: function () {
                    dlg.dialog("close");
                }
            }], _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_4__.UIToolsConstants.Scroll.None, false, false, () => { dlg.remove(); }, () => { $("input", subj).focus(); }, () => { });
    }
    signFromDropdown(meaning) {
        let pwd = $(".signatureInfo input[placeholder='password']").val();
        let name = $("input.signatureInfo").val();
        let needEnterUserName = _globals__WEBPACK_IMPORTED_MODULE_5__.matrixSession.getCustomerSetting("needEnterUserName") == "1";
        if (!pwd) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("You must supply a password to sign the document", "");
        }
        else if (needEnterUserName && name != _globals__WEBPACK_IMPORTED_MODULE_5__.matrixSession.getUser()) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Please provide your user id", "");
        }
        else {
            this.signDocument(pwd, meaning);
        }
    }
    signDocument(pwd, meaning) {
        let that = this;
        if (_globals__WEBPACK_IMPORTED_MODULE_5__.app.needsSave()) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("You need to save other changes first", "");
            return;
        }
        function addSignature() {
            _globals__WEBPACK_IMPORTED_MODULE_5__.app.signItemAsync(that.settings.item.id, pwd, meaning).done(function (result) {
                if (result && !result.ok) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Could not sign document", result.result);
                    return;
                }
                // get item with new signatures
                _globals__WEBPACK_IMPORTED_MODULE_5__.app.getItemAsync(that.settings.id).done(function (item) {
                    // do automation stuff
                    let lastSignature = _docBase___WEBPACK_IMPORTED_MODULE_1__.DocBaseImpl.readSignatureInfo(item).missingSignatures === 0;
                    _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.MR1.triggerAfterSignature(item, lastSignature);
                    _globals__WEBPACK_IMPORTED_MODULE_5__.app.renderItem();
                });
            }).fail(function (error) {
                if (error) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Could not sign document", error);
                }
                else {
                    // cancelled save
                }
            });
        }
        if (!DocSignImpl.iHaveSignature) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showConfirm(4, { title: "You have not uploaded a signature image! Do you want to sign the document without an image?", ok: "Sign anyway" }, function () {
                addSignature();
            }, function () {
            });
        }
        else {
            addSignature();
        }
    }
}
DocSignImpl.iHaveSignature = false;
DocSignImpl.iUser = "";


/***/ }),
/* 23 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DocBaseImpl: () => (/* binding */ DocBaseImpl)
/* harmony export */ });
/* harmony import */ var _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);
/* harmony import */ var _BaseControl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(20);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(24);






class DocBaseImpl extends _BaseControl__WEBPACK_IMPORTED_MODULE_1__.BaseControl {
    constructor(control, fieldHandler) {
        super(control, fieldHandler);
    }
    // this method returns all signature information from a item
    // the item can be a DOC, SIGN, RELEASE 
    // depending on the type (e.g. DOC) it looks for different fields
    static readSignatureInfo(item) {
        let that = this;
        let signatureStatus = {
            signatures: [],
            missing: [],
            given: [],
            signatureDate: {},
            missingSignatures: 0,
            givenSignatures: 0,
            needSignature: false,
            hasSignature: false,
            isTemplate: false
        };
        if (!item) {
            return signatureStatus;
        }
        $.each(item, function (key, val) {
            if (val && _globals__WEBPACK_IMPORTED_MODULE_3__.globalMatrix.ItemConfig.getFieldType(item.type, key) === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_4__.FieldDescriptions.Field_dhf) {
                // special dhf control
                var fieldVal = JSON.parse(val);
                if (fieldVal.type.toLocaleLowerCase() === "templateapproval") {
                    signatureStatus.isTemplate = true;
                }
            }
        });
        if (_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.mDHF.isDocumentFormType(item.type)) { // DRAFT, DOC, ...
            $.each(item, function (key, val) {
                if (val && _globals__WEBPACK_IMPORTED_MODULE_3__.globalMatrix.ItemConfig.getFieldType(item.type, key) === _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_4__.FieldDescriptions.Field_dhf) {
                    // special dhf control
                    var fieldVal = JSON.parse(val);
                    if (fieldVal.type.toLocaleLowerCase() === (signatureStatus.isTemplate ? "templateapproval" : "signaturebox")) {
                        // control is a signature table
                        $.each(fieldVal, function (tableIdx, value) {
                            // get calue of control
                            let tableStr = value.fieldValue;
                            if (tableStr) {
                                let table = JSON.parse(tableStr);
                                $.each(table, function (rowIdx, row) {
                                    $.each(value.ctrlConfig.columns, function (tableColIdx, tableCol) {
                                        let user = row[tableCol.field];
                                        if (tableCol.editor == "user" && user && signatureStatus.missing.indexOf(user) == -1) {
                                            signatureStatus.missingSignatures++;
                                            signatureStatus.missing.push(user);
                                        }
                                    });
                                });
                            }
                        });
                    }
                }
            });
        }
        else {
            // this is a signed item
            $.each(item, function (detail, val) {
                if (typeof val === "string" && val.indexOf("<signatures ") === 0) {
                    var signaturesXML = $(val);
                    $.each(signaturesXML.find("signature"), function (idx, signature) {
                        signatureStatus.hasSignature = true; // there is at least this signature field
                        let orgUser = $(signature).attr("originaluserlogin");
                        let currentUser = $(signature).attr("user").toLowerCase();
                        let sig = {
                            orgid: orgUser ? orgUser.toLowerCase() : currentUser,
                            userid: currentUser,
                            signDate: ($(signature).attr("signDate")),
                            signaturefileid: ($(signature).attr("signaturefileid")),
                            signDateCustomer: ($(signature).attr("signDateCustomer"))
                        };
                        if (that.isMeTest(sig.userid)) {
                            signatureStatus.needSignature = !sig.signDate;
                        }
                        if (sig.signDate) {
                            signatureStatus.given.push($(signature).attr("user"));
                            signatureStatus.givenSignatures++;
                            if (!sig.signDateCustomer) {
                                // in some old projects signDateCustomer was not set...
                                sig.signDateCustomer = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.DateTime.renderHumanDate(new Date(sig.signDate));
                            }
                        }
                        else {
                            signatureStatus.missingSignatures++;
                            signatureStatus.missing.push($(signature).attr("user"));
                        }
                        signatureStatus.signatureDate[$(signature).attr("user").toLowerCase()] = sig.signDateCustomer;
                        signatureStatus.signatures.push(sig);
                    });
                }
            });
        }
        return signatureStatus;
    }
    static isMeTest(user) {
        return user.toLowerCase() === _globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getUser().toLowerCase();
    }
    isMe(user) {
        return DocBaseImpl.isMeTest(user);
    }
}
;


/***/ }),
/* 24 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FieldDescriptions: () => (/* binding */ FieldDescriptions)
/* harmony export */ });
/* harmony import */ var _PluginManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);


class FieldDescriptions {
    static findById(idToFind) {
        var _a;
        let returnedValue = undefined;
        let result = this.descriptions.filter((description) => description.id === idToFind);
        returnedValue = result.length === 1 ? result[0] : undefined;
        if (returnedValue == undefined) {
            // try to find it in the plugins, if they exist
            let descriptionFromPlugins = (_a = _PluginManager__WEBPACK_IMPORTED_MODULE_0__.plugins === null || _PluginManager__WEBPACK_IMPORTED_MODULE_0__.plugins === void 0 ? void 0 : _PluginManager__WEBPACK_IMPORTED_MODULE_0__.plugins.getFieldConfigOptions()) !== null && _a !== void 0 ? _a : [];
            result = descriptionFromPlugins.filter((description) => description.id === idToFind);
            returnedValue = result.length === 1 ? result[0] : undefined;
        }
        return returnedValue;
    }
    static appendFieldDescriptions(newFields) {
        for (let fco of newFields) {
            let result = this.descriptions.filter((description) => description.id === fco.id);
            if (result.length == 0) {
                this.descriptions.push(fco);
            }
        }
    }
    static get() { return FieldDescriptions.descriptions; }
    static setValidationFunction(fieldId, validator) {
        let fieldDesc = FieldDescriptions.findById(fieldId);
        if (!fieldDesc) {
            throw new Error(`No such field type ${fieldId} registered`);
        }
        fieldDesc.capabilities.validationFunction = validator;
    }
}
FieldDescriptions.Field_sourceref = "sourceref";
FieldDescriptions.Field_markAsTemplate = "markAsTemplate";
FieldDescriptions.Field_dhf = "dhf";
FieldDescriptions.Field_docFilter = "docFilter";
// normal fields
FieldDescriptions.Field_richtext = "richtext";
FieldDescriptions.Field_text = "text";
FieldDescriptions.Field_section = "section";
FieldDescriptions.Field_fileManager = "fileManager";
FieldDescriptions.Field_tasksControl = "tasksControl";
FieldDescriptions.Field_textline = "textline";
FieldDescriptions.Field_user = "user";
FieldDescriptions.Field_date = "date";
FieldDescriptions.Field_dropdown = "dropdown";
FieldDescriptions.Field_links = "links";
FieldDescriptions.Field_uplinkinfo = "uplinkinfo";
FieldDescriptions.Field_crosslinks = "crosslinks";
FieldDescriptions.Field_risk2 = "risk2";
FieldDescriptions.Field_checkbox = "checkbox";
FieldDescriptions.Field_gateControl = "gateControl";
FieldDescriptions.Field_colorPicker = "colorPicker";
FieldDescriptions.Field_steplist = "steplist";
// toolbar
FieldDescriptions.Field_labels = "labels";
FieldDescriptions.Field_workflow = "workflow";
// tests and xtcs
FieldDescriptions.Field_test_steps = "test_steps";
FieldDescriptions.Field_test_steps_result = "test_steps_result";
FieldDescriptions.Field_test_result = "test_result";
// agile sync
FieldDescriptions.Field_syncStatus = "syncStatus";
FieldDescriptions.Field_syncSourceInfo = "syncSourceInfo";
// beta should not be used really
FieldDescriptions.Field_report = "report";
FieldDescriptions.Field_cascadingSelect = "cascadingSelect";
FieldDescriptions.Field_hyperlink = "hyperlink";
// technical - these need to be added once when creating a new DOC category or something special like this
FieldDescriptions.Field_reportId = "reportId";
FieldDescriptions.Field_filter_file = "filter_file";
FieldDescriptions.Field_signature = "signature";
FieldDescriptions.Field_signatureControl = "signatureControl";
FieldDescriptions.Field_signCache = "signCache";
FieldDescriptions.Field_publishedItemList = "publishedItemList";
FieldDescriptions.Field_publishedFilesList = "publishedFilesList";
FieldDescriptions.Field_publishedContent = "publishedContent";
FieldDescriptions.Field_publishedTitle = "publishedTitle";
FieldDescriptions.Field_docTraining = "docTraining";
FieldDescriptions.Field_docReview = "docReview";
FieldDescriptions.Field_risk = "risk";
FieldDescriptions.Field_htmlForm = "htmlForm";
FieldDescriptions.Field_hidden = "hidden";
FieldDescriptions.Field_dummy = "dummy";
FieldDescriptions.Field_guid = "guid";
FieldDescriptions.Field_oid = "oid";
FieldDescriptions.Field_versionLive = "versionLive";
FieldDescriptions.Field_version = "version";
FieldDescriptions.Field_currentVersion = "currentVersion";
FieldDescriptions.Field_riskFolder = "riskFolder";
FieldDescriptions.Field_reviewControl = "reviewControl";
// A [fieldId]: JsonValidationFunction map built up at runtime.
// We can't build this at compile time because validation functions are high-level entities.
FieldDescriptions.validationFunctions = {};
FieldDescriptions.descriptions = [
    // [ "richtext",  "user" , "date", "text", "textline" ,"test_result",
    //         "crosslinks", "gateControl","fileManager", "reviewControl"];
    // docs and sign
    { id: FieldDescriptions.Field_sourceref, capabilities: { canImportedFromExcel: true, canBeUsedInDocs: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: "Source (Original Document) [sourceref]", class: "docsign", help: "keeps a reference to original document when copying and pasting" },
    { id: FieldDescriptions.Field_markAsTemplate, capabilities: { canBeUsedInDocs: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: "Mark as template [markAsTemplate]", class: "docsign", help: "allows to define DOC templates which can be used in other projects" },
    { id: FieldDescriptions.Field_dhf, capabilities: { canBeUsedInDocs: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: "DFH field  [dhf]", class: "docs", help: "for documents only: holds a section in a document" },
    { id: FieldDescriptions.Field_docFilter, capabilities: { canBeUsedInDocs: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: "Label Filter in DOCs [docFilter]", class: "docs", help: "a special field for Document categories to filter documents by label" },
    // normal fields
    { id: FieldDescriptions.Field_richtext, capabilities: { canImportedFromExcel: true, canBeUnsafe: true, canBeUsedInDocs: true, canHideInDoc: true, canBeXtcPreset: true, canBePublished: true, canBeReadonly: true, canRequireContent: true }, label: "Rich Text Control [richtext]", class: "all", help: "a rich text editor field (with formatting)" },
    { id: FieldDescriptions.Field_text, capabilities: { canImportedFromExcel: true, canBeUnsafe: true, canBeUsedInDocs: true, canHideInDoc: true, canBeXtcPreset: true, canBePublished: true, canBeReadonly: true, canRequireContent: true }, label: "Plain Text Control [text]", class: "all", help: "a text editor field (no formatting)" },
    { id: FieldDescriptions.Field_section, capabilities: { canBeUsedInDocs: false, canHideInDoc: false, canBeXtcPreset: false, canBePublished: true, canBeReadonly: false, canRequireContent: false }, label: "Section with explanation [section]", class: "all", help: "a title with some explanation to separate fields" },
    { id: FieldDescriptions.Field_fileManager, capabilities: { canImportedFromExcel: true, canBeUsedInDocs: true, canHideInDoc: true, canBeXtcPreset: true, canBePublished: true, canBeReadonly: true }, label: "File Manager Control [fileManager]", class: "all", help: "a control which allows to attach files by browsing or drag and drop" },
    { id: FieldDescriptions.Field_tasksControl, capabilities: { canBeUsedInDocs: true, canHideInDoc: true, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: "Tasks Control [tasksControl]", class: "all", help: "a field which shows links to external systems, like JIRA, github etc. (eg extensions folder)" },
    { id: FieldDescriptions.Field_textline, capabilities: { canImportedFromExcel: true, canBeUnsafe: true, canBeUsedInDocs: true, canHideInDoc: true, canBeXtcPreset: true, canBePublished: true, canBeReadonly: true, canRequireContent: true }, label: "Text Line Control [textline]", class: "all", help: "a field for one line of text" },
    { id: FieldDescriptions.Field_user, capabilities: { canImportedFromExcel: true, canBeUsedInDocs: true, canHideInDoc: true, canBeXtcPreset: true, canBePublished: true, canBeReadonly: true, canRequireContent: true }, label: "User Select Control [user]", class: "all", help: "a drop down to select a user in the project" },
    { id: FieldDescriptions.Field_date, capabilities: { canImportedFromExcel: true, canBeUsedInDocs: true, canHideInDoc: true, canBeXtcPreset: true, canBePublished: true, canBeReadonly: true, canRequireContent: true }, label: "Date Select Control [date]", class: "all", help: "a field to select a date" },
    { id: FieldDescriptions.Field_dropdown, capabilities: { canBeUnsafe: true, needsConfiguration: true, canBeUsedInDocs: true, canHideInDoc: true, canBeXtcPreset: true, canBePublished: true, canBeReadonly: true, canRequireContent: true }, label: "Drop Down Control [dropdown]", class: "all", help: "a drop-down selection field" },
    { id: FieldDescriptions.Field_links, capabilities: { canBeUsedInDocs: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: "Down Traces Control [links]", class: "all", help: "a field to show and edit down traces as defined in the traceability configuration" },
    { id: FieldDescriptions.Field_uplinkinfo, capabilities: { schema: "IUpLinkDetails", needsConfiguration: true, canBeUsedInDocs: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: "Uplink information [uplinkinfo]", class: "all", help: "a field to show information about up traces in the user interface" },
    { id: FieldDescriptions.Field_crosslinks, capabilities: { canImportedFromExcel: true, canBeUsedInDocs: true, canHideInDoc: true, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: "Cross Project Link Control [crosslinks]", class: "all", help: "a field to add links to other matrix projects" },
    { id: FieldDescriptions.Field_risk2, capabilities: { canBeUnsafe: true, onlyOne: true, canHideInDoc: true, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: "Risk Control [risk2]", class: "all", help: "a field rendering an FMEA-type risk field" },
    { id: FieldDescriptions.Field_checkbox, capabilities: { canBeUsedInDocs: true, canHideInDoc: true, canBeXtcPreset: true, canBePublished: true, canBeReadonly: true }, label: "Checkbox Control [checkbox]", class: "all", help: "a checkbox field" },
    { id: FieldDescriptions.Field_hyperlink, capabilities: { canImportedFromExcel: true, canBeUsedInDocs: true, canHideInDoc: true, canBeXtcPreset: false, canBePublished: true, canBeReadonly: true, canRequireContent: true }, label: "Hyperlink Control [hyperlink]", class: "all", help: "a field holding a hyperlink (url)" },
    {
        id: FieldDescriptions.Field_gateControl,
        capabilities: {
            canImportedFromExcel: true,
            canBeUnsafe: true, needsConfiguration: true, canHideInDoc: true, canBeXtcPreset: true, canBePublished: false,
            canBeReadonly: true, schema: "IGate"
        },
        label: "Gate Control [gateControl]", class: "all", help: "a quality gate field"
    },
    {
        id: FieldDescriptions.Field_colorPicker,
        capabilities: {
            canBeUsedInDocs: true, canHideInDoc: true, canBeXtcPreset: true,
            canBePublished: true, canBeReadonly: true, canRequireContent: true
        },
        label: "Color picker [colorPicker]", class: "super", help: "a color picker field"
    },
    {
        id: FieldDescriptions.Field_steplist,
        capabilities: {
            needsConfiguration: true, canBeUsedInDocs: true, canHideInDoc: true, canBeXtcPreset: false,
            canBePublished: true, canBeReadonly: true, canBeUnsafe: true,
            schema: "IFieldParameter",
        },
        label: "Table Control [steplist]",
        class: "all",
        help: "a field rendered as a table",
    },
    // toolbar
    { id: FieldDescriptions.Field_labels, capabilities: { onlyOne: true, canBeUsedInDocs: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: "Labels [labels]", class: "toolbar", help: "shows defined labels in the item's tool bar" },
    { id: FieldDescriptions.Field_workflow, capabilities: { onlyOne: true, canBeUsedInDocs: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: "One2One Issue Mapping [workflow]", class: "toolbar", help: "a field shown in the item's tool bar showing the status of an external ticket (i.e. jira)" },
    // tests and xtcs
    { id: FieldDescriptions.Field_test_steps, capabilities: { canBeUnsafe: true, onlyOne: true, canHideInDoc: true, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: "Test Table [test_steps]", class: "tests", help: "a special table control to define tests (see test configuration)" },
    { id: FieldDescriptions.Field_test_steps_result, capabilities: { canBeUnsafe: true, onlyOne: true, canHideInDoc: true, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: "Test Result Table [test_steps_result]", class: "xtcs", help: "a special table control to define tests with results (see test configuration)" },
    { id: FieldDescriptions.Field_test_result, capabilities: { canImportedFromExcel: true, onlyOne: true, canHideInDoc: true, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: "Test Result Summary [test_result]", class: "xtcs", help: "a special field to compute or specify the overall test result" },
    // agile sync
    { id: FieldDescriptions.Field_syncStatus, capabilities: { onlyOne: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: "SYNC Status [syncStatus]", class: "sync", help: "control to hold the information about synced external items " },
    { id: FieldDescriptions.Field_syncSourceInfo, capabilities: { onlyOne: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: "SYNC Source Info [syncSourceInfo]", class: "sync", help: "a control to show control syncing of external items" },
    // beta should not be used really
    { id: FieldDescriptions.Field_report, capabilities: { canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: "Embedded Report [report]", class: "beta", help: "allows to embed a standard report" },
    { id: FieldDescriptions.Field_cascadingSelect, capabilities: { canHideInDoc: false, canBeXtcPreset: true, canBePublished: true, canBeReadonly: true }, label: "Cascading Select [cascadingSelect]", class: "beta", help: "a field to select values from hierachies of drop downs" },
    // technical - these need to be added once when creating a new DOC category or something special like this
    { id: FieldDescriptions.Field_reportId, capabilities: { onlyOne: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: "report ID [reportId]", class: "super", help: "contains the id of the xslt template for reports" },
    { id: FieldDescriptions.Field_filter_file, capabilities: { onlyOne: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: "filter_file [filter_file]", class: "super", help: "internal field required for documents" },
    { id: FieldDescriptions.Field_signature, capabilities: { onlyOne: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: "Signature Table [signature]", class: "super", help: "field showing signature in documents" },
    { id: FieldDescriptions.Field_signatureControl, capabilities: { onlyOne: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: "Signature Password Field [signatureControl]", class: "super", help: "field with control for signatures" }
];


/***/ }),
/* 25 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UserControl: () => (/* binding */ UserControl),
/* harmony export */   userControls: () => (/* binding */ userControls)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _EmailValidator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(26);
/* harmony import */ var _PasswordValidator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(27);
/* harmony import */ var _UserNameValidator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(28);






class UserControl {
    constructor() {
        this.canAutoFill = false;
    }
    // mode
    // create (always an admin)
    // adminedit (an admin editing in admin client)
    // useredit (a user through menu)
    editUserDetails(mode, userId, userAddedCb, noUserAddedCb) {
        let that = this;
        _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.getServer("user").done(async (allUsers) => {
            var userDetails;
            if (userId) {
                for (var idx = 0; idx < allUsers.user.length; idx++) {
                    if (allUsers.user[idx].login.toLowerCase() === userId.toLowerCase()) {
                        userDetails = allUsers.user[idx];
                        userDetails.login = userDetails.login.toLowerCase();
                    }
                }
            }
            await that.editUserDetailsDlg(mode, userDetails, userAddedCb, noUserAddedCb, allUsers);
        }).fail(function (error) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Cannot edit user", error);
        });
    }
    resetPassword(userId) {
        let that = this;
        _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.getServer("user").done(function (allUsers) {
            for (var idx = 0; idx < allUsers.user.length; idx++) {
                if (allUsers.user[idx].login.toLowerCase() === userId.toLowerCase()) {
                    let currentUser = allUsers.user[idx];
                    var userDetails = currentUser;
                    userDetails.password = that.generatePassword();
                    userDetails.signaturePassword = that.generatePassword();
                    // fix MATRIX-1046 reset password button resets admin flag
                    userDetails.admin = userDetails.customerAdmin;
                    // fix MATRIX-1660 The "reset password" function in the admin UI doesn't work anymore
                    if (currentUser.signatureImage == "") {
                        userDetails.signatureImage = -1;
                    }
                    else {
                        userDetails.signatureImage = parseInt(currentUser.signatureImage.split("?")[0]);
                    }
                    _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.putServer("user/" + userDetails.login.toLowerCase(), {
                        json: JSON.stringify(userDetails)
                    }).done(function (result) {
                        /* MATRIX-2996 initial set password dialog ask for user name if not set*/
                        var askForName = ((userDetails.firstName == undefined || userDetails.firstName == "") ||
                            (userDetails.lastName == undefined || userDetails.lastName == ""));
                        that.createUserMail(allUsers, userDetails.login.toLowerCase(), true, "", askForName);
                    }).fail(function (errorMsg) {
                        _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Failed to change passwords!", errorMsg);
                    });
                }
            }
        }).fail(function (error) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Cannot retrieve user info!", error);
        });
    }
    ;
    askForPassword(container, btnName, showUser, userWidth, onSign) {
        let that = this;
        let table = $('<div class="signatureInfo input-group" style="margin-top:12px;width:100%">').appendTo(container);
        // by default do not allow change
        let autoFill = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getCustomerSettingJSON("autoFillSettings", {});
        that.canAutoFill = autoFill.allowAutoFill || autoFill.allowDocSignAutoFill;
        let name = $("<input autocomplete='off' type='text' class='signatureInfo form-control' placeholder='enter user id' style='padding:8px'>");
        let pwd = $("<input type='" + (that.canAutoFill ? "password" : "text") + "' class='form-control' placeholder='password'>");
        let signIt = $("<button class='form-control btn btn-default'>" + btnName + "</button>").click(function () {
            onSign(name.val(), pwd.val());
        });
        let pwdSpan = $("<span class='input-group-btn'>").append(pwd);
        table.append(name);
        table.append(pwdSpan);
        table.append($("<span class='input-group-btn'>").append(signIt));
        if (userWidth) {
            name.width(userWidth);
            pwdSpan.css("width", "90%");
        }
        else {
            pwdSpan.css("width", "90%");
        }
        that.initUserAndPassword(name, pwd, showUser);
        pwd.on("keyup paste", () => {
            pwd.attr("type", "password");
        });
    }
    initUserAndPassword(name, pwd, showUser) {
        // canChange is set to true at first keypress, mousedown before that
        // it is an autofill which is not allowed in signature box
        if (showUser) { // normally the user can be displayed and not be changed
            name.val(_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser() + (this.canAutoFill ? "" : " ")); // the " "  makes sure the password is not filled when loading
            name.attr("readonly", "readonly");
        }
        if (this.canAutoFill)
            return;
        if (!showUser) {
            // sometimes user need to type it (this is actually a very special case)
            name.val("");
        }
        pwd.val("");
    }
    async updateGlobalUserInfo() {
        if (_globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.isConfigured() && _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getProject()) {
            try {
                const accessInfo = await _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.getServer(_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getProject() + "/access");
                _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.addUsers(accessInfo.userPermission, accessInfo.groupPermission);
            }
            catch (e) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Logger.error("Error updating global user information.");
            }
        }
    }
    async editUserDetailsDlg(mode, userDetails, userAddedCb, noUserAddedCb, userInfo) {
        let that = this;
        if (mode === "create") {
            userDetails = {
                login: "",
                email: "",
                firstName: "",
                lastName: "",
                customerAdmin: 0
            };
        }
        var tablewidth = 680;
        var form = $(this.getUserDetailsHTML(mode, userDetails.login));
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.hide();
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.html("");
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.removeClass("dlg-no-scroll");
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.addClass("dlg-v-scroll");
        var scrollPanel = $('<div class="layoutContainerScroll"></div>');
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.append(scrollPanel);
        scrollPanel.append(form);
        var table = $('#userPrefTable');
        var save = function (event) {
            that.enableSavePwd(true);
            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showSuccess((mode === "create") ? 'Creating user!' : 'Updating user!');
            var newValues = readform();
            if (!newValues) {
                return;
            }
            var pl = "";
            $.each($(".qmsViewerOnly:checked"), function (idx, p) {
                let url = _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.matrixBaseUrl + "/pub/" + $(p).data("pid");
                pl += "<a href='" + url + "'><b>" + $(p).data("pid") + "</b> - " + $(p).data("plabel") + "</a> (as QMS viewer)<br/>";
            });
            $.each($(".proch:checked"), function (idx, p) {
                pl += "<b>" + $(p).data("pid") + "</b> - " + $(p).data("plabel") + "<br/>";
            });
            // create or update user
            saveData(newValues).done(function () {
                // MATRIX-1341
                // The create user function in the admin UI doesn't open up projects for users
                // save projects to give access later
                var paccess = [];
                $.each($(".proch:checked"), function (idx, p) {
                    paccess.push($(p).data("pid"));
                });
                var paccessQms = [];
                $.each($(".qmsViewerOnly:checked"), function (idx, p) {
                    paccessQms.push($(p).data("pid"));
                });
                _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog("close");
                // user created
                if (mode === "create") {
                    _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.getServer("user").done(async function (allUsers) {
                        // update list of existing users if necessary.
                        await that.updateGlobalUserInfo();
                        var askForName = ((newValues.firstName == undefined || newValues.firstName == "") ||
                            (newValues.lastName == undefined || newValues.lastName == ""));
                        // send mail to user
                        that.createUserMail(allUsers, newValues.login, false, pl, askForName);
                        // give initial access rights to projects
                        $.each(paccess, function (idx, pid) {
                            _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.postServer("user/" + newValues.login + "/" + pid, {
                                permission: "2",
                                reason: "admin.js"
                            });
                        });
                        // give initial access rights to projects
                        $.each(paccessQms, function (idx, pid) {
                            _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.postServer("user/" + newValues.login + "/" + pid, {
                                permission: "4",
                                reason: "admin.js"
                            });
                        });
                    });
                }
            });
        };
        if (mode !== "create") {
            var table3 = $("<table class='userSettings' style='width:100%'><tbody/></table>");
            $("#userPref").append(table3);
            var table2 = $("<table class='dateSettings' style='width:100%'><tbody/></table>");
            $("#userPref").append(table2);
            await _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.DateTime.renderSettingControlsAsync({
                user: userDetails.login,
                help: "User Date and Time Settings",
                table: table2
            });
            $("#userPref").append(table2);
            if (userDetails.login === _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser()) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.ThemeSelector.renderThemeSelectorControl("Theme", table3);
            }
            that.renderNotificationEmailReminder(userDetails, table3);
            var savePwDiv = $("<div class=''  ></div>");
            var saveButton = $("<button class='savePwButton ' id='saveBtn'> Save </button>").click(save);
            saveButton.button();
            var savePwTb = $(" <span class='' style='float:right'><button class='' >PW</button></span></div>");
            savePwTb.append(saveButton);
            savePwDiv.append(savePwTb);
            table.after(savePwDiv);
            setTimeout(() => { $("#ud_pw3").width($("#ud_login").width() - $("#saveBtn").width() - 40); }, 400);
        }
        $("input", scrollPanel).on("change keyup paste", function () {
            that.enableSavePwd(!readform());
            let isEnabled = !$("#saveBtn").attr("disabled");
            $("#ud_pw3").css("border-color", isEnabled ? "" : "red");
        });
        // attach password creation handler
        $(".pwgen", scrollPanel).click(function (event) {
            that.generatePassword($(event.delegateTarget));
        });
        // fill form with input
        $.each(userDetails, function (detail, val) {
            if (detail === "signatureImage") {
                if (val && val !== -1) {
                    $("#ud_currentImg").html("").append("<img class='signature' src='" + _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.matrixRestUrl + "/all/file/" + val + "'>");
                }
            }
            if (detail === "customerAdmin") {
                $("#ud_" + detail).prop("checked", val ? true : false);
            }
            else {
                $("#ud_" + detail).val(val);
            }
        });
        // hide / disable stuff which cannot be changed
        if (mode === "create") {
            $("#ud_pw1_line").hide();
            $("#ud_pw1R_line").hide();
            $("#ud_pw2_line").hide();
            $("#ud_pw1").val(that.generatePassword());
            $("#ud_pw1R").val($("#ud_pw1").val());
            $("#ud_pw2").val(that.generatePassword());
        }
        else if (mode === "adminedit") {
            $("#ud_login").attr("readonly", "readonly");
        }
        else {
            $("#ud_login").attr("readonly", "readonly");
            $(".admin_line").hide();
        }
        if (_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.oAuthOnly()) {
            $("#ud_pw1").val(that.generatePassword());
            $("#ud_pw1R").val($("#ud_pw1").val());
            $("#ud_pw1_line").hide();
            $("#ud_pw1R_line").hide();
        }
        if (userInfo.needDoublePassword != 1 && !_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.oAuthOnly()) {
            $("#ud_pw2_line").hide();
            $("#ud_pw1").on('change keyup paste', function () {
                $("#ud_pw2").val($("#ud_pw1").val() + "#'Ä*PSSD");
            });
        }
        if (mode !== "useredit") {
            $(".ud_useredit_line").hide();
        }
        if (mode === "adminedit") {
            $("fieldset", _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm).css("border", "none").css("padding", 0).css("padding-bottom", 0);
            $("legend", _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm).hide();
        }
        if (mode === "create") {
            $("fieldset", _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm).css("border", "none").css("padding", 0).css("padding-bottom", 0);
            $("legend", _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm).hide();
            var accessRights = $("<div >");
            table.after(accessRights);
            if (_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getProjectList(false).filter(p => p.qmsProject).length > 0) {
                accessRights.append("<span class='baseControlHelp'>LiveQMS (viewer only)</span>");
                $.each(_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getProjectList(false), function (ip, p) {
                    if (p.shortLabel !== "EMPTY") {
                        if (p.qmsProject) {
                            accessRights.append('<div style="padding-left:35px" >' +
                                '<label><input type="checkbox" class="qmsViewerOnly" data-pid="' + p.shortLabel + '" data-plabel="' + p.label + '">' +
                                '<span style="padding-left:10px">' + p.shortLabel + '</span> <span style="font-weight:normal">' + p.label + '</span>' +
                                '</div>');
                        }
                    }
                });
            }
            accessRights.append("<span class='baseControlHelp'>Give user read/write access to these projects</span>");
            accessRights.append('<div style="padding-left:35px" >' +
                '<label><input type="checkbox" class="toogleProjectAccess">' +
                '<span style="padding-left:10px;font-weight:normal">toggle all projects</span></label>' +
                '</div>');
            $('.toogleProjectAccess').change(function () {
                let checked = $('.toogleProjectAccess').is(":checked");
                $.each($(".proch"), function (idx, proch) {
                    $(proch).prop("checked", checked);
                });
                if (checked)
                    $(".qmsViewerOnly").prop("checked", false);
            });
            $.each(_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getProjectList(false), function (ip, p) {
                if (p.shortLabel !== "EMPTY") {
                    accessRights.append('<div style="padding-left:35px" >' +
                        '<label><input type="checkbox" class="proch" data-pid="' + p.shortLabel + '" data-plabel="' + p.label + '">' +
                        '<span style="padding-left:10px">' + p.shortLabel + '</span> <span style="font-weight:normal">' + p.label + '</span></label>' +
                        '</div>');
                }
            });
            $(".proch").change(function (event) {
                if ($(event.target).is(":checked")) {
                    $(".qmsViewerOnly[data-pid='" + $(event.target).data("pid") + "']").prop("checked", false);
                }
            });
            $(".qmsViewerOnly").change(function (event) {
                if ($(event.target).is(":checked")) {
                    $(".proch[data-pid='" + $(event.target).data("pid") + "']").prop("checked", false);
                    $(".toogleProjectAccess").prop("checked", false);
                }
            });
        }
        // init validators
        var pw1 = new _PasswordValidator__WEBPACK_IMPORTED_MODULE_3__.StrongPass("#ud_pw1", {
            passFail: function () {
                //console.log(passed);
            },
            passIndex: userInfo.passwordStrength,
            other: "#ud_pw2"
        });
        var pw2 = new _PasswordValidator__WEBPACK_IMPORTED_MODULE_3__.StrongPass("#ud_pw2", {
            passFail: function () {
                //console.log(passed);
            },
            passIndex: userInfo.passwordStrength,
            other: "#ud_pw1"
        });
        var user = new _UserNameValidator__WEBPACK_IMPORTED_MODULE_4__.User("#ud_login");
        var email = new _EmailValidator__WEBPACK_IMPORTED_MODULE_2__.Email("#ud_email");
        // handle signature file upload
        $("#ud_signatureImageChange").change(function () {
            var files = $("#ud_signatureImageChange")[0].files;
            if (files) {
                let validFileExtensions = ["jpg", "jpeg", "bmp", "gif", "png"];
                let nameparts = files[0].name.toLowerCase().split(".");
                if (validFileExtensions.indexOf(nameparts[nameparts.length - 1]) != -1) {
                    _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.uploadFileCustomerAsync(files[0], function (progress) {
                    }).done(function (result) {
                        let imgPath = _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.matrixRestUrl + "/all/file/" + result.fileId + "?key=" + result.key;
                        let testSize = $("<img style='display:none'>").appendTo("body").attr("src", imgPath).load(function (event) {
                            if (testSize.height() > 300 || testSize.width() > 800) {
                                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Signature image too large", "Image cannot exceed 800x300 pixels.");
                            }
                            else {
                                $("#ud_signatureImage").val(result.fileId);
                                $("#ud_currentImg").html("").append("<img class='signature' src='" + imgPath + "'>");
                                if (mode === "useredit" && _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.oAuthOnly()) {
                                    that.enableSaveOAuth();
                                }
                            }
                            testSize.remove();
                        });
                    }).fail(function (error) {
                        _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Failed to upload image", error);
                    });
                }
                else {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Only image files are supported", "");
                }
            }
        });
        // function to get values back from form
        function readform() {
            var error = false;
            error = ($("#ud_pw1").val() != "" && !pw1.isOK()) || error;
            error = ((userInfo.needDoublePassword == 1 || _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.oAuthOnly()) && ($("#ud_pw2").val() != "" && !pw2.isOK())) || error;
            error = !email.isOK() || error;
            error = !user.isOK() || error;
            if (error) {
                return null;
            }
            let signImageVal = $("#ud_signatureImage").val();
            let signImage = signImageVal ? parseInt(signImageVal.split("?")[0]) : -1;
            return {
                login: $("#ud_login").val().toLowerCase(),
                email: $("#ud_email").val(),
                pw1: $("#ud_pw1").val(),
                firstName: $("#ud_firstName").val(),
                lastName: $("#ud_lastName").val(),
                signatureImage: signImage,
                pw2: $("#ud_pw2").val(),
                pw3: $("#ud_pw3").val(),
                customerAdmin: $("#ud_customerAdmin").prop("checked") ? 1 : 0
            };
        }
        function saveData(newValues) {
            var res = $.Deferred();
            var signatureImage = -1;
            if (newValues.signatureImage) {
                signatureImage = newValues.signatureImage;
                if (isNaN(signatureImage)) {
                    signatureImage = -1;
                }
            }
            var jsonParamObj = {
                login: newValues.login.toLowerCase(),
                email: newValues.email,
                password: newValues.pw1,
                firstName: newValues.firstName,
                lastName: newValues.lastName,
                signatureImage: signatureImage,
                signaturePassword: newValues.pw2,
                admin: newValues.customerAdmin // whether user is an admin
            };
            if (!jsonParamObj.password)
                delete jsonParamObj.password;
            if (!jsonParamObj.signaturePassword)
                delete jsonParamObj.signaturePassword;
            var jsonParam = JSON.stringify(jsonParamObj);
            if (mode === "create") {
                _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.postServer("user", {
                    json: jsonParam
                }).done(function () {
                    if (userAddedCb) {
                        userAddedCb();
                    }
                    res.resolve();
                }).fail(function (jqxhr, textStatus, error) {
                    let msg = _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.getDisplayError(jqxhr, textStatus, error);
                    if (jqxhr &&
                        jqxhr.responseJSON &&
                        jqxhr.responseJSON.detailsList &&
                        jqxhr.responseJSON.detailsList.length &&
                        jqxhr.responseJSON.detailsList[0].indexOf("Last operation would overflow number of licenses (error in compute)|CreateUserMethod") != -1) {
                        msg = "There are no more write licenses.";
                    }
                    else if (jqxhr && jqxhr.responseText && jqxhr.responseText.indexOf("duplicate") !== -1) {
                        msg = "user id exists already";
                    }
                    _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Failed to create user!", msg);
                    if (noUserAddedCb) {
                        noUserAddedCb();
                    }
                    res.reject();
                });
            }
            else if (mode === "adminedit") {
                _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.putServer("user/" + newValues.login.toLowerCase(), {
                    json: jsonParam
                }).done(function (result) {
                    if (userAddedCb) {
                        userAddedCb();
                    }
                    res.resolve();
                }).fail(function (errorMsg) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Failed to create user!", errorMsg);
                    if (noUserAddedCb) {
                        noUserAddedCb();
                    }
                    res.reject();
                });
            }
            else if (_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.oAuthOnly()) { // user edit oAuth only
                that.setUserData(newValues.login.toLowerCase(), jsonParam, userAddedCb, noUserAddedCb).done(function () {
                    res.resolve();
                }).fail(function () {
                    res.reject();
                });
            }
            else { // user edit normal auth user
                $.post(_globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.matrixRestUrl + "/user/" + newValues.login.toLowerCase() + "/login", { password: newValues.pw3 }).done(function (data) {
                    that.setUserData(newValues.login.toLowerCase(), jsonParam, userAddedCb, noUserAddedCb, newValues.pw1 != "" && newValues.pw2 != "").done(function () {
                        res.resolve();
                    }).fail(function () {
                        res.reject();
                    });
                }).fail(function (jqxhr, textStatus, error) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Incorrect current password!", "");
                    if (noUserAddedCb) {
                        noUserAddedCb();
                    }
                    res.reject();
                });
            }
            return res;
        }
        let buttons = [];
        buttons.push({
            text: 'Close',
            class: 'btnCancelIt',
            click: function () {
                if (noUserAddedCb) {
                    noUserAddedCb();
                }
                _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog("close");
            }
        });
        if (mode === "create" || mode == "adminedit") {
            buttons.push({
                text: (mode === "create") ? 'Create' : 'Save',
                class: 'btnDoIt savePwButton',
                click: save
            });
        }
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog({
            autoOpen: true,
            title: (mode === "create") ? "Create new User" : "My profile",
            width: tablewidth + 80,
            height: 600,
            modal: true,
            resize: function () {
                $("#ud_pw3").width($("#ud_login").width() - $("#saveBtn").width() - 40);
            },
            open: function () {
                var pwb = $('span button:contains(PW)', _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.parent());
                if (mode === "useredit") {
                    if (_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.oAuthOnly()) {
                        pwb.replaceWith($("<span>"));
                        $("#ud_signatureImage").data("org", $("#ud_signatureImage").val());
                        let saveOAuth = $(`<button id="saveBtnOAuth" class="ui-button ui-corner-all ui-widget"> Save </button>`).click(() => {
                            saveData(readform());
                        });
                        $("#saveBtn").hide().parent().append(saveOAuth);
                        $("#ud_pw2").on("change keyup paste", function () {
                            that.enableSaveOAuth();
                        });
                        that.enableSaveOAuth();
                    }
                    else {
                        // request a current password to change user
                        var pwp = $('<input type="text" class="form-control ud_useredit_line" id="ud_pw3" style="height:31px;margin-right:10px;width:250px;display: inline-block;" placeholder="enter current password to save">');
                        pwp.on("keyup", function () {
                            pwp.attr("type", "password");
                        });
                        var errorPwp = $("<span id='errorPWP' style='color:red;padding-right:8px;'>").html(_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.spaceMessage(false, true));
                        pwb.replaceWith($("<span>").append(errorPwp).append(pwp));
                        $("#saveBtn").closest("div").css("margin-top", "36px");
                        errorPwp.hide();
                        $(".savePwButton").button("disable");
                        pwp.on("change keyup paste", function () {
                            that.enableSavePwd(!readform());
                        });
                        that.enableSavePwd(!readform());
                    }
                }
                else {
                    pwb.hide();
                    $("#saveBtn").hide();
                    $("#userPref .dateSettings").hide();
                    that.enableSavePwd(!readform());
                }
            },
            buttons: buttons
        });
    }
    enableSaveOAuth() {
        ;
        _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.setEnabled($("#saveBtnOAuth"), $("#ud_signatureImage").data("org") != $("#ud_signatureImage").val() || !!$("#ud_pw2").val());
    }
    saveEmailNotificationsSetting(user, setting) {
        let data = {
            key: UserControl.EMAILNOTIF_CONFIG,
            value: JSON.stringify(setting),
            reason: "Updating notification Setting"
        };
        _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.postServer("user/" + user + "/setting", data).then(() => {
            if (user == _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser()) {
                _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.tryReconnect();
            }
        });
    }
    renderNotificationEmailReminder(userDetails, table) {
        let that = this;
        if (userDetails.userSettingsList == undefined) {
            userDetails.userSettingsList = [];
        }
        let emailNotificationSettings = userDetails.userSettingsList.filter((set) => { return set.key == UserControl.EMAILNOTIF_CONFIG; });
        let emailNotificationSetting = emailNotificationSettings.length > 0 ? JSON.parse(emailNotificationSettings[0].value) : { periodicity: "" };
        let tableBody = $("tbody", table);
        tableBody.append($('<tr class="notif showInAdmin" ><td colspan="2" class="baseControlHelp">Notifications Digest Email</td></tr'));
        var tr = $("<tr  class='notif showInAdmin' >");
        tableBody.append(tr);
        tr.append($("<td class='admin_utdl'>").append($("<label class='control-label'>").html("Email notifications")));
        let options = [
            { id: "", label: "No email" },
            { id: "daily", label: "Email me daily" },
            { id: "weekly", label: "Email me weekly" }
        ];
        let div = $("<div/>");
        // ml.UI.addDropdownToValue(  "Periodicity", emailNotificationSetting, "periodicity", options, false, false, () => {
        //     that.saveEmailNotificationsSetting(userDetails.login, emailNotificationSetting); });
        tr.append($("<td>").append(`<select  style="width: 100%;height: 34px;" class="form-control" id="emailNotifCombo">
                <option value="">No email</option>
                <option value="daily">Email me daily</option>
                <option value="weekly">Email me weekly</option>
           </select>`));
        $("#emailNotifCombo").change((o) => {
            var value = $("#emailNotifCombo option:selected").val();
            emailNotificationSetting.periodicity = value;
            that.saveEmailNotificationsSetting(userDetails.login, emailNotificationSetting);
        });
        $("#emailNotifCombo").val(emailNotificationSetting.periodicity);
        tr.append($("<td>").append(""));
    }
    createUserMail(allUsers, user, reset, pl, askForName) {
        let that = this;
        let prl = parseInt(_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getCustomerSetting("passwordResetLimitation"));
        // if NaN or undefined then fallback to 3days
        let maxDuration = prl ? prl : 72;
        _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.postServer("user/" + user + "/token", {
            purpose: "password_reset",
            validity: maxDuration,
            reason: "password reset by admin"
        }).done(async function (token) {
            // Update list of existing users if necessary.
            await that.updateGlobalUserInfo();
            var userDetails = (allUsers.user.filter(o => o.login == user));
            let additionnalParameters = "";
            if (askForName) {
                additionnalParameters = "&askForName=1";
                if (userDetails.length > 0) {
                    additionnalParameters += "&first=" + userDetails[0].firstName + "&last=" + userDetails[0].lastName;
                }
            }
            let url = _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.matrixBaseUrl + "/resetPassword.jsp?user=" + user + "&passwordStrength=" + allUsers.passwordStrength + additionnalParameters + "&double=" + ((allUsers.needDoublePassword == 1 || _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.oAuthOnly()) ? "1" : "0") + "&oAuthOnly=" + (_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.oAuthOnly() ? "1" : "0") + "&token=" + token.token;
            var userinfo = "You need to set your password(s) using this link: <a href='" + url + "'>" + url + "</a><br/><br/>" +
                "Once you set your password you can login here: <a href='" + _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.matrixBaseUrl + "'>" + _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.matrixBaseUrl + "</a><br/>" +
                "Your user id is: <b>" + user + "</b><br/><br/>" +
                "Note: you have " + maxDuration + " hours to do this. If you are too late ask your admin for a new link!";
            var message = _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Mail.getCannedMessage(reset ? "reset_pwd" : "new_user", user, "");
            message = message.replace("_userinfo_", userinfo);
            message = message.replace("_projectlist_", pl);
            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Mail.sendMail(user, "", "", reset ? "Password Reset" : "Access to Matrix", message, undefined, undefined, 1);
        });
    }
    enableSavePwd(disable) {
        let pwp = $("#ud_pw3");
        let errorPwp = $("#errorPWP");
        let errorMatch = $("#errorMatch");
        let btn = $(".savePwButton");
        errorPwp.hide();
        errorMatch.hide();
        if ($("#ud_pw1").val() != $("#ud_pw1R").val()) {
            btn.button("disable");
            errorMatch.show();
        }
        else if (pwp.length && pwp.val().length === 0) {
            btn.button("disable");
        }
        else if (pwp.length && pwp.val().indexOf(" ") !== -1) {
            btn.button("disable");
            errorPwp.show();
        }
        else {
            btn.button(disable ? "disable" : "enable");
        }
    }
    setUserData(userId, jsonParam, userAddedCb, noUserAddedCb, signOut = true) {
        let res = $.Deferred();
        _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.putServer("user/" + userId, {
            json: jsonParam
        }).done(function (result) {
            if (userAddedCb) {
                userAddedCb();
            }
            if (signOut) {
                _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.signOut(false);
                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showSuccess("The password has been updated!");
            }
            res.resolve();
        }).fail(function (errorMsg) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Failed to create user!", errorMsg);
            if (noUserAddedCb) {
                noUserAddedCb();
            }
            res.reject();
        });
        return res;
    }
    getUserDetailsHTML(mode, login) {
        /* !!! IMPORTANT !!!
            In response to a customer's concern about compliance with 21 CFR Part 11 Section 11.200a(3),
            it was found that our system allows administrators to change a user's password or email and subsequently
            log in as that user, potentially impersonating them and signing documents on their behalf.
        
            To address this compliance issue, we have made the following changes:
              - Any changes to a user's email address now require a support ticket.
              - We have restricted the ability to change a user's password and email  to  superadmins (or the user itself).
        
            These changes ensure that the system complies with the requirement for "2 or more" individuals
            and enhances security by limiting certain administrative actions.
            See : SER-25549
        */
        let part11disabled = (mode == "useredit" || (mode == "adminedit" && login == _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser()));
        let isUserSelf = mode == "useredit" || login == _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser();
        let isSuperAdmin = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.isSuperAdmin();
        let isAdmin = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.isAdmin();
        let isCreate = mode == "create";
        let canEditEmail = (isSuperAdmin || isCreate);
        let canSeeEmail = isSuperAdmin || isAdmin || isCreate;
        let canEditName = (isSuperAdmin || isCreate || isAdmin) && !isUserSelf;
        let canEditPassWord = isSuperAdmin || isCreate || isUserSelf;
        let canSeePassWord = isSuperAdmin || isCreate || isUserSelf;
        let canEditSignature = isSuperAdmin || isCreate || isUserSelf;
        let part11 = part11disabled ? "disabled for part 11 compliance, ask " + (mode == "adminedit" ? "another" : "an") + " admin to change" : "";
        return '<div class="container" style="width:100%;white-space:nowrap;">' +
            '<fieldset><legend>User info</legend><table id="userPrefTable" style="width:100%" >' +
            '  <tr><td colspan="2" class="baseControlHelp">Sign-In</td></tr>' +
            '  <tr>' +
            '    <td class="admin_utdl"><label for="ud_login" class="control-label">User Id</label></td>' +
            '    <td class="admin_utdr"><input autocomplete="off" type="text" class="form-control" id="ud_login" placeholder="User id"></td>' +
            '  </tr>' +
            '  <tr>' +
            '    <td class="admin_utdl"><label for="ud_firstName" class="control-label">First Name</label></td>' +
            '    <td class="admin_utdr"><input title="' + part11 + '" autocomplete="off" type="text" class="form-control" id="ud_firstName" placeholder="First name" ' + (canEditName ? "" : 'disabled') + '></td>' +
            '  </tr>' +
            '  <tr>' +
            '    <td class="admin_utdl"><label for="ud_lastName" class="control-label">Last Name</label></td>' +
            '    <td class="admin_utdr"><input title="' + part11 + '" autocomplete="off" type="text" class="form-control" id="ud_lastName" placeholder="Last name" ' + (canEditName ? "" : 'disabled') + '></td>' +
            '  </tr>' +
            '  <tr ' + (canSeeEmail ? "" : "style='display:none' ") + '>' +
            '    <td class="admin_utdl"><label for="ud_email" class="control-label">Email</label></td>' +
            '    <td class="admin_utdr"><input title="' + part11 + '" autocomplete="off" type="text" class="form-control" id="ud_email" placeholder="Email" ' + (canEditEmail ? "" : "disabled") + '></td>' +
            '  </tr>' +
            '  <tr   ' + (canSeePassWord ? "" : "style='display:none' ") + ' id="ud_pw1_line">' +
            '    <td class="admin_utdl"><label autocomplete="new-password" for="ud_pw1" class="control-label">Password for Login</label>' +
            //'       <button class="btn btn-default btn-xs pwgen" data-target="ud_pw1" id="ud_cpw1" >create</button>' +
            '    </td>' +
            '    <td class="admin_utdr"><input autocomplete="new-password" type="password" class="form-control" id="ud_pw1" placeholder="password" ' + (canEditPassWord ? "" : "disabled") + ' ></td>' +
            '  </tr>' +
            '  <tr  ' + (canSeePassWord ? "" : "style='display:none' ") + ' id="ud_pw1R_line">' +
            '    <td class="admin_utdl"><label autocomplete="new-password" for="ud_pw1R" class="control-label">Repeat</label>' +
            '    </td>' +
            '    <td class="admin_utdr"><input autocomplete="new-password" type="password" class="form-control" id="ud_pw1R" placeholder="repeat" ' + (canEditPassWord ? "" : "disabled") + '>' +
            '         <div id="errorMatch" style="color:red;">passwords do not match</div></td>' +
            '  </tr>' +
            //'  <tr><td colspan="2" class="baseControlHelp">Electronic Signatures</td></tr>' +
            '  <tr>' +
            '    <td class="admin_utdl"><label class="control-label">Signature Image</label></td>' +
            '    <td class="admin_utdr">' +
            '       <span id="ud_currentImg"></span>' +
            '       <label for="ud_signatureImageChange"  style="color:blue;font-weight:normal;cursor:pointer;' + (canEditSignature ? "" : "display:none") + '">select signature image</label>' +
            '       <input accept="image/JPEG,image/GIF,image/PNG,image/BMP" style="display:none" type="file" id="ud_signatureImageChange">' +
            '       <input autocomplete="off" style="display:none" type="text" id="ud_signatureImage">' +
            '    </td>' +
            '  </tr>' +
            '  <tr>' +
            '    <td class="admin_utdl"></td>' +
            '    <td class="admin_utdr">' +
            '    </td>' +
            '  </tr>' +
            '  <tr ' + (canSeePassWord ? "" : "style='display:none' ") + ' id="ud_pw2_line">' +
            '    <td class="admin_utdl"><label for="ud_pw2" class="control-label">Password for eSignatures</label>' +
            //'       <button class="btn btn-default btn-xs pwgen" data-target="ud_pw2" id="ud_cpw2" >create</button>' +
            '    </td>' +
            '    <td class="admin_utdr"><input type="password" class="form-control" id="ud_pw2" placeholder="password" ' + (canEditPassWord ? "" : "disabled") + '></td>' +
            '  </tr>' +
            '  <tr class="admin_line"><td colspan="2" class="baseControlHelp">Server Administration Rights</td></tr>' +
            '  <tr class="admin_line">' +
            '    <td class="admin_utdl" colspan="2" > <div class="checkbox"><label><input id="ud_customerAdmin" type="checkbox"> is administrator</label></div></td>' +
            '  </tr>' +
            '  </table></fieldset><br/>' +
            '<fieldset id="userPref"><legend>User preferences</legend></fieldset>';
    }
    generatePassword(btn) {
        var keylist1 = "ABCDEFGHIJKLMNPQRSTUVWXYZabcdefghijklmnpqrstuvwxyz123456789_@?+-";
        var keylist2 = "_@?+-";
        function gp(chars, count) {
            var pwd = '';
            for (var idx = 0; idx < count; idx++) {
                pwd += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            return pwd;
        }
        var pw = gp(keylist1, 11) + gp(keylist2, 1) + gp(keylist1, 3);
        if (btn) {
            var target = btn.data("target");
            $("#" + target).val(pw);
            // make readable
            $("#" + target).get(0).type = 'text';
        }
        return pw;
    }
}
UserControl.TOKEN_CONFIG = "settingsToken";
UserControl.EMAILNOTIF_CONFIG = "emailNotificationReminders";
var userControls = new UserControl();


/***/ }),
/* 26 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Email: () => (/* binding */ Email)
/* harmony export */ });

// makes an email field with validation out of an input field
class Email {
    constructor(e) {
        this.element = $(e);
        this.resultBox = $("<div>");
        this.resultBox.css("color", "red");
        this.element.parent().append(this.resultBox);
        this.element.keyup(() => this.validate());
    }
    isOK() {
        return this.validate();
    }
    validate() {
        var name = this.element.val();
        if (name === "") {
            this.resultBox.html('email is required and cannot be empty');
            this.resultBox.show();
            return false;
        }
        if (/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(name)) {
            this.resultBox.hide();
            return true;
        }
        this.resultBox.html('This is not a correct email');
        this.resultBox.show();
        return false;
    }
}


/***/ }),
/* 27 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StrongPass: () => (/* binding */ StrongPass)
/* harmony export */ });
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);


class StrongPass {
    constructor(element, param) {
        let defaultOptions = {
            minChar: 6,
            passIndex: 3,
            // output verdicts, colours and bar %
            label: 'Password strength: ',
            verdicts: ["Error: Too Short", "Error: far too weak", "Error: very weak", "Error: still very weak", "Error: too weak", "Error: still too weak"],
            colors: ['#ccc', '#500', '#800', '#f60', '#050', '#0f0'],
            width: ['0%', '10%', '30%', '60%', '80%', '100%'],
            // tweak scores here
            scores: [10, 15, 25, 45],
            passFail: (result) => { },
            other: ""
        };
        this.bannedPasswords = [
            // see study here: http://smrt.io/JlNfrH
            '123456', '12345', '123456789', 'password', 'iloveyou', 'princess', 'rockyou', '1234567', '12345678', 'abc123', 'nicole',
            'daniel', 'babygirl', 'monkey', 'jessica', 'lovely', 'michael', 'ashley', '654321', 'qwerty', 'password1', 'welcome', 'welcome1',
            'password2', 'password01', 'password3', 'p@ssw0rd', 'passw0rd', 'password4', 'password123', 'summer09', 'password6',
            'password7', 'password9', 'password8', 'welcome2', 'welcome01', 'winter12', 'spring2012', 'summer12', 'summer2012'
        ];
        this.checks = [
            /* alphaLower */ {
                re: /[a-z]/,
                score: 1
            },
            /* alphaUpper */ {
                re: /[A-Z]/,
                score: 5
            },
            /* mixture of upper and lowercase */ {
                re: /([a-z].*[A-Z])|([A-Z].*[a-z])/,
                score: 2
            },
            /* threeNumbers */ {
                re: /(.*[0-9].*[0-9].*[0-9])/,
                score: 7
            },
            /* special chars */ {
                re: /.[!@#$%^&*?_~]/,
                score: 5
            },
            /* multiple special chars */ {
                re: /(.*[!@#$%^&*?_~].*[!@#$%^&*?_~])/,
                score: 7
            },
            /* all together now, does it look nice? */ {
                re: /([a-zA-Z0-9].*[!@#$%^&*?_~])|([!@#$%^&*?_~].*[a-zA-Z0-9])/,
                score: 3
            },
            /* password of a single char sucks */ {
                re: /(.)\1+$/,
                score: 2
            }
        ];
        this.resultBox = $("<div>");
        this.options = _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.JSON.mergeOptions(defaultOptions, param);
        this.element = $(element);
        this.createBox();
        this.attachEvents();
    }
    setPassIndex(newIndex) {
        this.options.passIndex = newIndex;
        this.runPassword();
    }
    isOK() {
        return this.runPassword();
    }
    attachEvents() {
        // only attach events once 
        this.element.keyup(() => this.runPassword());
    }
    createBox() {
        this.element.parent().append(this.resultBox);
    }
    runPassword() {
        var password = this.element.val();
        this.resultBox.html("");
        let score = this.checkPassword(password);
        let index = 0;
        let s = _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.JSON.clone(this.options.scores);
        let verdict;
        if (this.bannedPasswords.indexOf(password.toLowerCase()) !== -1) {
            this.resultBox.append("Error: banned password");
            this.resultBox.css("color", "red");
            this.resultBox.show();
            this.options.passFail(false);
            return false;
        }
        else if (password === "") {
            this.resultBox.append("you must enter a password");
            this.resultBox.css("color", "red");
            this.resultBox.show();
            this.options.passFail(false);
            return false;
        }
        else if (password !== "" && password.indexOf(" ") !== -1) {
            this.resultBox.append("spaces are not allowed in password");
            this.resultBox.css("color", "red");
            this.resultBox.show();
            this.options.passFail(false);
            return false;
        }
        else if (password !== "" && this.options.other !== "" && $(this.options.other).val() === password) {
            this.resultBox.append("login and signature password must be different");
            this.resultBox.css("color", "red");
            this.resultBox.show();
            this.options.passFail(false);
            return false;
        }
        else {
            if (score < 0 && score > -199) {
                index = 0;
            }
            else {
                s.push(score);
                s.sort(function (a, b) {
                    return a - b;
                });
                index = s.indexOf(score) + 1;
            }
            var passed = index >= this.options.passIndex;
            if (passed) {
                this.resultBox.hide();
            }
            else {
                verdict = this.options.verdicts[index] || this.options.verdicts[this.options.verdicts.length - 1];
                this.resultBox.append("Score " + score + " verdict " + verdict);
                this.resultBox.css("color", passed ? "black" : "red");
                this.resultBox.show();
            }
            this.options.passFail(passed);
            return passed;
        }
    }
    ;
    checkPassword(pass) {
        let score = 0;
        let minChar = this.options.minChar;
        let len = pass.length;
        let diff = len - minChar;
        (diff < 0 && (score -= 100)) || (diff >= 5 && (score += 18)) || (diff >= 3 && (score += 12)) || (diff === 2 && (score += 6));
        $.each(this.checks, function (idx, check) {
            pass.match(check.re) && (score += check.score);
        });
        // bonus for length per char
        score && (score += len);
        return score;
    }
}


/***/ }),
/* 28 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   User: () => (/* binding */ User)
/* harmony export */ });

class User {
    constructor(el) {
        this.element = $(el);
        this.resultBox = $("<div>");
        this.resultBox.css("color", "red");
        this.element.parent().append(this.resultBox);
        this.element.keyup(() => this.validate());
    }
    isOK() {
        return this.validate();
    }
    validate() {
        var name = this.element.val();
        if (name === "") {
            this.resultBox.html("The user id is required and cannot be empty");
            this.resultBox.show();
            return false;
        }
        if (name.length < 1 || name.length > 30) {
            this.resultBox.html('The user id must be at least 1 and at most 30 characters long');
            this.resultBox.show();
            return false;
        }
        if (/^[a-zA-Z0-9_\.\-]+$/.test(name)) {
            this.resultBox.hide();
            return true;
        }
        this.resultBox.html('The user id can only consist of letters, dots, digits, dash and underscores');
        this.resultBox.show();
        return false;
    }
}


/***/ }),
/* 29 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HistoryTools: () => (/* binding */ HistoryTools)
/* harmony export */ });
/* harmony import */ var _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _Components_ItemForm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(17);
/* harmony import */ var _MainTree_MainTree__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(30);
/* harmony import */ var _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9);
/* harmony import */ var _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(2);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(5);
/// <reference types="matrixrequirements-type-declarations" />









;
;
;
class HistoryTools {
    onNewResult(cb) {
        this.onNewResultCallback = cb;
    }
    constructor() {
        this.lastWasTimewarp = false;
        this.scrollInstalled = false;
        this.panelIdCounter = 0;
        this.controls = [];
    }
    compareLatest(itemId) {
        let that = this;
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.getItemAsync(itemId).done(function (item) {
            that.showHistoryDialog({ item: item, preselect: [0, item.history.length], readOnly: !_globals__WEBPACK_IMPORTED_MODULE_6__.app.canEditItem(item) });
        });
    }
    compare(fullVersion) {
        let that = this;
        var i0 = _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(fullVersion);
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.getItemAsync(i0.id).done(function (item) {
            that.showHistoryDialog({ item: item, preselect: [i0.version - 1, i0.version], readOnly: !_globals__WEBPACK_IMPORTED_MODULE_6__.app.canEditItem(item) });
        });
    }
    compareVersions(itemId, oldVersion, newVersion) {
        let that = this;
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.getItemAsync(itemId).done(function (item) {
            that.showHistoryDialog({ item: item, preselect: [oldVersion, newVersion], readOnly: !_globals__WEBPACK_IMPORTED_MODULE_6__.app.canEditItem(item) });
        });
    }
    // compare what is in current editor against what is in database now
    diffAgainstLatest(localChanges) {
        let that = this;
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.getItemAsync(_globals__WEBPACK_IMPORTED_MODULE_6__.app.getCurrentItemId()).done(function (item) {
            // make a copy of item and copy in all the changes from the UI
            let copyOfItem = _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.JSON.clone(item);
            $.each(copyOfItem, function (key, _val) { if (localChanges[key] != null)
                copyOfItem[key] = localChanges[key]; if (localChanges["fx" + key] != null)
                copyOfItem[key] = localChanges["fx" + key]; });
            copyOfItem.title = localChanges.title;
            // compare the item against the UI
            that.showDiffDialog(item, copyOfItem);
        });
    }
    showDeletedItems(ctrl) {
        let that = this;
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.itemForm.prepend(_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.getPageTitle("Deleted Items"));
        if (_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.DateTime.requiresTimeZoneWarning()) {
            $(".toolbarButtons .buttonCTA").remove();
            $(".toolbarButtons").append(_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.DateTime.getTimeZoneCTA());
        }
        var control = $('<div class="panel-body-v-scroll fillHeight"></div>');
        ctrl.append(control);
        var accordion = $('<div class="panel-group history-panel-group" id="accordion"></div>');
        control.append(accordion);
        var progressBar = $('<div style="height:4px;"></div><div class="progress progress-striped active">' +
            '  <div name="progress-bar" class="progress-bar"  role="progressbar" aria-valuenow="1" aria-valuemin="0" aria-valuemax="100" style="width:1%">' +
            '    <span class="sr-only"></span>' +
            '  </div>' +
            '</div>');
        control.append(progressBar);
        progressBar.hide();
        var rendered = 0;
        var showDelayed = window.setTimeout(function () { progressBar.show(); }, 1000); // wait for 1 second to show a progress bar
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.getDeletedItemsAsync(function (item) {
            rendered++;
            let panel = that.createPanel({
                deletedItems: true,
                ctrl: control,
                id: item.id,
                title: item.title,
                isFolder: false,
                version: item.version,
                user: item.user,
                action: "",
                dateServer: item.date,
                date: item.dateUserFormat,
                comment: item.comment,
                allowRestore: true,
                fullVersion: item.fullVersion,
                auditId: item.auditId,
                tags: item.tags
            });
            accordion.append(panel);
            // add timewarp info
            if (_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.isAfterTimeWarp(item.date)) {
                that.lastWasTimewarp = true;
                panel.addClass("timewarp");
            }
            else if (that.lastWasTimewarp) {
                that.lastWasTimewarp = false;
                panel.addClass("justAfterTimewarp");
            }
        }, function (progress) {
            $("div[name=progress-bar]", progressBar).data("valuenow", progress).width(progress + "%");
        }).done(function (_total) {
            clearTimeout(showDelayed);
            progressBar.hide();
            if (rendered === 0) {
                control.append("<p style='padding:8px;margin-top:8px;'>There are no deleted items in this project</p>");
            }
        });
    }
    showActivity(ctrl, auditIdMin, auditIdMax) {
        let that = this;
        if (_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.DateTime.requiresTimeZoneWarning()) {
            $(".toolbarButtons .buttonCTA").remove();
            $(".toolbarButtons").append(_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.DateTime.getTimeZoneCTA());
        }
        var control = $('<div class="panel-body-no-scroll">');
        ctrl.append(control);
        var accordion = $('<div class="panel-group history-panel-group" id="accordion">');
        control.append(accordion);
        control.append(_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.getSpinningWait());
        let thisIstheEnd = $("<div id='endOfIt' style='text-align:center; margin:10px; display:none;'> the end! </div>");
        control.append(thisIstheEnd);
        let loadMoreDiv = $("<div style='text-align:right;'  ><a id='loadMore' style='display:block; text-align:right; width:100%;margin:10px; cursor:pointer;text-decoration:underline; '> Load more... </a></div>");
        control.append(loadMoreDiv);
        let loading = false;
        let loadMore = ((_t) => {
            console.log('Loading more into calendar');
            if (!loading) {
                loadMoreDiv.show();
                if (that.pFrom + that.pCount < that.pTotal) {
                    if (($("#accordion").height() - $(".change-result").scrollTop()) < ($(".change-result").height() + 30)) {
                        loading = true;
                        thisIstheEnd.hide();
                        $(".spinningWait", control).replaceWith(_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.getSpinningWait());
                        that.showNextActivity(accordion, control, that.pFrom + that.pCount, that.pCount)
                            .always(() => {
                            loading = false;
                            if (that.onNewResultCallback != undefined) {
                                that.onNewResultCallback();
                            }
                            loadMoreDiv.show();
                        });
                    }
                }
                else {
                    thisIstheEnd.show();
                    loadMoreDiv.hide();
                }
            }
        });
        this.showNextActivity(accordion, control, 0, 200, auditIdMin, auditIdMax).then(() => {
            if (that.pTotal == 0) {
                $(".calendar-wrapper .spinningWait").hide();
                $("<div>No changes </div>").insertAfter($(".change-result h1"));
                thisIstheEnd.hide();
                loadMoreDiv.hide();
            }
            if (that.onNewResultCallback != undefined) {
                that.onNewResultCallback();
            }
            if (!that.scrollInstalled) {
                $("#loadMore").click(loadMore);
                $(".change-result").on("scroll", loadMore);
                that.scrollInstalled = true;
            }
            if (!loading) {
                $(".spinningWait", control).hide();
                $("#loadMore").show();
            }
        });
    }
    showReadersDigest(ctrl) {
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.itemForm.prepend(_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.getPageTitle("Document Changes and Downloads"));
        if (_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.DateTime.requiresTimeZoneWarning()) {
            $(".toolbarButtons .buttonCTA").remove();
            $(".toolbarButtons").append(_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.DateTime.getTimeZoneCTA());
        }
        var control = $('<div class="panel-body-v-scroll  fillHeight" style="margin:0 12px">');
        ctrl.append(control);
        var doclist = $('<div>');
        control.append(doclist);
        control.append(_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.getSpinningWait());
        this.readHistory = {};
        this.showNextReaders(doclist, control, 0, 100);
    }
    renderButtons(options) {
        var button = $("<div  class='btn-group'><button id='historyDlgBtn' tabindex='-1' title data-original-title='History' class='btn btn-item'> <span class='fal fa-history'></span></button></div>");
        var data = {
            id: options.id,
            item: options.item,
            isFolder: options.isFolder,
            readOnly: options.readOnly
        };
        button.click(() => this.showHistoryDialog(data));
        options.control.append(button);
    }
    ;
    createPanel(options) {
        let that = this;
        this.panelIdCounter++;
        var icon = $('<i class="hideCopy fal fa-chevron-right"></i>');
        var ir = _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(options.id);
        var itemDisp = $("<span ></span>");
        if (options.isFolder) {
            _globals__WEBPACK_IMPORTED_MODULE_6__.app.getItemAsync(options.id, options.version).done(function (data) {
                itemDisp.refLink({
                    id: options.id,
                    title: data.title,
                    style: _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_4__.refLinkStyle.show,
                    tooltip: _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_4__.refLinkTooltip.none
                });
            });
            itemDisp.addClass('history-header');
            itemDisp.addClass('key-' + options.id);
        }
        if (options.title) {
            itemDisp = $('<span class="history-header key-' + options.id + '"><b>' + options.id + ' ' + options.title + '</span>');
        }
        var versionInfo = $("<span ></span>");
        if (options.deletedItems || options.action === "delete") {
            versionInfo = $('<span class="history-header "><span class="historyPanelDeletedInfo historyPanelActionInfo">deleted</span> by <span class="historyPanelUserInfo">' + options.user + '</span></span>');
        }
        else {
            let action = options.action == "undelete" ? "restore" : options.action;
            versionInfo = $('<span class="history-header">Version <span class="historyPanelVersionInfo">' + options.version + '</span> - <span class="historyPanelActionInfo">' + action + '</span> by <span class="historyPanelUserInfo">' + options.user + '</span></span>');
        }
        var tags = $("<span class='taglist'>");
        var tag_labels = [];
        if (options.tags) {
            $.each(options.tags, function (_idx, et) {
                tag_labels.push("[" + et.label + "]");
            });
            tags.html(tag_labels.join(', '));
        }
        var rollback = $('<a class="history-header history-restore">' + 'restore' + '</a>').click(function (event) {
            event.stopPropagation();
            var version;
            if (options.deletedItems) {
                $(event.delegateTarget).parent().parent().parent().parent().parent().hide();
            }
            else {
                version = options.version;
            }
            _globals__WEBPACK_IMPORTED_MODULE_6__.app.restoreItemAsync(options.id, options.title, version).done(function (result) {
                if (result) {
                    if (options.deletedItems) {
                        var parent = result.response.newParent;
                        _MainTree_MainTree__WEBPACK_IMPORTED_MODULE_3__.NavigationPanel.openFolder(parent, true);
                    }
                    else {
                        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.dialog("close");
                    }
                    _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.MR1.triggerAfterRestore(options.id);
                }
            });
            return false;
        });
        var compare = $('<a class="hideCopy history-header history-restore activityViewChanges">' + 'view changes' + '</a>').click(function (event) {
            event.stopPropagation();
            var ht = new HistoryTools();
            ht.compare($(event.delegateTarget).data("fullVersion"));
            return false;
        }).data("fullVersion", options.fullVersion);
        var tag = $('<a class="hideCopy history-header history-restore activityTag">' + 'tag version' + '</a>').click(function (event) {
            event.stopPropagation();
            var auditId = $(event.delegateTarget).data("auditId");
            that.createTag(auditId, (label) => {
                tag_labels.push("[" + label + "]");
                tags.html(tag_labels.join(', '));
                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showSuccess("Tag has been created");
            });
            return false;
        }).data("auditId", options.auditId);
        var deletedAtDate = "";
        if (options.deletedate) {
            deletedAtDate = '<div style="color: darkgray;"><div class="fal fa-trash-alt" /> ' + options.deletedate + '</div>';
        }
        var date = that.createDateInfo(options.date, deletedAtDate);
        var header = $('<span name="collapseOne' + this.panelIdCounter + '"></span>');
        var comment = that.createCommentInfo(options.comment);
        header.append(icon);
        header.append(itemDisp);
        header.append("<span class='hideScreen'>&nbsp;</span>");
        header.append(versionInfo);
        var tools = $("<div class='hideCopy pull-right'>");
        date.append(tools);
        if (options.action === "edit" || options.action === "reviewed") {
            if (!options.id || !_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(options.id).isFolder) {
                tools.append(compare);
            }
        }
        if (options.allowRestore && _globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.isEditor()) {
            tools.append(rollback);
        }
        if (options.auditId) {
            tools.append(tag);
            tools.append(tags);
        }
        header.append(date);
        var panel = $('<div class="panel panel-default">' +
            '    <div class="panel-heading history-panel">' +
            '    </div>' +
            '    <div name="collapseOne' + this.panelIdCounter + '" class="hideCopy panel-collapse collapse">' +
            '      <div class="panel-body"></div>' +
            '    </div>' +
            '  </div>');
        if (ir.isFolder && options.action !== "touch") {
            icon.css("color", "transparent");
        }
        else {
            panel.css("cursor", "pointer");
        }
        let toggleOptions = {
            ctrl: options.ctrl,
            id: options.id,
            version: options.version,
            panelId: this.panelIdCounter,
            auditId: options.auditId,
            action: options.action
        };
        $(".panel-heading", panel).append(header).append(comment).click(() => this.toggle(toggleOptions));
        if (tags.html()) {
            $(".panel-heading", panel).append($("<span class='hideScreen'><i>Tags: </i></span>").append(tags.html()));
        }
        panel.append("<div class='hideScreen'>&nbsp;</div>");
        return panel;
    }
    createDateInfo(date, deletedAtDate) {
        return $('<span class="pull-right" style="text-align:right;"><div><span class="hideScreen"><i>Change Date: </i></span>' + date + '</div>' + (deletedAtDate ? deletedAtDate : "") + '</span>');
    }
    createCommentInfo(comment) {
        return $("<div class='historyComment'>").html("<span class='hideScreen'><i>Comment: </i></span>" + comment).highlightReferences();
    }
    createTag(auditId, update) {
        const okButtonSelector = "div.ui-dialog[aria-describedby=newTagDialog] > .ui-dialog-buttonpane > .ui-dialog-buttonset > .btnDoIt";
        async function tagStatusChange() {
            var okButton = $(okButtonSelector);
            if (await tagLabel.getController().getValueAsync() !== "" && await tagLabel.getController().getValueAsync() !== "") {
                okButton.prop("disabled", false);
                okButton.removeClass("ui-state-disabled");
            }
            else {
                okButton.prop("disabled", true);
                okButton.addClass("ui-state-disabled");
            }
        }
        let newTagDlg = $("<div id='newTagDialog'>").appendTo("body");
        let newTagContent = $("<div>");
        var tagLabel = $("<div id='tagLabel'>").plainText({
            controlState: _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.FormEdit,
            canEdit: true,
            help: "Tag Name",
            fieldValue: "",
            valueChanged: function () {
                tagStatusChange();
            },
            parameter: {
                rows: 1
            }
        });
        newTagContent.append(tagLabel);
        var tagComment = $("<div id='tagComment'>").plainText({
            controlState: _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.FormEdit,
            canEdit: true,
            help: "Tag Comment",
            fieldValue: _globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getComment(),
            valueChanged: function () {
                tagStatusChange();
            },
            parameter: {
                allowResize: false,
                rows: 9,
            }
        });
        newTagContent.append(tagComment);
        _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showDialog(newTagDlg, "Create Tag", newTagContent, -730, -400, [{
                text: 'Ok',
                class: 'btnDoIt',
                click: async function () {
                    _globals__WEBPACK_IMPORTED_MODULE_6__.restConnection.postProject("tag", {
                        label: await tagLabel.getController().getValueAsync(),
                        auditId: auditId,
                        comments: await tagComment.getController().getValueAsync(),
                        type: "tag"
                    }).done(async function () {
                        update(await tagLabel.getController().getValueAsync());
                    }).fail(function (jqxhr, textStatus, error) {
                        if (jqxhr && jqxhr.responseText && jqxhr.responseText.indexOf("This tag already exists for this project") !== -1) {
                            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Could not create tag", "A tag with this label already exist");
                        }
                        else {
                            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Could not create tag", "Status:" + textStatus + ". Error was:" + error);
                        }
                    });
                    newTagDlg.dialog("close");
                }
            }, {
                text: 'Cancel',
                class: 'btnCancelIt',
                click: function () {
                    newTagDlg.dialog("close");
                }
            }], _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.Scroll.None, false, false, () => {
            //close
            newTagDlg.remove();
        }, () => {
            // open
            tagStatusChange();
        });
    }
    createReportLine(options) {
        let that = this;
        //  id: item.id,
        //        title: item.title,
        //        version: item.version,
        //         user: item.user,
        //        date: item.date
        //        job:number or empty in case the report has been removed
        var icon = $('<span class="fal fa-list-alt downloadFile"></span>');
        var downloadText = $("");
        // if job is 1 week or less show download button / otherwise the file will be gone
        if (options.job && options.dateServer && (new Date().getTime() - new Date(options.dateServer).getTime() < 7 * 24 * 60 * 60 * 1000)) {
            icon.css("cursor", "pointer").click(function () {
            }).tooltip({
                title: "document creation",
                placement: 'bottom'
            });
            downloadText = $('<span class="hideCopy history-header history-restore pull-right downloadFile">&nbsp;<a href="javascript:void(0)">download</a></span>').click(function () {
                that.downloadReport(options.job);
            });
        }
        else {
            icon.css("cursor", "pointer").tooltip({
                title: "document creation",
                placement: 'bottom'
            });
        }
        var itemDisp = $('<span class="history-header key-' + options.id + '"><b>' + options.id + '</b> ' + options.title + '</span>');
        var versionInfo = $('<span class="history-header"><span class="hideScreen">&nbsp;</span>(Version ' + options.version + ') - was <span class="historyPanelActionInfo">produced</span> by ' + options.user + '</span>');
        var date = that.createDateInfo(options.date, null);
        var extraline = $("<div class='historyComment'>").html("&nbsp;");
        var tools = $("<div class='hideCopy' >");
        date.append(tools);
        tools.append(downloadText);
        var panel = $('<div class="panel panel-default">' +
            '    <div class="panel-heading-report panel-heading history-panel">' +
            '    </div>' +
            '  </div>');
        $(".panel-heading", panel).append(icon).append(itemDisp).append(versionInfo).append(date).append(extraline);
        return panel;
    }
    createExecuteLine(options) {
        //  id: item.id,
        //        title: item.title,
        //        version: item.version,
        //         user: item.user,
        //        date: item.date
        //        job:number or empty in case the report has been removed
        var icon = $('<span class="fal fa-exchange"></span>');
        var itemDisp = $('<span class="history-header key-' + options.id + '"><b>' + options.id + '</b> ' + options.title + '</span>');
        var versionInfo = $('<span class="history-header"><span class="historyPanelUserInfo">' + options.user + '</span> <span class="historyPanelActionInfo">created test forms</span></span>');
        var date = this.createDateInfo(options.date, null);
        var extraline = $("<div class='historyComment'>").html("&nbsp;");
        var panel = $('<div class="panel panel-default">' +
            '    <div class="panel-heading-report panel-heading history-panel">' +
            '    </div>' +
            '  </div>');
        $(".panel-heading", panel).append(icon).append(itemDisp).append(versionInfo).append(date).append(extraline);
        return panel;
    }
    createReferenceLine(options) {
        var icon = options.added ? $('<span class="fal fa-link">') : $('<span class="fal fa-unlink">');
        var action = options.added ? "Added" : "Deleted";
        var itemDisp = $('<span class="history-header key-' + options.fromId + '"><b>' + options.fromId + '</b> ' + action + ' link to <b>' + options.toId + '</b></span>');
        var versionInfo = $('<span class="history-header"><span class="hideScreen">&nbsp;</span>- by ' + options.user + '</span></span>');
        var date = this.createDateInfo(options.dateUserFormat, null);
        var extraline = this.createCommentInfo(options.comment);
        var panel = $('<div class="panel panel-default">' +
            '    <div class="panel-heading-report panel-heading history-panel">' +
            '    </div>' +
            '  </div>');
        $(".panel-heading", panel).append(icon).append(itemDisp).append(versionInfo).append(date).append(extraline);
        panel.append("<div class='hideScreen'>&nbsp;</div>");
        return panel;
    }
    createSignLine(options) {
        //  id: item.id,
        //        title: item.title,
        //        version: item.version,
        //         user: item.user,
        //        date: item.date
        //        job:number or empty in case the report has been removed
        var icon = $('<span class="fal fa-pencil"></span>');
        var itemDisp = $('<span class="history-header key-' + options.id + '"><b>' + options.id + '</b> ' + options.title + '</span>');
        var versionInfo = $('<span class="history-header"><span class="hideScreen">&nbsp;</span>- was <span class="historyPanelActionInfo">' + (typeof options.reason != 'undefined' ? options.reason : "signed") + '</span></span>');
        var date = this.createDateInfo(options.date, null);
        var extraline = $("<div class='historyComment'>").html("&nbsp;");
        var panel = $('<div class="panel panel-default">' +
            '    <div class="panel-heading-report panel-heading history-panel">' +
            '    </div>' +
            '  </div>');
        $(".panel-heading", panel).append(icon).append(itemDisp).append(versionInfo).append(date).append(extraline);
        return panel;
    }
    createMergeLine(options) {
        //        user: item.user,
        //        date: item.date
        //        job:number or empty in case the report has been removed
        this.panelIdCounter++;
        let icon = $('<span style="cursor:pointer" class="fal fa-code-merge"></span>');
        let itemDisp = $('<span class="history-header"><b>' + 'MERGE' + '</b></span>');
        let versionInfo = $('<span class="history-header"><span class="hideScreen">&nbsp;</span>- by ' + options.user + '</span></span>');
        let date = this.createDateInfo(options.date, null);
        let header = $('<span name="collapseOne' + this.panelIdCounter + '"></span>');
        let comment = this.createCommentInfo(options.comment);
        header.append(icon);
        header.append(itemDisp);
        header.append(versionInfo);
        let tools = $("<div class='hideCopy pull-right'>");
        let tags = $("<span class='taglist'>");
        let tag_labels = [];
        if (options.tags) {
            $.each(options.tags, function (_idx, et) {
                tag_labels.push("[" + et.label + "]");
            });
            tags.html(tag_labels.join(', '));
        }
        date.append(tools.append(tags));
        header.append(date);
        var panel = $('<div class="panel panel-default">' +
            '    <div class="panel-heading history-panel">' +
            '    </div>' +
            '    <div name="collapseOne' + this.panelIdCounter + '" class="hideCopy panel-collapse collapse">' +
            '      <div class="panel-body"></div>' +
            '    </div>' +
            '  </div>');
        panel.css("cursor", "pointer");
        let toggleOptions = {
            ctrl: options.ctrl,
            id: null,
            version: null,
            panelId: this.panelIdCounter,
            auditId: options.auditId,
            action: options.action
        };
        $(".panel-heading", panel).append(header).append(comment).click(() => this.toggle(toggleOptions));
        return panel;
    }
    downloadReport(jobNumber) {
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.getReportDetails(jobNumber).done(function (progress) {
            _globals__WEBPACK_IMPORTED_MODULE_6__.app.download(jobNumber, progress.jobFile[progress.jobFile.length - 1].jobFileId);
        });
    }
    async toggle(options) {
        let that = this;
        if (options.action !== "merge") {
            let ir = _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(options.id);
            if (ir.isFolder && options.action !== "touch") {
                // there is no history of folders...
                return;
            }
        }
        var tag = "collapseOne" + options.panelId;
        var panelHeader = $("span[name='" + tag + "']", options.ctrl);
        $(".fa-chevron-right", panelHeader).removeClass("fa-chevron-right").addClass("fa-chevron-up");
        $(".fa-chevron-down", panelHeader).removeClass("fa-chevron-down").addClass("fa-chevron-right");
        $(".fa-chevron-up", panelHeader).removeClass("fa-chevron-up").addClass("fa-chevron-down");
        var panel = $("div[name='" + tag + "']", options.ctrl);
        var panelBody = $(".panel-body", panel);
        if (panelBody.html() === "") {
            switch (options.action) {
                case "touch":
                    _globals__WEBPACK_IMPORTED_MODULE_6__.app.getAuditDetailsAsync(options.auditId).done(function (audit) {
                        panelBody.append("<p>The following items have been touched:</p>");
                        let actionDetails = $("<ul>");
                        $.each(audit.techAudit, function (_idx, ta) {
                            if (ta.operation === "add" && ta.table === "item_instance" && ta.ref) {
                                actionDetails.prepend($("<li>").append(_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.renderLink(ta.ref)));
                            }
                        });
                        panelBody.append(actionDetails);
                    });
                    break;
                case "merge":
                    _globals__WEBPACK_IMPORTED_MODULE_6__.app.getAuditDetailsAsync(options.auditId).done(function (audit) {
                        let mergeMain = audit.techAudit.filter(ta => ta.table == "merge_main");
                        if (mergeMain.length) {
                            let mergeId = mergeMain[0].index;
                            _globals__WEBPACK_IMPORTED_MODULE_6__.restConnection.getProject("mergehistory").done((history) => {
                                let details = history.entries.filter(his => his.id == mergeId);
                                if (details.length) {
                                    let isMerge = _globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getBranches(_globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getProject(), "").map(info => info.branch).lastIndexOf(details[0].branchProject) != -1;
                                    if (isMerge) {
                                        panelBody.append(`<p>Merge back from branch: ${details[0].branchProject}</p>`);
                                    }
                                    else {
                                        panelBody.append(`<p>Updated from mainline: ${details[0].branchProject}</p>`);
                                    }
                                    let ul = $("<ul>").appendTo(panelBody);
                                    for (let detail of details[0].details) {
                                        _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.BranchingHelper.addMergeDetail(ul, detail, null, isMerge);
                                    }
                                }
                                else {
                                    // ignore operation: "add" , table "item_link"
                                    panelBody.append(`<p>Merge back from a deleted or not accessible branch. The following has been modified:</p>`);
                                    let ul = $("<ul>").appendTo(panelBody);
                                    let links = false;
                                    let items = [];
                                    for (let change of audit.techAudit) {
                                        if (change.table == "item_link") {
                                            links = true;
                                        }
                                        else if (!change.ref || items.indexOf(change.ref) != -1) {
                                            // already registered
                                        }
                                        else {
                                            if (change.table == "item_instance") {
                                                if (change.operation == "add") {
                                                    items.push(change.ref);
                                                }
                                                else if (change.operation == "invalidate") {
                                                    items.push(change.ref);
                                                }
                                                if (change.operation == "moved") {
                                                    items.push(change.ref);
                                                }
                                            }
                                        }
                                    }
                                    for (let item of items) {
                                        ul.append($(`<li>Item created/update/moved/deleted: ${item}</li>`));
                                    }
                                    if (links) {
                                        ul.append($(`<li>Links have been modified</li>`));
                                    }
                                }
                                panelBody.highlightReferences();
                            });
                        }
                    });
                    break;
                default:
                    _globals__WEBPACK_IMPORTED_MODULE_6__.app.getItemAsync(options.id, options.version).done(async function (data) {
                        let render = new _Components_ItemForm__WEBPACK_IMPORTED_MODULE_2__.ItemControl({
                            control: panelBody,
                            controlState: _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.HistoryView,
                            isHistory: options.version,
                            item: data,
                            isItem: !data.children
                        });
                        await render.load();
                        that.controls.push(render);
                    });
                    break;
            }
        }
        panel.collapse('toggle');
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.resizeDlgContent(this.controls);
    }
    updateVersionPanes() {
        let that = this;
        // get all visible version panes
        var visiblePanes = $(".versionpane:visible .panel-body-v-scroll");
        // nothing is displayed
        if (visiblePanes.length < 1) {
            return;
        }
        // only one version is displayed: show without change markup
        if (visiblePanes.length == 1) {
            const shadows = JSON.parse($(visiblePanes[0]).parent().data("shadowRoots"));
            $(visiblePanes[0]).html($(visiblePanes[0]).parent().data("originalHTML"));
            visiblePanes[0].querySelectorAll(".shadow-root").forEach(element => {
                const shadowRoot = element.attachShadow({ mode: "open" });
                shadowRoot.innerHTML = shadows[element.id];
            });
            _globals__WEBPACK_IMPORTED_MODULE_6__.matrixApplicationUI.lastMainItemForm.resizeIt(true);
            that.updateRowHeights($(".slickTable", $(visiblePanes[0])));
            return;
        }
        // build data to send to compare function
        let versions = [];
        $.each(visiblePanes, function (_idx, visiblePane) {
            let rendered = $("<div>").html($(visiblePane).parent().data("originalHTML"));
            $("textarea,pre", rendered).each(function (idx, select) {
                $(select).replaceWith("<div>" + $(select).html().replace(/(?:\r\n|\r|\n)/g, "<br>") + "</div>");
            });
            $(".fal.fa-square", rendered).each((idx, elem) => {
                $(elem).parent().addClass("history-unchecked");
            });
            $(".fal.fa-square-square", rendered).each((idx, elem) => {
                $(elem).parent().addClass("history-checked");
            });
            const shadows = JSON.parse($(visiblePane).parent().data("shadowRoots"));
            rendered[0].querySelectorAll(".shadow-root").forEach(element => {
                element.innerHTML = HistoryTools.compare_css + shadows[element.id];
            });
            versions.push(rendered.html());
        });
        let split = this.splitVersions(versions);
        let compareParams = {
            arg: JSON.stringify(split ? { versionsMultiple: split } : { versions: versions })
        };
        // call compare
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.compareHTML(compareParams).done(function (compareResults) {
            $.each(visiblePanes, function (idx, visibleVersionPane) {
                if (split) {
                    let compare = `<div class='dialog-body'>`;
                    for (let assemble = 0; assemble < compareResults.htmlMultiple.length; assemble++) {
                        compare += compareResults.htmlMultiple[assemble][idx].replace(/pull-left/g, "");
                    }
                    compare += `</div>`;
                    $(visibleVersionPane).parent().data("compareHTML", compare);
                }
                else {
                    $(visibleVersionPane).parent().data("compareHTML", compareResults.html[idx]);
                }
            });
            that.renderVersionPanes();
            // make sure hyperlinks open in new view
            $(".itemTitle>a", visiblePanes).attr("target", "_blank");
        });
    }
    splitVersions(versions) {
        let split = [];
        let parts = 0;
        // split each of html blobs
        for (let version of versions) {
            let oneSplit = [];
            split.push(oneSplit);
            let all = $(version);
            for (let child of all.children().toArray()) {
                oneSplit.push(child.outerHTML);
            }
            if (parts && oneSplit.length != parts) {
                // items not well aligned -> don't compare section by section
                return null;
            }
            parts = oneSplit.length;
        }
        // transpose the array
        let splitTranspose = [];
        for (let part = 0; part < parts; part++) {
            splitTranspose.push([]);
            for (let doc = 0; doc < versions.length; doc++) {
                splitTranspose[part].push(split[doc][part]);
            }
        }
        return splitTranspose;
    }
    updateRowHeights(table) {
        // calculate real rendered heights of cells and adjust heights accordingly
        let rows = $(".slick-row", table);
        if (rows.length < 1)
            return; // nothing to update
        var cellSizer = $("<div style='padding:0px 4px 0px 4px'>");
        $("body").append(cellSizer.css("left", "-20000px"));
        let top = 0;
        $.each(rows, function (_ridx, row) {
            let columns = $(".slick-cell", $(row));
            let height = Math.max(20, $(row).height());
            $.each(columns, function (_cidx, col) {
                //if ( $(".multiLineFormatter"),$(col) ||  $(".itemRefFormatter"),$(col) ) {
                cellSizer.width(Math.max(10, $(col).width() - 10));
                cellSizer.html($(col).html());
                height = Math.max(height, cellSizer.height());
                $(col).css("padding-top", "0").css("padding-bottom", "0");
                //}
                $(col).css("height", "100%");
            });
            $(row).height(height);
            $(row).css("top", top + "px");
            top += height;
        });
        cellSizer.remove();
        table.height(top + 27); // where does that number come from?
        $(".slick-viewport", table).css("height", "100%");
    }
    renderVersionPanes() {
        let that = this;
        let visiblePanes = $(".versionpane:visible  .panel-body-v-scroll");
        let titles = $(".versionpane:visible .itemTitleBarNoToolsNoEdit");
        // several versions are displayed show each with change markup
        $.each(visiblePanes, function (_idx, visiblePane) {
            $(visiblePane).html($(visiblePane).parent().data("compareHTML"));
            visiblePane.querySelectorAll(".shadow-root").forEach(element => {
                const content = element.innerHTML;
                element.innerHTML = "";
                const shadow = element.attachShadow({ mode: "open" });
                shadow.innerHTML = content;
            });
            $.each($(".slickTable", $(visiblePane)), function (_tableIdx, table) {
                that.updateRowHeights($(table));
            });
        });
        let visibleBodies = $(".versionpane:visible  .dialog-body");
        var count = $(visibleBodies[0]).children().length;
        // just a safety check if number of fields changes the code after would be fairly random
        for (var idx = 1; idx < visibleBodies.length; idx++) {
            if (count !== $(visibleBodies[idx]).children().length) {
                return;
            }
        }
        // assume.... all 1+ panes have same structure: adjust heights
        for (var c = 0; c < count; c++) {
            var mh = 0;
            for (var idx = 0; idx < visibleBodies.length; idx++) {
                var p = $($(visibleBodies[idx]).children()[c]);
                p.css("height", "auto");
                mh = Math.max(mh, p.height());
            }
            // run from right to left
            for (var idx = visibleBodies.length - 1; idx >= 0; idx--) {
                var p = $($(visibleBodies[idx]).children()[c]);
                //Add 1px of room
                p.height(mh + 1);
            }
        }
        // same for version info
        visibleBodies = $(".versionpane:visible .versionInfo");
        var mh = 0;
        for (var idx = 0; idx < visibleBodies.length; idx++) {
            var p = $(visibleBodies[idx]);
            p.css("height", "auto");
            mh = Math.max(mh, p.height());
        }
        for (var idx = 0; idx < visibleBodies.length; idx++) {
            var p = $(visibleBodies[idx]);
            p.height(mh);
        }
    }
    async renderItemMeat(hi, item) {
        let itemForm = new _Components_ItemForm__WEBPACK_IMPORTED_MODULE_2__.ItemControl({
            control: hi,
            controlState: _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.HistoryView,
            isHistory: 1,
            item: item,
            isItem: true,
            parameter: {
                manualTableHeights: true,
                reviewMode: true // don't show outdated icons
            }
        });
        await itemForm.load();
        let itemDetails = $(".panel-body-v-scroll", hi);
        itemDetails.css("display", "flex");
        itemDetails.css("flex-direction", "column");
        _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.SmartText.prepareForReadReadRender(itemDetails);
    }
    async showSaveConflict(dlg, latest, localChanges) {
        let that = this;
        async function showVersion(hi, item, version, userLogin) {
            $("#tellToSelect").hide();
            const userLoginDisplay = that.formatUserLogin(userLogin);
            var vi = $("<div class='versionInfo'>");
            var header = $("<div class='baseControlHelp'>Version Info</div>");
            hi.append(header);
            hi.append(vi);
            vi.append("<div class=''>Version: <span class='historyDlgVersionDetail'>" + version + "</span></div>");
            vi.append("<div class=''>User: <span class='historyDlgVersionDetail'>" + userLoginDisplay + "</span></div>");
            hi.append("<hr>");
            await that.renderItemMeat(hi, item);
            hi.data("status", "show");
            hi.show();
        }
        let changeView = $("<div>").appendTo(dlg);
        $("<div class='warningMerge'>").html(`Someone changed and saved the same item (${_globals__WEBPACK_IMPORTED_MODULE_6__.app.getCurrentItemId()}) while you were editing it. In order not to overwrite these changes:<br>
        <ul style="text-align: left;font-size: smaller;margin-left: 100px;">
        <li>open the changed item in another <a href='${_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(_globals__WEBPACK_IMPORTED_MODULE_6__.app.getCurrentItemId()).url}' target='_blank'>tab</a></li>
        <li>copy the changes you did in this tab</li>
        <li>close this tab (to be able to edit in the other tab)</li>
        <li>manually update the item with your changes</li>`).appendTo(changeView);
        if (latest.history.length &&
            latest.history.length > 0) {
            let flex = $("<div style='display:flex;justify-content: center;'>").appendTo(changeView);
            var changed = $("<div class='versionpane'>").appendTo(flex);
            var current = $("<div class='versionpane'>").appendTo(flex);
            // latest.history is organized newest to oldest.
            await showVersion(changed, latest, "New Version on Server", latest.history[0].user);
            await showVersion(current, localChanges, "Your Changes", _globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getUser());
            this.updateVersionPanes();
        }
        else {
            // it's a folder
        }
    }
    compareVersionDialog(item, history, selectBar, show, allowRestore) {
        let that = this;
        var trmy = $("<tr id='historyDlgYear' style='background-color: #eee;'>");
        var last_my = "";
        var span_my = 0;
        var trday = $("<tr id='historyDlgMonth' style='background-color: #eee;'>");
        var last_day = "";
        var span_day = 0;
        var trtime = $("<tr id='historyDlgTime'>");
        var trdetails = $("<tr>");
        var tddetails = $("<td>").attr("colspan", history.length);
        trdetails.append(tddetails);
        var flex = $("<div style='display:flex;justify-content: center;'>");
        tddetails.append(flex);
        var format_my = new SimpleDateFormat("yyyy MMMM");
        var format_day = new SimpleDateFormat("d");
        var format_time = new SimpleDateFormat("HH:mm");
        let itemIsDeleted = item.isDeleted;
        let timewarpVersion = -1;
        if (_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getTimeWarp()) {
            let treeInfo = _globals__WEBPACK_IMPORTED_MODULE_6__.app.getItemFromTree(item.id);
            if (treeInfo.version) {
                let vp = treeInfo.version.split("/");
                timewarpVersion = Number(vp[0]);
                itemIsDeleted = treeInfo.version.indexOf("*") != -1;
            }
        }
        for (var idx = history.length - 1; idx >= 0; idx--) {
            var date = new Date(history[idx].date);
            var my = format_my.format(date);
            var day = format_day.format(date);
            var time = format_time.format(date);
            let newMonth = false;
            if (my !== last_my) {
                newMonth = true;
                span_my = 1;
                trmy.append($("<td>").html(my).css("font-weight", "bold").css("text-align", "center"));
                last_my = my;
            }
            else {
                span_my++;
                $("td", trmy).last().attr("colspan", span_my);
            }
            if (day !== last_day || newMonth) {
                span_day = 1;
                trday.append($("<td>").html(day).css("font-weight", "bold").css("text-align", "center"));
                last_day = day;
            }
            else {
                span_day++;
                $("td", trday).last().attr("colspan", span_day);
            }
            let timewarp = history[idx].version == timewarpVersion;
            let timewarpClass = "";
            if (timewarpVersion != -1) {
                if (history[idx].version > timewarpVersion)
                    timewarpClass = " timepwarp_after";
                if (history[idx].version == timewarpVersion)
                    timewarpClass = " timepwarp_day";
            }
            // always show very first and last one and always the last of a day
            let other_day = idx == history.length - 1 || idx == 0 || new Date(history[idx].date).getDate() != new Date(history[idx - 1].date).getDate() || timewarp;
            var time_toggle = $("<td class='historyDlgVersionPaneSelector " + (other_day ? "last_day" : "any_day") + timewarpClass + "'>").html("<div>" + time + "</div>" + "<div>rev&nbsp;" + history[idx].version + "</div>");
            time_toggle.data("rev", history[idx].version);
            time_toggle.click(function (event) {
                let revision = $(event.delegateTarget).data("rev");
                // update top bar
                var hi = $("#ver" + revision);
                $(event.delegateTarget).toggleClass("historyDlgVersionPaneSelected");
                // update side bar
                let selected = $(event.delegateTarget).hasClass("historyDlgVersionPaneSelected");
                $.each($(".historyDetailLine"), function (_hrlIdx, hrl) {
                    if ($(hrl).data("rev") == revision) {
                        selected ? $(hrl).parent().addClass("historyVersionContainerSelected") : $(hrl).parent().removeClass("historyVersionContainerSelected");
                    }
                });
                // update panes
                if (hi.data("status") === "show") {
                    hi.hide();
                    hi.data("status", "hide");
                    that.updateVersionPanes();
                }
                else if (hi.data("status") === "hide") {
                    hi.show();
                    hi.data("status", "show");
                    that.updateVersionPanes();
                }
                else {
                    showVersion(hi, revision);
                }
                if ($(".versionpane:visible").length === 0) {
                    $("#tellToSelect").show();
                }
                else {
                    $("#tellToSelect").hide();
                }
            });
            trtime.append(time_toggle);
            var vp = $("<div class='versionpane' id='ver" + history[idx].version + "'>");
            vp.hide();
            flex.append(vp);
            if (show.indexOf(history[idx].version) !== -1) {
                showVersion(vp, history[idx].version);
                time_toggle.addClass("historyDlgVersionPaneSelected");
            }
        }
        if (itemIsDeleted) {
            trmy.append($("<td rowspan='4' style='vertical-align: middle;border: 1px solid #ddd;'>").html("<span style='color:red'>item deleted</span>"));
        }
        if (!show || show.length === 0) {
            flex.append("<div id='tellToSelect'>select revisions to be shown / compared</div>");
        }
        function showVersion(hi, r) {
            $("#tellToSelect").hide();
            var h = history[history.length - r];
            var vi = $("<div class='versionInfo'>");
            var header = $("<div class='baseControlHelp'>Version Info</div>");
            hi.append(header);
            hi.append(vi);
            vi.append("<div class=''>Version: <span class='historyDlgVersionDetail'>" + h.version + "</span></div>");
            if (h.action == "signature") {
                vi.append("<div class=''>Action: <span class='historyDlgVersionDetail'>" + h.comment + "</span>" + "</div>");
            }
            else {
                let restoreInfo = "";
                if (h.deletedate) {
                    restoreInfo = (h.deletedate == h.dateUserFormat) ? " (rolled back to previous version)" : ` (was deleted on ${h.deletedate}) `;
                }
                vi.append("<div class=''>Action: <span class='historyDlgVersionDetail'>" + h.action + "</span>" + restoreInfo + "</div>");
                var comment = $("<div class='' style='white-space: pre-wrap'>Comment: <span class='historyDlgVersionDetail'>" + h.comment + "</span></div>");
                comment.highlightReferences();
                vi.append(comment);
                const userLoginDisplay = that.formatUserLogin(h.user);
                vi.append("<div class=''>User: <span class='historyDlgVersionDetail'>" + userLoginDisplay + "</span></div>");
            }
            vi.append("<div class='' style='margin-bottom:4px'>Date: <span class='historyDlgVersionDetail'>" + h.dateUserFormat + "</span></div>");
            hi.append("<hr>");
            _globals__WEBPACK_IMPORTED_MODULE_6__.app.getItemAsync(h.id, (r === history.length && !itemIsDeleted && !_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getTimeWarp()) ? undefined : r).done(async function (data) {
                let itemForm = new _Components_ItemForm__WEBPACK_IMPORTED_MODULE_2__.ItemControl({
                    control: hi,
                    controlState: _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.HistoryView,
                    isHistory: r,
                    item: data,
                    isItem: !data.children,
                    parameter: {
                        manualTableHeights: true,
                        reviewMode: true // don't show outdated icons
                    }
                });
                await itemForm.load();
                let itemDetails = $(".panel-body-v-scroll", hi);
                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.SmartText.prepareForReadReadRender(itemDetails);
                that.updateVersionPanes();
            });
            var rollback = $('<a class="history-header history-restore">' + 'restore' + '</a>').click(function (event) {
                if (event.preventDefault)
                    event.preventDefault();
                if (event.stopPropagation)
                    event.stopPropagation();
                var r = $(event.delegateTarget).data("ver");
                var h = history[history.length - r];
                _globals__WEBPACK_IMPORTED_MODULE_6__.app.restoreItemAsync(h.id, h.title, r).done(function (result) {
                    if (result) {
                        _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.MR1.triggerAfterRestore(h.id);
                        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.dialog("close");
                    }
                });
                return false;
            }).data("ver", r);
            if (r !== history.length && _globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.isEditor() && allowRestore) {
                header.append(rollback);
            }
            hi.data("status", "show");
            hi.show();
        }
        var selectTable = $("<table class='table table-bordered' style='width:100%;border:none'>");
        var tbody = $("<tbody>");
        selectTable.append(tbody);
        tbody.append(trmy);
        tbody.append(trday);
        tbody.append(trtime);
        tbody.append(trdetails);
        if (selectBar) {
            return selectTable;
        }
        else {
            return flex;
        }
    }
    // check if item is either not specified or as expected
    checkItemId(xr, itemId) {
        if (!xr)
            return true;
        if (!xr.itemOrFolderRef)
            return true;
        return itemId == _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(xr.itemOrFolderRef).id;
    }
    formatUserLogin(userLogin) {
        return _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.hasUserInfo(userLogin) ? userLogin : `<s>${userLogin}</s>`;
    }
    formatUserName(userLogin, userName) {
        return _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.hasUserInfo(userLogin) ? userName : `<s>${userName}</s>`;
    }
    showHistoryDetails(itemId, simpleHistory, historyUnfiltered, tags) {
        let that = this;
        let inner = $("<div class='detailsHistoryContainer'>")
            .appendTo($("#detailsHistory"));
        const printAction = {
            "edit item": ["modified", "fa-pencil"],
            "reviewed item": ["reviewed", "fa-check"],
            "touch items": ["touched", "fa-hand-point-up"],
            "undelete item": ["restored", "fa-trash-restore"],
            "delete item": ["deleted", "fa-trash"],
            "add item": ["created", "fa-plus"],
            "execute tests": [" created test form", "fa-cogs"],
            "add link": ["add link", "fa-link"],
            "merge merge": ["merged", "fa-code-merge"],
            "clone project": ["project copy", "fa-copy"],
            "import_module item": ["import", "fa-external-link"],
            "delete import": ["delete import", "fa-trash"]
        };
        // MATRIX-4704 filter history: there's some entries which belong to other items, get rid of those
        let audit = historyUnfiltered.audit.filter(historyEntry => that.checkItemId(historyEntry.itemBefore, itemId) && that.checkItemId(historyEntry.itemAfter, itemId));
        let version = 1;
        let preVersion = 0;
        let line = null;
        let auditIdx = audit.length - 1;
        let tagIdx = 0;
        if (tags.length && tags[0].label == "base")
            tags[0].label = "Project creation";
        tags.sort(function (a, b) {
            return a.auditId - b.auditId;
        });
        let begin;
        let lastSelectionBucket = null;
        while (auditIdx >= 0 || tagIdx < tags.length) {
            if (auditIdx < 0 || (tagIdx < tags.length && tags[tagIdx].auditId < audit[auditIdx].auditId)) {
                let tag = $(`
                    <div class='historyTagLine' title='Tagged time: ${tags[tagIdx].auditTime}'>
                        <div class="tagLabel"><span>${tags[tagIdx].label}</span></div>
                        <div class="historyIcon historyTagIcon"><i class="fal fa-tag"></i></div>
                    </div>
                `).prependTo(inner);
                if (tags[tagIdx].label.match(/^MERGE_.*_begin$/)) {
                    begin = tag;
                }
                else if (begin && tags[tagIdx].label.match(/^MERGE_.*_end$/)) {
                    $(".tagLabel", begin).html(`<span>${tags[tagIdx].label.replace("_end", "_begin_end")}</span>`);
                    tag.remove();
                }
                tagIdx++;
            }
            else {
                begin = null;
                let historyEntry = audit[auditIdx];
                let icon = "";
                let negateIcon = false;
                let createdSign = "";
                let actionName = "";
                let detail = null;
                if (_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(itemId).type != "XTC" && historyEntry.action == "execute") {
                    // special case (XTC execution does not create a new version but it has the XTC as item after...)
                }
                else if (historyEntry.itemAfter && historyEntry.itemAfter.itemOrFolderRef) {
                    version = _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(historyEntry.itemAfter.itemOrFolderRef).version;
                    createdSign = (_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(historyEntry.itemAfter.itemOrFolderRef).type == "SIGN" && _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(itemId).type == "DOC") ? _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(historyEntry.itemAfter.itemOrFolderRef).id : "";
                }
                else {
                    let explicitVersion = simpleHistory.filter(sh => sh.date == historyEntry.dateTime);
                    if (explicitVersion.length == 1) {
                        version = explicitVersion[0].version;
                    }
                }
                let ad = historyEntry.action + " " + historyEntry.entity;
                const print = printAction[ad];
                let hideLine = false;
                if (createdSign) {
                    actionName = "created sign";
                    detail = "Created " + createdSign;
                    version = preVersion;
                }
                else if (historyEntry.action == "indexer") {
                    actionName = "reindex";
                    icon = "fa-pencil";
                    historyEntry.reason = "Item updated after config change";
                }
                else if (historyEntry.reason == "SignReject") {
                    actionName = "rejected signature";
                    icon = "fa-pencil";
                    detail = "rejected document";
                    negateIcon = true;
                    historyEntry.reason = "";
                }
                else if (print) {
                    actionName = print[0];
                    icon = print[1];
                }
                else if (ad == "add item_link") {
                    let itemUp = historyEntry.itemUp.itemOrFolderRef;
                    let itemDown = historyEntry.itemDown.itemOrFolderRef;
                    icon = "fa-link";
                    if (itemUp == itemId) {
                        actionName = "Link down";
                        detail = "link:" + itemDown;
                    }
                    else {
                        actionName = "Link up";
                        detail = "uplink:" + itemUp;
                    }
                }
                else if (ad == "delete item_link") {
                    let itemUp = historyEntry.itemUp.itemOrFolderRef;
                    let itemDown = historyEntry.itemDown.itemOrFolderRef;
                    icon = "fa-unlink";
                    if (itemUp == itemId) {
                        detail = "remove link:" + itemDown;
                    }
                    else {
                        detail = "remove uplink:" + itemUp;
                    }
                }
                else if (ad == "signature item") {
                    icon = "fa-pencil";
                    detail = historyEntry.reason;
                    historyEntry.reason = "";
                }
                else if (ad == "move item") {
                    icon = "fa-arrow-right";
                    actionName = "move";
                }
                else if (ad == "store signed item") {
                    hideLine = true;
                }
                else if (ad == "document reject item") {
                    detail = "Rejected Document";
                    actionName = ad;
                    icon = "fa-pencil";
                    negateIcon = true;
                    // hack remove if server's fixed
                    if (version == preVersion)
                        version += 1;
                }
                else {
                    actionName = ad;
                    icon = "fa-question-circle";
                }
                if (actionName == "restored") {
                    detail = "restored";
                }
                if (!hideLine) {
                    const detailLine = detail !== null ? `<b>${detail}${historyEntry.reason ? ":" : ""}</b> ` : "";
                    const userNameDisplay = this.formatUserName(historyEntry.userLogin, _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getFullName(historyEntry.userLogin));
                    if (version !== preVersion) {
                        lastSelectionBucket = $(`<div class="historyVersionContainer"/>`).prependTo(inner);
                    }
                    else if (actionName == "deleted") {
                        lastSelectionBucket = $(`<div class="historyVersionContainerDeleted"/>`).prependTo(inner);
                    }
                    let negate = "<i class='fal fa-slash' style='position: absolute;left: 10px;'></i>";
                    line = $(`
                        <div class='historyDetailLine'>
                            <div class="historyIcon" title="${actionName}"><i class="fal ${icon}"></i>${negateIcon ? negate : ""}</div>
                            <div class="historyDetail">
                                <span class='historyDetailAction'>${detailLine}${historyEntry.reason}</span>
                                <div class='historyDetailDate'>
                                    <span>${historyEntry.dateTimeUserFormat}</span>
                                    <span>${userNameDisplay}</span>
                                </div>
                            </div>
                        </div>
                    `).prependTo(lastSelectionBucket).data("rev", actionName == "deleted" ? -1 : version);
                    if (version !== preVersion) {
                        line.append($(`
                            <span class="historyTagContainer">
                                <a class="historyTag" title="Create Tag" data-auditid="${historyEntry.auditId}">
                                    <div class="addLabelImage"></div>
                                </a>
                            </span>
                        `));
                    }
                    else {
                        line.append($(`<span class="historyTagContainer">`));
                    }
                }
                preVersion = version;
                auditIdx--;
            }
        }
        $('.historyTag').click(function (event) {
            if (event.preventDefault)
                event.preventDefault();
            if (event.stopPropagation)
                event.stopPropagation();
            let auditId = $(event.delegateTarget).data("auditid");
            let clickedLine = $(event.delegateTarget).closest(".historyVersionContainer");
            //TODO:[TS] Discuss with Wolfgang, this is messy, should recreate UI from state instead
            that.createTag(auditId, function (newTag) {
                let line = $(`
                    <div class='historyTagLine'>
                        <div class="tagLabel"><span>${newTag}</span></div>
                        <div class="historyIcon historyTagIcon" title="Tagged"><i class="fal fa-tag"></i></div>
                    </div>
                `).insertBefore(clickedLine);
                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showSuccess("Tag has been created");
            });
            return false;
        });
        $(".historyDetailLine", inner).click(function (event) {
            let clicked = $(event.delegateTarget);
            let revision = clicked.data("rev");
            let tab = $('td.historyDlgVersionPaneSelector').filter(function (_idx, node) { return $(node).data("rev") == revision; });
            tab.trigger("click");
            if (event.preventDefault)
                event.preventDefault();
            if (event.stopPropagation)
                event.stopPropagation();
        });
    }
    showHistoryDialog(options) {
        let that = this;
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.html("");
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.addClass("dlg-no-scroll");
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.removeClass("dlg-scroll");
        let versions = this.compareVersionDialog(options.item, options.item.history, true, options.preselect ? options.preselect : [], !options.readOnly);
        let detailsVersion = $("<div class='detailsVersions'>").append(versions);
        let detailsHistory = $("<div id='detailsHistory'>");
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.append(detailsHistory).append(detailsVersion);
        if (_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.DateTime.requiresTimeZoneWarning()) {
            _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.append(_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.DateTime.getTimeZoneCTA());
        }
        // prevent auto scrolling when opening dialog
        let scrollTop = $("#itemDetails > .panel-body-v-scroll").length ? $("#itemDetails > .panel-body-v-scroll")[0].scrollTop : 0;
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.dialog({
            autoOpen: true,
            title: "History of '" + (options.id ? options.id : options.item.id) + "'",
            width: $(document).width() * 0.85,
            height: _globals__WEBPACK_IMPORTED_MODULE_6__.app.itemForm.height() * 0.85,
            modal: true,
            resizeStop: function () {
                _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.resizeDlgContent(that.controls);
            }, open: function () {
                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.pushDialog(_globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm);
                if (_globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm[0].scrollWidth > _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.innerWidth()) {
                    $(".any_day > div").hide();
                    // still bigger? -> scroll right
                    if (_globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm[0].scrollWidth > _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.innerWidth()) {
                        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm[0].scrollLeft = _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm[0].scrollWidth - _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.innerWidth() + 10;
                    }
                }
                that.initHistoryOptionSelect(options.item.history, $('.cbHide'), options.id ? options.id : options.item.id);
            }, close: function () {
                if (scrollTop)
                    $("#itemDetails > .panel-body-v-scroll")[0].scrollTop = scrollTop;
                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.popDialog(_globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm);
            },
            buttons: [{
                    text: 'Hide ',
                    class: 'cbHide',
                    click: function () {
                    }
                }, {
                    text: 'Ok',
                    class: 'btnOk',
                    click: function () {
                        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.removeClass("dlg-scroll");
                        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.dialog("close");
                    }
                }]
        }).resizeDlgContent(this.controls);
    }
    ;
    initHistoryOptionSelect(history, container, itemId) {
        let that = this;
        const optionsHistoryViewSelect = ["Time Bar", "Time Bar Condensed", "Full History"];
        let currentStr = _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.serverStorage.getItem("HistoryViewSelect");
        let current = currentStr ? Number(currentStr) : 0;
        let dropup = _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.createDropDownButton("", [{
                name: optionsHistoryViewSelect[0], click: () => {
                    that.updateHistoryOptionSelect(history, dropup, itemId, 0, optionsHistoryViewSelect[0]);
                }
            }, {
                name: optionsHistoryViewSelect[1], click: () => {
                    that.updateHistoryOptionSelect(history, dropup, itemId, 1, optionsHistoryViewSelect[1]);
                }
            }, {
                name: optionsHistoryViewSelect[2], click: () => {
                    that.updateHistoryOptionSelect(history, dropup, itemId, 2, optionsHistoryViewSelect[2]);
                }
            }], true, "HistoryViewSelect", true);
        container.replaceWith(dropup);
        that.updateHistoryOptionSelect(history, dropup, itemId, current, optionsHistoryViewSelect[current]);
    }
    updateHistoryOptionSelect(simpleHistory, dropup, itemId, option, text) {
        let that = this;
        dropup.removeClass("open");
        $("#HistoryViewSelect").html(text);
        _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.serverStorage.setItem("HistoryViewSelect", option + "");
        switch (option) {
            case 0:
                $("#historyDlgYear").show();
                $("#historyDlgMonth").show();
                $("#historyDlgTime").show();
                $(".any_day > div").show();
                $("#detailsHistory").hide();
                $("#detailsHistory").removeClass('detailsHistoryEx');
                $(".detailsVersions").removeClass('detailsVersionsEx');
                break;
            case 1:
                $("#historyDlgYear").show();
                $("#historyDlgMonth").show();
                $("#historyDlgTime").show();
                $("#detailsHistory").hide();
                $(".any_day > div").hide();
                $("#detailsHistory").removeClass('detailsHistoryEx');
                $(".detailsVersions").removeClass('detailsVersionsEx');
                break;
            default:
                $("#historyDlgYear").hide();
                $("#historyDlgMonth").hide();
                $("#historyDlgTime").hide();
                $("#detailsHistory").show();
                $("#detailsHistory").addClass('detailsHistoryEx');
                $(".detailsVersions").addClass('detailsVersionsEx');
                if ($("div", $("#detailsHistory")).length == 0) {
                    _globals__WEBPACK_IMPORTED_MODULE_6__.restConnection.getProject("tag").done(function (tags) {
                        _globals__WEBPACK_IMPORTED_MODULE_6__.restConnection.getProject("audit?startAt=0&maxResults=1000&itemRef=" + itemId).done(function (history) {
                            that.showHistoryDetails(itemId, simpleHistory, history, tags);
                            // get the currently shown tabs
                            let shown = [];
                            $.each($(".historyDlgVersionPaneSelected"), (topIdx, top) => {
                                shown.push($(top).data("rev"));
                            });
                            // highlight them in the bar on left
                            $.each($(".historyDetailLine"), function (_hrlIdx, hrl) {
                                if (shown.indexOf($(hrl).data("rev")) != -1) {
                                    $(hrl).parent().addClass("historyVersionContainerSelected");
                                }
                            });
                        });
                    });
                }
                break;
        }
    }
    showDiffDialog(latest, localChanges) {
        let that = this;
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.html("");
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.removeClass("dlg-no-scroll");
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.addClass("dlg-scroll");
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.dialog({
            autoOpen: true,
            title: "Item changed",
            height: $(window).height() - 40,
            width: $(window).width() - 40,
            modal: true,
            resizeStop: function () {
                _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.resizeDlgContent(that.controls);
            }, open: function () {
                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.pushDialog(_globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm);
                that.showSaveConflict(_globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm, latest, localChanges);
            }, close: function () { _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.popDialog(_globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm); },
            buttons: [{
                    text: 'Ok',
                    class: 'btnOk',
                    click: function () {
                        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.removeClass("dlg-scroll");
                        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.dialog("close");
                    }
                }]
        }).resizeDlgContent(this.controls);
    }
    ;
    showNextActivity(accordion, control, from, count, auditIdMin, auditIdMax) {
        let that = this;
        let d = $.Deferred();
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.getActivityAsync(function (item, _first, _last, updatedLink) {
            $(".spinningWait", control).hide();
            let versionPanel;
            if (item) {
                if (item.action === 'report') {
                    versionPanel = that.createReportLine({
                        id: item.id,
                        title: item.title,
                        version: item.version,
                        user: item.user,
                        date: item.dateUserFormat,
                        dateServer: item.date,
                        job: item.job
                    });
                    accordion.append(versionPanel);
                }
                else if (item.action === 'execute') {
                    versionPanel = that.createExecuteLine({
                        id: item.id,
                        title: item.title,
                        version: item.version,
                        user: item.user,
                        dateServer: item.date,
                        date: item.dateUserFormat
                    });
                    accordion.append(versionPanel);
                }
                else if (item.action === 'signature') {
                    versionPanel = that.createSignLine({
                        id: item.id,
                        title: item.title,
                        version: item.version,
                        user: item.user,
                        dateServer: item.date,
                        date: item.dateUserFormat,
                        reason: item.reason
                    });
                    accordion.append(versionPanel);
                }
                else if (item.action === 'merge') {
                    versionPanel = that.createMergeLine({
                        user: item.user,
                        dateServer: item.date,
                        date: item.dateUserFormat,
                        tags: item.tags,
                        comment: item.comment,
                        ctrl: control,
                        auditId: item.auditId,
                        action: item.action
                    });
                    accordion.append(versionPanel);
                }
                else {
                    versionPanel = that.createPanel({
                        deletedItems: (item.action === 'deleted'),
                        ctrl: control,
                        id: item.id,
                        title: item.title,
                        isFolder: false,
                        version: item.version,
                        user: item.user,
                        action: item.action,
                        dateServer: item.date,
                        date: item.dateUserFormat,
                        comment: item.comment,
                        allowRestore: false,
                        fullVersion: item.fullVersion,
                        auditId: item.auditId,
                        tags: item.tags
                    });
                    accordion.append(versionPanel);
                    that.lastHistory = item.dateUserFormat;
                }
            }
            else if (updatedLink) {
                versionPanel = that.createReferenceLine(updatedLink);
                accordion.append(versionPanel);
                that.lastHistory = updatedLink.dateUserFormat;
            }
            // add timewarp info
            if (versionPanel && item && _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.isAfterTimeWarp(item.date)) {
                that.lastWasTimewarp = true;
                versionPanel.addClass("timewarp");
            }
            else if (that.lastWasTimewarp) {
                that.lastWasTimewarp = false;
                versionPanel.addClass("justAfterTimewarp");
            }
        }, from, count, auditIdMin, auditIdMax).done(function (total) {
            that.pFrom = from;
            that.pCount = count;
            that.pTotal = total;
            d.resolve();
        });
        return d;
    }
    showNextReaders(doclist, control, from, count) {
        let that = this;
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.getActivityAsync(function (item) {
            $(".spinningWait", control).hide();
            if (item) { // item can be null for added links
                if (item.id.indexOf("DOC-") === 0 || item.id.indexOf("SIGN-") === 0) {
                    if (!that.readHistory[item.id]) {
                        that.readHistory[item.id] = { history: [], id: item.id };
                    }
                    that.readHistory[item.id].history.push(item);
                    that.showReadHistory(doclist, that.readHistory[item.id]);
                }
                that.lastHistory = item.dateUserFormat;
            }
        }, from, count).done(function (total) {
            if (from + count < total) {
                $(".spinningWait", control).html('Showing activity after ' + that.lastHistory + '. <span class="showMore">show more...</span>').show().click(function () {
                    $(".spinningWait", control).replaceWith(_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.getSpinningWait());
                    that.showNextReaders(doclist, control, from + count, count);
                });
            }
        });
    }
    formatReadHistoryAction(action, actionDetails) {
        var result = $("<span>");
        if (action === "signed") {
            var reason = actionDetails.reason.split(" by ");
            if (reason.length > 1) {
                result.append("<b>" + action + "</b> by " + reason[1] + " at " + actionDetails.dateUserFormat);
            }
            else {
                result.append("<b>" + action + "</b> at " + actionDetails.dateUserFormat);
            }
        }
        else {
            result.append("<b>" + action + "</b> by " + actionDetails.user + " at " + actionDetails.dateUserFormat);
        }
        return result;
    }
    showReadHistory(doclist, doc) {
        let that = this;
        if (!doc.panel) {
            var plus = $('<span class="fal fa-minus-square plusctrl">');
            plus.data("doc", doc.id);
            plus.data("open", true);
            plus.click(function (event) {
                var info = that.readHistory[$(event.delegateTarget).data("doc")];
                if ($(event.delegateTarget).data("open")) {
                    $(event.delegateTarget).removeClass("fa-minus-square");
                    $(event.delegateTarget).addClass("fa-plus-square-o");
                    $(event.delegateTarget).data("open", false);
                    info.panelBorder.hide();
                }
                else {
                    $(event.delegateTarget).addClass("fa-minus-square");
                    $(event.delegateTarget).removeClass("fa-plus-square-o");
                    $(event.delegateTarget).data("open", true);
                    info.panelBorder.show();
                }
            });
            doc.header = $('<div class="">').refLink({
                folder: false,
                id: doc.id,
                title: doc.history[0].title,
                style: _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_4__.refLinkStyle.selectTree,
                tooltip: _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_4__.refLinkTooltip.none
            });
            doc.panel = $('<div class="detailsRead">');
            doc.panelBorder = $('<div class="detailsReadOuter">');
            doclist.append(plus).append(doc.header).append(doc.panelBorder.append(doc.panel));
        }
        var current = doc.history[doc.history.length - 1];
        var version = $('<div class="">');
        doc.panel.append(version);
        if (current.action === 'edit') {
            if (!doc.wasEdit) {
                version.append(this.formatReadHistoryAction("modified", current));
            }
            else {
                // don't show this is an edit after an edit or create
            }
            doc.wasEdit = true;
        }
        else if (current.action === 'add') {
            version.append(this.formatReadHistoryAction("created", current));
        }
        else if (current.action === 'report') {
            version.append(this.formatReadHistoryAction("downloaded", current));
            doc.wasEdit = false;
        }
        else if (current.action === "signature") {
            version.append(this.formatReadHistoryAction("signed", current));
            doc.wasEdit = false;
        }
        else {
            version.append(this.formatReadHistoryAction(current.action, current));
            doc.wasEdit = false;
        }
    }
}
// This is used in the shadowed compare display
HistoryTools.compare_css = `
    <style>
    .compareTools {
        position: absolute;
        right: 3em;
        top: 8px;
        color: #2920dc
    }

    .compareToolsHeader {
        padding-right: 10px;
        font-weight: 700
    }

    .compareToolsGroup {
        display: table;
        float: left
    }

    .compareTool {
        padding-right: 12px;
        display: table-cell
    }

    .compareRow {
        display: table-row
    }

    .compareLeft {
        display: table-cell;
        width: 720px;
        vertical-align: top;
        padding-right: 10px
    }

    .compareItem {
        margin-bottom: 10px!important
    }

    .compareRight {
        width: 700px;
        display: table-cell;
        vertical-align: top;
        padding-left: 10px
    }

    @media print {
        .forcePrint {
            height: initial!important;
            max-height: initial!important;
            min-height: initial!important
        }
    }

    .compare_add {
        background-color: #ff0!important;
        display: inline-block;
        white-space:normal;
    }

    .compare_remove {
        display: inline-block;
        color: red!important;
        text-decoration: line-through!important;
        white-space:normal;
    }

    .compare_style {
        background-color: #f3f391!important;
        white-space:normal;
    }

    .compareHeaders {
        display: table-row
    }

    .compareHeader {
        display: table-cell;
        width: 700px;
        text-align: center;
        font-size: x-large;
        padding-top: 20px
    }
    </style>
    `;


/***/ }),
/* 30 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MainTreeImpl: () => (/* binding */ MainTreeImpl),
/* harmony export */   NavigationPanel: () => (/* binding */ NavigationPanel)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _Components_ProjectView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(31);
/* harmony import */ var _businesslogic_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(11);
/* harmony import */ var _Components__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(16);
// -----------------------------------------------------------
// Project tree (on left of default layout)






class MainTreeImpl {
    constructor() {
        let that = this;
        // define default settings
        this.settings = {
            noAnimation: false,
            highlight: true,
            canFilter: true,
            serverSearch: true,
            expand: 0,
            canSelectItems: false,
            canFilterExclusiv: true,
            selectedItems: [],
            controlState: _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.FormEdit,
            dropCallback: (moveDetails) => {
                if (moveDetails.itemId === _globals__WEBPACK_IMPORTED_MODULE_0__.app.getCurrentItemId() &&
                    _globals__WEBPACK_IMPORTED_MODULE_0__.app.getNeedsSave()) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Save First", "Please save the changes before moving the item.");
                    return false;
                }
                _globals__WEBPACK_IMPORTED_MODULE_0__.app.moveItemsAsync(moveDetails.itemId, moveDetails.parentId, moveDetails.index).done(function () {
                    if (moveDetails.updateUI) {
                        moveDetails.updateUI();
                    }
                }).fail(function () {
                });
                return true;
            },
            selectionChanged: (id) => {
                if (that.triggerSelectionChange) {
                    _globals__WEBPACK_IMPORTED_MODULE_0__.app.treeSelectionChangeAsync(id).done(function () {
                    }).fail(function () {
                    });
                }
            }
        };
        this.init($("#projectTree"));
        this.triggerSelectionChange = true;
    }
    init(control) {
        this._jui = control;
    }
    focusTree() {
        this._jui.getController().tree.find('ul.ui-fancytree').focus();
    }
    render(treeSettings) {
        // Register with search tools.
        let that = this;
        _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Search.OnCancelSearch.subscribe(that, function (arg) {
            that.clearFilter();
        });
        if (treeSettings) {
            this.settings = treeSettings;
        }
        this.settings["tree"] = _globals__WEBPACK_IMPORTED_MODULE_0__.app.getTree();
        this.settings.isMainTree = true;
        this._jui.html("");
        this._jui.projectView(this.settings);
        window.setTimeout(function () {
            $(".ui-fancytree").focus();
        }, 200);
        _businesslogic_index__WEBPACK_IMPORTED_MODULE_3__.plugins.updateSearchPanel();
    }
    update(item) {
        // if the node changed, it might be the title: update in tree
        if (typeof item.title == "undefined") {
            // a partial update (only some fields or labels) will not change label
            return;
        }
        // avoid 'malicious' item titles...
        item.title = item.title.replace(/</g, "&lt;");
        this._jui.getController().setTitle(item.id, item.title);
    }
    remove(itemId) {
        this._jui.getController().removeNode(itemId);
    }
    // open a folder (optionally also parent folders)
    openFolder(itemId, expandToRoot) {
        this._jui.getController().openTree(itemId);
        if (expandToRoot) {
            var parent = _globals__WEBPACK_IMPORTED_MODULE_0__.app.getParentId(itemId);
            if (parent && parent != "F-PROJECT") {
                NavigationPanel.openFolder(itemId, true);
            }
        }
    }
    // open a folder (optionally also parent folders)
    closeFolder(itemId) {
        this._jui.getController().closeTree(itemId);
    }
    select(itemId) {
        this.triggerSelectionChange = false;
        try {
            _Components__WEBPACK_IMPORTED_MODULE_4__.NavBar.activateItemsTab(itemId);
            this._jui.getController().select(itemId);
        }
        catch (ex) {
            // the change of selection can fail if the tree is filtered (so the item is not shown)
        }
        this.triggerSelectionChange = true;
    }
    isSelected(itemId) {
        return this._jui.getController().isSelected(itemId);
    }
    insertInTree(newItem, noEscape) {
        // the parameter new item contains information about the new item
        // newitem = {parent: ID of (parent) folder, position: position inside folder, item: json object defining the item
        // the item itself has ("title", "type", "id", and "children" if it is a folder
        if (newItem && newItem.item && !noEscape)
            newItem.item.title = newItem.item.title.replace(/</g, "&lt;");
        this._jui.getController().insertNode(newItem.parent, newItem.item, { at: newItem.position });
    }
    moveInTree(itemId, newParentId, newPosition) {
        this._jui.getController().moveNode(newParentId, itemId, newPosition);
    }
    insertUpdateTreeRec(target, source) {
        // this function either replaces the target and or a child of the target with the new database stuff, if the source does not exists it's added
        if (target === source.id) {
            this._jui.getController().updateRec(source);
        }
        else {
            this._jui.getController().insertRec(target, source);
        }
    }
    destroy() {
        this._jui.html("");
    }
    clearFilter() {
        // called if the user starts searching in a selection dialog to remove highlights from NavigationPanel
        if (this._jui && this._jui.getController)
            this._jui.getController().clearFilter();
    }
    updateItemIsUnselected(itemId, isUnselected) {
        if (this._jui && this._jui.getController)
            this._jui.getController().updateItemIsUnselected(itemId, isUnselected);
    }
    updateNotificationCounters() {
        if (this._jui && this._jui.getController)
            this._jui.getController().updateNotificationCounters();
    }
}
var NavigationPanel = new MainTreeImpl();


/***/ }),
/* 31 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ProjectView: () => (/* binding */ ProjectView)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _businesslogic_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11);
/* harmony import */ var _ProjectList__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(32);
/* harmony import */ var _ProjectTree__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(34);
/* harmony import */ var _SearchBox__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(36);
/* harmony import */ var _ViewModeSelector__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(40);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(1);
/* harmony import */ var _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(9);
/* harmony import */ var _client_plugins_Notifications__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(41);
/* harmony import */ var _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(18);
/* harmony import */ var _Parts_RefLink__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(45);
/* harmony import */ var _businesslogic_ComponentImport__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(35);
/* harmony import */ var _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(24);
/// <reference types="matrixrequirements-type-declarations" />











// TODO(modules): an inelegant way to force a side effect from a module load.




$.fn.projectView = function (options) {
    let baseControl = new ProjectView(this);
    this.getController = () => { return baseControl; };
    if (!options.fieldHandler) {
        options.fieldHandler = _businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.FieldHandlerFactory.CreateHandler(_globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig, _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_12__.FieldDescriptions.Field_dummy, options);
        options.fieldHandler.initData(JSON.stringify(options.fieldValue));
    }
    baseControl.setFieldHandler(options.fieldHandler);
    baseControl.init(options);
    return this;
};
class ProjectView {
    getFieldHandler() {
        return this.fieldHandler;
    }
    setFieldHandler(fh) {
        this.fieldHandler = fh;
    }
    constructor(control) {
        this._root = control;
    }
    init(options) {
        var _a;
        let that = this;
        var defaultOptions = {
            controlState: _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.FormView,
            highlight: true,
            canFilter: true,
            serverSearch: true,
            expand: 0,
            selectedItems: [],
            dragAndDrop: (options.controlState === _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.FormEdit),
            tree: [],
            tooltips: true,
            selectionChanged: function () { },
            dropCallback: function () { },
            collectionChanged: function (count) { },
            selectMode: 0,
            autoScroll: true
        };
        this.settings = _matrixlib__WEBPACK_IMPORTED_MODULE_6__.ml.JSON.mergeOptions(defaultOptions, options);
        this.settings.dragAndDrop = this.settings.dragAndDrop && _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.isEditor();
        // render and search
        var ctrlDiv = $("<div class='treeCtrl'>");
        this._root.append(ctrlDiv);
        this.projectTree = new _ProjectTree__WEBPACK_IMPORTED_MODULE_3__.ProjectTree(this, this.settings.canFilter);
        this.listView = new _ProjectList__WEBPACK_IMPORTED_MODULE_2__.ListView(this);
        this.searchBox = new _SearchBox__WEBPACK_IMPORTED_MODULE_4__.SearchBox(this);
        this.viewModeSelector = new _ViewModeSelector__WEBPACK_IMPORTED_MODULE_5__.ViewModeSelector(this);
        // let expandMinLevel = 2;
        // if ( this.settings.tree.length > 1 ) {
        //     this.settings.expand = 0;
        //     expandMinLevel = 0;
        // }
        // initialize object
        if (this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.Print || this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.Tooltip) {
            return; // nothing to do
        }
        // add ui for filter and search
        if (this.settings.canFilter) {
            // tree/list filter method
            var filter = $(`<div id="searchFilter" data-cy='searchFilter' class="" style="width:100%"></div>`);
            ctrlDiv.append(filter);
            $('<label class="treeLabel searchVizMode">View type</label>').insertBefore($(".listContent"));
            this.viewModeSelector.getVizModeControl(function () {
                that.searchBox.render();
            }).insertAfter($("label.searchVizMode", this._root));
            let labelFilters = $('<label class="treeLabel itemFilterTool ">Filters</label>').insertAfter($("label.searchVizMode"));
            this.currentFilterContainer = $('<div id="currentFilterContainer" class="itemFilterTool"></div>');
            this.currentFilterContainer.insertAfter(labelFilters);
            $("<div class='itemFilterTool itemFilterToolContainer'><button class='btn btn-xs btn-link itemFilterTool clearFilter'  id='clearSelectedFilter'  data-cy='clearFilter' '>Clear filter</span></div>").insertAfter(this.currentFilterContainer);
            $("#clearSelectedFilter").click(function () {
                _matrixlib__WEBPACK_IMPORTED_MODULE_6__.ml.LabelTools.setFilter([]);
                $("#filterDialog").remove();
                _globals__WEBPACK_IMPORTED_MODULE_0__.app.loadProject(_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getProject(), _globals__WEBPACK_IMPORTED_MODULE_0__.app.getCurrentItemId()).then(() => {
                    $(".itemFilterTool").hide();
                });
            });
            // search field
            this.searchBox.renderSearchField(filter, this.settings.serverSearch, that.settings.highlight, (_a = that.settings.isConfigSearch) !== null && _a !== void 0 ? _a : false, this.currentFilterContainer);
        }
        this._root.append($('<label class="treeLabel treeName">Contents</label>'));
        // add ui for tree
        this.tree = $('<div name="ftree" data-cy="tree" class="treeContent"></div>');
        this._root.append(this.tree);
        var doNotTriggerSelectionChange = false; // if true the client will not be informed,
        var rememberLastActivation; // to avoid double activations (which can arrive if one saves while it gets activated again)
        // determine native select mode of tree
        var sm = 0;
        switch (this.settings.selectMode) {
            case _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SelectMode.none: //(later we must hide checkboxes)
            case _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SelectMode.singleItem:
            case _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SelectMode.singleFolder:
                sm = 1; // checking one item will uncheck other checked
                break;
            case _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SelectMode.items:
            case _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SelectMode.folders:
            case _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SelectMode.independent:
            case _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SelectMode.independentAuto:
            case _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SelectMode.autoPrecise:
                sm = 2; // checkboxes for items and/or folders, checking one does not influence other
                break;
            case _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SelectMode.auto:
                sm = 3;
                break;
        }
        let fireUpdates = true;
        var fto = {
            checkbox: this.settings.selectMode != _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SelectMode.none,
            selectMode: sm,
            clickFolderMode: 4,
            autoActivate: false,
            autoCollapse: false,
            imagePath: _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.matrixBaseUrl + "/img/",
            autoScroll: this.settings.autoScroll,
            keyboard: true,
            tabbable: true,
            minExpandLevel: 1,
            focus: function (e, data) {
                var ctree = $(e.delegateTarget).find(".ui-fancytree");
                if (!ctree.is(":focus")) {
                    ctree.focus();
                }
            },
            expand: function (e, data) {
                if (that.settings.onExpand) {
                    that.settings.onExpand(data.node.key);
                }
                _businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.plugins.updateTree();
            },
            blur: function (e, data) {
                data.node.scheduleAction("cancel", 0);
            },
            select: function (e, data) {
                if (fireUpdates) {
                    that.saveSelection("new");
                }
            },
            activate: function (e, data) {
                var node = data.node;
                if (!doNotTriggerSelectionChange && that.settings.selectionChanged && rememberLastActivation !== node.key) { // call app
                    rememberLastActivation = node.key;
                    that.settings.selectionChanged.apply(null, [node.key]);
                }
            },
            click: function (e, data) {
                // TODO(modules): not sure how to fix this. There is a namespace declaration in
                // externals-fancytree, but it doesn't work.
                var tt = ($.ui).fancytree.getEventTargetType(e.originalEvent);
                if (tt !== "expander" && tt !== "checkbox" && data.node && !data.node.expanded) {
                    data.node.setExpanded();
                }
                // now follows a workaround for MATRIX-634 label filtering tree kaput
                // the jquery toggle function (with a nice event) gets somehow screwed in fancy tree
                // so I just wait a little and after 220 ms I make sure the item is actually toggled
                if (tt === "expander" || (data.node && !data.node.expanded)) {
                    var node = data.node;
                    var x = $(node.ul);
                    var y = data.node.expanded;
                    window.setTimeout(function () {
                        y ? x.hide() : x.show();
                    }, 220);
                }
                if (that.settings.selectMode == _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SelectMode.independentAuto && tt === "checkbox" && data.node.folder && !data.node.isSelected()) {
                    fireUpdates = false;
                    that.projectTree.selectChildren(data.node);
                    fireUpdates = true;
                }
                if (that.settings.selectMode == _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SelectMode.autoPrecise && tt === "checkbox") {
                    if (data.node.folder && !data.node.isSelected()) {
                        fireUpdates = false;
                        that.projectTree.selectChildren(data.node);
                        fireUpdates = true;
                    }
                    if (data.node.isSelected()) {
                        fireUpdates = false;
                        that.projectTree.unselectParents(data.node);
                        if (data.node.folder) {
                            that.projectTree.unSelectChildren(data.node);
                        }
                        fireUpdates = true;
                    }
                    // set partial selection status after click
                    window.setTimeout(() => { that.projectTree.forcePartial(); }, 1);
                }
                return true;
            },
            renderNode: function (event, data) {
                var _a;
                // Optionally tweak data.node.span
                var node = data.node;
                var myNodeData = node.data;
                if (myNodeData.cstrender) {
                    node.unselectable = that.settings.selectMode == _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SelectMode.none
                        || (node.folder && (that.settings.selectMode == _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SelectMode.items || that.settings.selectMode == _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SelectMode.singleItem))
                        || (!node.folder && (that.settings.selectMode == _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SelectMode.folders || that.settings.selectMode == _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SelectMode.singleFolder));
                    var $span = $(node.span);
                    let dataCy = (_a = myNodeData.shortTitle) !== null && _a !== void 0 ? _a : myNodeData.title;
                    if (dataCy != undefined) {
                        dataCy = $(`<span>${dataCy}</span>`).text().replace(" ", "-");
                        $span.attr("data-cy", dataCy);
                    }
                    if (node.unselectable) {
                        $(".fancytree-checkbox", $span).remove();
                    }
                    if (myNodeData.background) {
                        $span.css("background-color", myNodeData.background);
                    }
                    if (myNodeData.border) {
                        $span.css("border", myNodeData.border);
                    }
                    if (node.parent.parent === null) {
                        // grey borders around root nodes
                        // $span.css("background-color", "#e5e5e5").css("border", "1px solid rgb(204, 204, 204)");
                    }
                    if (that.settings.selectionChanged) { // call app
                        $span.find("> span.fancytree-title").refLink({
                            id: node.key,
                            folder: node.folder,
                            title: myNodeData.shortTitle,
                            css: myNodeData.extraStyle,
                            style: _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_7__.refLinkStyle.show,
                            tooltip: that.settings.tooltips ? _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_7__.refLinkTooltip.html : _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_7__.refLinkTooltip.none,
                            crossProject: that.settings.crossProject,
                            callback: function () {
                                if (that.settings.canSelectItems) {
                                    node.toggleSelected();
                                }
                                // prevent second round trip in activate
                                rememberLastActivation = node.key;
                                var ret = that.settings.selectionChanged.apply(null, [node.key]);
                                return ret;
                            }
                        });
                    }
                    else {
                        $span.find("> span.fancytree-title").refLink({
                            id: node.key,
                            folder: node.folder,
                            title: myNodeData.shortTitle,
                            style: _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_7__.refLinkStyle.link,
                            css: myNodeData.extraStyle,
                            crossProject: that.settings.crossProject,
                            tooltip: that.settings.tooltips ? _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_7__.refLinkTooltip.html : _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_7__.refLinkTooltip.none
                        });
                    }
                }
            },
            extensions: ["dnd", "filter"],
            dnd: {
                preventVoidMoves: true,
                preventRecursiveMoves: true,
                autoExpandMS: 400,
                focusOnClick: true,
                dragStart: function (node) {
                    let isIncluded = node.data.mode == _businesslogic_ComponentImport__WEBPACK_IMPORTED_MODULE_11__.EImportMode.Include;
                    // MATRIX-5845 allow to move the root ... into another place in the root
                    // || (<MyNodeData>node.data).mode == EImportMode.IncludeRoot; // it's the root of the includes
                    return that.settings.dragAndDrop && _globals__WEBPACK_IMPORTED_MODULE_0__.app.canDragDrop(node.data.type, node.key) && !isIncluded;
                },
                dragEnter: function (node, dddata) {
                    if (dddata === null || dddata.otherNode === null || dddata.otherNode.data === null) {
                        return false;
                    }
                    if (_globals__WEBPACK_IMPORTED_MODULE_0__.app.dragEnter) {
                        return _globals__WEBPACK_IMPORTED_MODULE_0__.app.dragEnter(dddata.otherNode, node);
                    }
                    if (dddata.otherNode.data.type !== node.data.type) {
                        return false;
                    }
                    if (node.folder) {
                        if (node.parent.data.type !== dddata.otherNode.data.type) {
                            return ["after"];
                        }
                        return true;
                    }
                    if (node.parent === null || node.parent.data.type !== dddata.otherNode.data.type) {
                        return false;
                    }
                    return ["before", "after"];
                },
                dragOver: function (node, dddata, hitMode) {
                    /** Return false to disallow dropping this node.
                     *
                     */
                    // Prevent dropping a parent below it's own child
                    if (!dddata || node.isDescendantOf(dddata.otherNode)) {
                        _matrixlib__WEBPACK_IMPORTED_MODULE_6__.ml.Logger.log("error", "FALSE node.isDescendantOf(dddata)");
                        return false;
                    }
                    // Prohibit dropping in anything which is an include
                    if (node.data.mode == _businesslogic_ComponentImport__WEBPACK_IMPORTED_MODULE_11__.EImportMode.Include || node.data.mode == _businesslogic_ComponentImport__WEBPACK_IMPORTED_MODULE_11__.EImportMode.IncludeRoot) {
                        return false;
                    }
                    // Prohibit include root to be dropped into anything but root folder
                    if (dddata.otherNode.data.mode == _businesslogic_ComponentImport__WEBPACK_IMPORTED_MODULE_11__.EImportMode.IncludeRoot) {
                        var target = that.calculateDropTarget(node, dddata.hitMode);
                        if (target.key != "F-" + node.data.type + "-1") {
                            return false;
                        }
                    }
                    // Prohibit creating children in non-folders (only sorting allowed)
                    if (!node.data.isFolder && hitMode === "over") {
                        _matrixlib__WEBPACK_IMPORTED_MODULE_6__.ml.Logger.log("error", "after !node.data.isFolder && hitMode ==='over'");
                        return "after";
                    }
                },
                dragDrop: function (node, dddata) {
                    // Prohibit dropping in anything which is an include
                    if (node.data.mode == _businesslogic_ComponentImport__WEBPACK_IMPORTED_MODULE_11__.EImportMode.Include || node.data.mode == _businesslogic_ComponentImport__WEBPACK_IMPORTED_MODULE_11__.EImportMode.IncludeRoot) {
                        return;
                    }
                    if (that.settings.dragAndDrop) {
                        var target = that.calculateDropTarget(node, dddata.hitMode);
                        // Prohibit include root to be dropped into anything but root folder
                        if (dddata.otherNode.data.mode == _businesslogic_ComponentImport__WEBPACK_IMPORTED_MODULE_11__.EImportMode.IncludeRoot && target.key != "F-" + node.data.type + "-1") {
                            return;
                        }
                        that.settings.dropCallback.apply(null, [{
                                parentId: target.key,
                                itemId: dddata.otherNode.key,
                                index: target.index,
                                updateUI: function () {
                                    dddata.otherNode.moveTo(node, dddata.hitMode);
                                    var key = dddata.otherNode.key;
                                    that.render(_ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SearchUpdate.item_dropped, key);
                                }
                            }]);
                    }
                },
                dragStop: function (node, dddata) {
                    // after a drag and drop the selection in the tree changes (no idea why)
                    // to prevent the client to do this the following lines are required
                    // the timeout ensures that all triggers started by the drag finished when resetting
                    // doNotTriggerSelectionChange
                    doNotTriggerSelectionChange = true;
                    var selectionBeforeDrag = _globals__WEBPACK_IMPORTED_MODULE_0__.app.getCurrentItemId();
                    window.setTimeout(function () {
                        that.tree.fancytree("getTree").options.autoScroll = false;
                        that.tree.fancytree("getTree").activateKey(selectionBeforeDrag);
                        that.tree.fancytree("getTree").options.autoScroll = true;
                        doNotTriggerSelectionChange = false;
                    }, 1);
                }
            } //dnd: {
        };
        if (this.settings.canFilter) {
            fto["filter"] = {
                mode: "dimm",
                autoApply: true
            };
        }
        if (this.settings.noAnimation) {
            fto["toggleEffect"] = false;
        }
        if (_client_plugins_Notifications__WEBPACK_IMPORTED_MODULE_8__.NotificationList.isEnabled() && this.settings.isMainTree) {
            if (fto.extensions) {
                fto.extensions.push("notificationCounter");
            }
            else {
                fto["extensions"] = ["notificationCounter"];
            }
        }
        this.tree.fancytree(fto); // $("#tree").fancytree({
        this.projectTree.treeFromDb(this.settings.tree);
        if (!_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.isConfigClient()) {
            // do the initial filtering: maybe there are some project labels
            this.searchBox.resetSearch();
        }
        // select items
        $.each(this.settings.selectedItems, function (index, key) {
            var item = that.tree.fancytree("getTree").getNodeByKey(key.to);
            if (item) {
                item.setSelected();
                if (that.settings.selectMode == _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SelectMode.autoPrecise && _matrixlib__WEBPACK_IMPORTED_MODULE_6__.ml.Item.parseRef(key.to).isFolder) {
                    that.forceSelectChildren(key.to);
                }
            }
        });
        if (that.settings.selectMode == _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SelectMode.autoPrecise) {
            // set partial selection for special precision mode
            that.projectTree.forcePartial();
        }
        if (this.settings.expand && this.settings.expand > 0) {
            this.tree.fancytree("getRootNode").visit(function (node) {
                if (node.getLevel() <= that.settings.expand)
                    node.setExpanded(true);
            });
        }
        this.resizeItem();
        this.saveSelection("original");
        this.saveSelection("new");
    }
    forceSelectChildren(id) {
        let that = this;
        for (let child of _globals__WEBPACK_IMPORTED_MODULE_0__.app.getChildrenIds(id)) {
            let item = that.tree.fancytree("getTree").getNodeByKey(child);
            if (item) {
                item.setSelected();
                if (_matrixlib__WEBPACK_IMPORTED_MODULE_6__.ml.Item.parseRef(child).isFolder) {
                    that.forceSelectChildren(child);
                }
            }
        }
    }
    // public interface
    async hasChangedAsync() {
        return JSON.stringify(this._root.data("original")) !== JSON.stringify(this._root.data("new"));
    }
    async getValueAsync() {
        return this._root.data("new");
    }
    setValue(selectedItems) {
        this.projectTree.setSelectedItems(selectedItems);
        this.listView.setSelectedItems(selectedItems);
    }
    toggleSelection(selected) {
        if (this.viewModeSelector.showAsList()) {
            this.listView.selectAll(selected);
        }
        else {
            this.projectTree.selectAll(selected);
        }
    }
    destroy() {
    }
    resizeItem() {
        this.searchBox.updateHeights();
    }
    clearFilter() {
        this.searchBox.resetSearch();
    }
    filterStatusChanged(itemId) {
        this.render(_ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SearchUpdate.filter_status_changed, itemId);
    }
    // tree creation
    insertNode(parentKey, item, position) {
        var nn = this.projectTree.addNode(this.projectTree.getNode(parentKey), item, position);
        this.render(_ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SearchUpdate.inserted_node, item.id, item);
    }
    moveNode(parentId, itemId, position) {
        var nn = this.projectTree.moveNode(parentId, itemId, position);
        this.render(_ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SearchUpdate.inserted_node, itemId);
        this.projectTree.openTree(parentId);
    }
    refresh() {
        this.render(_ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SearchUpdate.inserted_node);
    }
    updateRec(item) {
        this.projectTree.updateRec(item);
        this.searchBox.render();
    }
    insertRec(parentKey, item) {
        this.projectTree.insertRec(parentKey, item);
        this.searchBox.render();
    }
    updateTopPosition(top) {
        if (!this.settings.canFilter) {
            $(".treeContent", this._root).css("top", "4px");
            $(".listContent", this._root).css("top", "4px");
        }
        else {
            $(".treeContent", this._root).css("top", top + "px");
            $(".listContent", this._root).css("top", top + "px");
        }
    }
    appendController(controller) {
        this._root.append(controller);
    }
    render(subtree, itemId, item) {
        if (subtree === _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SearchUpdate.inserted_node ||
            subtree === _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SearchUpdate.filter_status_changed ||
            subtree === _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SearchUpdate.item_dropped ||
            subtree === _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SearchUpdate.title_changed) {
            this.listView.redrawItem(item ? item.id : itemId);
            if (subtree === _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SearchUpdate.inserted_node ||
                subtree === _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SearchUpdate.filter_status_changed ||
                subtree === _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SearchUpdate.title_changed) { // MATRIX-1378
                this.projectTree.applyFilter();
            }
        }
    }
    openTree(key) {
        this.projectTree.openTree(key);
    }
    closeTree(key) {
        this.projectTree.closeTree(key);
    }
    setTitle(key, title) {
        if (this.projectTree.setTitle(key, title)) {
            this.render(_ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SearchUpdate.title_changed, key);
        }
    }
    removeNode(key) {
        this.projectTree.removeNode(key);
    }
    select(key) {
        this.projectTree.select(key);
    }
    isSelected(key) {
        return this.projectTree.isSelected(key);
    }
    updateItemIsUnselected(itemId, isUnselected) {
        if (this.projectTree.updateItemIsUnselected(itemId, isUnselected)) {
            this.filterStatusChanged(itemId);
        }
    }
    updateNotificationCounters() {
        this.projectTree.updateNotificationCounters();
    }
    saveSelection(target) {
        var sel = this.tree.fancytree("getTree").getSelectedNodes(this.settings.selectMode == _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SelectMode.auto || this.settings.selectMode == _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_9__.SelectMode.autoPrecise);
        var selKey = [];
        for (var idx = 0; idx < sel.length; idx++) {
            let myNodeData = sel[idx].data;
            let title = (sel[idx].folder && sel[idx].title) ? sel[idx].title : (myNodeData && myNodeData.shortTitle) ? myNodeData.shortTitle : sel[idx].title;
            selKey.push({ to: sel[idx].key, title: title });
        }
        this._root.data(target, selKey);
        this.settings.collectionChanged.apply(null, [sel.length]);
    }
    calculateDropTarget(targetNode, mode) {
        // simulate fancy tree to check where it would go
        if (mode === undefined || mode === "over") {
            mode = "child";
        }
        var targetParent = (mode === "child") ? targetNode : targetNode.parent;
        var pos = 0;
        if (targetParent.hasChildren()) {
            switch (mode) {
                case "child":
                    // Append to existing target children
                    pos = targetParent.children.length;
                    break;
                case "before":
                    // Insert this node before target node
                    pos = $.inArray(targetNode, targetParent.children);
                    break;
                case "after":
                    // Insert this node after target node
                    pos = 1 + $.inArray(targetNode, targetParent.children);
                    break;
            }
        }
        return {
            key: targetParent.key,
            index: pos
        };
    }
    getRoot() {
        return this._root;
    }
}


/***/ }),
/* 32 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ListView: () => (/* binding */ ListView)
/* harmony export */ });
/* harmony import */ var _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(18);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _NavigationBar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(33);
/* harmony import */ var _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);






class ListView {
    constructor(panel) {
        // results from the last search
        this.hits = [];
        this.selected = [];
        this.projectWarn = false;
        this.sRoot = $("<div>"); // a list with all selected nodes
        this.uRoot = $("<div>"); // a list with all search results
        this.nodes = {}; // a lookup from id to ui node to show / hide search results
        this.panel = panel;
        this.control = $("<div class='listContent'>");
        this.panel.appendController(this.control);
        if (panel.settings.glueToBottom) {
            this.control.css("bottom", 0);
        }
        this.control.hide();
    }
    // show the list
    show() {
        this.control.show();
    }
    // hide the list
    hide() {
        this.control.hide();
    }
    setSelectedItems(selectedItems) {
        let that = this;
        $.each(selectedItems, function (hidx, hit) {
            if (that.selected.indexOf(hit) === -1) {
                that.selected.push(hit);
                var node = that.getFancyTree().getNodeByKey(hit);
                if (node) {
                    node.setSelected(true);
                }
            }
        });
        this.showNodes();
    }
    redrawItem(itemId) {
        let newNode = this.getFancyTree().getNodeByKey(itemId);
        // this can be called if the visibility status changed or the item was renamed
        $.each($(".node_" + itemId, this.control), function (idx, ui_node) {
            if (!newNode) {
                $(ui_node).hide();
            }
            else {
                newNode.data.isUnselected ? $(ui_node).hide() : $(ui_node).show();
                let title = newNode.title;
                if (title.indexOf(newNode.key + " ") == 0) {
                    // that's a weird hack -> in items the newNode.title has the item ID inside, in folders the newNode.data.title
                    // we need to have just the title
                    title = title.replace(newNode.key + " ", "");
                }
                $(".refTitle", $(ui_node)).html(title);
            }
        });
    }
    filterList(match) {
        let that = this;
        this.projectWarn = false;
        this.selected = [];
        this.hits = [];
        var hitCount = 0;
        if (match) {
            var treeMatch = (match + "").replace(/([.?*+\^\$\[\]\\(){}|-])/g, "\\$1"); // make sure a '.' is treated literally
            var treeMatchRegEx = new RegExp(".*" + treeMatch + ".*", "i");
            this.getFancyRootNode().visit(function (node) {
                if ((!that.panel.prefixCategory || _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(node.key).type == that.panel.prefixCategory) && !!treeMatchRegEx.exec(node.title)) {
                    if (node.data.isUnselected) {
                        // project label filter
                        that.projectWarn = true;
                    }
                    else {
                        that.hits.push(node.key);
                        hitCount++;
                    }
                }
                if (node.selected) {
                    that.selected.push(node.key);
                }
            });
        }
        else {
            // project label filter
            this.getFancyRootNode().visit(function (node) {
                if (node.data.isUnselected) {
                    // project label filter
                    that.projectWarn = true;
                }
                else {
                    hitCount++;
                }
                if (node.selected) {
                    that.selected.push(node.key);
                }
            });
        }
        return this.showNodes();
    }
    ;
    showSearchResults(serverSearchResults) {
        let that = this;
        this.projectWarn = false;
        this.selected = [];
        this.hits = [];
        // only show items in list which would be in (subtree)
        $.each(serverSearchResults, function (idx, key) {
            var node = that.getFancyTree().getNodeByKey(key);
            if (node) {
                that.hits.push(key);
            }
        });
        this.getFancyRootNode().visit(function (node) {
            if (node.data.isUnselected) {
                // project label filter
                that.projectWarn = true;
            }
            if (node.selected) {
                that.selected.push(node.key);
            }
        });
        return this.showNodes(); //serverSearchResults, this.selected, this.projectWarn );
    }
    ;
    selectAll(setSelected) {
        let that = this;
        if (setSelected) {
            $.each(this.hits, function (hidx, hit) {
                if (that.selected.indexOf(hit) === -1 && (that.panel.settings.selectMode == _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_0__.SelectMode.auto || !_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(hit).isFolder)) {
                    that.selected.push(hit);
                    var node = that.getFancyTree().getNodeByKey(hit);
                    if (node) {
                        node.setSelected(true);
                    }
                }
            });
        }
        else {
            $.each(this.selected, function (sidx, sel) {
                var node = that.getFancyTree().getNodeByKey(sel);
                if (node) {
                    node.setSelected(false);
                }
            });
            this.selected = [];
        }
        this.showNodes();
    }
    getTitleFromTree(itemId) {
        let title = "";
        this.getFancyRootNode().visit(function (node) {
            if (node.key == itemId) {
                title = node.data.shortTitle;
            }
        });
        return title;
    }
    showNodes(all) {
        let that = this;
        function divider(text) {
            var x = $("<div style='position:relative'>");
            x.append($("<div>").append($("<hr style='margin-top:16px;margin-bottom:20px;border-color: lightgrey;'>")));
            x.append($("<div style='color:lightgrey;position:absolute;right:0;margin-top:-20px'>").html(text));
            return x;
        }
        // maybe remove folders if checkboxes should be shown
        var hitsDisplay = [];
        if (!this.panel.settings.canSelectItems || this.panel.settings.selectMode == _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_0__.SelectMode.auto) {
            hitsDisplay = this.hits;
        }
        else {
            $.each(this.hits, function (hidx, hit) {
                if (!_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(hit).isFolder) {
                    hitsDisplay.push(hit);
                }
            });
        }
        ;
        let counts = {
            current: hitsDisplay.length,
            total: hitsDisplay.length,
            perTab: that.panel.settings.crossProject ? [] : _NavigationBar__WEBPACK_IMPORTED_MODULE_2__.NavBar.countPerTab(hitsDisplay)
        };
        if (this.panel.settings.isMainTree) {
            hitsDisplay = hitsDisplay.filter(function (itemId) {
                return _NavigationBar__WEBPACK_IMPORTED_MODULE_2__.NavBar.isInCurrentTab(itemId);
            });
            counts.current = hitsDisplay.length;
        }
        // split list in checked and unchecked
        this.sRoot = $("<div>");
        this.uRoot = $("<div>");
        this.nodes = {};
        this.noSelected = $("<span style='color:grey;width:100%;text-align:center;padding-top:20px'>nothing selected</span>");
        this.control.html("");
        if (this.panel.settings.canSelectItems) {
            this.control.append(divider("selected"));
            this.control.append(this.sRoot);
            this.control.append(divider("search results"));
        }
        this.control.append(this.uRoot);
        this.sRoot.append(this.noSelected);
        if (this.selected.length > 0) {
            this.noSelected.hide();
            $.each(this.selected, function (sn, n) {
                that.sRoot.append(that.createNode(n, true));
            });
        }
        // decide how many items to show in list view -> by default 200
        let ui = _globals__WEBPACK_IMPORTED_MODULE_4__.matrixSession.getCustomerSettingJSON("ui", {});
        let maxShow = ui.maxHits ? ui.maxHits : 200;
        let actualShow = all ? hitsDisplay.length : Math.min(hitsDisplay.length, maxShow);
        for (let sn = 0; sn < actualShow; sn++) {
            let n = hitsDisplay[sn];
            let node = that.createNode(n, false);
            that.uRoot.append(node);
            that.nodes[n] = node;
            if (that.selected.indexOf(n) !== -1) {
                node.hide();
            }
        }
        ;
        // if not allow were shown, allow user to show the rest
        if (hitsDisplay.length > actualShow) {
            let showRest = $(`<div class='showMore' >show ${hitsDisplay.length - actualShow} remaining...</div>`);
            that.uRoot.append(showRest);
            showRest.on("click", () => {
                showRest.replaceWith(_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.getSpinningWait("please wait..."));
                window.setTimeout(() => {
                    that.showNodes(true);
                }, 1);
            });
        }
        return counts;
    }
    createNode(itemId, checked) {
        let that = this;
        function toggleSelect(checkbox) {
            var id = checkbox.data("itemId");
            if (checkbox.prop("checked")) { // now it has been checked
                if (that.panel.settings.singleSelect) {
                    // unselect the current
                    that.panel.toggleSelection(false);
                }
                // hide it
                if (that.nodes[id]) {
                    checkbox.prop("checked", "");
                    that.nodes[id].hide();
                }
                // add it to the  list of hits
                that.sRoot.append(that.createNode(id, true));
                // add it to global selection
                var node = that.getFancyTree().getNodeByKey(id);
                if (node) {
                    node.setSelected(true);
                }
            }
            else {
                // uncheck it,
                checkbox.parent().remove();
                // show it in search results (if it is a hit)
                if (that.nodes[id]) {
                    that.nodes[id].show();
                }
                // remove from global selection
                var node = that.getFancyTree().getNodeByKey(id);
                if (node) {
                    node.setSelected(false);
                }
            }
            if (that.sRoot.children().length > 1) {
                that.noSelected.hide();
            }
            else {
                that.noSelected.show();
            }
        }
        var cnode = $("<div class='search-list-node node_" + itemId + "'>");
        if (this.panel.settings.canSelectItems) {
            var cb = $('<input type="checkbox" ' + (checked ? 'checked' : '') + ' class="listSelect" >');
            cnode.append(cb);
            cb.click(function (event) {
                // this is the item
                toggleSelect($(event.delegateTarget));
            }).data("itemId", itemId);
        }
        var node = $("<span>");
        cnode.append(node);
        if (this.panel.settings.selectionChanged && !this.panel.settings.canSelectItems) { // call app
            node.refLink({
                id: itemId,
                folder: false,
                title: this.panel.settings.crossProject ? that.getTitleFromTree(itemId) : _globals__WEBPACK_IMPORTED_MODULE_4__.app.getItemTitle(itemId),
                style: _globals__WEBPACK_IMPORTED_MODULE_4__.app.isHiddenLink(itemId) ? _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkStyle.show : _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkStyle.select,
                tooltip: this.panel.settings.tooltips ? _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkTooltip.html : _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkTooltip.none,
                crossProject: this.panel.settings.crossProject,
                callback: function () {
                    $(".search-list-node-selected", cnode.parent()).removeClass("search-list-node-selected");
                    cnode.addClass("search-list-node-selected");
                    _globals__WEBPACK_IMPORTED_MODULE_4__.app.treeSelectionChangeAsync(itemId);
                }
            });
            node.addClass("search-list-node");
            $(".refTitle", cnode).click(function () {
                $(".search-list-node-selected", cnode.parent()).removeClass("search-list-node-selected");
                cnode.addClass("search-list-node-selected");
                _globals__WEBPACK_IMPORTED_MODULE_4__.app.treeSelectionChangeAsync(itemId);
            });
        }
        else {
            node.refLink({
                id: itemId,
                folder: false,
                title: this.panel.settings.crossProject ? that.getTitleFromTree(itemId) : _globals__WEBPACK_IMPORTED_MODULE_4__.app.getItemTitle(itemId),
                style: _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkStyle.link,
                crossProject: this.panel.settings.crossProject,
                tooltip: this.panel.settings.tooltips ? _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkTooltip.html : _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkTooltip.none
            });
            node.click(function (event) {
                var checkbox = $(event.delegateTarget).parent().find("input");
                checkbox.prop("checked", !checkbox.prop("checked"));
                toggleSelect(checkbox);
            });
        }
        return cnode;
    }
    getFancyRootNode() {
        return this.panel.tree.fancytree("getRootNode");
    }
    getFancyTree() {
        return this.panel.tree.fancytree("getTree");
    }
}


/***/ }),
/* 33 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NavBar: () => (/* binding */ NavBar),
/* harmony export */   NavigationBar: () => (/* binding */ NavigationBar),
/* harmony export */   TabMode: () => (/* binding */ TabMode),
/* harmony export */   initialize: () => (/* binding */ initialize)
/* harmony export */ });
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
// bar left side of screen





var TabMode;
(function (TabMode) {
    TabMode[TabMode["ShowAsDefault"] = 1] = "ShowAsDefault";
    TabMode[TabMode["HideAsDefault"] = 2] = "HideAsDefault";
})(TabMode || (TabMode = {}));
class NavigationBar {
    static getDefaultBar(project) {
        return {
            disableTabs: false,
            tabs: [
                {
                    name: _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.isQMSProject(project) ? "Quality Manual" : "Design",
                    icon: "fal fa-paint-brush",
                    mode: TabMode.ShowAsDefault,
                    other: ["F-DOC-1", "F-SIGN-1", "_", "F-REPORT-1", "F-PUB-1"], // categories to hide
                },
                {
                    name: "Documents",
                    icon: "fal fa-book",
                    mode: TabMode.HideAsDefault,
                    other: ["F-DOC-1", "F-SIGN-1"], // categories to show
                },
                {
                    name: "Tools",
                    icon: "fal fa-tools",
                    mode: TabMode.HideAsDefault,
                    other: ["_", "F-REPORT-1"], // categories to show
                },
                {
                    name: "Publish",
                    icon: "fal fa-upload",
                    mode: TabMode.HideAsDefault,
                    other: ["F-PUB-1"], // categories to show
                }
            ]
        };
    }
    constructor() {
        this.rootTabMap = {};
        this.workFolders = [];
        this.enabled = false;
        this.navBarOpened = true;
        let that = this;
        $(window).resize(function () {
            that.resizeBarItems();
        });
    }
    static getConfig() {
        let setting = _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.getNavigationBarConfig();
        if (!setting || JSON.stringify(setting) == "{}" || !setting.tabs) {
            const project = _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.getProject();
            return NavigationBar.getDefaultBar(project);
        }
        return setting;
    }
    // navigation bar left
    init() {
        let that = this;
        if (!_globals__WEBPACK_IMPORTED_MODULE_1__.app.mainApp)
            return;
        $("#navLeft").remove();
        this.navBarOpened = localStorage.getItem("navBarOpened") === "true";
        // unless there's a project / server specific bar
        let projectSetting = NavigationBar.getConfig();
        this.enabled = !projectSetting.disableTabs;
        if (!this.enabled) {
            NavigationBar.navbarWidth = 0;
            $("#sidebar").css("left", 0);
            $('#main').css("left", $("#sidebar").width() + "px");
            _globals__WEBPACK_IMPORTED_MODULE_1__.app.resizeItem(true);
            $(".mainHelp").show();
            return;
        }
        $(".mainHelp").hide();
        this.bar = _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.JSON.clone(projectSetting);
        $.each(this.bar.tabs, function (tabIdx, tab) {
            let tools = tab.other.indexOf("_");
            if (tools != -1) {
                // replace this by tools
                tab.other.splice(tools, 1, ...that.workFolders);
            }
        });
        this.createTabs();
        this.drawNavigationBar();
        //Delay the resize
        setTimeout(() => { that.resizeBarItems(); }, 100);
        this.activateTab(this.bar.tabs[0]);
        this.updateNotificationCounters();
        this.resizeWitdh();
    }
    isEnabled() {
        let projectSetting = NavigationBar.getConfig();
        return !projectSetting.disableTabs;
    }
    // check if a certain item of the tree is in the current tab
    isInCurrentTab(itemId) {
        if (!this.enabled)
            return true; // there's only 1 tab, kind off
        if (!_globals__WEBPACK_IMPORTED_MODULE_1__.app.mainApp)
            return true;
        let tab = this.getTab(itemId);
        return tab ? tab.isActive : true;
    }
    getCurrentTab() {
        for (let tab of this.bar.tabs) {
            if (tab.isActive)
                return tab.name;
        }
    }
    countPerTab(itemIds) {
        if (!this.enabled)
            return []; // no tabs
        if (!_globals__WEBPACK_IMPORTED_MODULE_1__.app.mainApp)
            return []; // no tabs
        let result = [];
        let resultMap = {};
        for (let item of itemIds) {
            let tab = this.getTab(item);
            if (!resultMap[tab.name]) {
                resultMap[tab.name] = 0;
            }
            resultMap[tab.name]++;
        }
        for (let key in resultMap) {
            result.push({ tabName: key, count: resultMap[key] });
        }
        return result;
    }
    // activates a tab with a specific item
    activateItemsTab(itemId) {
        if (!this.enabled)
            return;
        if (!_globals__WEBPACK_IMPORTED_MODULE_1__.app.mainApp)
            return;
        let tab = this.getTab(itemId);
        if (!tab) {
            return; // some non existing item
        }
        if (tab.isActive) {
            // nothing to do
            return;
        }
        this.activateTab(tab);
    }
    // show badges for the tab
    updateNotificationCounters() {
        if (!this.enabled)
            return;
        $(".navBarNotification").remove();
        $.each(this.bar.tabs, function (tabIdx, tab) {
            let count = 0;
            $.each(tab.trees, function (liIdx, li) {
                count += li.data("notifications") ? li.data("notifications") : 0;
            });
            if (count) {
                $('<span class="notificationCounter navBarNotification">').html("" + count).appendTo(tab.node);
            }
        });
    }
    // create the bar on the left side
    drawNavigationBar() {
        let that = this;
        let navLeft = $("<div id='navLeft' class='hidden-print'>").prependTo("#highlightContext");
        // help button
        this.addHelpButton();
        // tabs
        $.each(this.bar.tabs, function (tabIdx, tab) {
            let node = $(`<div class="navLeftTab">
                            <div class="navLeftIcon" title="${tab.name}">
                                <i class="${tab.icon}"></i>
                            </div>
                            <div class="navLeftText">${tab.name}</div>
                        </div>`)
                .appendTo(navLeft)
                .click(function () {
                that.activateTab(tab);
            });
            tab.node = node;
        });
        navLeft.append(($("<div class='flexGrowSpacer'/>")));
        // Add a toggle button to resize the bar
        let toggleButton = $("<div class='navLeftTab navLeftToggle'><i class='navLeftIcon fal fa-angle-double-left'></i></div>").appendTo(navLeft);
        toggleButton.click(() => {
            this.toggleBar();
        });
    }
    // that's all the pages from third party plugins
    setWorkFolders(folders) {
        this.workFolders = folders;
    }
    // resize
    resizeBarItems() {
        if (!this.enabled || this.bar.tabs.length == 0 || !this.navBarOpened)
            return;
        $(".navLeftText").show();
        let lastTab = this.bar.tabs[this.bar.tabs.length - 1].node;
        let lastPos = lastTab.position().top + lastTab.height() + 20; // some margin 20
    }
    // sort all items from the tree into the tabs, remove the tabs which are empty
    createTabs() {
        let that = this;
        let leftOvers = [];
        $.each(that.bar.tabs, function (tabIdx, tab) {
            tab.trees = [];
        });
        that.bar.tabs.push({
            name: "Other",
            icon: "far fa-window-alt",
            mode: TabMode.ShowAsDefault,
            other: [],
            trees: [] // the content
        });
        $.each($("#projectTree .treeContent > ul").children(), function (idx, li) {
            $.each(that.bar.tabs, function (tabIdx, tab) {
                let show = true;
                if (tab.mode == TabMode.HideAsDefault) {
                    show = false;
                    $.each(tab.other, function (otherIdx, other) {
                        if ($(".key-" + other, $(li)).length) {
                            show = true;
                        }
                    });
                }
                else if (tab.mode == TabMode.ShowAsDefault) {
                    show = true;
                    $.each(tab.other, function (otherIdx, other) {
                        if ($(".key-" + other, $(li)).length) {
                            show = false;
                        }
                    });
                }
                if (show) {
                    // add the node to the tab
                    tab.trees.push($(li));
                    // remember that the node for that key is in the tab
                    let keys = $(".refTitle", $(li))[0].className.split(/\s+/).filter(function (cls) { return cls.indexOf("key-") == 0; });
                    if (keys.length == 1) {
                        that.rootTabMap[keys[0].replace("key-", "")] = tab;
                    }
                    return false;
                }
                else {
                    // continue to search
                    return true;
                }
            });
        });
        // now remove all the empty ones
        this.bar.tabs = this.bar.tabs.filter(function (tab) { return tab.trees.length > 0; });
    }
    // switch tab (from search)
    switchTab(tabName) {
        if (!this.enabled || !this.bar.tabs.length)
            return false; // nothing to do
        let tab = this.bar.tabs.filter(tab => tab.name == tabName);
        if (tab.length == 0)
            return; // should not happen
        $(".navLeftIcon").css("background-color", "");
        $(".navLeftIcon", tab[0].node).css("background-color", "var(--red-500");
        $(".navLeftTabActive").removeClass("navLeftTabActive");
        tab[0].node.addClass("navLeftTabActive");
        // hide all
        $.each($("#projectTree .treeContent > ul").children(), function (idx, li) {
            $(li).hide();
        });
        // deactivate others
        $.each(this.bar.tabs, function (tabIdx, t) {
            t.isActive = false;
        });
        // activate the one
        tab[0].isActive = true;
        $.each(tab[0].trees, function (liIdx, li) {
            li.show();
        });
    }
    // user clicks on tab
    activateTab(tab) {
        $(".treeName").text(tab.name);
        if (tab.isActive)
            return;
        // make sure there's no filter
        _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Search.cancelSearch();
        $(".navLeftIcon").css("background-color", "");
        $(".navLeftIcon", tab.node).css("background-color", "var(--red-500)");
        $(".navLeftTabActive").removeClass("navLeftTabActive");
        tab.node.addClass("navLeftTabActive");
        // hide all
        $.each($("#projectTree .treeContent > ul").children(), function (idx, li) {
            $(li).hide();
        });
        // deactivate others
        $.each(this.bar.tabs, function (tabIdx, t) {
            t.isActive = false;
        });
        // activate the one
        tab.isActive = true;
        $.each(tab.trees, function (liIdx, li) {
            li.show();
        });
    }
    getTab(itemId) {
        // check if it is a 'normal database item' if so take it's category
        let category = _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Item.parseRef(itemId).type;
        // skip the line when getting the breadcrumb
        let bread = category ? _globals__WEBPACK_IMPORTED_MODULE_1__.app.getCategoryBreadcrumbs(category) : _globals__WEBPACK_IMPORTED_MODULE_1__.app.getBreadcrumbs(itemId);
        let butter = bread[bread.length - 1];
        return this.rootTabMap[butter];
    }
    toggleBar() {
        if (this.navBarOpened) {
            this.navBarOpened = false;
        }
        else {
            this.navBarOpened = true;
        }
        localStorage.setItem("navBarOpened", this.navBarOpened ? "true" : "false");
        this.resizeWitdh();
    }
    resizeWitdh() {
        if (this.navBarOpened) {
            $(".navLeftToggle i").removeClass("fal fa-arrow-to-right").addClass("fal fa-arrow-to-left");
            $("#navLeft").removeClass("navLeftSmall");
            $(".navLeftText").show();
            $(".navLeftTab").css("width", "unset");
            NavigationBar.navbarWidth = 287;
        }
        else {
            $(".navLeftToggle i").removeClass("fal fa-arrow-to-left").addClass("fal fa-arrow-to-right");
            NavigationBar.navbarWidth = 72;
            $("#navLeft").addClass("navLeftSmall");
            $(".navLeftText").hide();
        }
        _globals__WEBPACK_IMPORTED_MODULE_1__.app.resizeItem(true);
    }
    addHelpButton() {
        if (this.helpButton)
            this.helpButton.remove();
        this.helpButton = $("<div class='navLeftHelp dropup'><i class='fal fa-question-circle dropdown-toggle' data-toggle='dropdown'></i>" + _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.getHelpButton() + "</div>").prependTo(".navbar-brand");
    }
}
NavigationBar.navbarWidth = 0;
var NavBar;
function initialize() {
    NavBar = new NavigationBar();
}


/***/ }),
/* 34 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ProjectTree: () => (/* binding */ ProjectTree)
/* harmony export */ });
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18);
/* harmony import */ var _businesslogic_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(11);
/* harmony import */ var _NavigationBar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(33);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _businesslogic_ComponentImport__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(35);
/// <reference types="matrixrequirements-type-declarations" />







class ProjectTree {
    constructor(panel, canBeFiltered) {
        this.hits = [];
        this.allHits = [];
        this.legacyColors = {
            REQ: "#0000a4",
            UC: "#41c9dd",
            SPEC: "#00a600",
            DOC: "#2a6ac0",
            SIGN: "#2a6ac0",
            REPORT: "#2a6ac0",
            RISK: "#a90000",
            TC: "#41c9dd",
            TRUN: "#faebd7",
            XTC: "#faebd7" // special case for legacy TRUN folder icons
        };
        this.panel = panel;
        this.canBeFiltered = canBeFiltered;
    }
    // show the tree
    show() {
        this.panel.tree.show();
    }
    ;
    // hide the tree
    hide() {
        this.panel.tree.hide();
    }
    setSelectedItems(selectedItems) {
        let that = this;
        $.each(selectedItems, function (index, key) {
            var item = that.getNode(key);
            if (item) {
                item.setSelected();
            }
        });
    }
    applyFilter() {
        let that = this;
        if (this.canBeFiltered && this.lastFilterFct) {
            clearTimeout(this.delayedFilter);
            that.delayedFilter = window.setTimeout(() => {
                this.getFancyTree().filterNodes((node) => this.lastFilterFct(node));
            }, 100);
        }
    }
    // hotfix one item - not good after the next change in the tree it will be rendered again wrongly
    redrawItem(itemId) {
        var node = this.getNode(itemId);
        if (node) {
            node.render();
            var span = $(node.span);
            if (node.data.isUnselected) {
                span.removeClass("fancytree-match");
            }
            else {
                span.addClass("fancytree-match");
            }
        }
    }
    openTree(key) {
        this.getNode(key).setExpanded(true);
    }
    closeTree(key) {
        this.getNode(key).setExpanded(false);
    }
    selectAll(isSelected) {
        let that = this;
        if (isSelected) {
            $.each(this.hits, function (hi, hit) {
                if (that.panel.settings.selectMode == _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__.SelectMode.auto || !_matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Item.parseRef(hit).isFolder) {
                    var item = that.getNode(hit);
                    if (item) {
                        item.setSelected();
                    }
                }
            });
        }
        else {
            this.getFancyTree().visit(function (node) {
                node.setSelected(false);
            });
        }
    }
    ;
    // this selects children and in case a folder is selected also the children of the folder
    selectChildren(node) {
        let children = node.getChildren();
        if (!children) {
            return;
        }
        for (let child of children) {
            if (!child.isSelected()) {
                child.setSelected(true);
            }
            if (child.isFolder()) {
                this.selectChildren(child);
            }
        }
    }
    unSelectChildren(node) {
        let children = node.getChildren();
        if (!children) {
            return;
        }
        for (let child of children) {
            if (child.isSelected()) {
                child.setSelected(false);
            }
            if (child.isFolder()) {
                this.unSelectChildren(child);
            }
        }
    }
    // this unselects all parents of a item or folder
    unselectParents(node) {
        let parent = node.getParent();
        if (!parent) {
            return;
        }
        if (parent.isSelected()) {
            parent.setSelected(false);
            this.unselectParents(parent);
        }
    }
    setHideMismatches(hideMismatches) {
        var currentMode = this.getFancyTree().options.filter.mode;
        var nextMode = hideMismatches ? "hide" : "dimm";
        if (currentMode === nextMode) {
            return;
        }
        this.getFancyTree().options.filter.mode = nextMode;
        this.getFancyTree().clearFilter();
    }
    forcePartial() {
        function _walk(node) {
            let i, l, child, someSelected, children = node.children;
            if (children && children.length) {
                // check all children recursively
                someSelected = false;
                for (i = 0, l = children.length; i < l; i++) {
                    child = children[i];
                    // the selection state of a node is not relevant; we need the end-nodes
                    if (_walk(child)) {
                        someSelected = true;
                    }
                }
                if (someSelected && !node.selected) {
                    $(node.span).addClass("fancytree-partsel");
                    node.extraClasses = "fancytree-partsel";
                }
                else {
                    $(node.span).removeClass("fancytree-partsel");
                    node.extraClasses = "";
                }
            }
            return someSelected || !!node.selected;
        }
        let tree = this.getFancyTree();
        _walk(tree.rootNode);
    }
    filterTree(match) {
        let that = this;
        this.hits = [];
        this.allHits = [];
        let total = 0;
        if (match) {
            var treeMatch = (match + "").replace(/([.?*+\^\$\[\]\\(){}|-])/g, "\\$1"); // make sure a '.' is treated literally
            var treeMatchRegEx = new RegExp(".*" + treeMatch + ".*", "i");
            this.lastFilterFct = function treeFilter(node) {
                if (node.data.isUnselected) {
                    // project label filter
                    return false;
                }
                var sel = (!that.panel.prefixCategory || _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Item.parseRef(node.key).type == that.panel.prefixCategory) && !!treeMatchRegEx.exec(node.title);
                if (sel) {
                    this.allHits.push(node.key);
                    total++;
                    if (that.panel.settings.isMainTree) {
                        sel = _NavigationBar__WEBPACK_IMPORTED_MODULE_3__.NavBar.isInCurrentTab(node.key);
                    }
                    if (sel) {
                        that.hits.push(node.key);
                    }
                }
                return sel;
            };
            this.canBeFiltered && this.getFancyTree().filterNodes((node) => this.lastFilterFct(node));
            // after rendering the tree: maybe open to see all leafs
            if (this.panel.viewModeSelector.isExpandTree()) {
                this.getFancyRootNode().visit(function (node) {
                    if (node.isFolder() && node.subMatch || !that.panel.viewModeSelector.hideMismatches()) {
                        node.setExpanded(node.subMatch ? true : false, { noAnimation: true, noEvents: true, scrollIntoView: false });
                    }
                });
            }
            return { current: this.hits.length, total: total, perTab: _NavigationBar__WEBPACK_IMPORTED_MODULE_3__.NavBar.countPerTab(this.allHits) };
        }
        else {
            // just in case
            let total = this.removeFilter();
            return { current: total, total: total, perTab: _NavigationBar__WEBPACK_IMPORTED_MODULE_3__.NavBar.countPerTab(this.hits) };
        }
    }
    removeFilter() {
        let that = this;
        this.hits = [];
        // just apply global filters (no expanding)
        this.lastFilterFct = function treeFilter(node) {
            if (node.data.isUnselected) {
                // project label filter
                return false;
            }
            that.hits.push(node.key);
            return true;
        };
        this.canBeFiltered && this.getFancyTree().filterNodes((node) => this.lastFilterFct(node));
        return this.hits.length;
    }
    showSearchResults(serverSearchResults) {
        let that = this;
        this.hits = [];
        let countAll = 0;
        this.lastFilterFct = function treeFilter(node) {
            if (node.data.isUnselected) {
                return false;
            }
            if (serverSearchResults.length > 0) {
                let sel = serverSearchResults.indexOf(node.key) !== -1;
                if (sel) {
                    countAll++;
                    if (that.panel.settings.isMainTree) {
                        sel = _NavigationBar__WEBPACK_IMPORTED_MODULE_3__.NavBar.isInCurrentTab(node.key);
                    }
                    if (sel) {
                        that.hits.push(node.key);
                    }
                }
                return sel;
            }
            return false;
        };
        this.canBeFiltered && this.getFancyTree().filterNodes((node) => this.lastFilterFct(node));
        // after rendering the tree: maybe open to see all leafs
        if (this.panel.viewModeSelector.isExpandTree()) {
            this.getFancyRootNode().visit(function (node) {
                node.setExpanded(node.subMatch ? true : false);
            });
        }
        return { current: this.hits.length, total: countAll, perTab: _NavigationBar__WEBPACK_IMPORTED_MODULE_3__.NavBar.countPerTab(serverSearchResults) };
    }
    ;
    getFancyRootNode() {
        return this.panel.tree.fancytree("getRootNode");
    }
    getFancyTree() {
        return this.panel.tree.fancytree("getTree");
    }
    getNode(key) {
        return this.getFancyTree().getNodeByKey(key);
    }
    removeNode(key) {
        this.getNode(key).remove();
    }
    setTitle(key, title) {
        try {
            var node = this.getNode(key);
            if (node) {
                var changed = title !== node.shortTitle;
                if (node.data) {
                    if (title == node.data.shortTitle) {
                        changed = false;
                    }
                    var foldertext = $(".refTitle span:not(.highlight)", node.span);
                    if (node.folder && foldertext.length !== 0) {
                        node.data.shortTitle = foldertext[0].outerHTML + title;
                    }
                    else {
                        node.data.shortTitle = title;
                    }
                }
                node.shortTitle = title;
                node.title = node.folder ? title : (node.key + " " + title);
                return changed;
            }
        }
        catch (exp) {
        }
        return false;
    }
    select(key) {
        var ft = this.getFancyTree();
        _NavigationBar__WEBPACK_IMPORTED_MODULE_3__.NavBar.activateItemsTab(key);
        if (this.panel.tree.is(":visible")) {
            // if the tree is not visible it throws an exception, because of option to auto activate
            ft.activateKey(key);
        }
        else {
            ft.options.autoScroll = false;
            ft.activateKey(key);
            ft.options.autoScroll = true;
        }
    }
    isSelected(key) {
        let treeNode = this.getNode(key);
        return treeNode.isActive();
    }
    // private functions
    updateRec(item) {
        let treeNode = this.getNode(item.id);
        treeNode.title = item.title;
        if (item.children) {
            // recreate children
            treeNode.children = [];
            this.addNodes(treeNode, item.children);
        }
    }
    insertRec(parentKey, item) {
        let parent = this.getNode(parentKey);
        if (!parent.children) {
            parent.children = [];
        }
        for (var idx = 0; idx < parent.children.length; idx++) {
            if (parent.children[idx].key === item.id) {
                // replace child
                this.updateRec(item);
                return;
            }
        }
        // create a new child and replace
        var nn = this.addNode(parent, item);
        this.updateRec(item);
    }
    moveNode(parentId, itemId, position) {
        let parentNode = this.getNode(parentId);
        let itemNode = this.getNode(itemId);
        // remove from current parent
        let oldParent = itemNode.parent;
        oldParent.children = oldParent.children.filter(function (child) {
            return child.key != itemId;
        });
        // insert in new place
        if (!parentNode.children) {
            parentNode.children = [];
        }
        if (position >= parentNode.children.length) {
            parentNode.children.push(itemNode);
        }
        else {
            parentNode.children.splice(position, 0, itemNode);
        }
        itemNode.parent = parentNode;
    }
    addNode(treeNode, item, position) {
        var newNode;
        if (item.hasOwnProperty("children") === true) { // a folder
            if (item.type !== this.lt) {
                this.lit = "";
                var icontext = "";
                var param = _globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.ItemConfig.getCategorySetting(item.type, 'texticon');
                if (param) {
                    param = _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.JSON.mergeOptions({ color: 'black', text: item.type }, param);
                    let color = _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.UI.standardizeColor(param.color, this.alpha); // add alpha
                    let style = '';
                    // if( item.id.endsWith("-1") && item.id.startsWith("F-") )
                    style = `style="background-color: ${color};"`;
                    this.lit = '<span class="fancytree-icontext" ' + style + '>' + param.text + '</span>';
                }
            }
            var icontext = this.lit;
            let hasIconText = icontext;
            // hack for test runs of type TRUN
            if (typeof _businesslogic_index__WEBPACK_IMPORTED_MODULE_2__.mTM !== 'undefined' && _businesslogic_index__WEBPACK_IMPORTED_MODULE_2__.mTM.isXTC(item.type)) { // this is a XTC type
                if (treeNode.parent) {
                    // not the top level TRUN but a TRUN,...
                    icontext = icontext ? icontext : ('<span class="fancytree-icontext fancytree-iconxtc"  style="color: ' + 'grey' + ';">' + 'RUN' + '</span>');
                    var tp = item.title.indexOf("(F-"); // e.g. The system is delivered (F-TC-6)
                    if (!hasIconText && tp !== -1) {
                        // most likely this is an executed folder... try to get information from where it comes from
                        var te = item.title.indexOf("-", tp + 3);
                        if (te !== -1) {
                            let category = item.title.substr(tp + 3, te - tp - 3); // -> TC
                            var source = _globals__WEBPACK_IMPORTED_MODULE_4__.app.getTree([category]);
                            if (source && source.length === 1) {
                                item.icon = source[0].icon;
                                icontext = "";
                                var param = _globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.ItemConfig.getCategorySetting(category, 'texticon');
                                if (param) {
                                    param = _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.JSON.mergeOptions({ color: 'black', text: category }, param);
                                    let color = _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.UI.standardizeColor(param.color, this.alpha); // add alpha
                                    icontext = '<span class="fancytree-icontext fancytree-iconxtc" style="background-color: ' + color + '; b">' + param.text + '</span>';
                                }
                            }
                        }
                    }
                }
                else {
                    icontext = icontext ? icontext : ('<span class="fancytree-icontext fancytree-iconxtc" style="background-color: ' + this.legacyColors["TRUN"] + ';">' + "TRUN" + '</span>');
                }
            }
            else if (!hasIconText && item.type && this.legacyColors[item.type]) {
                let color = _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.UI.standardizeColor(this.legacyColors[item.type], this.alpha); // add alpha
                icontext = '<span class="fancytree-icontext fancytree-iconxtc" style="background-color: ' + color + ';">' + item.type + '</span>';
            }
            let nodeData = {
                shortTitle: icontext + item.title,
                title: item.title,
                key: item.id,
                type: item.type,
                background: item.background,
                border: item.border,
                cstrender: true,
                folder: true,
                hideCheckbox: this.panel.settings.selectMode == _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__.SelectMode.none
                    || (this.panel.settings.selectMode == _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__.SelectMode.items || this.panel.settings.selectMode == _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__.SelectMode.singleItem),
                isUnselected: item.isUnselected,
                icon: icontext ? false : item.icon,
                extraStyle: item.extraStyle,
                mode: item.mode // copy mode over if it's set (it's coming from the server: EImportMode.Copy or EImportMode.Import)
            };
            if (item.iconClass) {
                nodeData.icon = true;
                nodeData.iconclass = item.iconClass + " fancy-icon";
            }
            if (item.mode == _businesslogic_ComponentImport__WEBPACK_IMPORTED_MODULE_5__.EImportMode.Include || item.mode == _businesslogic_ComponentImport__WEBPACK_IMPORTED_MODULE_5__.EImportMode.IncludeRoot) {
                nodeData.shortTitle = `<i class="fal fa-external-link-alt importedFolder"></i>` + nodeData.shortTitle;
            }
            newNode = treeNode.addChildren(nodeData);
            this.addNodes(newNode, item.children);
            let hasNotLatest = false;
            $.each(newNode.children, function (cidx, child) {
                if (child.extraClasses && child.extraClasses.indexOf("notLatest") != -1) {
                    hasNotLatest = true;
                }
            });
            if (hasNotLatest) {
                newNode.extraClasses = newNode.extraClasses ? (newNode.extraClasses + "notLatest") : "notLatest";
            }
        }
        else {
            let fn = {
                shortTitle: item.title,
                title: item.id + " " + item.title,
                key: item.id,
                cstrender: true,
                type: item.type,
                isUnselected: item.isUnselected,
                extraStyle: item.extraStyle,
                mode: item.mode // copy mode over if it's set
            };
            if (item.icon) {
                fn.icon = item.icon;
                fn.extraClasses = "fancy-icon";
            }
            if (item.iconClass) {
                fn.iconclass = item.iconClass + " fancy-icon";
            }
            if (item.mode == _businesslogic_ComponentImport__WEBPACK_IMPORTED_MODULE_5__.EImportMode.Include) {
                fn.icon = true;
                fn.iconclass = "fal fa-external-link-alt importedItem";
            }
            if (item.version && item.version.split("/")[0] != item.version.split("/")[1]) {
                fn.extraClasses = fn.extraClasses ? (fn.extraClasses + "notLatest") : "notLatest";
            }
            newNode = treeNode.addChildren(fn);
        }
        if (position && position.at < treeNode.children.length) {
            var newChild = treeNode.children[treeNode.children.length - 1];
            treeNode.children.splice(treeNode.children.length - 1, 1);
            treeNode.children.splice(position.at, 0, newChild);
        }
        return newNode;
    }
    treeFromDb(dbTree) {
        this.lt = "";
        this.addNodes(this.getFancyRootNode(), dbTree);
    }
    updateItemIsUnselected(itemId, isUnselected) {
        try {
            var node = this.getNode(itemId);
            if (node) { // sometimes the node does not yet exist, e.g. when creating a signed doc
                if (node.data.isUnselected !== isUnselected) {
                    node.data.isUnselected = isUnselected;
                    return true;
                }
            }
        }
        catch (exp) {
            // mobile client has no tree...
        }
        return false;
    }
    updateNotificationCounters() {
        this.getFancyTree().updateNotificationCounters();
    }
    addNodes(treeNode, obj) {
        let that = this;
        $.each(obj, function (idx, idb) {
            that.addNode(treeNode, idb);
        });
    }
}


/***/ }),
/* 35 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EImportMode: () => (/* binding */ EImportMode)
/* harmony export */ });

var EImportMode;
(function (EImportMode) {
    EImportMode["Include"] = "include";
    EImportMode["Copy"] = "copy";
    EImportMode["IncludeRoot"] = "recipient_folder_include";
})(EImportMode || (EImportMode = {}));


/***/ }),
/* 36 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SearchBox: () => (/* binding */ SearchBox)
/* harmony export */ });
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18);
/* harmony import */ var _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var _NavigationBar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(33);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _Parts_LabelSwitches__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(37);
/* harmony import */ var _businesslogic__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(11);
/// <reference types="matrixrequirements-type-declarations" />








class SearchBox {
    constructor(panel) {
        this.savedSearchIndex = -1;
        this.panel = panel;
        this.currentStatus = _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__.SearchState.NoSearch;
        this.currentResults = []; // results from server (
        this.currentSearchExpression = ""; // no search expression
        this.delayedAction = null;
        this.isEnabled = false;
        this.isConfigSearch = false;
    }
    // after a resize fix display...
    updateHeights() {
        this.isEnabled && this.updateSearchStatusHeights();
    }
    renderSearchField(searchBox, enableServerSearch, highlightResults, isConfigSearch, currentFilterContainer) {
        let that = this;
        this.isEnabled = true;
        that.isConfigSearch = isConfigSearch;
        var inputSpace = $('<div class="mrqlSearchInputContainer">');
        var inputCtrl = $('<input  data-cy="mrqlSearchInput" autocomplete="off" type="text" autofocus="autofocus" name="search" placeholder="Search..." class="form-control searchNoX">');
        searchBox.append(inputSpace.append(inputCtrl));
        // clear input field
        inputSpace.append('<span data-cy="searchClear" name="clear" class="fal fa-times-circle filter-clear-x"></spans>');
        $("span[name=clear]", searchBox).click(function (evt) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Search.hideHighlight();
            $("input[name=search]", searchBox).val("").focus();
            that.resetSearch();
        }); // icon left of search server button inside the text input field
        // add box for server search
        if (enableServerSearch) {
            var ss = this.getMiracleControl(inputCtrl);
            searchBox.append(ss);
        }
        if (_matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.LabelTools.getLabelDefinitions(null).length > 0) {
            // add Global filter
            this.addGlobalFilter(searchBox, currentFilterContainer);
        }
        // handle filter / search input field
        $("input[name=search]", searchBox).keyup(function (e) {
            clearTimeout(that.filterSearch_timeout);
            clearTimeout(that.filterHighlight_timeout);
            // get search string
            let untrimmed = $(e.delegateTarget).val();
            let trimmed = $.trim($(e.delegateTarget).val());
            if (that.setPrefixCategory(untrimmed)) {
                untrimmed = untrimmed.substr(that.panel.prefixCategory.length + 1);
                trimmed = trimmed.substr(that.panel.prefixCategory.length + 1);
                if (trimmed.length == 0) {
                    // just a prefix has been type, e.g. REQ:
                    return;
                }
            }
            // user hit return
            if (e && e.keyCode === 13 && !isConfigSearch) {
                // run fulltext search
                that.savedSearchIndex = -1;
                that.search(trimmed, highlightResults);
                that.addToSavedSearch(trimmed, searchBox);
                return;
            }
            if (e && e.keyCode === 38) {
                let savedSearchLength = $(".savedSearch").length;
                if (savedSearchLength > 0) {
                    that.savedSearchIndex++;
                    let newVal = $(".savedSearch", searchBox)[that.savedSearchIndex % savedSearchLength].innerText;
                    let textField = $(".searchNoX", searchBox);
                    $(document).ready(() => {
                        textField.val(newVal);
                    });
                }
            }
            if (e && e.keyCode === 40) {
                let savedSearchLength = $(".savedSearch").length;
                if (savedSearchLength > 0) {
                    e.preventDefault();
                    that.savedSearchIndex--;
                    if (that.savedSearchIndex < 0) {
                        that.savedSearchIndex = savedSearchLength - 1;
                    }
                    console.log(that.savedSearchIndex);
                    let newVal = $(".savedSearch", searchBox)[that.savedSearchIndex % savedSearchLength].innerText;
                    let textField = $(".searchNoX", searchBox);
                    $(document).ready(() => {
                        textField.val(newVal);
                    });
                }
            }
            if (e && e.keyCode === 32 && trimmed.toLowerCase().indexOf("mrql") === -1 && _globals__WEBPACK_IMPORTED_MODULE_4__.app.getItemTitle(trimmed.toUpperCase())) {
                if (searchBox.closest("#projectTree").length === 1) {
                    that.panel.select(trimmed.toUpperCase());
                    $("input[name=search]", searchBox).val("");
                    _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Search.hideHighlight();
                    that.resetSearch();
                    return;
                }
            }
            if (e && e.which === $.ui.keyCode.ESCAPE || trimmed === "") {
                $("input[name=search]", searchBox).val("");
                that.resetSearch();
                _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Search.hideHighlight();
                that.panel.resizeItem();
                return;
            }
            // Pass text as filter string (will be matched as substring in the node title)
            if (untrimmed.indexOf("mrql:") != 0) {
                that.filterSearch_timeout = window.setTimeout(function () {
                    that.filter(untrimmed);
                    that.panel.resizeItem();
                    if (highlightResults) {
                        // highlight again (the filtering above removes the highlights from the tree)
                        clearTimeout(that.filterHighlight_timeout);
                        that.filterHighlight_timeout = window.setTimeout(function () {
                            _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Search.highlight(trimmed);
                        }, 100);
                    }
                    // instead of hard coded timeouts allow to overwrite per pc
                    // serverStorage.setItem("timeoutSearch1",2000)) less than 2 letters entered. default 3000ms
                    // serverStorage.setItem("timeoutSearch2",4000)) 2+ letters entered . default 3000ms
                }, (trimmed && trimmed.length > 2) ? Number(_globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.serverStorage.getItemDefault("timeoutSearch2", "600")) : Number(_globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.serverStorage.getItemDefault("timeoutSearch1", "1200")));
                if (highlightResults) {
                    // wait a bit and highlight in main page
                    clearTimeout(that.filterHighlight_timeout);
                    that.filterHighlight_timeout = window.setTimeout(function () {
                        _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Search.highlight(trimmed);
                    }, 300);
                }
            }
        }).focus();
        // add search status info
        // checkbox to select all
        this.searchMetaInfo = $("<div class='searchMetaInfo'>");
        this.searchMetaInfo.append($('<div class="searchResultInfo">'));
        if (!this.panel.settings.singleSelect)
            this.searchMetaInfo.append($("<div class='searchResultSelect'>")
                .append('<label><input data-cy="searchSelectAll" type="checkbox"><span style="font-weight:normal;font-style:italic;padding-left:10px">Un/Select all</span></label>'));
        this.searchMetaInfo.append($("<div class='searchResultWaiting'>").append(_matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.UI.getSpinningWait("searching...")));
        this.searchMetaInfo.children().hide();
        this.searchMetaInfo.insertAfter(searchBox);
        $("input", this.searchMetaInfo).click(function (event) {
            that.panel.toggleSelection($(event.delegateTarget).prop("checked"));
        });
    }
    setPrefixCategory(searchExpression) {
        let that = this;
        that.panel.prefixCategory = "";
        $.each(_globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.ItemConfig.getCategories(), function (idx, cat) {
            if (searchExpression.toUpperCase().indexOf(cat.toUpperCase() + ":") == 0) {
                that.panel.prefixCategory = cat;
            }
        });
        return that.panel.prefixCategory != "";
    }
    // renders a tree or a list, with or without checkboxes
    // refresh only is set if the tree changes, rather than the search
    render() {
        let that = this;
        if (!this.isEnabled) {
            return;
        }
        if (this.currentStatus === _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__.SearchState.NoSearch) {
            this.showSearchStatus(-1, true);
            // render as tree control
            this.panel.listView.hide();
            this.panel.projectTree.show();
            // make sure nothing is hidden or dimmed
            this.panel.projectTree.setHideMismatches(false);
            // render the tree without any filters
            this.panel.projectTree.removeFilter();
        }
        else if (this.currentStatus === _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__.SearchState.ServerRunning) {
            // user might click faster than server can react
            this.delayedAction = {
                type: "render",
                expression: null
            };
            return;
        }
        else if (this.currentStatus === _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__.SearchState.FilterDone) {
            // this is a local filtering: do it
            if (this.panel.viewModeSelector.showAsList()) {
                // render as list control
                this.panel.listView.show();
                this.panel.projectTree.hide();
                // show results
                let matches = this.panel.listView.filterList(this.currentSearchExpression);
                that.showMatches(matches, true);
            }
            else {
                // render as tree control
                this.panel.listView.hide();
                this.panel.projectTree.show();
                // hide or dim
                this.panel.projectTree.setHideMismatches(this.panel.viewModeSelector.hideMismatches());
                // render the tree with current filter
                var matches = this.panel.projectTree.filterTree(this.currentSearchExpression);
                that.showMatches(matches, true);
            }
        }
        else if (this.currentStatus === _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__.SearchState.ServerDone) {
            // this is a local filtering: do it
            if (this.panel.viewModeSelector.showAsList()) {
                // render as list control
                this.panel.listView.show();
                this.panel.projectTree.hide();
                // show results
                let actualResults = this.panel.listView.showSearchResults(this.currentResults);
                that.showMatches(actualResults, false);
            }
            else {
                // render as tree control
                this.panel.listView.hide();
                this.panel.projectTree.show();
                // hide or dim
                this.panel.projectTree.setHideMismatches(this.panel.viewModeSelector.hideMismatches());
                // render the tree with current filter
                let actualResults = this.panel.projectTree.showSearchResults(this.currentResults);
                that.showMatches(actualResults, false);
            }
        }
    }
    ;
    showMatches(matches, localSearch) {
        let diff = matches.total - matches.current;
        let details = "";
        if (diff) {
            details = "There are " + diff + " hits in other tabs:";
            details += "<ul>";
            for (let tab of matches.perTab) {
                if (tab.tabName == _NavigationBar__WEBPACK_IMPORTED_MODULE_3__.NavBar.getCurrentTab()) {
                    details += `<li><span class="" data-tab="${tab.tabName}">${tab.tabName} ${tab.count} matches</span></li>`;
                }
                else {
                    details += `<li><span class="searchResultTabLink" data-tab="${tab.tabName}">${tab.tabName} ${tab.count} matches</span></li>`;
                }
            }
            details += "</ul>";
        }
        this.showSearchStatus(matches.current, localSearch, details);
    }
    // resets the search
    resetSearch() {
        $(".searchVizMode", this.panel.getRoot()).hide();
        this.panel.viewModeSelector.setEnabled(false);
        this.currentResults = []; // No results
        this.currentSearchExpression = "";
        // always render as tree:
        this.currentStatus = _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__.SearchState.NoSearch;
        this.render();
    }
    ;
    getMiracleControl(textField) {
        let that = this;
        let btn_grp = $('<div class="rowFlex" style="">');
        let mir_btn = $('<span class="mrqlSearchIcon" data-toggle="tooltip" data-placement="bottom" title="Fulltext search on server"><i style="" class="fal fa-search"></span>');
        mir_btn.appendTo($(".mrqlSearchInputContainer"));
        btn_grp.append('<span class="btn btn-ssearch" data-cy="searchBoxMrqlDP"  type="button" data-toggle="dropdown"><span class="fal fa-chevron-down"></span></span>');
        let config = _globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.ItemConfig.getSearchConfig();
        if (!config || !config.searches || config.searches.length === 0) {
            config = { searches: [{ name: "outdated links", expr: "mrql:outdated=1" },
                    { name: "last week", expr: "mrql:updated<1w" },
                    { name: "failed tests", expr: 'mrql:"test run result"~"error"' }] };
        }
        else {
            // sort
            $.each(config.searches, function (idx, st) {
                st.name = st.name.split("'").join('"');
                st.expr = st.expr.split("'").join('"');
            });
        }
        let ul = $(' <ul id="savedSearches" class="dropdown-menu dropdown-menu-sub pull-right role="menu"> ');
        for (let idx = 0; idx < config.searches.length; idx++) {
            let li = $('<li data-cy="serverSearchExp" title="' + config.searches[idx].expr + '"><a href="javascript:void(0)">' + config.searches[idx].name + '</a></li>');
            ul.append(li);
            li.click(function (event) {
                if (that.panel.settings.highlight) {
                    // wait a bit and highlight
                    window.setTimeout(function () {
                        _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Search.highlight($(event.delegateTarget).data("mrql"));
                    }, 50);
                }
                textField.val($(event.delegateTarget).data("mrql"));
                that.search($(event.delegateTarget).data("mrql"));
            }).data("mrql", config.searches[idx].expr);
        }
        let help = $('<li class="miracleHelp" title="Miracle Help" ><a class="documentationLink" href="javascript:void(0)">Miracle Help</a></li>');
        ul.append(help);
        help.click(function () {
            window.open("https://urlshort.matrixreq.com/d23/manual/miracle");
        });
        let items = that.getSavedSearches();
        items.forEach((item) => {
            item = decodeURIComponent(item);
            let li = $("<li/>").attr("title", item).append($('<a class="savedSearch" href="javascript:void(0)"/>').text(item));
            ul.append(li);
            li.click(function (event) {
                textField.val(event.currentTarget.textContent);
                var e = $.Event('keyup');
                e.keyCode = 13; // Enter key
                textField.trigger(e);
            }).data("mrql", item);
        });
        let pluginsSearchInjection = _businesslogic__WEBPACK_IMPORTED_MODULE_6__.plugins.getCustomSearches();
        if (pluginsSearchInjection.length > 0) {
            ul.append($('<li class="divider"></li>'));
            for (let ps of pluginsSearchInjection) {
                let li = $('<li data-cy="serverSearchExp" title="' + ps.menu + '"><a href="javascript:void(0)">' + ps.menu + '</a></li>');
                ul.append(li);
                li.click(async (event) => {
                    this.currentStatus = _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__.SearchState.ServerRunning;
                    this.render();
                    await ps.search((itemIds) => {
                        that.panel.tree.fancytree("getTree").visit(function (node) {
                            this.currentStatus = _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__.SearchState.ServerDone;
                            if (itemIds.indexOf(node.key) != -1) {
                                that.currentResults.push(node.key);
                            }
                            that.render();
                        });
                    });
                });
            }
        }
        ul.css("max-width", $('#sidebar').width() - 10 + "px");
        btn_grp.append(ul);
        $("i", mir_btn).click(() => {
            that.doSearch(textField);
        });
        return btn_grp;
    }
    doSearch(textField) {
        let that = this;
        let searchExpression = textField.val();
        if (that.setPrefixCategory(searchExpression)) {
            searchExpression = searchExpression.substr(that.panel.prefixCategory.length + 1);
        }
        that.search(searchExpression);
        that.addToSavedSearch(searchExpression, textField.parent().parent());
    }
    addToSavedSearch(str, filter) {
        let that = this;
        let items = that.getSavedSearches();
        str = str.trim();
        let strEncoded = encodeURIComponent(str);
        if (str.length == 0) {
            return;
        }
        let strIndex = items.indexOf(strEncoded);
        let decodedStr = decodeURIComponent(str);
        let def = $.Deferred();
        if (strIndex != -1) {
            items.splice(strIndex, 1);
            $().ready(() => {
                $("li[title='" + decodedStr + "']", filter).remove();
            });
        }
        items.unshift(strEncoded);
        items.splice(10);
        _globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.projectStorage.setItem("savedSearches", JSON.stringify(items), false);
        $().ready(() => {
            let li = $("<li/>").attr("title", decodedStr).append($('<a class="savedSearch" data-cy="localSearchExp" href="javascript:void(0)"/>').text(decodedStr));
            li.insertAfter($(".miracleHelp", filter));
            li.click(function (event) {
                let textField = $(".searchNoX", filter);
                textField.val(decodeURIComponent(str));
                textField.val($(event.delegateTarget).data("mrql"));
                var e = $.Event('keyup');
                e.keyCode = 13; // Enter key
                textField.trigger(e);
            }).data("mrql", decodedStr);
        });
    }
    getSavedSearches() {
        let items = undefined;
        if (_globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.projectStorage) {
            let itemsString = _globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.projectStorage.getItem("savedSearches", true);
            if (itemsString && itemsString != "") {
                items = JSON.parse(itemsString);
                if (items != undefined) {
                    return items;
                }
            }
        }
        return items !== null && items !== void 0 ? items : [];
    }
    filter(filterExpression) {
        this.filterAgainExpression = filterExpression;
        this.filterAgain();
    }
    filterAgain() {
        if (this.currentStatus === _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__.SearchState.ServerRunning) {
            // user might click faster than server can react
            this.delayedAction = {
                type: "filter",
                expression: this.filterAgainExpression
            };
            return;
        }
        if (this.filterAgainExpression === "") {
            this.resetSearch();
            return;
        }
        this.panel.viewModeSelector.setEnabled(true);
        this.currentStatus = _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__.SearchState.FilterDone;
        this.currentSearchExpression = this.filterAgainExpression;
        this.render();
    }
    ;
    // runs a server search
    search(searchExpression, highlightResults) {
        var that = this;
        $(".searchVizMode", this.panel.getRoot()).show();
        searchExpression = searchExpression.replace(/_me_/g, _globals__WEBPACK_IMPORTED_MODULE_4__.matrixSession.getUser());
        searchExpression = searchExpression.replace(/_this_/g, _globals__WEBPACK_IMPORTED_MODULE_4__.app.getCurrentItemId());
        if (this.currentStatus === _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__.SearchState.ServerRunning) {
            // user might click faster than server can react
            this.delayedAction = {
                type: "server",
                expression: searchExpression
            };
            return;
        }
        this.delayedAction = null;
        this.panel.viewModeSelector.setEnabled(true);
        if (searchExpression === "") {
            this.resetSearch();
            return;
        }
        this.currentResults = [];
        this.currentStatus = _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__.SearchState.ServerRunning;
        this.showSearchStatus(-3, true);
        _globals__WEBPACK_IMPORTED_MODULE_4__.app.searchAsyncMinimalOutput(searchExpression
            .replace("descendant=*", "descendant=" + _globals__WEBPACK_IMPORTED_MODULE_4__.app.getCurrentItemId())
            .replace("ancestor=*", "ancestor=" + _globals__WEBPACK_IMPORTED_MODULE_4__.app.getCurrentItemId())
            .replace("parent=*", "parent=" + _globals__WEBPACK_IMPORTED_MODULE_4__.app.getCurrentItemId())
            .replace("child=*", "child=" + _globals__WEBPACK_IMPORTED_MODULE_4__.app.getCurrentItemId()), null, false, this.panel.settings.crossProject).done(function (results) {
            if (that.panel.prefixCategory) {
                results = results.filter(function (result) { return _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Item.parseRef(result).type == that.panel.prefixCategory; });
            }
            /*
            this is potentially n2 if the results is the whole tree ....

            for (var idx = 0; idx < results.length; idx++) {
                // verify that the tree is not filtered otherwise
                var node = that.panel.tree.fancytree("getTree").getNodeByKey(results[idx]);
                if (node) {
                    // if not add it to results
                    that.currentResults.push(results[idx]);
                }
            }
            */
            // that's the same but indexOf is much faster
            that.panel.tree.fancytree("getTree").visit(function (node) {
                if (results.indexOf(node.key) != -1) {
                    that.currentResults.push(node.key);
                }
            });
            that.showSearchStatus(that.currentResults.length, false);
            // search done
            that.currentStatus = _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__.SearchState.ServerDone;
            if (that.delayedAction) {
                that.doDelayed();
                return;
            }
            let filtered = that.render();
            if (highlightResults) {
                // highlight again (the filtering above removes the highlights from the tree)
                window.clearTimeout(that.filterHighlight_timeout);
                that.filterHighlight_timeout = window.setTimeout(function () {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Search.highlight(searchExpression);
                }, 100);
            }
        }).fail(function (jqxhr, textStatus, error) {
            if (jqxhr) {
                let errorText = "unknown error";
                if (jqxhr && jqxhr.responseJSON) {
                    if (jqxhr.responseJSON.detailsList && jqxhr.responseJSON.detailsList.length > 0) {
                        errorText = jqxhr.responseJSON.detailsList[0];
                    }
                    if (jqxhr.responseJSON.displayError) {
                        errorText = jqxhr.responseJSON.displayError;
                    }
                    _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.UI.showError("Search failed", errorText);
                }
                // error in search
                that.showSearchStatus(-2, false, errorText.replace("[EClient/MRQL]|", "").replace("|FindItemsMethod", ""));
                that.currentStatus = _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__.SearchState.ServerDone;
                that.doDelayed(); // just in case
            }
            else {
                // no search performed (e.g. empty string)
                that.showSearchStatus(-1, false);
                that.currentStatus = _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__.SearchState.NoSearch;
                that.doDelayed(); // just in case
            }
        });
    }
    ;
    // delayed actions might happen if user types or uses UI while a server
    // request is going on. in that case the (last) delayed action is done after
    // server returns
    doDelayed() {
        if (!this.delayedAction) {
            return;
        }
        if (this.delayedAction.type === "server") {
            this.search(this.delayedAction.expression);
        }
        else if (this.delayedAction.type === "filter") {
            this.filter(this.delayedAction.expression);
        }
        else if (this.delayedAction.type === "render") {
            this.render();
        }
    }
    // status:
    // -1 no search running
    // -2 error (details contains message)
    // -3 server search running
    // 0 no matching results
    // n>0 n matching results
    showSearchStatus(status, local, details) {
        let that = this;
        var searchResultInfo = $(".searchResultInfo", this.panel.getRoot());
        clearTimeout(this.spinnerServerSearch);
        $(".searchResultWaiting", this.panel.getRoot()).hide();
        $(".searchResultSelect", this.panel.getRoot()).hide();
        let searchHint = "";
        if (_matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.LabelTools.getFilter()) {
            let filterNames = _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.LabelTools.getFilter().split(",").map(function (f) { return _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.LabelTools.getFilterName(f); }).join(",");
            searchHint += " <span style='color:" + _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_2__.UIToolsConstants.CIColors.BrownDiSerria.color + "'>Results filtered by label(s): '" + filterNames + "'</span>.";
        }
        if (local && !that.isConfigSearch) {
            searchHint += " Click <a class='performFullTextSearch'>here</a> to run fulltext search.";
        }
        if (status === -3) {
            this.spinnerServerSearch = window.setTimeout(function () {
                $(".searchResultWaiting", that.searchMetaInfo).show();
                that.updateSearchStatusHeights();
            }, 200);
        }
        else if (status === -2) {
            searchResultInfo.html("error in search expression: " + details);
            searchResultInfo.show();
        }
        else if (status === -1) {
            searchResultInfo.html("");
            searchResultInfo.hide();
            $(".searchVizMode", this.panel.getRoot()).hide();
        }
        else if (status === 0) {
            searchResultInfo.html("<span style='color:grey;width:100%;padding-top:20px'>No matching items found." + searchHint + (details ? details : "") + "</span>");
            searchResultInfo.show();
            $(".searchVizMode", this.panel.getRoot()).show();
        }
        else {
            searchResultInfo.html(status + " matching items found." + (details ? details : "") + searchHint);
            searchResultInfo.show();
            $(".searchVizMode", this.panel.getRoot()).show();
            if (this.panel.settings.canSelectItems) {
                $(".searchResultSelect", this.panel.getRoot()).show();
            }
        }
        $(".performFullTextSearch", searchResultInfo).on("click", () => {
            that.doSearch($(".searchNoX", searchResultInfo.parentsUntil(".treeCtrl").parent()));
        });
        $(".searchResultTabLink", searchResultInfo).click((event) => {
            let link = $(event.delegateTarget);
            let tab = link.data("tab");
            _NavigationBar__WEBPACK_IMPORTED_MODULE_3__.NavBar.switchTab(tab);
            that.render();
        });
        this.updateSearchStatusHeights();
    }
    // recompute position of tree/list control
    updateSearchStatusHeights() {
        var top = 44;
        $.each(this.searchMetaInfo.children(), function (idx, div) {
            if ($(div).is(":visible")) {
                top += $(div).height();
            }
        });
        this.panel.updateTopPosition(top);
    }
    addGlobalFilter(filter, currentFilterContainer) {
        if (!_globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.ItemConfig.getTimeWarp()) {
            let filterButton = $(`<span class="btn btn-ssearch searchBoxFilter" data-cy="searchBoxFilter" type="button" ><span class="fal fa-filter"></span></span>`);
            filter.prepend(filterButton);
            let dialog = $("#filterDialog");
            // Do not add the dialog if allready exists
            if (dialog.length == 0) {
                // show and apply project filters
                let dialog = $('<div class="modal " id="filterDialog" tabindex="-1" role="dialog" aria-labelledby="filterDialogLabel" aria-hidden="true">');
                let dialogContent = $('<div class="modal-dialog modal-lg" role="document">');
                let dialogContentInner = $('<div class="modal-content">');
                let dialogHeader = $('<div class="modal-header">');
                let dialogBody = $('<div class="modal-body">');
                let dialogFooter = $('<div class="modal-footer">');
                let dialogTitle = $('<h4 class="modal-title" id="filterDialogLabel">Filters</h4>');
                let dialogClose = $('<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>');
                dialogHeader.append(dialogClose);
                dialogHeader.append(dialogTitle);
                dialogFooter.append(dialogClose);
                dialogContentInner.append(dialogHeader);
                dialogContentInner.append(dialogBody);
                dialogContentInner.append(dialogFooter);
                dialogContent.append(dialogContentInner);
                dialog.append(dialogContent);
                $("body").append(dialog);
                dialogClose.click(function () {
                    dialog.modal("hide");
                });
                dialogClose.click(function () {
                    dialog.modal("hide");
                });
                $("<div  id='globalProjectFilter'>/div>").html('').appendTo(dialogBody);
                var labelFilter = _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.LabelTools.getFilter();
                if (labelFilter && labelFilter.length > 0 && _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.LabelTools.getFilterColor()) {
                    $("header").css("background-color", _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.LabelTools.getFilterColor());
                }
                else {
                    $("header").css("background-color", "");
                }
                // show the filters -> if someone uses them, reload  the project with the filter
                new _Parts_LabelSwitches__WEBPACK_IMPORTED_MODULE_5__.LabelSwitches($("#globalProjectFilter"), true, null, (labelFilter && labelFilter.length > 0) ? labelFilter.split(",") : [], "project_filter", function (newSelection) {
                    _globals__WEBPACK_IMPORTED_MODULE_4__.app.canNavigateAwayAsync().done(function () {
                        _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.LabelTools.setFilter(newSelection);
                        _globals__WEBPACK_IMPORTED_MODULE_4__.app.loadProject(_globals__WEBPACK_IMPORTED_MODULE_4__.matrixSession.getProject(), _globals__WEBPACK_IMPORTED_MODULE_4__.app.getCurrentItemId()).then(() => {
                            if (currentFilterContainer.length > 0) {
                                $(".itemFilterTool").show();
                                new _Parts_LabelSwitches__WEBPACK_IMPORTED_MODULE_5__.LabelSwitches($("#currentFilterContainer"), false, null, newSelection, "filter_chip", (sel) => {
                                });
                            }
                            else {
                                $(".itemFilterTool").hide();
                            }
                            _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.UI.toggleFilters(true);
                        });
                        // this code shouldn't be reachable, but let's leave it just in case
                    }).fail(function () {
                        _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.UI.showError("Filter was not activated.", "To activate reload project after saving the item!");
                    });
                });
            }
            filterButton.click(() => {
                dialog.modal("show");
            });
        }
        else {
            // no filters
            $("#projectTree").addClass("timewarp");
        }
    }
}


/***/ }),
/* 37 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LabelSwitches: () => (/* binding */ LabelSwitches)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _businesslogic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11);
/* harmony import */ var _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(24);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1);
/* harmony import */ var _matrixlib_LabelTools__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(38);






class LabelSwitches extends _matrixlib_LabelTools__WEBPACK_IMPORTED_MODULE_4__.LabelTools {
    constructor(ui, canEdit, category, currentLabelsOn, mode, valueChanged, item, restrictEditTo) {
        super(_matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.Logger, _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.JSON);
        this.lexist = false;
        this.dbClickCounter = 0;
        this.canAutoFill = false;
        // get label definitions
        let labelList = this.getLabelList();
        if (labelList.length === 0) {
            return;
        }
        // get all label names
        let allLabels = this.getLabelNames();
        if (allLabels.length === 0) {
            return;
        }
        // there are some labels
        this.lexist = true;
        this.isFilter = category === null;
        // set other parameters
        this.ui = ui;
        this.canEdit = canEdit;
        this.category = category;
        this.currentLabelsOn = currentLabelsOn;
        this.mode = mode;
        this.valueChanged = valueChanged;
        this.item = item;
        this.restrictEditTo = restrictEditTo;
        // get label groups
        this.groups = this.getLabelGroups(category);
        this.showLabels();
    }
    hasCombinedFilterMenu() {
        let conf = this.getConfig().getSetting("labels");
        if (!conf) {
            return false;
        }
        let confJson = this.json.fromString(conf);
        if (confJson.status !== "ok") {
            return false;
        }
        return this.json.isTrue(confJson.value.useFilterMenu);
    }
    showLabels() {
        let setting = this.getConfig().getLabelsConfig();
        // each group is a button group with at least one button inside
        for (var gid = 0; gid < this.groups.length; gid++) {
            let group;
            if (this.mode == "filter_chip") {
                group = this.addChip(gid);
                continue;
            }
            if (this.groups[gid].labelDef.length === 0) {
                continue; // next group
            }
            let selectionMethod = this.isFilter ? this.groups[gid].filterSelection : this.groups[gid].selection;
            if (selectionMethod === "design_review" && this.mode !== "item_create") {
                group = this.create_group_design_review(gid);
            }
            else if (selectionMethod === "review" && this.mode !== "item_create") {
                group = this.create_group_review(gid);
            }
            else if (selectionMethod === "or") {
                group = this.create_group_or(gid);
                if (this.mode !== "doc_filter" && this.isFilter && this.groups[gid].filterMenu) {
                    if (this.hasCombinedFilterMenu()) {
                        this.add_to_global_dropdown(gid, group);
                    }
                    else {
                        this.create_dropdown_group(gid, group);
                    }
                }
            }
            else if (selectionMethod === "xor" || (selectionMethod === "review" && this.mode === "item_create")) {
                group = this.create_group_xor(gid);
                if (this.mode === "item_create" && !this.json.isTrue(this.groups[gid].defaultAsk)) {
                    group.hide();
                }
            }
            // bug fix (groups are right to left in item title bar)
            if (group && this.mode == "item_title" && !setting.invertGroups) {
                group.css("float", "none");
            }
        }
        // hack -> hide the empty label heading if there's no labels
        if (this.mode == "item_create" && this.groups.filter(g => !!g.defaultAsk || (g.labelDef && g.labelDef.filter(l => !!l.defaultAsk).length > 0)).length == 0) {
            // use does not need to set labels when creating new items
            $(".baseControlHelp", this.ui.parent()).hide();
        }
    }
    ;
    setEnabled(enabled) {
        if (enabled) {
            $("#labelDisabler").remove();
        }
        else {
            this.ui.css("position", "relative");
            $("<div id='labelDisabler'>").appendTo(this.ui);
        }
    }
    labelsExist() {
        return this.lexist;
    }
    canEditLabel(labelId) {
        if (!this.canEdit)
            return false;
        if (!this.restrictEditTo)
            return true;
        return this.restrictEditTo.indexOf(labelId) != -1;
    }
    /**
     *  this.ui elements for different label this.groups
     */
    create_group_or(gid) {
        let that = this;
        var btnGroup = $('<div class="btn-group labelTools">');
        this.ui.append(btnGroup);
        $.each(this.groups[gid].labelDef, function (idx, label) {
            label.isNegative = that.currentLabelsOn.indexOf(("!" + label.label)) > -1;
            label.isSelected = label.isNegative || that.currentLabelsOn.indexOf(label.label) > -1;
            var switchFunction; // single click
            var invertFunction; // dbl click for filter or null
            switchFunction = function (button) {
                if (!that.canEditLabel(label.label)) {
                    return;
                }
                let rememberBefore = that.json.clone(that.currentLabelsOn);
                var click_label = button.data("label");
                var click_gid = button.data("gid");
                $.each(that.groups[click_gid].labelDef, function (idx, label) {
                    if (label.label === click_label) {
                        label.isSelected = !label.isSelected;
                        label.isNegative = false;
                    }
                });
                button.tooltip('hide');
                button.replaceWith(that.createLabel(click_label, gid, switchFunction, invertFunction));
                if (that.valueChanged) {
                    that.updateSelection();
                    that.valueChanged(that.currentLabelsOn);
                }
                that.triggerLabelChanged(rememberBefore, that.currentLabelsOn);
            };
            if (that.isFilter && that.canEdit) {
                invertFunction = function (button) {
                    if (!that.canEditLabel(label.label)) {
                        return;
                    }
                    var click_label = button.data("label");
                    var click_gid = button.data("gid");
                    let negativePrefix = "";
                    $.each(that.groups[click_gid].labelDef, function (idx, label) {
                        if (label.label === click_label) {
                            if (label.isSelected) {
                                label.isNegative = !label.isNegative;
                                negativePrefix = label.isNegative ? "!" : "";
                            }
                            else {
                                label.isSelected = true;
                                label.isNegative = true;
                                negativePrefix = "!";
                            }
                        }
                    });
                    button.tooltip('hide');
                    button.replaceWith(that.createLabel(negativePrefix + click_label, gid, switchFunction, invertFunction));
                    if (that.valueChanged) {
                        that.updateSelection();
                        that.valueChanged(that.currentLabelsOn);
                    }
                };
            }
            var btn = that.createLabel((label.isNegative ? "!" : "") + label.label, gid, switchFunction, invertFunction);
            // add button to group
            btnGroup.append(btn);
            // hide button if it should not be shown in create dialog
            if (that.mode === "item_create" && !that.json.isTrue(label.defaultAsk)) {
                btn.hide();
            }
        });
        return btnGroup;
    }
    ;
    triggerLabelChanged(before, after) {
        if (this.isFilter) {
            return;
        }
        let set = after.filter(function (label) { return before.indexOf(label) == -1; });
        let unset = before.filter(function (label) { return after.indexOf(label) == -1; });
        if (set.length > 0 || unset.length > 0) {
            _businesslogic__WEBPACK_IMPORTED_MODULE_1__.MR1.triggerAfterLabelChange(this.item, set, unset);
        }
    }
    create_group_xor(gid) {
        let that = this;
        var btnGroup = $('<div class="btn-group labelTools">');
        this.ui.append(btnGroup);
        let canEditGroup = false;
        $.each(this.groups[gid].labelDef, function (idx, label) {
            if (that.canEditLabel(label.label)) {
                canEditGroup = true;
            }
        });
        $.each(this.groups[gid].labelDef, function (idx, label) {
            label.isSelected = that.currentLabelsOn.indexOf(label.label) > -1;
            var switchFunction;
            switchFunction = function (button) {
                let rememberBefore = that.json.clone(that.currentLabelsOn);
                if (!canEditGroup) {
                    return;
                }
                button.tooltip('hide');
                var click_label = button.data("label");
                var click_gid = button.data("gid");
                $.each(that.groups[click_gid].labelDef, function (idx, label) {
                    // not possible to unselect a label, so clicked label will always be on
                    label.isSelected = label.label === click_label;
                    var newButton = that.createLabel(label.label, gid, switchFunction);
                    label.btn.replaceWith(newButton);
                    label.btn = newButton;
                });
                if (that.valueChanged) {
                    that.updateSelection();
                    that.valueChanged(that.currentLabelsOn);
                }
                that.triggerLabelChanged(rememberBefore, that.currentLabelsOn);
            };
            label.btn = that.createLabel(label.label, gid, switchFunction);
            // add button to group
            btnGroup.append(label.btn);
        });
        return btnGroup;
    }
    ;
    create_group_review(gid) {
        let that = this;
        var btnGroup = $('<div class="btn-group labelTools">');
        this.ui.append(btnGroup);
        // special handling for review labels! if no review flag is set show it in item as not set
        var color = this.groups[gid].noColor ? this.groups[gid].noColor : "red";
        var icon = this.groups[gid].noIcon ? this.groups[gid].noIcon : null;
        var name = this.groups[gid].noName ? this.groups[gid].noName : (icon ? "" : "not set");
        // this will be a drop down button
        var btn;
        if (this.mode == "item_history") {
            // in history render a simplified version of labels to be more easily comparable
            btn = this.createButton("", gid, name, "", "", icon, null, null, "labelInHistory");
        }
        else {
            btn = this.createButton("", gid, name, color, "transparent", icon, null, null, "labelIsMenu");
        }
        // for reviews it is possible that no label is set or one...
        // the one which is set is the only one displayed
        // figure out if the user can change something in group
        // canEdit must be true
        // but if this is a lock keeper, he can undo only his locks....
        let canEditGroup = false;
        $.each(this.groups[gid].labelDef, function (idx, label) {
            if (that.canEditLabel(label.label)) {
                canEditGroup = true;
            }
            ;
        });
        $.each(this.groups[gid].labelDef, function (idx, label) {
            label.isSelected = false;
            if (that.currentLabelsOn.indexOf(label.label) !== -1) {
                label.isSelected = true;
                // this is part of drop down menu....
                btn = that.createLabel(label.label, gid, function () { });
                btn.addClass("labelIsMenu");
            }
        });
        var tooltip = this.groups[gid].tooltip ? this.groups[gid].tooltip : "";
        if (tooltip) {
            btn.tooltip({ title: tooltip, placement: "bottom", container: "body" });
        }
        // check if there are defined reviewers of label
        var userCanDo = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.amIAllowedUser(this.groups[gid].reviewers);
        if (!userCanDo || this.mode === "item_print" || !canEditGroup) {
            // we are done... this is not interactive...
            btn.css("cursor", "inherit");
            btnGroup.append(btn);
            return btnGroup; //$("");
        }
        // add drop down menu
        btn.addClass("dropdown-toggle");
        btn.attr("data-toggle", "dropdown");
        btn.append("<span class='caret' style='margin-left:5px'/>");
        var ddbtn = $('<div class="dropdown">');
        ddbtn.append(btn);
        var options = $('<ul  class="dropdown-menu">');
        $.each(this.groups[gid].labelDef, function (idx, label) {
            var icon = "<span style='margin-right:8px'/>";
            var name = label.displayName ? label.displayName : "";
            if (label && label.style && label.style.label && label.style.label.on) {
                if (label.style.label.on.icon) {
                    var color = label.style.label.on.foreground ? "color:" + label.style.label.on.foreground + ";" : "";
                    var bg = label.style.label.on.background ? "background-color:" + label.style.label.on.background + ";" : "";
                    icon = "<i class='fal fa-" + label.style.label.on.icon + "' style='margin-left:-10px;margin-right:2px; width:22px; padding: 4px; border-radius:var(--smallBorderRadius);" + color + bg + "' ></i>";
                }
                if (label.style.label.on.displayName) {
                    name = label.style.label.on.displayName;
                }
            }
            var li = $("<li class='labelMenuEntry'></li>").html('<a href="javascript:void(0)" style="min-width:100%">' + icon + name + '</a>');
            li.data("label", label.label);
            li.data("gid", gid);
            options.append(li);
            li.click(function (e) {
                $(".tooltip").remove();
                let rememberBefore = that.json.clone(that.currentLabelsOn);
                // set just the selected label from the group
                var group = that.groups[$(e.delegateTarget).data("gid")];
                var selected = $(e.delegateTarget).data("label");
                var askForComment = group.askForComment ? group.askForComment : false;
                $.each(group.labelDef, function (idx, label) {
                    if (label.label === selected) {
                        askForComment = label.askForComment ? label.askForComment : askForComment;
                    }
                });
                function setLabel(comment) {
                    let labelsOff = [];
                    $.each(group.labelDef, function (idx, label) {
                        label.isSelected = label.label === selected;
                        if (!label.isSelected) {
                            labelsOff.push(label.label);
                        }
                    });
                    // set and save label
                    that.saveAfterLabelChange(comment);
                }
                ;
                if (askForComment) {
                    $('#dialog_comment_text').val(_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getComment());
                    $('#dialog_comment_ok').off("click");
                    $('#dialog_comment_nok').off("click");
                    $('#dialog_comment_ok').one("click", function () {
                        setLabel($('#dialog_comment_text').val());
                        that.triggerLabelChanged(rememberBefore, that.currentLabelsOn);
                    });
                    $('#dialog_comment_nok').one("click", function () { });
                    $('#dialog_comment').modal({ backdrop: 'static' });
                }
                else {
                    setLabel();
                    that.triggerLabelChanged(rememberBefore, that.currentLabelsOn);
                }
            });
        });
        btnGroup.append(ddbtn);
        if (this.groups[gid].showComments && this.item && this.item.history) {
            var history = this.item.history;
            var reviews = 0;
            $.each(history, function (hixd, h) {
                reviews += (h.action === 'reviewed') ? 1 : 0;
            });
            if (reviews > 0) {
                options.append($("<li class='' >").html('<hr>'));
                $.each(history, function (hixd, h) {
                    if (h.action === 'reviewed') {
                        options.append($(" <li class='reviewedCommentMenutitem' style='display:flex'>").html("<span class='hqlu'>" + h.user + "</span> <span class='hqld' >(" + h.dateUserFormat + "):</span> <span class='hqlc'>" + h.comment + '</span>'));
                    }
                });
                options.width(300 + ddbtn.width());
            }
            options.css("top", "30px");
        }
        ddbtn.append(options);
        return btnGroup;
    }
    ;
    saveAfterLabelChange(comment) {
        let that = this;
        // set label
        that.updateSelection();
        // save: pass the labels to the touch, this overwrites the labels
        // a normal save reset's review labels!
        var mainComment = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getComment();
        if (comment) {
            _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.setComment(comment);
        }
        that.setEnabled(false); // save will render labels as readonly
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.setLabels({ labels: that.currentLabelsOn }).done(function () {
            // after save item will be repainted
            _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.setComment(mainComment);
        }).fail(() => {
            that.setEnabled(true); // save will render labels 'normally'
        });
    }
    create_group_design_review(gid) {
        let that = this;
        var btnGroup = $('<div class="btn-group labelTools">');
        this.ui.append(btnGroup);
        for (let label of this.groups[gid].labelDef) {
            label.isNegative = that.currentLabelsOn.indexOf(("!" + label.label)) > -1;
            label.isSelected = label.isNegative || that.currentLabelsOn.indexOf(label.label) > -1;
            var switchFunction; // single click
            var invertFunction; // dbl click for filter or null
            switchFunction = async function (button) {
                let rememberBefore = that.json.clone(that.currentLabelsOn);
                let click_label = button.data("label");
                if (that.mode === "item_print" || !that.canEditLabel(click_label)) {
                    return;
                }
                var click_gid = button.data("gid");
                // get the label definition
                var labelDef;
                $.each(that.groups[click_gid].labelDef, function (idx, label) {
                    if (label.label === click_label) {
                        labelDef = label;
                    }
                });
                // get review job details
                let review_job = that.getDesignReview(click_label);
                // check if there are defined reviewers of label
                let userCanDo = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.amIAllowedUser(review_job.reviewerField ? await that.getUsersFromField(review_job.reviewerField) : review_job.reviewers);
                if (!userCanDo) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.showError("You do not have sufficient rights to perform review", "", 3000);
                }
                button.tooltip('hide');
                function setReviewResult(comment, passed) {
                    $.each(that.groups[click_gid].labelDef, function (idx, label) {
                        if (label.label === click_label) {
                            label.isSelected = passed;
                            label.isNegative = false;
                        }
                    });
                    button.replaceWith(that.createLabel(click_label, gid, switchFunction, invertFunction));
                    // set and save label
                    that.saveAfterLabelChange(comment);
                }
                ;
                // here we can show a dialog (since this never happens while creating an item
                async function reviewStatusChange() {
                    var okButton = $(".ui-dialog-buttonpane button:contains('Pass')", _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.parent());
                    var failButton = $(".ui-dialog-buttonpane button:contains('Fail')", _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.parent());
                    if (!userCanDo) {
                        okButton.prop("disabled", true);
                        okButton.addClass("ui-state-disabled");
                        failButton.prop("disabled", true);
                        failButton.addClass("ui-state-disabled");
                        return;
                    }
                    var isOk = await drComment.getController().getValueAsync() !== "";
                    if (isOk) {
                        $.each($(".drcbcontrol"), function (idx, drcb) {
                            if (!$(drcb).data("new")) { // get the value directly from control
                                isOk = false;
                            }
                        });
                    }
                    if (isOk) {
                        okButton.prop("disabled", false);
                        okButton.removeClass("ui-state-disabled");
                    }
                    else {
                        okButton.prop("disabled", true);
                        okButton.addClass("ui-state-disabled");
                    }
                }
                _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.hide();
                _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.html("");
                _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.removeClass("dlg-no-scroll");
                _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.addClass("dlg-v-scroll");
                var settingsUI = $("<div>");
                settingsUI.append($("<h2>").html(review_job.reviewHelp));
                $.each(review_job.reviewDetails, function (idx, rd) {
                    if (rd.type == "signature") {
                        settingsUI.append($("<p style='margin:0px 20px 10px 0px;font-weight: bold;'>").html(rd.name));
                        // do not allow chrome to fill passwords (quite a hack)
                        let autoFill = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getCustomerSettingJSON("autoFillSettings", {});
                        that.canAutoFill = autoFill.allowAutoFill || autoFill.allowLabelSignAutoFill;
                        let form = $('<form>').appendTo(settingsUI);
                        let table = $('<div class="signatureInfo input-group" style="margin-top:12px;width:100%">').appendTo(form);
                        let name = $("<input autocomplete='off' type='text' class='signatureInfo form-control' placeholder='enter user id' style='padding:8px'>");
                        let pwd = $("<input type='" + (that.canAutoFill ? "password" : "text") + "' class='review_password form-control' placeholder='password' style='margin: 0px 20px 20px 0px; width: 200px;'>");
                        let pwdSpan = $("<span class='input-group-btn'>").append(pwd);
                        table.append(name);
                        table.append(pwdSpan);
                        pwd.on("change keyup paste", function () {
                            reviewStatusChange();
                        });
                        pwd.on("keyup paste", function () {
                            pwd.attr("type", "password");
                        });
                        // set user name and reset password (in case it is a not allowed auto fill)
                        that.initPasswordField(name, pwd);
                    }
                    else {
                        settingsUI.append($("<div class='drcbcontrol'>").checkBox({
                            controlState: _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.FormEdit,
                            canEdit: userCanDo,
                            fieldValue: "false",
                            help: rd.name,
                            valueChanged: async function (checked) {
                                var comment = await drComment.getController().getValueAsync() + "\n" + rd.name + " " + (checked ? "passed" : "failed");
                                drComment.getController().setValue(comment);
                                reviewStatusChange();
                            }
                        }));
                    }
                    settingsUI.append($("<p style='margin:-7px 20px 10px 26px'>").html(rd.help));
                });
                var drComment = $("<div id='designReviewComment'>").plainText({
                    controlState: _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.FormEdit,
                    canEdit: userCanDo,
                    help: review_job.commentHeading ? review_job.commentHeading : "Design Review Comment",
                    fieldValue: _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getComment(),
                    valueChanged: function () {
                        reviewStatusChange();
                    },
                    parameter: {
                        allowResize: true
                    }
                });
                settingsUI.append(drComment);
                _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.append(settingsUI);
                _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog({
                    autoOpen: true,
                    title: review_job.reviewName,
                    height: _globals__WEBPACK_IMPORTED_MODULE_0__.app.itemForm.height() * 0.9,
                    width: 730,
                    modal: true,
                    open: function () {
                        reviewStatusChange();
                    },
                    close: function () {
                    },
                    resizeStop: function () {
                    },
                    buttons: [{
                            text: 'Pass',
                            class: 'btnDoIt',
                            click: async function () {
                                if ($(".review_password", _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm).length) {
                                    let pwd = $(".review_password", _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm).val();
                                    _globals__WEBPACK_IMPORTED_MODULE_0__.app.checkPassword(pwd).done(function () {
                                        that.verifyRevisionTable(click_label, review_job.revisionTableName).then(async () => {
                                            setReviewResult(await drComment.getController().getValueAsync(), true);
                                            that.triggerLabelChanged(rememberBefore, that.currentLabelsOn);
                                        });
                                        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog("close");
                                    }).fail(function (jqxhr, textStatus, error) {
                                        _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.showError("Incorrect  password!", "");
                                    });
                                }
                                else {
                                    setReviewResult(await drComment.getController().getValueAsync(), true);
                                    that.triggerLabelChanged(rememberBefore, that.currentLabelsOn);
                                    _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog("close");
                                }
                            }
                        }, {
                            text: 'Fail',
                            class: 'btnDoIt2',
                            click: async function () {
                                setReviewResult(await drComment.getController().getValueAsync(), false);
                                that.triggerLabelChanged(rememberBefore, that.currentLabelsOn);
                                _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog("close");
                            }
                        }, {
                            text: 'Cancel',
                            class: 'btnCancelIt',
                            click: function () {
                                _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog("close");
                            }
                        }
                    ]
                });
            };
            if (that.isFilter && that.canEdit) {
                invertFunction = function (button) {
                    var click_label = button.data("label");
                    var click_gid = button.data("gid");
                    $.each(that.groups[click_gid].labelDef, function (idx, label) {
                        if (label.label === click_label) {
                            if (label.isSelected) {
                                label.isNegative = !label.isNegative;
                            }
                            else {
                                label.isSelected = true;
                                label.isNegative = true;
                            }
                        }
                    });
                    button.tooltip('hide');
                    button.replaceWith(that.createLabel(click_label, gid, switchFunction, invertFunction));
                    if (that.valueChanged) {
                        that.updateSelection();
                        that.valueChanged(that.currentLabelsOn);
                    }
                };
            }
            var btn = that.createLabel((label.isNegative ? "!" : "") + label.label, gid, switchFunction, invertFunction);
            // add button to group
            btnGroup.append(btn);
            // hide button if it should not be shown in create dialog
            if (that.mode === "item_create") {
                btn.hide();
            }
        }
        return btnGroup;
    }
    async verifyRevisionTable(label, revisionTableName) {
        let that = this;
        return new Promise(async function (resolve, reject) {
            if (!that.item) {
                // nothing to worry about - we are creating a new item
                resolve();
                return;
            }
            if (!revisionTableName) {
                // nothing to worry about - this is a normal label
                resolve();
                return;
            }
            let revisionTableField = this.getConfig().getFieldByName(that.category, revisionTableName);
            if (!revisionTableField) {
                // nothing to worry about - there is no revision table in this category
                that.logger.log("warn", `Label has revisionTableName '${revisionTableName}' defined but there is no such table in ${that.category}`);
                resolve();
                return;
            }
            let revisionColumn;
            if (!revisionTableField.parameterJson || !revisionTableField.parameterJson.columns) {
                // nothing to worry about - there is no columns in table in this category
                that.logger.log("warn", `Label has revisionTableName '${revisionTableName}' defined but there are no columns defined ${that.category}`);
                resolve();
                return;
            }
            for (let column of revisionTableField.parameterJson.columns) {
                if (column.editor == "revision") {
                    revisionColumn = column.field;
                }
            }
            if (!revisionColumn) {
                // nothing to worry about - there is no revision column in table
                that.logger.log("warn", `Label has revisionTableName '${revisionTableName}' defined but there is no revision column in table in ${that.category}`);
                resolve();
                return;
            }
            if (revisionTableField.fieldType != _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_2__.FieldDescriptions.Field_steplist) {
                that.logger.log("warn", `Label has revisionTableName '${revisionTableName}' defined but the field is not a table in ${that.category}`);
                resolve();
                return;
            }
            let revisionTableVal = await _globals__WEBPACK_IMPORTED_MODULE_0__.app.getFieldValueAsync(revisionTableField.id);
            let currentValue = that.getRevisionFromTable(revisionTableVal, revisionColumn);
            if (!currentValue) {
                // empty table
                _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.showConfirm(-1, {
                    title: `No revision defined in last row of table '${revisionTableName}'!`,
                    ok: "Set Label",
                    nok: "Cancel"
                }, () => {
                    resolve();
                }, () => {
                    reject();
                });
                return;
            }
            let empty = false;
            for (let column of revisionTableField.parameterJson.columns) {
                if (!that.getRevisionFromTable(revisionTableVal, column.field)) {
                    empty = true;
                }
            }
            if (empty) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.showConfirm(-1, {
                    title: `Last row of table '${revisionTableName} has empty cells'!`,
                    ok: "Set Label",
                    nok: "Cancel"
                }, () => {
                    $(".modal-backdrop").remove();
                    that.compareRevisions(currentValue, revisionTableField.id, revisionColumn, label).done(() => {
                        resolve();
                    }).fail(() => {
                        reject();
                    }).always(() => {
                        $(".modal-backdrop").remove();
                    });
                }, () => {
                    reject();
                });
            }
            else {
                that.compareRevisions(currentValue, revisionTableField.id, revisionColumn, label).done(() => {
                    resolve();
                }).fail(() => {
                    reject();
                }).always(() => {
                    $(".modal-backdrop").remove();
                });
            }
            return;
        });
    }
    compareRevisions(currentRevision, versionTableField, revisionTableColumn, label) {
        let res = $.Deferred();
        let that = this;
        this.getLastTimeLabelWasSet(that.item.id, label, 0).then((lastRevision) => {
            if (!lastRevision) {
                // it was never set ... no problem
                res.resolve();
            }
            else {
                _globals__WEBPACK_IMPORTED_MODULE_0__.app.getItemAsync(that.item.id, lastRevision).done(function (lastSetVersion) {
                    let lv = lastSetVersion[versionTableField];
                    let fieldValue = JSON.parse(lv ? lv : "{}");
                    let previousRevision = fieldValue ? that.getRevisionFromTable(JSON.stringify(fieldValue), revisionTableColumn) : "";
                    if (currentRevision != previousRevision) {
                        // we assume all is good...
                        res.resolve(currentRevision);
                    }
                    else {
                        _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.showConfirm(-1, { title: `The current revision '${currentRevision}' is the same as it was when the label '${label}' was set the last time!`, ok: "Set Label", nok: "Cancel" }, () => { res.resolve(); }, () => { res.reject(); });
                    }
                }).fail(function (error) {
                    res.reject(error);
                });
            }
        });
        return res;
    }
    getRevisionFromTable(revisionTableVal, revisionColumn) {
        let revisionTable = (revisionTableVal ? JSON.parse(revisionTableVal) : []);
        if (!revisionTable.length) {
            // empty table
            return "";
        }
        return revisionTable[revisionTable.length - 1][revisionColumn];
    }
    // get a list of users / user groups from a drop down field
    async getUsersFromField(fieldName) {
        let cat = _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.Item.parseRef(_globals__WEBPACK_IMPORTED_MODULE_0__.app.getCurrentItemId()).type;
        let field = this.getConfig().getFieldByName(cat, fieldName);
        if (!field) {
            this.logger.log("warning", `the field ${fieldName} does not exist in category ${cat}. Cannot get users from that field.`);
            return [];
        }
        let val = await _globals__WEBPACK_IMPORTED_MODULE_0__.app.getFieldValueAsync(field.id);
        return val.split(",");
    }
    initPasswordField(name, pwd) {
        name.val(_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser() + (this.canAutoFill ? "" : " ")); // the " "  makes sure the password is not filled when loading
        name.attr("readonly", "readonly");
        if (this.canAutoFill)
            return;
        pwd.val("");
    }
    // move all buttons into one dropdown (for filter)
    add_to_global_dropdown(gid, btnGroup) {
        let that = this;
        var globalFilterMenu = this.ui.find(".globalFilterMenu");
        if (globalFilterMenu.length === 0) {
            var somethingSelected = this.currentLabelsOn.length > 0 ? "Filter" : "Filter";
            var menuGroup = $('<div id="setFilter"  class="btn-group dropdown">');
            var menuBtn = $('<button class="btn btn-default btn-label dropdown-toggle filterMenu" data-toggle="dropdown">' + somethingSelected + '&nbsp;<span class="caret"></span></button>');
            var globalFilterMenu = $('<ul class="dropdown-menu globalFilterMenu" style="max-height:' + ($(window).height() - 100) + 'px" role="menu">');
            menuGroup.append(menuBtn).append(globalFilterMenu);
            this.ui.append(menuGroup);
            if (this.currentLabelsOn.length > 0) {
                var reset = $('<a href="javascript:void(0)" id="resetFilter">Remove all filter</a>');
                reset.click(function () {
                    that.valueChanged([]);
                });
                globalFilterMenu.append($("<li>").append(reset));
            }
        }
        // create menu section:
        // add line unless this is the first thing in the menu
        if ($(".globalFilterMenu li").length > 0) {
            globalFilterMenu.append("<li class='limenuLine'><span class='menuLine'></span></li>");
        }
        // add group name if there is one
        if (this.groups[gid].filterMenu && this.groups[gid].filterMenu.displayName) {
            let lastMenuHeadings = $(".menuHeading", globalFilterMenu);
            let lastIsSame = lastMenuHeadings.length && $(lastMenuHeadings[lastMenuHeadings.length - 1]).text() == this.groups[gid].filterMenu.displayName;
            if (!lastIsSame) {
                globalFilterMenu.append("<li><span class='menuHeading'>" + this.groups[gid].filterMenu.displayName + "</span></li>");
            }
        }
        // move all buttons in a dropdown list with buttons unless they are selected
        btnGroup.find("button").each(function (idx, btn) {
            var label = $(btn).data("label");
            if (that.currentLabelsOn.indexOf(("!" + label)) === -1 && that.currentLabelsOn.indexOf(label) === -1) {
                globalFilterMenu.append($("<li class='btnline'>").append($('<a href="javascript:void(0)">').append(btn)));
                var nf = $("<span class='negativeFilter btn-link'  title data-original-title='filter by label not set' >not</span>");
                $(btn).parent().prepend(nf);
                nf.click(function (e) {
                    var label = $(e.delegateTarget).data("label");
                    that.currentLabelsOn.push("!" + label);
                    that.valueChanged(that.currentLabelsOn);
                }).data("label", label)
                    .tooltip({ placement: "bottom", container: "body" });
            }
        });
        // move filter select dropdown after btn group
        $("#setFilter").insertAfter(btnGroup);
    }
    // move all labels of one group into a dropdown (rather than simple buttons)
    create_dropdown_group(gid, btnGroup) {
        let that = this;
        var somethingSelected = false;
        $.each(this.groups[gid].labelDef, function (idx, label) {
            somethingSelected = somethingSelected || that.currentLabelsOn.indexOf(("!" + label.label)) > -1 || that.currentLabelsOn.indexOf(label.label) > -1;
        });
        // modify button group to a dropdown button group
        btnGroup.addClass("dropdown");
        //   btnGroup.removeClass("labelTools");
        // move all buttons in a dropdown list with buttons
        var btnUl = $('<ul class="dropdown-menu globalFilterMenu" role="menu">');
        btnGroup.find("button").each(function (idx, btn) {
            btnUl.append($("<li class='filterGroupDD'>").append(btn));
            if (that.currentLabelsOn.indexOf(("!" + $(btn).data("label"))) === -1) {
                var nf = $("<span class='negativeFilter'  title data-original-title='filter by label not set' >not</span>");
                $(btn).parent().prepend(nf);
                nf.click(function (e) {
                    $(".tooltip").remove();
                    var alreadySet = that.currentLabelsOn.indexOf($(e.delegateTarget).data("label"));
                    if (alreadySet > -1) {
                        that.currentLabelsOn.splice(alreadySet, 1);
                    }
                    var label = $(e.delegateTarget).data("label");
                    that.currentLabelsOn.push("!" + label);
                    that.valueChanged(that.currentLabelsOn);
                }).data("label", $(btn).data("label"))
                    .tooltip({ placement: "bottom", container: "body" });
            }
        });
        // create menu button
        var menuDefinition = somethingSelected ? this.groups[gid].filterMenu.on : this.groups[gid].filterMenu.off;
        if (!menuDefinition) {
            menuDefinition = {
                foreground: "black",
                background: "transparent",
                displayName: this.groups[gid].filterMenu.displayName,
                tooltip: ""
            };
        }
        var i = "";
        if (menuDefinition.icon) {
            i = "<i class='fal fa-" + menuDefinition.icon + "' style='margin-right:6px'></i>";
        }
        var tt = "";
        if (menuDefinition.tooltip) {
            tt = " title data-original-title='" + menuDefinition.tooltip + "' ";
        }
        var btn = $("<button class='btn btn-default btn-label dropdown-toggle' data-toggle='dropdown' " + tt + ">" + i + menuDefinition.displayName + "&nbsp;<span class='caret'></span></button>");
        btn.css("background-color", menuDefinition.background).css("color", menuDefinition.foreground);
        btn.data("gid", gid);
        // append menu button
        btnGroup.append(btn);
        // append menu options
        btnGroup.append(btnUl);
        btn.tooltip({ placement: "bottom" });
    }
    // gets selection from all groups
    updateSelection() {
        this.currentLabelsOn = [];
        for (var gid = 0; gid < this.groups.length; gid++) {
            for (var lid = 0; lid < this.groups[gid].labelDef.length; lid++) {
                if (this.groups[gid].labelDef[lid].isSelected) {
                    if (this.groups[gid].labelDef[lid].isNegative) {
                        this.currentLabelsOn.push("!" + this.groups[gid].labelDef[lid].label);
                    }
                    else {
                        this.currentLabelsOn.push(this.groups[gid].labelDef[lid].label);
                    }
                }
            }
        }
    }
    // paint one 'normal' label button
    createButton(label, gid, name, foreground, background, icon, onClick, onDblClick, extraClass) {
        let that = this;
        var i = "";
        if (icon) {
            i = "<i class='fal fa-" + icon + "' style='" + (name ? "margin-right:6px" : "") + "'></i>";
        }
        var btn = $("<button tabindex='-1' class='btn btn-default btn-label " + extraClass + "' " + (this.canEdit ? "" : "disabled") + ">" + i + name + "</button>");
        btn.css("background-color", background).css("color", foreground);
        btn.data("label", label);
        btn.data("gid", gid);
        btn.click(function (e) {
            $(".tooltip").remove();
            var buttonClicked = $(e.delegateTarget);
            // make sure (drop down menus don't close
            if (onDblClick) {
                if (e.preventDefault)
                    e.preventDefault();
                if (e.stopPropagation)
                    e.stopPropagation();
                that.dbClickCounter++;
                if (that.dbClickCounter === 1) {
                    that.dbClickTimer = window.setTimeout(function () {
                        // after 700 ms: reset counter and make the click
                        that.dbClickCounter = 0;
                        if (onClick) {
                            onClick(buttonClicked);
                        }
                    }, 700);
                }
                else {
                    // dbl click...
                    clearTimeout(that.dbClickTimer);
                    that.dbClickCounter = 0;
                    onDblClick(buttonClicked);
                }
            }
            else if (onClick) {
                onClick(buttonClicked);
            }
        });
        return btn;
    }
    // create one 'normal' label as button
    createLabel(labelId, gid, onClick, onDblClick) {
        var isNegative = false; // set true for negative project filters
        if (labelId.indexOf("!") !== -1) {
            labelId = labelId.replace("!", "");
            isNegative = true;
        }
        var labelList = this.getLabelList();
        var labelDef;
        $.each(this.groups[gid].labelDef, function (idx, ll) {
            if (ll.label === labelId) {
                labelDef = ll;
            }
        });
        if (!labelDef) {
            // the label does not exist (anymore): ignore
            return $("");
        }
        if (this.mode != "project_filter" && labelDef.editors && labelDef.editors.indexOf(_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser()) === -1) {
            onClick = function () { };
            onDblClick = function () { };
        }
        // figure out if label/filter should be shown as on
        var isOn = labelDef.isSelected;
        if (!isOn && this.mode === "item_print") {
            // labels is off - so it should not be shown in print mode
            return $("");
        }
        // legacy logic to retrieve names/colors/icons
        var displayName = labelDef.displayName ? labelDef.displayName : "";
        var foreground = isOn ? "white" : labelDef.color; // default: white on color is on
        var background = isOn ? labelDef.color : "transparent";
        var tooltip = labelDef.toolTipFilterOn ? labelDef.toolTipFilterOn : "";
        var icon;
        // new logic
        if (labelDef.style) {
            let stylefl = this.isFilter ? labelDef.style.filter : labelDef.style.label;
            if (stylefl) {
                let style = isOn ? stylefl.on : stylefl.off;
                if (style) {
                    displayName = style.displayName ? style.displayName : displayName; // overwrite name
                    foreground = style.foreground ? style.foreground : foreground;
                    background = style.background ? style.background : background;
                    icon = style.icon ? style.icon : icon;
                    tooltip = style.tooltip ? style.tooltip : tooltip;
                }
            }
        }
        if (labelDef && labelDef.label) {
            if (tooltip) {
                tooltip = labelDef.label + ": " + tooltip;
            }
            else {
                tooltip = labelDef.label;
            }
        }
        let btn = null;
        // create the button
        if (icon || displayName) {
            if (isNegative) {
                displayName = displayName ? ("NOT " + displayName) : "NOT";
            }
            var statusClass = (isNegative ? "labelIsNot " : "") + (isOn ? "labelIsOn " : "");
            if (this.mode == "item_history") {
                // in history render a simplified version of labels to be more easily comparable
                btn = this.createButton(labelId, gid, displayName + (isOn ? " (on)" : " (off)"), "", "", icon, onClick, onDblClick, "labelInHistory");
            }
            else {
                btn = this.createButton(labelId, gid, displayName, foreground, background, icon, onClick, onDblClick, statusClass);
            }
            if (tooltip) {
                btn.tooltip({ title: tooltip, placement: "bottom", container: "body" });
            }
        }
        if (btn.css("background") == "transparent" && btn.css("color") == "rgb(0, 0, 0)") {
            btn.css("color", "var(--Accent)");
        }
        return btn;
    }
    addChip(gid) {
        let that = this;
        var btnGroup = $('<div class="btn-group labelTools chip">');
        this.ui.append(btnGroup);
        $.each(this.groups[gid].labelDef, function (idx, label) {
            label.isNegative = that.currentLabelsOn.indexOf(("!" + label.label)) > -1;
            label.isSelected = label.isNegative || that.currentLabelsOn.indexOf(label.label) > -1;
            if (label.isSelected) {
                var btn = that.createLabel((label.isNegative ? "!" : "") + label.label, gid, () => { }, () => { });
                btn.append($("<a class='fal fa-times' />").click(() => {
                    //Remove filter
                    let currentFilter = _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.LabelTools.getFilter().split(",");
                    let index = currentFilter.indexOf((label.isNegative ? "!" : "") + label.label);
                    if (index > -1) {
                        currentFilter = currentFilter.filter((value, i) => i != index);
                        _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.LabelTools.setFilter(currentFilter);
                        $("#filterDialog").remove();
                        _globals__WEBPACK_IMPORTED_MODULE_0__.app.canNavigateAwayAsync().done(function () {
                            $(".tooltip").remove();
                            $(".itemFilterTool").hide();
                            _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.LabelTools.setFilter(currentFilter);
                            _globals__WEBPACK_IMPORTED_MODULE_0__.app.loadProject(_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getProject(), _globals__WEBPACK_IMPORTED_MODULE_0__.app.getCurrentItemId()).then(() => {
                                if (currentFilter.length > 0) {
                                    $(".itemFilterTool").show();
                                    new LabelSwitches($("#currentFilterContainer"), false, null, currentFilter, "filter_chip", (sel) => {
                                    });
                                }
                                else {
                                    $(".itemFilterTool").hide();
                                }
                                _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.toggleFilters(true);
                            });
                        }).fail(function () {
                            _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.showError("Filter was not activated.", "To activate reload project after saving the item!");
                        });
                    }
                }));
                btnGroup.append(btn);
            }
        });
        return btnGroup;
    }
}


/***/ }),
/* 38 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LabelTools: () => (/* binding */ LabelTools)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _LabelManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(39);



class LabelTools extends _LabelManager__WEBPACK_IMPORTED_MODULE_1__.LabelManager {
    constructor(logger, json) {
        super(logger, json, () => _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig);
    }
    async getLastTimeLabelWasSet(itemId, label, beforeRevision) {
        const labelHistory = await _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.getProject("labelhistory?itemRef=" + itemId);
        return this.decipherLastTimeLabelWasSet(labelHistory, itemId, label, beforeRevision);
    }
}


/***/ }),
/* 39 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LabelManager: () => (/* binding */ LabelManager)
/* harmony export */ });

class LabelManager {
    constructor(logger, json, getConfig) {
        this.logger = logger;
        this.json = json;
        this.getConfig = getConfig;
        this.ignoreProjectFilter = false;
        this.activeFilter = "";
    }
    getFilterColor() {
        var labels = this.getConfig().getLabelsConfig();
        if (!labels || !labels.filterBackgroundColor) {
            return null;
        }
        return labels.filterBackgroundColor;
    }
    ;
    // return list of selected filters as , separated list
    getFilter() {
        if (this.ignoreProjectFilter) {
            return "";
        }
        var filters = [];
        var labelsAll = this.getLabelNames();
        if (labelsAll.length === 0) {
            return "";
        }
        var stored = this.activeFilter;
        if (!stored || stored === "") {
            return "";
        }
        // only return filters which (still) exist 
        var cs = stored.split(",");
        for (let sf of cs) {
            if (labelsAll.indexOf(sf.replace("!", "")) > -1) {
                filters.push(sf);
            }
        }
        return filters.length > 0 ? filters.join(",") : "";
    }
    ;
    getDisplayName(labelId) {
        let labels = this.getLabelList();
        let displayName = "";
        for (let label of labels) {
            if (label.label == labelId) {
                displayName = label.displayName;
                if (label.style.label.on.displayName) {
                    displayName = label.style.label.on.displayName;
                }
            }
        }
        return displayName;
    }
    getFilterName(labelId) {
        let labels = this.getLabelList();
        let displayName = "";
        for (let label of labels) {
            if (label.label == labelId) {
                displayName = label.displayName;
                if (label.style && label.style.filter && label.style && label.style.filter.on && label.style.filter.on.displayName) {
                    displayName = label.style.filter.on.displayName;
                }
            }
        }
        return displayName;
    }
    // return the existing labels for the passed types (or all labels if no type is passed)
    getLabelDefinitions(categories) {
        var all = this.getLabelList();
        if (!categories || categories.length === 0) {
            return all;
        }
        let relevant = [];
        let relevantLabel = [];
        for (let label of all) {
            for (let category of label.categories) {
                if (categories.indexOf(category) > -1 && relevant.indexOf(label.label) === -1) {
                    relevant.push(label.label);
                    relevantLabel.push(label);
                }
            }
        }
        return relevantLabel;
    }
    ;
    setFilter(filter) {
        this.activeFilter = filter.join(",");
    }
    ;
    /* clean up the set labels: in case a set label is in review or design review group,
        it is possible that the label is removed from the list of set labels / replaced by another label in the group.

        This depends on the groups's setting.

        @param addXor If no label is set in a xor group, the default can be automatically set.
    
        @return the list of labels after the review groups have been reset
    
     */
    resetReviewLabels(labelIds, category, addXor) {
        let that = this;
        let cleaned = [];
        // get label groups
        let groups = this.getLabelGroups();
        let labelList = this.getLabelList();
        // copy all lables besides the review labels
        for (let label of labelIds) {
            let isReviewLabel = false;
            for (var gid = 0; gid < groups.length; gid++) {
                if (((groups[gid].selection === "review" && this.json.isTrue(groups[gid].reset)) ||
                    (groups[gid].selection === "design_review" && !this.json.isFalse(groups[gid].reset))) &&
                    groups[gid].labels.indexOf(label) !== -1) {
                    isReviewLabel = true;
                }
            }
            if (!isReviewLabel) {
                cleaned.push(label);
            }
        }
        // add all default review states - if no other label is set in the review group
        for (var gid = 0; gid < groups.length; gid++) {
            if ((groups[gid].selection === "review" ||
                (addXor && groups[gid].selection === "xor")) &&
                groups[gid].default) {
                var groupIsSet = false;
                for (let cleanLabel of cleaned) {
                    if (groups[gid].labels.indexOf(cleanLabel) !== -1) {
                        groupIsSet = true;
                    }
                }
                if (!groupIsSet) {
                    // verify if label actually is defined for group...
                    var defaultIsForType = false;
                    for (let label of labelList) {
                        if (groups[gid].default === label.label && label.categories.indexOf(category) !== -1) {
                            defaultIsForType = true;
                        }
                    }
                    if (defaultIsForType) {
                        cleaned.push(groups[gid].default);
                    }
                }
            }
        }
        return cleaned;
    }
    ;
    /* return the list of default labels for a category */
    getDefaultLabels(category) {
        let that = this;
        // get current positive filters
        let currentFilter = this.getFilter();
        let posFilter = [];
        const filterItems = currentFilter.split(",");
        for (let f of filterItems) {
            if (f.indexOf("!") !== 0) {
                posFilter.push(f);
            }
        }
        // each label which is not in a xor/review group can be default
        let defaultLabels = [];
        let labelList = this.getLabelList();
        for (let label of labelList) {
            let group = that.getGroupOfLabel(label.label);
            if (group && label.categories.indexOf(category) !== -1 && // label must exist for cateogry type
                (group.selection !== 'xor' && group.selection !== 'review') && // it must not be in a xor or review group
                (this.json.isTrue(label.default) || // the default value must be set to on OR 
                    (label.default === "filter" && posFilter.indexOf(label.label) !== -1))) { // the default must be filter and it must be set in the current filter
                defaultLabels.push(label.label);
            }
        }
        return this.resetReviewLabels(defaultLabels, category, true);
    }
    ;
    hasLabels() {
        return (this.getLabelList().length > 0);
    }
    ;
    // implement logic to set labels. 
    setLabels(oldLabelIds, labels) {
        let that = this;
        let old = oldLabelIds ? oldLabelIds.split(",") : [];
        for (let label of labels) {
            old = that.setLabel(old, label);
        }
        return old.join(",");
    }
    // implement logic to set a label. 
    // This depends on the type of group: for xor / review labels other group members must be reset
    setLabel(oldLabelIds, label) {
        let labelIds = this.json.clone(oldLabelIds);
        if (labelIds.indexOf(label) !== -1) {
            // label already set - ignore
            return labelIds;
        }
        let group = this.getGroupOfLabel(label);
        if (!group || group.selection == "or") {
            // simple label without group / or group: just set it
            labelIds.push(label);
        }
        else if (group.selection == "xor" || group.selection == "review") {
            // remove all labels from group
            for (let otherLabel of group.labels) {
                labelIds = labelIds.filter(function (existingLabel) {
                    return existingLabel != otherLabel;
                });
            }
            // set the label
            labelIds.push(label);
        }
        else {
            this.logger.log("warn", "setLabel: unkown group type of label: '" + label + "'");
        }
        return labelIds;
    }
    ;
    // return the last time a label was set on a given item before a revision (=0 if any)
    decipherLastTimeLabelWasSet(labelHistory, itemId, label, beforeRevision) {
        let itemHistory = labelHistory.entries.filter(entry => entry.itemRef == itemId);
        if (itemHistory.length > 0) {
            let history = itemHistory[0].labels.filter(l => l.label == label);
            if (history.length > 0 && history[0].set.length > 0) {
                // ignore all sets after the beforeRevision  (unless 0 is passed)
                let sets = history[0].set.filter(set => !beforeRevision || set.version < beforeRevision);
                return sets[sets.length - 1].version;
            }
        }
        // label was never set all good
        return 0;
    }
    // implement logic to reset a label. 
    // This depends on the type of group: for xor / review labels a default label might need to be set
    unsetLabel(oldLabelIds, label) {
        let labelIds = this.json.clone(oldLabelIds);
        if (labelIds.indexOf(label) === -1) {
            // label is not actually set - ignore
            return labelIds;
        }
        let group = this.getGroupOfLabel(label);
        // remove the label
        labelIds = labelIds.filter(function (existingLabel) {
            return existingLabel != label;
        });
        if (!group || group.selection == "or") {
            // simple label without group / or group - nothing else to do
        }
        else if (group.selection == "xor" || group.selection == "review") {
            if (group.default) {
                labelIds.push(group.default);
            }
        }
        else {
            this.logger.log("warn", "unsetLabel: unkown group type of label: '" + label + "'");
        }
        return labelIds;
    }
    ;
    compareLabels(before, after) {
        let result = {
            changed: false,
            added: [],
            removed: [],
            delta: ""
        };
        before = before || [];
        after = after || [];
        let delta = [];
        for (var idx = 0; idx < after.length; idx++) {
            if (before.indexOf(after[idx]) === -1) {
                result.added.push(after[idx]);
                delta.push(after[idx]);
            }
        }
        for (var idx = 0; idx < before.length; idx++) {
            if (after.indexOf(before[idx]) === -1) {
                result.removed.push(before[idx]);
                delta.push("-" + before[idx]);
            }
        }
        result.delta = delta.join(",");
        result.changed = result.added.length + result.removed.length > 0;
        return result;
    }
    getLabelList() {
        let labelsAll = this.getConfig().getSetting("labels");
        if (!labelsAll) {
            return [];
        }
        let labelsJson = this.json.fromString(labelsAll);
        if (labelsJson.status !== "ok" || !labelsJson.value.labels) {
            return [];
        }
        return labelsJson.value.labels;
    }
    getLabelNames() {
        let labelList = this.getLabelList();
        let allLabels = [];
        for (let label of labelList) {
            allLabels.push(label.label);
        }
        return allLabels;
    }
    getDesignReviews() {
        let labelsAll = this.getConfig().getSetting("labels");
        if (!labelsAll) {
            return [];
        }
        var labelsJson = this.json.fromString(labelsAll);
        if (labelsJson.status !== "ok") {
            return [];
        }
        return labelsJson.value.design_reviews ? labelsJson.value.design_reviews : [];
    }
    getDesignReview(labelId) {
        var dr = this.getDesignReviews();
        for (var idx = 0; idx < dr.length; idx++) {
            if (dr[idx].label === labelId) {
                return dr[idx];
            }
        }
        return null;
    }
    isFiltered(category, labels) {
        let filters = this.getFilter();
        if (!filters)
            return false; // no filters -> not filtered out 
        let isFilteredOut = false;
        // there are some filters so lets check
        let labelsSet = labels ? labels.split(",") : [];
        let labelsForItem = this.getLabelDefinitions([category]).map(function (labelDef) { return labelDef.label; });
        const filtersArray = filters.split(",");
        filtersArray.forEach((filter) => {
            let label = filter.replace("!", ""); // to get rid of negation of filters
            if (labelsForItem.indexOf(label) == -1)
                return; // irrelevant, try next filter
            if (label != filter) { // negative filter
                isFilteredOut = isFilteredOut || labelsSet.indexOf(label) != -1;
            }
            else {
                isFilteredOut = isFilteredOut || labelsSet.indexOf(label) == -1;
            }
        });
        return isFilteredOut;
    }
    getLabelsOfLabelGroupsType(labelGroupType) {
        if (!labelGroupType) {
            return [];
        }
        let labels = [];
        for (let lg of this.getLabelGroups()) {
            if (lg.groupType == labelGroupType) {
                labels = labels.concat(lg.labels);
            }
        }
        for (let lg of this.getDesignReviews()) {
            if (lg.groupType == labelGroupType) {
                labels.push(lg.label);
            }
        }
        return labels;
    }
    getLabelGroups(category) {
        let labelsAll = this.getConfig().getSetting("labels");
        if (!labelsAll) {
            return [];
        }
        let labelsJson = this.json.fromString(labelsAll);
        if (labelsJson.status !== "ok") {
            return [];
        }
        let labelList = this.getLabelList();
        let groups = labelsJson.value.groups ? labelsJson.value.groups : [];
        let design_reviews = this.getDesignReviews();
        // by default all labels end up in the last group
        for (var gid = 0; gid < groups.length; gid++) {
            // prepare to add label definitions of actual labels to display
            groups[gid].labelDef = [];
            // by default all filters are in "or" mode
            if (!groups[gid].filterSelection) {
                groups[gid].filterSelection = "or";
            }
        }
        // now add actual labels to display to each group, any label should be displayed at most once
        labelList.forEach((label) => {
            if (category && label.categories.indexOf(category) === -1) {
                // this is an item, and label does not exist for item
                return;
            }
            // check if label is in group
            for (var gid = 0; gid < groups.length; gid++) {
                for (var lid = 0; lid < groups[gid].labels.length; lid++) {
                    if (groups[gid].labels[lid] === label.label) {
                        groups[gid].labelDef.push(label);
                        return;
                    }
                }
            }
            // check if label is in review
            for (var gid = 0; gid < design_reviews.length; gid++) {
                if (design_reviews[gid].label === label.label) {
                    groups.push({
                        selection: "design_review", labels: [label.label], filterSelection: "or", labelDef: [label], reset: design_reviews[gid].reset,
                        filterMenu: design_reviews[gid].filterMenu
                    });
                    return;
                }
            }
            // create a new group
            groups.push({ virtualGroup: true, selection: "or", labels: [label.label], filterSelection: "or", labelDef: [label] });
        });
        return groups;
    }
    // returns the group of a label
    getGroupOfLabel(labelID) {
        let groups = this.getLabelGroups();
        for (var gid = 0; gid < groups.length; gid++) {
            if (groups[gid].labels.indexOf(labelID) !== -1) {
                return groups[gid];
            }
        }
        return null;
    }
}
LabelManager.timeWarpLabel = "_timewarp_";


/***/ }),
/* 40 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ViewModeSelector: () => (/* binding */ ViewModeSelector)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18);



// this function manages the display style selection of the tree
class ViewModeSelector {
    constructor(panel) {
        var _a;
        this.panel = panel;
        this.isMainTree = panel.settings.canSelectItems;
        this.searchVizModes = [
            // uid: a unique id used by selenium tests...
            // icon: icon to show
            // text: text in drop down
            // maintree: whether available in main tree,
            // asList: whether to show as list
            // hide: whether to hide elements which don't match
            // expand: whether to expand tree
            {
                uid: "0", icon: "search_dimtree.svg", text: "grey out mismatches",
                mainTree: true, asList: false, hide: false, check: false, expand: false
            },
            {
                uid: "1", icon: "search_expanddimtree.svg", text: "grey out mismatches and expand tree",
                mainTree: true, asList: false, hide: false, check: false, expand: true
            },
            {
                uid: "2", icon: "search_hidetree.svg", text: "hide mismatches",
                mainTree: true, asList: false, hide: true, check: false, expand: false
            },
            {
                uid: "3", icon: "search_expandtree.svg", text: "hide mismatches and expand tree",
                mainTree: true, asList: false, hide: true, check: false, expand: true
            }
            //    ,{ icon:"search_checklist.png", text:"select in list",   mainTree:false,   asList:true,  hide:true,    check:true , expand:false}
            //   ,{ icon:"search_checktree.png", text:"select in tree",   mainTree:false,   asList:false, hide:false,   check:true, expand:false }
        ];
        if (!this.selectFoldersOnly()) {
            this.searchVizModes.push({
                uid: "4", icon: "search_list.svg", text: "show as list",
                mainTree: true, asList: true, hide: true, check: false, expand: false
            });
        }
        if ((_a = this.panel.settings.isConfigSearch) !== null && _a !== void 0 ? _a : false) {
            this.searchVizModes = this.searchVizModes.filter((i) => { return i.uid === "1"; });
        }
    }
    selectFoldersOnly() {
        return !!(this.panel && this.panel.settings && (this.panel.settings.selectMode == _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__.SelectMode.singleFolder || this.panel.settings.selectMode == _ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__.SelectMode.folders));
    }
    getVizModeControl(onChange) {
        let that = this;
        let lastMode = this.getMode();
        var current = this.searchVizModes[lastMode];
        var btn_grp = $('<div class="searchVizMode" style="">');
        this.btn = $('<div data-cy="searchMode"" type="button" title="" data-original-title="Tree search filter mode" data-toggle="dropdown" class=" earchVizMode btn btn-stree btn-sm dropdown-toggle">');
        this.img = $('<img style="height:24px; margin-left: 0px;" src="' + _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.matrixBaseUrl + '/img/' + current.icon + '" />');
        this.btn.append(`<div class="btnContent"> <img style="margin-left: -6px;" src="${_globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.matrixBaseUrl + '/img/' + current.icon}" />
                                   <span style="padding-left:10px">${current.text}<span></div>`);
        this.btn.append('<span style="margin-left: 0px;"  class="caret">');
        btn_grp.append(this.btn);
        this.btn.data("uid", current.uid);
        this.setEnabled(false);
        var ul = $(' <ul class="dropdown-menu dropdown-menu-sub" role="menu"> ');
        for (var idx = 0; idx < this.searchVizModes.length; idx++) {
            if (!this.isMainTree || this.searchVizModes[idx].mainTree) {
                var img_src = _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.matrixBaseUrl + '/img/' + this.searchVizModes[idx].icon;
                var li = $(`<li data-cy="${this.searchVizModes[idx].text}"  title="${this.searchVizModes[idx].text}">
                        <a href="javascript:void(0)">
                            <img style="margin-left: -6px;" src="${img_src}" />
                            <span style="padding-left:10px">${this.searchVizModes[idx].text}<span>
                        </a>
                    </li>`);
                ul.append(li);
                li.click((event) => {
                    var selIdx = $(event.delegateTarget).data("lidx");
                    var imgLink = _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.matrixBaseUrl + '/img/' + this.searchVizModes[selIdx].icon;
                    that.btn.data("uid", $(event.delegateTarget).data("uid"));
                    that.btn.find(".btnContent").html(`<img style="margin-left: -6px;" src="${imgLink}" />
                            <span style="padding-left:10px">${this.searchVizModes[selIdx].text}<span>`);
                    if (that.panel.settings.isConfigSearch == undefined || that.panel.settings.isConfigSearch == false) {
                        that.setMode(selIdx);
                    }
                    onChange();
                }).data("lidx", idx).data("uid", this.searchVizModes[idx].uid).data("img_src", img_src);
            }
        }
        btn_grp.append(ul);
        return btn_grp;
    }
    // function to grey out button (in case nothing is in search bar)
    setEnabled(enabled) {
        $("img", this.btn).css("opacity", enabled ? 1 : 0.3);
    }
    showAsList() {
        return this.searchVizModes[this.getMode()].asList;
    }
    hideMismatches() {
        return this.searchVizModes[this.getMode()].hide;
    }
    isExpandTree() {
        return this.searchVizModes[this.getMode()].expand;
    }
    // rememebered last filter
    getMode() {
        var svm = localStorage.getItem('searchFilter' + (this.isMainTree ? "Select" : "Main"));
        if (svm) {
            let option = parseInt(svm);
            return option >= this.searchVizModes.length ? 0 : option;
        }
        else {
            return 0; // default dimmable tree
        }
    }
    // remember last filter method
    setMode(mode) {
        localStorage.setItem('searchFilter' + (this.isMainTree ? "Select" : "Main"), mode.toString());
    }
}


/***/ }),
/* 41 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NotificationList: () => (/* binding */ NotificationList),
/* harmony export */   Notifications: () => (/* binding */ Notifications),
/* harmony export */   initialize: () => (/* binding */ initialize)
/* harmony export */ });
/* harmony import */ var _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);
/* harmony import */ var _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _common_UI_MainTree_MainTree__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(30);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _ProjectSettings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(42);
/* harmony import */ var _common_matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(2);
/* harmony import */ var _common_UI_Components__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(16);
/* harmony import */ var _common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(43);
//Import
/// <reference types="matrixrequirements-type-declarations" />











// TODO: This is not a plugin since there are places in the code which refer to the class statically.
// Integrate it into businesslogic.
class Notifications {
    constructor() {
        this.projectCount = null;
        this.isDefault = true;
        this.previousNotificationsIds = [];
        this.addFancyTreeNotificationCounterPlugin();
        this.watchActivity();
    }
    onUpdate(ui, config, context) {
    }
    init() {
        let that = this;
        $().ready(() => {
            if (_globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession && _globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.serverConfig) {
                let all = _globals__WEBPACK_IMPORTED_MODULE_3__.restConnection.getServer("all/todo").done((result) => {
                    that.setPreviousNotificationsIds(result.todos.map((o) => { return o.todoId; }));
                });
            }
        });
    }
    setPreviousNotificationsIds(notifIds) {
        localStorage.setItem("previousNotificationsIds", JSON.stringify(notifIds));
    }
    getPreviousNotificationsIds() {
        let notif = [];
        let notifAsString = localStorage.getItem("previousNotificationsIds");
        if (notifAsString != undefined) {
            let parseNotif = JSON.parse(notifAsString);
            if (parseNotif != undefined) {
                return parseNotif;
            }
        }
        return notif;
    }
    initItem(item, jui) {
        if (!this.isEnabled()) {
            return;
        }
        this._item = item;
        if (!this.projectCount) {
            this.projectCount = {};
            this.countRec(_globals__WEBPACK_IMPORTED_MODULE_3__.app.getTree());
        }
    }
    initServerSettings() {
    }
    initProject() {
        this.notificationConfig = _globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getCustomerSettingJSON(_ProjectSettings__WEBPACK_IMPORTED_MODULE_4__.notificationSetting, _ProjectSettings__WEBPACK_IMPORTED_MODULE_4__.defaultNotificationConfig);
        _common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_7__.NotificationsBL.NoticationCache.setEnabled(this.isEnabled());
        if (!this.isEnabled()) {
            return;
        }
        this.updateProjectMenu();
        this.init();
        this.projectCount = null;
    }
    isEnabled() {
        return this.notificationConfig && this.notificationConfig.enabled;
    }
    getProjectPagesAsync() {
        return new Promise((resolve, reject) => {
            let pages = [];
            let that = this;
            if (this.isEnabled() && !_globals__WEBPACK_IMPORTED_MODULE_3__.globalMatrix.ItemConfig.getTimeWarp()) {
                pages.push({ id: "NOTIFICATION", title: "My Notifications", folder: "MYWORK", order: 2000, icon: "fal fa-bell", usesFilters: false,
                    render: async (options) => that.renderNotificationProjectPage(options) });
            }
            window.setTimeout(function () {
                if (!that.projectCount) {
                    that.projectCount = {};
                    that.countRec(_globals__WEBPACK_IMPORTED_MODULE_3__.app.getTree());
                }
            }, 1);
            resolve(pages);
        });
    }
    updateMenu(ul) {
        if (!this.isEnabled() || !ul || !this._item || _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(this._item.id).isFolder) {
            return;
        }
        let that = this;
        this.lastMenu = ul;
        $(".notificationMenu").remove();
        $(".notificationBtn").remove();
        let myNotification = _common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_7__.NotificationsBL.NoticationCache.getProjectNotifications(_globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getProject(), _globals__WEBPACK_IMPORTED_MODULE_3__.app.getCurrentItemId());
        let myNotificationMarker = myNotification.length ?
            ("<i class='fal fa-bell '></i><span class='fancytree-notificationCounter notificationCounter'>" + myNotification.length + "</span>") :
            "<i class='fal fa-bell '></i>";
        $('<div class="btn-group" style=""><button class="btn btn-item btn-sm notificationBtn" tabindex="-1" title="Show and create notifications">' + myNotificationMarker + '</button></div>').click(function (event) {
            that.showAllNotificationsDialog();
        }).insertBefore($("#shareButton").closest("div"));
    }
    userCanAcknowledgeNotification(notification) {
        return !notification.auto;
        // that should be  notification.action.todoType == "user" ||  notification.action.todoType == "signaturesDone" ||  notification.action.todoType == "reviewsDone";
    }
    supportsControl() {
        return false;
    }
    watchActivity() {
        let that = this;
        $(window).on('keyup click', function (event) {
            if (that.newNotification) {
                _globals__WEBPACK_IMPORTED_MODULE_3__.app.updateFavicon(_globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getProject(), false);
                that.newNotification = false;
            }
        });
    }
    updateActivity(newCount) {
        if (newCount > this.lastCount) {
            _globals__WEBPACK_IMPORTED_MODULE_3__.app.updateFavicon(_globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getProject(), true);
            this.newNotification = true;
        }
        this.lastCount = newCount;
    }
    // this gets all the updates about the user's notifications after being signalled that something changed for the user
    async updateUI(notifChanged) {
        let that = this;
        // update UI
        that.projectCount = null; // removing the cache, so it will be reloaded next time updateCounters is called
        let total = notifChanged.total;
        let allNotifications = notifChanged.allNotifications;
        that.updateCounters();
        that.updateActivity(total);
        that.updateMenu(that.lastMenu);
        // Send browser notification. The random delay will avoid duplicates
        if (that.notificationConfig.browserNotificationDisabled == undefined || that.notificationConfig.browserNotificationDisabled == false) {
            let timeOut = that.notificationConfig.browserNotificationAutoCloseAfter != undefined ? that.notificationConfig.browserNotificationAutoCloseAfter : 9000;
            allNotifications.todos.forEach((t) => {
                if (that.getPreviousNotificationsIds().indexOf(t.todoId) == -1 && t.login == _globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getUser()) {
                    if (window.Notification != undefined) {
                        if (window.Notification.permission !== "granted")
                            window.Notification.requestPermission();
                        else {
                            var n = new Notification(t.projectShort + "/" + t.itemRef, {
                                icon: _globals__WEBPACK_IMPORTED_MODULE_3__.globalMatrix.matrixBaseUrl + "/favicon_medical.ico",
                                body: t.originatorLogin + ": " + _common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_7__.NotificationsBL.getMessage(t),
                                requireInteraction: true,
                            });
                            n.onclick = () => { window.open(_globals__WEBPACK_IMPORTED_MODULE_3__.globalMatrix.matrixBaseUrl + "/" + t.projectShort + "/" + t.itemRef); };
                        }
                        setTimeout(() => {
                            if (n != undefined) {
                                n.close();
                            }
                        }, timeOut);
                    }
                }
            });
        }
        that.setPreviousNotificationsIds(allNotifications.todos.map((o) => { return o.todoId; }));
    }
    async renderNotificationProjectPage(options) {
        let that = this;
        if (options.controlState === _globals__WEBPACK_IMPORTED_MODULE_3__.ControlState.Print) {
            return;
        }
        document.title = "Notifications - " + _globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getProject();
        options.control.html("");
        let h2 = _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.getPageTitle("Notifications overview").appendTo(options.control);
        // paint the tabs
        let tabpanel = $('<div role="tabpanel" class="tabpanel-container contextFrameContainer" style="top:60px;padding: 5px;">');
        let tabpanelul = $('<ul class="nav nav-tabs contextFrameTabs" role="tablist">');
        let tabpanels = $('<div class="tab-content">');
        // enable copy
        _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.copyBuffer(h2, "copy to clipboard", tabpanels, options.control, (copied) => {
            $(".tabpaneltab.tab-pane", copied).not(".active").remove();
            $(".tab-content", copied).css("height", "");
        });
        options.control.append(tabpanel);
        tabpanel.append(tabpanelul);
        tabpanel.append(tabpanels);
        tabpanelul.append('<li role="presentation" class="active"><a href="#MYNOTIFICATIONS"  role="tab" data-toggle="tab">Notifications for me</a></li>');
        let myNotifications = $('<div role="tabpanel"  style="height:100%" class="tabpaneltab tab-pane active" id="MYNOTIFICATIONS" >');
        tabpanels.append(myNotifications);
        tabpanelul.append('<li role="presentation"><a href="#MYDONE"  role="tab" data-toggle="tab">My previous notifications</a></li>');
        let myDone = $('<div role="tabpanel"  style="height:100%" class="tabpaneltab tab-pane" id="MYDONE" >');
        tabpanels.append(myDone);
        tabpanelul.append('<li role="presentation"><a href="#MYOWNED"  role="tab" data-toggle="tab">Notifications I created</a></li>');
        let myOwned = $('<div role="tabpanel"  style="height:100%" class="tabpaneltab tab-pane" id="MYOWNED" >');
        tabpanels.append(myOwned);
        tabpanelul.append('<li role="presentation"><a href="#MYOWNEDDONE"  role="tab" data-toggle="tab">Previous notifications I created</a></li>');
        let myOwnedDone = $('<div role="tabpanel"  style="height:100%" class="tabpaneltab tab-pane" id="MYOWNEDDONE" >');
        tabpanels.append(myOwnedDone);
        // adjust heights of panels
        let height = $("#main").height() - tabpanels.offset().top + $("#main").offset().top;
        tabpanels.height(height);
        let notifs = await _common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_7__.NotificationsBL.getGetNotificationsNowAndFuture(_globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getProject());
        that.renderNotificationTable(myNotifications, {
            allowDelete: _globals__WEBPACK_IMPORTED_MODULE_3__.globalMatrix.globalShiftDown, selectable: _globals__WEBPACK_IMPORTED_MODULE_3__.globalMatrix.globalShiftDown, forColumn: false, itemColumn: true, doneColumn: false, canCloseMine: true, canCloseAll: false, showAddButton: false, none: "you have no todos", moveDoneTo: "MYDONE"
        }, notifs.todosForNow.filter(function (notification) {
            return notification.login == _globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getUser() && !notification.closedAt;
        }));
        that.renderNotificationTable(myNotifications, {
            allowDelete: _globals__WEBPACK_IMPORTED_MODULE_3__.globalMatrix.globalShiftDown, selectable: _globals__WEBPACK_IMPORTED_MODULE_3__.globalMatrix.globalShiftDown, forColumn: false, itemColumn: true, doneColumn: false, canCloseMine: true, canCloseAll: true, showAddButton: false, none: "", moveDoneTo: "MYDONE"
        }, notifs.todosForLater.filter(function (notification) {
            return notification.login == _globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getUser() && !notification.closedAt;
        }));
        that.renderNotificationTable(myDone, {
            allowDelete: _globals__WEBPACK_IMPORTED_MODULE_3__.globalMatrix.globalShiftDown, selectable: false, forColumn: false, itemColumn: true, doneColumn: true, canCloseMine: false, canCloseAll: true, showAddButton: false, none: "you did not finish any todo"
        }, notifs.todosForNow.filter(function (notification) {
            return notification.login == _globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getUser() && notification.closedAt;
        }));
        that.renderNotificationTable(myOwned, {
            allowDelete: _globals__WEBPACK_IMPORTED_MODULE_3__.globalMatrix.globalShiftDown, selectable: _globals__WEBPACK_IMPORTED_MODULE_3__.globalMatrix.globalShiftDown, forColumn: true, itemColumn: true, doneColumn: false, canCloseMine: false, canCloseAll: true, showAddButton: false, none: "you did not create any todos", moveDoneTo: "MYOWNEDDONE"
        }, notifs.todosForNow.filter(function (notification) {
            return notification.originatorLogin == _globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getUser() && !notification.closedAt;
        }));
        that.renderNotificationTable(myOwned, {
            allowDelete: _globals__WEBPACK_IMPORTED_MODULE_3__.globalMatrix.globalShiftDown, selectable: _globals__WEBPACK_IMPORTED_MODULE_3__.globalMatrix.globalShiftDown, forColumn: true, itemColumn: true, doneColumn: false, canCloseMine: false, canCloseAll: true, showAddButton: false, none: ""
        }, notifs.todosForLater.filter(function (notification) {
            return notification.originatorLogin == _globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getUser() && !notification.closedAt;
        }));
        that.renderNotificationTable(myOwnedDone, {
            allowDelete: _globals__WEBPACK_IMPORTED_MODULE_3__.globalMatrix.globalShiftDown, selectable: false, forColumn: true, itemColumn: true, doneColumn: true, canCloseMine: false, canCloseAll: false, showAddButton: false, none: "none of your todos were done"
        }, notifs.todosForNow.filter(function (notification) {
            return notification.originatorLogin == _globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getUser() && notification.closedAt;
        }));
        _globals__WEBPACK_IMPORTED_MODULE_3__.app.waitForMainTree(() => { options.control.highlightReferences(); });
    }
    // renders a row with a notifications and +- actions on it
    renderNotificationRow(tr, notification, tableOptions) {
        let that = this;
        let isAutomatic = !that.userCanAcknowledgeNotification(notification);
        let isForMe = notification.login == _globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getUser();
        let isFromMe = notification.originatorLogin == _globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getUser();
        if (notification.future) {
            tr.addClass("future");
        }
        if (notification.closedAt) {
            tr.addClass("past");
        }
        if (!isForMe) {
            tr.addClass("others");
        }
        if (tableOptions.selectable || tableOptions.allowDelete) {
            let input = $('<input class="notificationSelector" type="checkbox">').data("todoid", notification.todoId);
            $('<td>').appendTo(tr).append(input);
        }
        if (tableOptions.itemColumn)
            $('<td>' + notification.itemRef + '!</td>').appendTo(tr);
        if (tableOptions.forColumn)
            $('<td>' + (notification.login == _globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getUser() ? "You" : notification.login) + '</td>').appendTo(tr);
        $('<td style="white-space: pre-wrap;"">' + _common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_7__.NotificationsBL.getMessage(notification) + '</td>').appendTo(tr);
        $('<td>' + notification.originatorLogin + '</td>').appendTo(tr);
        $('<td>' + notification.createdAtUserFormat + '</td>').appendTo(tr);
        if (tableOptions.doneColumn)
            $('<td>' + notification.closedAtUserFormat + '</td>').appendTo(tr);
        if (tableOptions.canCloseMine || tableOptions.canCloseAll) {
            if (tableOptions.canCloseAll || isForMe || isFromMe) {
                let td = $('<td>').appendTo(tr);
                if (isAutomatic && !that.notificationConfig.closeAuto) {
                    return;
                }
                if (notification.closedAt) {
                    if (!tableOptions.doneColumn)
                        $('<span class="closedAt">Closed: ' + notification.closedAtUserFormat + '</span>').appendTo(td);
                    return;
                }
                let closeStyle = "btn-link";
                let closeText = "acknowledge";
                let closeTitle = "remove notification";
                if (isAutomatic) {
                    closeStyle = "btn-link";
                    closeText = "force acknowledge";
                    closeTitle = "notification will also go once you do the job!";
                }
                if (notification.future) {
                    closeStyle = "btn-link";
                    closeText = "acknowledge already";
                    closeTitle = "remove notification already now";
                }
                if (!isForMe) {
                    closeStyle = "btn-link";
                    closeText = "mark done";
                    closeTitle = "mark notification as done for someone else";
                }
                if (tableOptions.moveDoneTo) {
                    tr.addClass("canBeClosed");
                    tr.data("todoId", notification.todoId);
                    tr.data("moveTo", tableOptions.moveDoneTo);
                }
                $('<button class="' + closeStyle + '" title="' + closeTitle + '">' + closeText + '</button>').appendTo(td).click(function (event) {
                    let button = $(event.delegateTarget);
                    _common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_7__.NotificationsBL.deleteNotificationId(_globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getProject(), button.data("todoid"), false).then(function () {
                        if (tableOptions.moveDoneTo) {
                            let todoId = button.closest("tr").data("todoId");
                            let toBeMoved = $(".canBeClosed").filter(function (trIdx, tr) { return $(tr).data("todoId") == todoId; });
                            $.each(toBeMoved, function (idx, tbm) {
                                let moveTo = $(tbm).data("moveTo");
                                let tbodys = $("tbody", $("#" + moveTo));
                                if (tbodys.length) {
                                    $(".btn", $(tbm)).replaceWith("<span>just now</span>");
                                    $(tbodys[0]).append($(tbm));
                                }
                                else {
                                    button.closest("tr").remove();
                                }
                            });
                        }
                        else {
                            button.closest("tr").remove();
                        }
                    });
                }).data("todoid", notification.todoId);
            }
            else {
                $('<td>').appendTo(tr);
            }
        }
    }
    // renders a table with notifications and +- actions on them
    renderNotificationTable(container, tableOptions, notifications) {
        let that = this;
        if (notifications.length == 0 && !tableOptions.showAddButton) {
            if (tableOptions.none) {
                $('<p>').html(tableOptions.none).appendTo(container);
            }
            return;
        }
        let table = $("<table class='table table-lined " + (tableOptions.tableClass ? tableOptions.tableClass : "") + "'>");
        if (!tableOptions.none) {
            $('<p>').html("Upcoming notifications").appendTo(container);
        }
        let tbody = $("<tbody>");
        // add notifications
        $.each(notifications, function (idx, notification) {
            let tr = $("<tr>").appendTo(tbody);
            that.renderNotificationRow(tr, notification, tableOptions);
        });
        // create table with headings and body
        let thead = $("<thead><tr>"
            + ((tableOptions.selectable || tableOptions.allowDelete) ? "<th data-sorter='false' style='white-space: nowrap;'><input class='selectAllNotification' type='checkbox'> all</th>" : "")
            + (tableOptions.itemColumn ? "<th>Item</th>" : "")
            + (tableOptions.forColumn ? "<th>Notification For</th>" : "")
            + "<th>Notification</th><th>Originator</th><th>Due date</th>" + (tableOptions.doneColumn ? "<th>Done at</th>" : "")
            + ((tableOptions.canCloseMine || tableOptions.canCloseAll) ? "<th></th>)" : "")
            + "</tr></thead>");
        if (tableOptions.showAddButton && this.notificationConfig.manualCreate) {
            //  create an extra row with add button
            let addRow = $("<tr>").appendTo(tbody);
            let columnCount = $("th", thead).length;
            let addCell = $("<td colspan='" + columnCount + "'>").appendTo(addRow);
            $("<button style='margin-top: 12px;' class='btn btn-success btn-xs'><i class='fal fa-bell' style='margin-right:12px'></i>Create New</button>")
                .appendTo(addCell)
                .click(function () {
                that.showCreateNotificationDialog().done(async function (todoIds) {
                    let allNotification = await _common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_7__.NotificationsBL.getAllNotificationForItem(_globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getProject(), _globals__WEBPACK_IMPORTED_MODULE_3__.app.getCurrentItemId());
                    // create is always for current item
                    let todos = allNotification.todos.filter(function (todo) { return todoIds.indexOf(todo.todoId) != -1; });
                    $.each(todos, function (idx, todo) {
                        let newNotificationRow = $("<tr>").insertBefore(addRow);
                        that.renderNotificationRow(newNotificationRow, todo, tableOptions);
                    });
                    table.trigger('update');
                });
            });
        }
        // assemble table
        table.append(thead)
            .append(tbody)
            .appendTo(container).tablesorter();
        if (tableOptions.selectable || tableOptions.allowDelete) {
            $(".selectAllNotification", table).click(function () {
                $(".notificationSelector", table).prop("checked", $(".selectAllNotification", table).prop("checked"));
            });
            if (tableOptions.selectable) {
                $("<button title class='btn btn-xs btn-default hideCopy'>Mark as done</button>").appendTo(container).click(function () {
                    that.closeNotifications($(".notificationSelector:checked", table), false);
                });
            }
            if (tableOptions.allowDelete) {
                $("<button title class='btn btn-xs btn-default hideCopy'>Permanently delete</button>").appendTo(container).click(function () {
                    that.closeNotifications($(".notificationSelector:checked", table), true);
                });
            }
            $("<p><br></p>").appendTo(container);
        }
    }
    indicateNotificationChange() {
        $(".notificationBtn").removeClass("bounce").addClass("bounce");
    }
    closeNotifications(notifications, deleteThem) {
        _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.BlockingProgress.Init([{ name: "Acknowledging notifications" }]);
        this.deleteNotificationIdRec(_globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getProject(), notifications, deleteThem, 0);
    }
    // show all notifications for current user
    updateProjectMenu() {
        let that = this;
        let menu = $("#idNotificationList");
        let menuResponsive = $("#idNotificationListResponsive");
        // add a navigation icon left next button to project  menu
        $(".notificationBtnMenu").remove();
        let projectButton = $('<button class="btn btn-item  notificationBtnMenu dropdown-toggle" data-toggle="dropdown" title="" data-original-title="Show all notifications"><i class="fal fa-bell notificationAction"></i></button>')
            .insertBefore(menu);
        let projectButtonResponsive = $('<buttton class="btn btn-item  notificationBtnMenu dropdown-toggle" data-toggle="dropdown" title="" data-original-title="Show all notifications"><i class="fal fa-bell notificationAction"></i></buttton>')
            .insertBefore(menuResponsive);
        // remove old items
        menu.html("");
        menuResponsive.html("");
        $.each(_globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getProjectList(false), function (idx, project) {
            // We skip projects that we don't have access
            if (project.accessType === "none")
                return;
            let notificationCount = _common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_7__.NotificationsBL.NoticationCache.getTotalNotificationsProject(project.shortLabel);
            if (notificationCount) {
                // there are some notifications for project
                let mss = [];
                // take up to first two messages from recent message list
                if (notificationCount.firstTodos.length > 0)
                    mss.push(_common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_7__.NotificationsBL.getMessage(notificationCount.firstTodos[0]));
                if (notificationCount.firstTodos.length > 1)
                    mss.push(_common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_7__.NotificationsBL.getMessage(notificationCount.firstTodos[1]));
                // format messages for ui: 3 lines
                let last = "";
                if (mss.length > 0) {
                    if (mss[0] != undefined) {
                        last = (mss[0].length < 30 ? mss[0] : (mss[0].substring(0, 30 - 3) + "..."));
                    }
                }
                let before = "";
                if (mss.length > 1) {
                    if (mss[1] != undefined) {
                        before = (mss[1].length < 30 ? mss[1] : (mss[1].substring(0, 30 - 3) + "..."));
                    }
                }
                let more = (notificationCount.nbTodos > mss.length) ? ((notificationCount.nbTodos - mss.length) + " more messages") : "";
                // build ui
                let img = _globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getImgFromProject(project.shortLabel, 5);
                let msg = ` ${img} <span class='mainmenu'>${project.shortLabel}
                                        <div class="notificationMenuSummary">
                                        <span class="last">${last}</span>
                                        <span class="before">${before}</span>
                                        <span class="more">${more}</span>
                                        </div>
                                    </span>`;
                $('<li style="position: relative;">' + msg + '</li>').appendTo(menu).click(function (event) {
                    _globals__WEBPACK_IMPORTED_MODULE_3__.app.canNavigateAwayAsync().done(function () {
                        // If we have QMSViewer only access, we open the published QMS in a new tab.
                        if (project.accessType === "qmsviewer") {
                            window.open(`${_globals__WEBPACK_IMPORTED_MODULE_3__.globalMatrix.matrixBaseUrl}/pub/${$(event.delegateTarget).data("project")}?USER=training`);
                        }
                        else {
                            _globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.loadProject(null, $(event.delegateTarget).data("project") + "/MYWORK", true);
                        }
                    });
                }).data("project", project.shortLabel);
                $('<li style="position: relative;">' + msg + '</li>').appendTo(menuResponsive).click(function (event) {
                    _globals__WEBPACK_IMPORTED_MODULE_3__.app.canNavigateAwayAsync().done(function () {
                        _globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.loadProject(null, $(event.delegateTarget).data("project") + "/MYWORK", true);
                    });
                }).data("project", project.shortLabel);
            }
        });
        // fake show the list, to get the sizes
        let height = Math.max($("#main").height(), 200);
        // end fake show the list, to get the sizes
        $("#idNotificationList")
            .css("max-height", height + "px")
            .css("overflow-y", "auto")
            .css("overflow-x", "none");
        $("nav").css("visibility", "").css("display", "");
        // do main button
        this.lastCount = _common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_7__.NotificationsBL.NoticationCache.getTotalNotifications();
        if (this.lastCount) {
            projectButton.append($("<span class='notificationIcon'>").html("" + this.lastCount));
            projectButtonResponsive.append($("<span class='notificationIcon'>").html("" + this.lastCount));
        }
    }
    // show a dialog asking for details of a notification to create
    showCreateNotificationDialog() {
        let that = this;
        let res = $.Deferred();
        let sendTo = [];
        async function updateSend() {
            var sendButton = $(".btnDoIt", ui.parent().parent());
            var enabled = sendTo.length && subj && await subj.getController().getValueAsync() !== "";
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.setEnabled(sendButton, enabled);
        }
        let usel = $("<div>");
        // take users from current project
        _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.SelectUserOrGroup.showMultiUserSelect(usel, "For", [], "Create Notification For", "", "", true, true, (selection) => {
            sendTo = selection;
            updateSend();
        });
        let subj = $("<div>").plainText({
            controlState: _globals__WEBPACK_IMPORTED_MODULE_3__.ControlState.FormEdit,
            canEdit: true,
            help: "Notification message",
            fieldValue: "",
            valueChanged: function () {
                updateSend();
            },
            parameter: {
                allowResize: false
            }
        });
        let dateSel = $("<div>").dateselect({
            controlState: _globals__WEBPACK_IMPORTED_MODULE_3__.ControlState.FormEdit,
            canEdit: true,
            help: "Date to activate (optional)",
            fieldValue: "",
            valueChanged: function () {
                updateSend();
            },
            parameter: {
                allowClear: true,
                minDate: new Date()
            }
        });
        let dlg = $("<div>").appendTo($("body"));
        let ui = $("<div style='width:100%;height:100%'>");
        ui.append(dateSel);
        ui.append(usel);
        ui.append(subj);
        ui.addClass("dlg-no-scroll");
        ui.removeClass("dlg-v-scroll");
        _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showDialog(dlg, "Create Notification", ui, -730, -500, [{
                text: 'Create',
                class: 'btnDoIt',
                click: async function () {
                    let text = DOMPurify.sanitize(await subj.getController().getValueAsync()) + '';
                    let dateStr = await dateSel.getController().getValueAsync();
                    let date = _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.DateFieldHandler.getDateFromString(dateStr);
                    if (date && _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.DateTime.renderDashFormat(date) == _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.DateTime.renderDashFormat(new Date())) {
                        // date is for today
                        date = null;
                    }
                    let created = await _common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_7__.NotificationsBL.createNotification(sendTo, _globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getProject(), _globals__WEBPACK_IMPORTED_MODULE_3__.app.getCurrentItemId(), text, null, date);
                    res.resolve(created);
                    dlg.dialog("close");
                }
            }, {
                text: 'Cancel',
                class: 'btnCancelIt',
                click: function () {
                    dlg.dialog("close");
                }
            }], _common_matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.Scroll.None, false, false, () => { dlg.remove(); }, () => { updateSend(); $("textarea", subj).focus(); }, () => { });
        return res;
    }
    // show a dialog with all notifications
    showAllNotificationsDialog() {
        let that = this;
        let dlg = $("<div>").appendTo($("body"));
        let ui = $("<div style='width:100%'>");
        _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showDialog(dlg, "Notifications", ui, 900, 600, [{
                text: 'Ok',
                class: 'btnDoIt',
                click: function () {
                    dlg.dialog("close");
                }
            }], _common_matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.Scroll.Vertical, true, true, () => { dlg.remove(); }, () => {
            that.showNotifications(ui);
        }, () => { });
    }
    showNotifications(ui) {
        let that = this;
        ui.html("").append(_common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.getSpinningWait("getting notifications..."));
        _globals__WEBPACK_IMPORTED_MODULE_3__.restConnection.getProject("todo?includeDone=1&includeFuture=1&itemRef=" + _globals__WEBPACK_IMPORTED_MODULE_3__.app.getCurrentItemId()).done(function (allNotification) {
            ui.html("");
            let cbs = {
                others: (localStorage.getItem("ShowNotificationOthers") == "0") ? false : true,
                future: (localStorage.getItem("ShowNotificationFuture") == "0") ? false : true,
                past: (localStorage.getItem("ShowNotificationPast") == "0") ? false : true,
            };
            let table = $("<table style='width:100%'>").appendTo(ui);
            let tr = $("<tr>").appendTo(table);
            let td1 = $("<td>").appendTo(tr);
            let td2 = $("<td>").appendTo(tr);
            let td3 = $("<td>").appendTo(tr);
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addCheckbox(td1, "Show notifications for others", cbs, "others", function () {
                that.filterNotifications(ui, cbs);
            });
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addCheckbox(td2, "Show notifications for future", cbs, "future", function () {
                that.filterNotifications(ui, cbs);
            });
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addCheckbox(td3, "Show notifications from the past", cbs, "past", function () {
                that.filterNotifications(ui, cbs);
            });
            $('<div style="margin-bottom: 40px;">').appendTo(ui); // just a bit of space
            that.renderNotificationTable(ui, { allowDelete: false, selectable: false, forColumn: true, itemColumn: false, doneColumn: false, canCloseMine: true, canCloseAll: false, showAddButton: true, none: "no (more) to dos", tableClass: "itemNotifications" }, allNotification.todos);
            that.filterNotifications(ui, cbs);
        });
    }
    // hide / show notifications depending on checkboxes, remember last value
    filterNotifications(ui, cbs) {
        localStorage.setItem("ShowNotificationOthers", cbs.others ? "1" : "0");
        localStorage.setItem("ShowNotificationFuture", cbs.future ? "1" : "0");
        localStorage.setItem("ShowNotificationPast", cbs.past ? "1" : "0");
        $("tr", ui).show();
        if (!cbs.others)
            $("tr.others", ui).hide();
        if (!cbs.future)
            $("tr.future", ui).hide();
        if (!cbs.past)
            $("tr.past", ui).hide();
    }
    // mark a notification as resolved (mark as done)
    deleteNotificationDlg(notification) {
        let that = this;
        let res = $.Deferred();
        _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showConfirm(-1, { title: "Remove notification '" + _common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_7__.NotificationsBL.getMessage(notification) + "'", ok: "Ok", nok: "Cancel" }, () => {
            try {
                _common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_7__.NotificationsBL.deleteNotification(notification);
                res.resolve();
            }
            catch (err) {
                res.reject();
            }
        }, null);
        return res;
    }
    deleteNotificationIdRec(project, notifications, deleteThem, idx) {
        let that = this;
        let res = $.Deferred();
        if (notifications.length <= idx) {
            res.resolve();
            return res;
        }
        _common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_7__.NotificationsBL.deleteNotificationId(project, $(notifications[idx]).data("todoid"), deleteThem).then(function () {
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.BlockingProgress.SetProgress(0, (idx + 1) * 100 / notifications.length);
            $(notifications[idx]).closest("tr").css("color", "lightgrey").css("text-decoration", "line-through");
            that.deleteNotificationIdRec(project, notifications, deleteThem, idx + 1).done(function () {
                res.resolve();
            }).fail(function () {
                res.reject();
            });
        }).catch(function () {
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.BlockingProgress.SetProgressError(0, "failed deleting todo");
        });
        return res;
    }
    // create a new notification object
    // count the notifications of a folder by adding up notifications of it's items
    countRec(idb) {
        let that = this;
        let sum = 0;
        for (const child of idb) {
            let count = 0;
            if (child.children) {
                // this is a folder
                count = that.countRec(child.children);
            }
            else {
                count = _common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_7__.NotificationsBL.NoticationCache.getProjectNotifications(_globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getProject(), child.id).length;
            }
            that.projectCount[child.id] = count;
            sum += count;
        }
        ;
        return sum;
    }
    // update the counters in the tree: build a new cache and repaint them
    updateCounters() {
        let that = this;
        // update counters
        window.setTimeout(function () {
            if (!that.projectCount) {
                that.projectCount = {};
                that.countRec(_globals__WEBPACK_IMPORTED_MODULE_3__.app.getTree());
                that.updateProjectMenu();
                // change icons in tree
                _common_UI_MainTree_MainTree__WEBPACK_IMPORTED_MODULE_2__.NavigationPanel.updateNotificationCounters();
                _common_UI_Components__WEBPACK_IMPORTED_MODULE_6__.NavBar.updateNotificationCounters();
            }
        }, 1);
    }
    // returned the cached count of notifications for a specific item
    // if it is not yet cached, recreate it
    getNotificationCount(itemId) {
        let that = this;
        if (!this.projectCount) {
            this.projectCount = {};
            this.countRec(_globals__WEBPACK_IMPORTED_MODULE_3__.app.getTree());
        }
        return this.projectCount[itemId];
    }
    addFancyTreeNotificationCounterPlugin() {
        ($.ui).fancytree._FancytreeClass.prototype.updateNotificationCounters = function () {
            var tree = this;
            tree.visit(function (node) {
                node.updateNotificationCounters(false);
            });
            ;
        };
        ($.ui).fancytree._FancytreeNodeClass.prototype.updateNotificationCounters = function (doParents) {
            var node = this;
            if (node.span) {
                var $badge = $("span.fancytree-notificationCounter", node.span), extOpts = node.tree.options.notificationCounter, count = NotificationList.getNotificationCount(node.key);
                if (count && node.span && (!node.isExpanded() || !extOpts.hideExpanded)) {
                    if (!$badge.length) {
                        if (node.folder) {
                            let expander = $("span.fancytree-expander", node.span);
                            $badge = $("<span class='fancytree-notificationCounter notificationCounter'/>").insertBefore(expander);
                        }
                        else {
                            $badge = $("<span class='fancytree-notificationCounter notificationCounter'/>").insertBefore($("span.fancytree-icon,span.fancytree-custom-icon", node.span));
                        }
                    }
                    $badge.text(count);
                    $badge.closest("li").data("notifications", count);
                }
                else {
                    $badge.closest("li").data("notifications", 0);
                    $badge.remove();
                }
                if (doParents && extOpts.deep && !node.isTopLevel() && !node.isRoot()) {
                    node.parent.updateCounters();
                }
            }
        };
        // TODO(modules): improve all this casting.
        const tmp = $.ui.fancytree;
        tmp.registerExtension({
            // Every extension must be registered by a unique name.
            name: "notificationCounter",
            // Version information should be compliant with [semver](http://semver.org)
            version: "1.0",
            // Extension specific options and their defaults.
            // This options will be available as `tree.options.notificationCounter.hideExpanded`
            options: {
                deep: true,
                hideZeros: true,
                hideExpanded: false,
                // dnd: {
                //     axis: "y"
                // }
            },
            // Local functions are prefixed with an underscore '_'.
            // Callable as `this._local._appendCounter()`.
            /*_appendCounter: function(bar) {
                var tree = this;
            },*/
            // **Override virtual methods for this extension.**
            // `treeInit` is triggered when a tree is initialized. We can set up classes or
            // bind event handlers here...
            treeInit: function () {
                this._super.apply(this, arguments);
                // Add a class to the tree container
                this.$container.addClass("fancytree-ext-notificationCounter");
            },
            // Destroy this tree instance (we only call the default implementation, so
            // this method could as well be omitted).
            treeDestroy: function () {
                //(<any>this)._superApply(arguments);
                this._super.apply(this, arguments);
            },
            // Overload the `renderTitle` hook, to append a counter badge
            nodeRenderTitle: function (ctx, title) {
                var node = ctx.node, extOpts = ctx.options.notificationCounter, count = NotificationList.getNotificationCount(node.key);
                // Let the base implementation render the title
                // We use `_super()` instead of `_superApply()` here, since it is a little bit
                // more performant when called often
                this._super(ctx, title);
                // Append a counter badge
                if (count && (!node.isExpanded() || !extOpts.hideExpanded)) {
                    if (node.folder) {
                        $("span.fancytree-expander", node.span).before($("<span class='fancytree-notificationCounter notificationCounter'/>").text(count)).closest("li").data("notifications", count);
                    }
                    else {
                        $("span.fancytree-icon,span.fancytree-custom-icon", node.span).before($("<span class='fancytree-notificationCounter notificationCounter'/>").text(count));
                    }
                }
            }
        });
    }
    static anchorNotifications() {
        window.clearTimeout(Notifications.anchorTimer);
        let itemId = _globals__WEBPACK_IMPORTED_MODULE_3__.app.getCurrentItemId();
        Notifications.anchorTimer = window.setTimeout(() => {
            if (itemId == _globals__WEBPACK_IMPORTED_MODULE_3__.app.getCurrentItemId()) {
                let project = _globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getProject();
                for (let notification of _common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_7__.NotificationsBL.NoticationCache.getNotifications()) {
                    if (notification.projectShort == project && itemId == notification.itemRef) {
                        let anchor = _common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_7__.NotificationsBL.getField(notification);
                        $(anchor).append(`<i class="fal fa-bell" style="color:${notification.userId}"></i>`);
                    }
                }
            }
        }, 1000);
    }
}
var NotificationList;
function initialize() {
    NotificationList = new Notifications();
    _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.plugins.register(NotificationList);
}


/***/ }),
/* 42 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ACL_SETTING: () => (/* binding */ ACL_SETTING),
/* harmony export */   EnumItemPublish: () => (/* binding */ EnumItemPublish),
/* harmony export */   autoColumnDefault: () => (/* binding */ autoColumnDefault),
/* harmony export */   autoColumnSetting: () => (/* binding */ autoColumnSetting),
/* harmony export */   defaultNotificationConfig: () => (/* binding */ defaultNotificationConfig),
/* harmony export */   mailConfigSetting: () => (/* binding */ mailConfigSetting),
/* harmony export */   notificationSetting: () => (/* binding */ notificationSetting),
/* harmony export */   qmsDefaultConfig: () => (/* binding */ qmsDefaultConfig),
/* harmony export */   smartTextConfigSetting: () => (/* binding */ smartTextConfigSetting)
/* harmony export */ });
// example generation of json schema from typescript type
// 
//  typescript-json-schema web/ts/ProjectSettings.ts ITestConfig > test.txt

// *******************************
// qms configuration        
// *******************************
var EnumItemPublish;
(function (EnumItemPublish) {
    EnumItemPublish[EnumItemPublish["IfNotInGroup"] = 0] = "IfNotInGroup";
    EnumItemPublish[EnumItemPublish["Always"] = 1] = "Always";
    EnumItemPublish[EnumItemPublish["Never"] = 2] = "Never"; // items cannot be published by itself 
})(EnumItemPublish || (EnumItemPublish = {}));
const qmsDefaultConfig = {
    publications: [{
            rules: [
                {
                    category: "PROC",
                    readyLabels: ["PROCOK"],
                    itemRules: EnumItemPublish.IfNotInGroup,
                    groupName: "SOP",
                    groupLabelType: "SOPS",
                    groupDown: ["WI"]
                },
                {
                    category: "WI",
                    readyLabels: ["WIOK"],
                    itemRules: EnumItemPublish.IfNotInGroup,
                }
            ],
            toCategory: "PUB",
            target: "pub",
            keepFlatList: false,
            publisher: "_" // comma separated list of publishers _ for legacy: look in category setting for PUB,
        }
    ],
    legacyRoles: false // use user groups 
};
// *******************************
// mail config
// *******************************
const mailConfigSetting = "mail_config";
// ******************************* 
// ACL user access lists
// *******************************
const ACL_SETTING = "acl";
// *******************************
// smart text , abbreviations, ....
// *******************************
const smartTextConfigSetting = "rtf";
let notificationSetting = "";
let defaultNotificationConfig = {
    enabled: true,
    closeAuto: true,
    manualCreate: true,
    browserNotificationDisabled: false,
    browserNotificationAutoCloseAfter: 9000
};
// setting can be for customer (e.g. user titles) and project (user roles)
const autoColumnSetting = "autoColumn";
const autoColumnDefault = { maps: [] };


/***/ }),
/* 43 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NotificationsBL: () => (/* binding */ NotificationsBL)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _NotificationsCache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(44);


class NotificationsBL {
    //
    /**
     * Returns the message of the notification. either the message is plain text or some formatted json object
     * @param todo
     */
    static getMessage(todo) {
        if (!todo || !todo.action || !todo.action.text)
            return "";
        if (todo.action.text[0] != "{")
            return todo.action.text;
        try {
            let json = JSON.parse(todo.action.text);
            if (json.message) {
                return json.message;
            }
        }
        catch (e) { }
        ;
        return todo.action.text;
    }
    /**
     * Returns the field of the notification. either the message is plain text or some formatted json object: the anchor is a place in the UI
     * @param todo
     */
    static getField(todo) {
        if (!todo || !todo.action || !todo.action.text)
            return null;
        if (todo.action.text[0] != "{")
            return null;
        try {
            let json = JSON.parse(todo.action.text);
            if (json.field) {
                return json.field;
            }
        }
        catch (e) { }
        ;
        return null;
    }
    //
    /**
     *  either the message is plain text or some formatted json object: the reply is a reference to another todo - for which this is a replyTo
     * @param todo
     */
    static getReply(todo) {
        if (!todo || !todo.action || !todo.action.text)
            return null;
        if (todo.action.text[0] != "{")
            return null;
        try {
            let json = JSON.parse(todo.action.text);
            if (json.replyTo) {
                return json.replyTo;
            }
        }
        catch (e) { }
        ;
        return null;
    }
    /**
     * Create a notification for a list of users on a specific item in a project. The notification will be due to a specific date
     * @param users
     * @param project
     * @param item
     * @param text
     * @param type
     * @param atDate
     */
    static async createNotification(users, project, item, text, type, atDate) {
        let that = this;
        let todoDetails = {
            text: text,
            logins: users.join(",")
        };
        if (atDate) {
            todoDetails.atDate = atDate.toISOString();
        }
        if (type) {
            todoDetails.todoType = type;
        }
        return await _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.postServer(project + "/todo/" + item, todoDetails);
    }
    /**
     * Remove a notification by its id
     * @param project
     * @param todoId
     * @param deleteThem
     */
    static async deleteNotificationId(project, todoId, deleteThem) {
        await _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.deleteServerAsync(project + "/todo/" + todoId, deleteThem ? { hardDelete: "yes" } : {});
        return;
    }
    /**
     * Remove a notification
     * @param notification Notif to remove
     */
    static async deleteNotification(notification) {
        return NotificationsBL.deleteNotificationId(notification.projectShort, notification.todoId, false);
    }
    /**
     * Return all notifications (for all projects)
     */
    static async getAllNotifications() {
        let allNotifications = await _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.getServer("all/todo", true);
        return allNotifications;
    }
    /**
     * Return all notifications for a specific project. The notifications are divided into two groups: for now and for later
     * @param project
     */
    static async getGetNotificationsNowAndFuture(project) {
        let allNotifications = await _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.getServer(project + "/todo?includeDone=1&includeFuture=1", true);
        return {
            todosForNow: allNotifications.todos.filter(function (notification) { return !notification.future; }),
            todosForLater: allNotifications.todos.filter(function (notification) { return notification.future; }).sort(function (a, b) {
                let da = new Date(a.createdAt).getTime();
                let db = new Date(b.createdAt).getTime();
                return da > db ? 1 : -1;
            })
        };
    }
    /**
     * Return all notifications for a specific project and a specific item
     * @param project
     * @param currentItemId
     */
    static async getAllNotificationForItem(project, currentItemId) {
        let result = await _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.getServer(project + "/" + "todo?includeFuture=1&itemRef=" + currentItemId, true);
        return result;
    }
}
NotificationsBL.NoticationCache = new _NotificationsCache__WEBPACK_IMPORTED_MODULE_1__.NotificationsCache();


/***/ }),
/* 44 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NotificationsCache: () => (/* binding */ NotificationsCache)
/* harmony export */ });
/* harmony import */ var _NotificationsBL__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43);

class NotificationsCache {
    constructor() {
        this.myTodoCount = [];
        this.myTodos = [];
    }
    setNotificationCounts(todos) {
        this.myTodoCount = todos;
    }
    getNotificationCounts() {
        return this.myTodoCount;
    }
    getNotifications() {
        return this.myTodos;
    }
    setNotifications(todos) {
        this.myTodos = todos;
    }
    /**
     * Update the notifications cache  for the provided list of projects
     * @param projects
     */
    async update(projects) {
        return new Promise((resolve, reject) => {
            if (!this.isEnabled) {
                resolve({ total: 0, allNotifications: undefined });
            }
            clearTimeout(this.notificationUpdateTimer);
            this.notificationUpdateTimer = window.setTimeout(() => {
                this.getAllNotificationsAndUpdateCache(projects).then((changes) => {
                    // in case there's a couple of notifications created in a short time
                    resolve(changes);
                });
            }, 300 + Math.random() * 700); // wait up to 1 second before updating UI -> in case user has many tabs open
        });
    }
    setEnabled(isEnabled) {
        this.isEnabled = isEnabled;
    }
    /**
     * Return the total number of notifications for a specific project from the cache
     * @param project
     */
    getTotalNotificationsProject(project) {
        let list = this.getNotificationCounts().filter(function (notificationCount) {
            return notificationCount.projectShort == project;
        });
        return list.length ? list[0] : null;
    }
    /**
     * Return the total number of notifications from the cache
     */
    getTotalNotifications() {
        let sum = 0;
        $.each(this.getNotificationCounts(), function (cidx, notificationCount) {
            sum += notificationCount.nbTodos;
        });
        return sum;
    }
    /**
     * Return the notifications for a specific project and item from the cache
     * @param project
     * @param item
     */
    getProjectNotifications(project, item) {
        return this.getNotifications().filter(function (notification) {
            return (!project || notification.projectShort == project) && (!item || item == notification.itemRef);
        });
    }
    async getAllNotificationsAndUpdateCache(projects) {
        let that = this;
        let allNotifications = await _NotificationsBL__WEBPACK_IMPORTED_MODULE_0__.NotificationsBL.getAllNotifications();
        let notificationCounts = [];
        // create object with counts
        notificationCounts = allNotifications.todoCounts.filter(function (notificationCount) {
            return projects.indexOf(notificationCount.projectShort) != -1;
        });
        let total = 0;
        for (let tc of notificationCounts) {
            total += tc.nbTodos;
        }
        // show a icon if the number increased
        // store them in session
        _NotificationsBL__WEBPACK_IMPORTED_MODULE_0__.NotificationsBL.NoticationCache.setNotificationCounts(notificationCounts);
        _NotificationsBL__WEBPACK_IMPORTED_MODULE_0__.NotificationsBL.NoticationCache.setNotifications(allNotifications.todos);
        return { total: total, allNotifications: allNotifications };
    }
}


/***/ }),
/* 45 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _matrixlib_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
/* harmony import */ var _RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9);




$.fn.refLink = function (options) {
    let component = new RefLink(this, options);
    this.destroy = () => component.destroy();
    this.getValue = () => component.getValue();
    return this;
};
class RefLink {
    constructor(control, options) {
        let that = this;
        this.settings = options;
        // defaults
        this.settings.style = (typeof this.settings.style === 'undefined') ? _RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkStyle.show : this.settings.style;
        this.settings.tooltip = (typeof this.settings.tooltip === 'undefined') ? _RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkTooltip.none : this.settings.tooltip;
        this.settings.validate = (typeof this.settings.validate === 'undefined') ? true : this.settings.validate;
        this.newTitle = this.settings.title;
        var title = this.settings.title;
        var isFolderLink = (typeof this.settings.folder !== 'undefined' && this.settings.folder);
        var key = this.settings.id; // key without revision
        if (localStorage.getItem('matixShowVersionInId') === 'true') {
            var versionPos = key.indexOf("-v");
            if (versionPos !== -1) {
                key = key.substring(0, versionPos);
            }
        }
        let extraClass = "";
        if (key.startsWith("F-") && key.endsWith("-1"))
            extraClass = "key-top";
        var linkId = "<span class='" + extraClass + " " + (this.settings.isHidden ? "refId greyRefIdHyper" : "refId refIdHyper") + "'>" + (isFolderLink ? "" : key) + "</span>";
        let style = this.settings.css ? (" style='" + this.settings.css + "'") : "";
        var linkTitle = "<span class='key-" + key + " " + (this.settings.isHidden ? "refTitle greyTitle" : "refTitle") + "'" + style + ">" + title + "</span> ";
        if (key && key[0] === "-") {
            // special node, e.g. Deleted Items
            linkId = "";
            linkTitle = "<span class='refTitleSpecial'>" + title + "</span> ";
        }
        var theTitle = $(linkTitle);
        if (this.settings.hideTitle) {
            theTitle.hide();
        }
        if (this.settings.includeSourceLink) {
            theTitle.append(`<span class="fal fa-external-link-alt" style="font-size: small;margin-left: 12px;" title="${this.settings.includeSourceLink}">`);
        }
        var ttpart = $("");
        if (this.settings.style === _RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkStyle.link) {
            ttpart = $("<a>" + linkId + "</a>").attr("href", _globals__WEBPACK_IMPORTED_MODULE_0__.app.createItemUrl(this.settings.id, this.settings.crossProject)).attr('target', '_blank');
            control.html("").append(ttpart).append(theTitle);
        }
        if (this.settings.style === _RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkStyle.selectTree) {
            ttpart = $("<a>" + linkId + "</a>").css("cursor", "pointer");
            ttpart.off("click").click(function (evt) {
                if (evt.ctrlKey || evt.metaKey) {
                    var win = window.open(_globals__WEBPACK_IMPORTED_MODULE_0__.app.createItemUrl(that.settings.id), '_blank');
                    if (win) {
                        //Browser has allowed it to be opened
                        win.focus();
                    }
                    else {
                        //Browser has blocked it
                        alert('Please allow popups for this site');
                    }
                    if (evt.preventDefault)
                        evt.preventDefault();
                    if (evt.stopPropagation)
                        evt.stopPropagation();
                }
                else {
                    return _globals__WEBPACK_IMPORTED_MODULE_0__.app.treeSelectionChangeAsync(that.settings.id);
                }
            });
            control.html("").append(ttpart).append(theTitle);
        }
        else if (this.settings.style === _RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkStyle.edit) {
            this.lineEditor = theTitle.editable({
                mode: 'inline',
                onblur: 'submit',
                placeholder: that.settings.placeholder,
                clear: false,
                showbuttons: false,
                validate: function (value) {
                    if ($.trim(value) == '' && that.settings.validate && $(this).css("display") != "none") {
                        if (that.settings.callback) {
                            that.settings.callback.apply(null, [that.settings.id, ""]);
                        }
                        return { msg: 'title required!', newValue: '', activate: false };
                    }
                },
                success: function (response, newValue) {
                    if (that.settings.callback) {
                        let text = new _matrixlib_index__WEBPACK_IMPORTED_MODULE_2__.HTMLCleaner(newValue, true).getClean(_matrixlib_index__WEBPACK_IMPORTED_MODULE_2__.HTMLCleaner.CleanLevel.Basic);
                        that.settings.callback.apply(null, [that.settings.id, text]);
                    }
                }
            });
            ttpart = $(linkId);
            this.lineEditor.on('shown', function (event) {
                if (that.settings.callback && that.settings.validate) {
                    $(event.delegateTarget).data('editable').input.$input.on('keyup', function (e) {
                        that.newTitle = $(e.delegateTarget).val();
                        that.settings.callback.apply(null, [that.settings.id, that.newTitle]);
                    });
                }
            });
            control.html("").append(ttpart).append(this.lineEditor);
        }
        else if (this.settings.style === _RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkStyle.show) {
            ttpart = $(linkId);
            control.html("").append(ttpart).append(theTitle);
            if (this.settings.callback) {
                control.off("click").click(function (evt) {
                    if (evt.ctrlKey || evt.metaKey) {
                        var win = window.open(_globals__WEBPACK_IMPORTED_MODULE_0__.app.createItemUrl(that.settings.id, that.settings.crossProject), '_blank');
                        if (win) {
                            //Browser has allowed it to be opened
                            win.focus();
                        }
                        else {
                            //Browser has blocked it
                            alert('Please allow popups for this site');
                        }
                        if (evt.preventDefault)
                            evt.preventDefault();
                        if (evt.stopPropagation)
                            evt.stopPropagation();
                    }
                    else {
                        return that.settings.callback.apply(null, [that.settings.id]);
                    }
                });
            }
        }
        else if (this.settings.style === _RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkStyle.select) {
            ttpart = $("<span class='" + (this.settings.isHidden ? "refId greyRefIdHyper" : "refId refIdHyper") + "'>" + key + "</span>");
            control.html("").append(ttpart).append(theTitle);
            if (this.settings.callback) {
                ttpart.off("click").click(function (evt) {
                    if (evt.ctrlKey || evt.metaKey) {
                        var win = window.open(_globals__WEBPACK_IMPORTED_MODULE_0__.app.createItemUrl(that.settings.id), '_blank');
                        if (win) {
                            //Browser has allowed it to be opened
                            win.focus();
                        }
                        else {
                            //Browser has blocked it
                            alert('Please allow popups for this site');
                        }
                    }
                    else {
                        return that.settings.callback.apply(null, [that.settings.id]);
                    }
                });
            }
        }
        if (this.settings.tooltip === _RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkTooltip.html &&
            that.settings.id.indexOf("-") != 0 &&
            _globals__WEBPACK_IMPORTED_MODULE_0__.app.getType(that.settings.id)[0] != "_" &&
            !_globals__WEBPACK_IMPORTED_MODULE_0__.app.isFolder(that.settings.id) &&
            _globals__WEBPACK_IMPORTED_MODULE_0__.app.getCurrentItemId() != that.settings.id) {
            ttpart.data("tooltip", "popover").data("placement", "bottom");
            ttpart.tooltip({ title: "hold shift to see a preview", trigger: '', container: "body" });
            ttpart.on('mouseover', function (event) {
                if (!globalThis.globalMouseDown) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showTooltip(that.settings.id, $(event.delegateTarget), event, that.settings.crossProject);
                    ttpart.tooltip('show');
                    // and hide after a second
                    setTimeout(function () {
                        ttpart.tooltip('hide');
                        $(".tooltip.fade").remove(); // the hiding is really not working well
                    }, 1000);
                }
                else {
                    ttpart.tooltip('hide');
                }
            });
            ttpart.on('mouseleave', function () {
                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.hideTooltip();
                ttpart.tooltip('hide');
            });
            ttpart.on('mousedown', function () {
                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.hideTooltip(true);
                ttpart.tooltip('hide');
            });
        }
    }
    getValue() {
        return this.newTitle;
    }
    destroy() {
        if (this.lineEditor) {
            this.lineEditor.off();
            this.lineEditor.editable('destroy');
        }
        if (this.ttpart) {
            this.ttpart.off();
        }
    }
}
globalThis.globalMouseDown = false;
$(document).mousedown(function () {
    globalThis.globalMouseDown = true;
}).mouseup(function () {
    globalThis.globalMouseDown = false;
});


/***/ }),
/* 46 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ReferenceTools: () => (/* binding */ ReferenceTools)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _Components_ProjectViewDefines__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(18);
/* harmony import */ var _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9);
/* harmony import */ var _ItemCreationView__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(47);
/* harmony import */ var _ItemSelectionView__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(48);
/* harmony import */ var _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(2);
// -----------------------------------------------------------
// Tools to show reference dialog (with up and downtraces)
// -----------------------------------------------------------
/// <reference types="matrixrequirements-type-declarations" />








class ReferenceTools {
    showReferenceDialog(options) {
        if (options.callback == undefined) {
            //Make sure we have a callback
            options.callback = (item) => { };
        }
        var treeContainer = $('<div class="Container nodeContainer"></div>');
        let riskCategories = _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getFieldsOfType("risk2").map(function (rc) { return rc.category; });
        var allDownTypes = [];
        $.each(_globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getLinkTypes(options.item.type, true, true), function (idx, type) {
            allDownTypes.push({ type: type });
        });
        $.each(_globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getLinkTypes(options.item.type, true, false), function (idx, type) {
            allDownTypes.push({ type: type });
        });
        var allUpTypes = [];
        $.each(_globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getLinkTypes(options.item.type, false, true), function (idx, type) {
            if (riskCategories.indexOf(type) == -1) {
                allUpTypes.push({ type: type });
            }
        });
        $.each(_globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getLinkTypes(options.item.type, false, false), function (idx, type) {
            if (riskCategories.indexOf(type) == -1) {
                allUpTypes.push({ type: type });
            }
        });
        var rootDown;
        var rootUp;
        function hideXTCs(nodes) {
            let hideFrom = 1000;
            let hideTo = -1000;
            for (var idx = 0; idx < nodes.length; idx++) {
                // assume that all XTCs come one after the other...
                if (_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(nodes[idx].id).type == "XTC") {
                    if (idx < hideFrom)
                        hideFrom = idx;
                    if (idx > hideTo)
                        hideTo = idx;
                }
            }
            if (hideTo - hideFrom > 2) {
                // at least 4 XTCs
                let dotdotdot = {
                    isRoot: false,
                    isOutDate: false,
                    Class: "nodesExpand",
                    Nodes: [],
                    ToolTip: "click to expand",
                    Content: $("<span>...</span>")
                };
                dotdotdot.Hidden = nodes.splice(hideFrom + 1, hideTo - hideFrom - 1);
                nodes.splice(hideFrom + 1, 0, dotdotdot);
            }
        }
        function createStartNode(item) {
            var itemDate = new Date(item.modDate);
            var missingDownLinks = _globals__WEBPACK_IMPORTED_MODULE_0__.app.getMissingDownLinks(item);
            let evalDownlinks = _globals__WEBPACK_IMPORTED_MODULE_0__.app.evaluateTraceRule(item, true);
            rootDown = { isRoot: true, isDown: true, id: item.id, Content: $("<div></div>").refLink({
                    id: item.id, title: "", style: _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkStyle.show, tooltip: _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkTooltip.html, hideTitle: true
                }), Nodes: [] };
            for (var idx = 0; idx < item.downLinks.length; idx++) {
                var refDate = new Date(item.downLinks[idx].modDate);
                rootDown.Nodes.push({ isCreate: false, isOutDate: (refDate < itemDate), isDown: true, isIndirect: item.downLinks[idx].isIndirect, id: item.downLinks[idx].to, Content: $("<div></div>").refLink({
                        id: item.downLinks[idx].to, title: "", style: _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkStyle.show, tooltip: _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkTooltip.html, hideTitle: true
                    }), Nodes: [] });
            }
            hideXTCs(rootDown.Nodes);
            if (_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.isEditor() && options.canEdit) {
                for (var idx = 0; idx < missingDownLinks.length; idx++) {
                    let required = (evalDownlinks.missingMustHaveCategories.indexOf(missingDownLinks[idx]) != -1) ? "nodeCreate" : "nodeCreateOptional";
                    rootDown.Nodes.push({ isCreate: true, type: missingDownLinks[idx], isDown: true, Class: required, ToolTip: "Create new linked item", Content: $("<div>").html(missingDownLinks[idx]), Nodes: [] });
                }
            }
            var missingUpLinks = _globals__WEBPACK_IMPORTED_MODULE_0__.app.getMissingUpLinks(item);
            let upRequired = _globals__WEBPACK_IMPORTED_MODULE_0__.app.evaluateTraceRule(item, false);
            rootUp = { isRoot: true, isDown: false, id: item.id, Content: $("<div></div>").refLink({
                    id: item.id, title: "", style: _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkStyle.show, tooltip: _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkTooltip.html, hideTitle: true
                }), Nodes: [] };
            for (var idx = 0; idx < item.upLinks.length; idx++) {
                var refDate = new Date(item.upLinks[idx].modDate);
                rootUp.Nodes.push({ isCreate: false, isOutDate: (refDate > itemDate), isDown: false, isIndirect: item.upLinks[idx].isIndirect, id: item.upLinks[idx].to, Content: $("<div></div>").refLink({
                        id: item.upLinks[idx].to, title: "", style: _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkStyle.show, tooltip: _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkTooltip.html, hideTitle: true
                    }), Nodes: [] });
            }
            if (_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.isEditor() && options.canEdit) {
                for (var idx = 0; idx < missingUpLinks.length; idx++) {
                    let required = (upRequired.missingMustHaveCategories.indexOf(missingUpLinks[idx]) != -1) ? "nodeCreate" : "nodeCreateOptional";
                    rootUp.Nodes.push({ isCreate: true, type: missingUpLinks[idx], isDown: false, Class: required, ToolTip: "Create new linked item", Content: $("<div>").html(missingUpLinks[idx]), Nodes: [] });
                }
            }
            if (allUpTypes.length > 0 && _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.isEditor() && options.canEdit) {
                rootUp.Nodes.push({ isSelect: true, types: allUpTypes, isDown: false, Class: "nodeCreate", ToolTip: "Select linked item", Content: $("<div>").html("Select"), Nodes: [] });
            }
            if (allDownTypes.length > 0 && _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.isEditor() && options.canEdit) {
                rootDown.Nodes.push({ isSelect: true, types: allDownTypes, isDown: true, Class: "nodeSelect", ToolTip: "Select linked item", Content: $("<div>").html("Select"), Nodes: [] });
            }
        }
        function RefreshTree() {
            var oldContainer = treeContainer;
            oldContainer.hide();
            treeContainer = $('<div class="Container nodeContainer"></div>');
            _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.append(treeContainer);
            DrawTree({
                Container: treeContainer,
                RootDown: rootDown,
                RootUp: rootUp,
                Layout: "Horizontal",
                OnNodeClick: NodeClick,
                OnNodeDoubleClick: NodeDoubleClick
            });
            oldContainer.html("");
            var ph = treeContainer.parent().height();
            var pw = treeContainer.parent().width();
            var nh = treeContainer.height();
            var nw = treeContainer.data("maxWidth");
            if (ph > nh) {
                treeContainer.css({ top: (ph - nh) / 2 });
            }
            if (pw > nw) {
                treeContainer.css({ left: (pw - nw) / 2 });
            }
            treeContainer.width(nw);
        }
        function NodeClick(theNode, event) {
            if (theNode.Class == "nodesExpand") {
                theNode.Nodes = _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.JSON.clone(theNode.Hidden);
                theNode.Class = "nodesExpanded";
                RefreshTree();
            }
            else if (theNode.Class == "nodesExpanded") {
                // toggle XTCs
                theNode.Nodes = null;
                theNode.Class = "nodesExpand";
                RefreshTree();
            }
            else if (theNode.isSelect) {
                _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog("close");
                var select = new _ItemSelectionView__WEBPACK_IMPORTED_MODULE_5__.ItemSelectionTools();
                select.showDialog({
                    linkTypes: theNode.types,
                    getSelectedItems: async function () {
                        return theNode.isDown ? options.item.downLinks : options.item.upLinks;
                    },
                    selectionChange: function (newRefs) {
                        var oldRefs = theNode.isDown ? options.item.downLinks : options.item.upLinks;
                        // figure out if the old refs have some links to some items which cannot be selected in tree (e.g. uplinks as risk controls -> these should not be removed)
                        let selectableTypes = (theNode.isDown ? allDownTypes : allUpTypes).map(function (st) { return st.type; });
                        $.each(oldRefs, function (oridx, oref) {
                            if (selectableTypes.indexOf(_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(oref.to).type) == -1) {
                                newRefs.push(oref);
                            }
                        });
                        var changes = _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.updateReferences(oldRefs, newRefs, theNode.isDown ? options.item.id : null, theNode.isDown ? null : options.item.id);
                        _globals__WEBPACK_IMPORTED_MODULE_0__.app.commitChangeListAsync(changes).always(function (error, stepsDone) {
                            options.callback(options.item);
                        });
                    },
                    selectMode: _Components_ProjectViewDefines__WEBPACK_IMPORTED_MODULE_2__.SelectMode.items,
                });
            }
            else if (theNode.isCreate) {
                if (_globals__WEBPACK_IMPORTED_MODULE_0__.app.canCreateItemType(theNode.type, false)) {
                    _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog("close");
                    var create = new _ItemCreationView__WEBPACK_IMPORTED_MODULE_4__.ItemCreationTools();
                    create.showDialog({
                        name: _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getItemConfiguration(theNode.type).label,
                        parent: _globals__WEBPACK_IMPORTED_MODULE_0__.app.getRootOfType(theNode.type),
                        type: theNode.type,
                        folder: false,
                        dontOpenNewItem: true,
                        created: function (created) {
                            var fromId;
                            var toId;
                            if (theNode.isDown) {
                                fromId = options.item.id;
                                toId = created.to;
                            }
                            else {
                                fromId = created.to;
                                toId = options.item.id;
                            }
                            _globals__WEBPACK_IMPORTED_MODULE_0__.app.addDownLinkAsync(fromId, toId).done(function () {
                            }).fail(function () {
                                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Could not link items.", "");
                            }).always(function () {
                                options.callback(options.item);
                            });
                        }
                    });
                }
            }
            else if (event.ctrlKey) {
                var win = window.open(_globals__WEBPACK_IMPORTED_MODULE_0__.app.createItemUrl(theNode.id), '_blank');
                if (event.preventDefault)
                    event.preventDefault();
                if (event.stopPropagation)
                    event.stopPropagation();
                return;
            }
            else if (theNode.Nodes.length == 0) {
                _globals__WEBPACK_IMPORTED_MODULE_0__.app.getItemAsync(theNode.id).done(function (item) {
                    if (theNode.isDown) {
                        for (var idx = 0; idx < item.downLinks.length; idx++) {
                            theNode.Nodes[idx] = {
                                isCreate: false, isDown: true, isIndirect: item.downLinks[idx].isIndirect, id: item.downLinks[idx].to, Content: $("<div></div>").refLink({
                                    id: item.downLinks[idx].to, title: "", style: _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkStyle.show, tooltip: _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkTooltip.html, hideTitle: true
                                }), Nodes: []
                            };
                        }
                        hideXTCs(theNode.Nodes);
                    }
                    else {
                        for (var idx = 0; idx < item.upLinks.length; idx++) {
                            theNode.Nodes[idx] = { isCreate: false, isDown: false, isIndirect: item.upLinks[idx].isIndirect, id: item.upLinks[idx].to, Content: $("<div></div>").refLink({
                                    id: item.upLinks[idx].to, title: "", style: _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkStyle.show, tooltip: _Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_3__.refLinkTooltip.html, hideTitle: true
                                }), Nodes: [] };
                        }
                    }
                    // Draw the tree for the first time
                    RefreshTree();
                });
            }
        }
        function NodeDoubleClick(theNode, event) {
            if (theNode.id == undefined) {
                console.warn("No id defined for node. Cannot open item. It's problably double click on select or create.");
                return;
            }
            if (event.ctrlKey || event.metaKey) {
                var win = window.open(_globals__WEBPACK_IMPORTED_MODULE_0__.app.createItemUrl(theNode.id), '_blank');
                if (event.preventDefault)
                    event.preventDefault();
                if (event.stopPropagation)
                    event.stopPropagation();
                return;
            }
            _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog("close");
            _globals__WEBPACK_IMPORTED_MODULE_0__.app.treeSelectionChangeAsync(theNode.id).done(function () {
            }).fail(function () {
            }).always(function () { options.callback(options.item); });
        }
        _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showDialog(_globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm, "References of '" + options.item.id + "'", treeContainer, 900, 400, [{
                text: 'Close',
                class: 'btnCancelIt',
                click: function () {
                    _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog("close");
                }
            }], _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_6__.UIToolsConstants.Scroll.Auto, false, true, null, null, function () {
            _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.resizeDlgContent([]);
            RefreshTree();
        });
        /*
        app.dlgForm.dialog({
            autoOpen: true,
            title: "References of '" + options.item.id + "'",
            height: 400,
            width: 900,
            modal: true,
            resizeStop: function () {
                app.dlgForm.resizeDlgContent([]);
                RefreshTree();
            },
            open: function () {},
            buttons: []
        });
       */
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.getItemAsync(options.item.id).done(function (item) {
            createStartNode(item);
            RefreshTree();
        });
    }
    ;
}


/***/ }),
/* 47 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ItemCreationTools: () => (/* binding */ ItemCreationTools)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _businesslogic_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);
/* harmony import */ var _Components_ItemForm__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(17);
/* harmony import */ var _MainTree_MainTree__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(30);







class ItemCreationTools {
    // pops up a dialog to create one or more items of the given type
    showDialog(options) {
        this.showCreateDialog(options);
    }
    renderButtons(options) {
        let that = this;
        if (options.type && !_globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.canCreate(options.type)) {
            options.control.append("<div class='inlineHelp'>You have no rights to create items or folders in this category</div>");
            return;
        }
        // save on open callback if there is any
        this.onOpenDlg = options.open;
        options.control.addClass("rowFlex").addClass("createButtons");
        for (var idx = 0; idx < options.linkTypes.length; idx++) {
            var disabled = _globals__WEBPACK_IMPORTED_MODULE_0__.app.canCreateItemType(options.linkTypes[idx].type, options.linkTypes[idx].folder) ? "" : "disabled";
            var seleniumClass = "";
            var name = options.linkTypes[idx].buttonName ? options.linkTypes[idx].buttonName : "Create";
            name += " <b>" + options.linkTypes[idx].name + "<b>";
            seleniumClass = "sel_create_" + (options.linkTypes[idx].folder ? "Folder" : options.linkTypes[idx].type);
            if (options.linkTypes[idx].buttonName == "Import") {
                seleniumClass = "sel_import_" + options.linkTypes[idx].name;
            }
            var riskFormat = options.isRiskControl ? "btn-sm " + (idx === 0 ? "rcb0" : "rcbn") : "";
            if (options.tinybuttons) { // overwrite style
                riskFormat = options.isRiskControl ? "btn-xs rcbn" : "btn-xs";
                name = "+" + options.linkTypes[idx].type;
            }
            var button = $("<button class='" + riskFormat + " buttonCreateSelect btn btn-success " + seleniumClass + "' " + disabled + ">" + name + "</button>");
            var parent = _globals__WEBPACK_IMPORTED_MODULE_0__.app.getRootOfType(options.linkTypes[idx].type);
            if (options.parent) {
                parent = options.parent;
            }
            let btnInfo = {
                type: options.linkTypes[idx].type,
                name: options.linkTypes[idx].name,
                folder: options.linkTypes[idx].folder,
                created: options.created,
                parent: parent,
                singleCreate: options.singleCreate,
                dontOpenNewItem: options.dontOpenNewItem
            };
            if (options.linkTypes[idx].import) {
                button.click(() => _businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.mDHF.showCreateFromDocx(btnInfo));
            }
            else {
                button.click(() => this.showCreateDialog(btnInfo));
            }
            options.control.append(button);
            if (!_globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.canCreate(options.linkTypes[idx].type)) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.setEnabled(button, false);
            }
        }
    }
    async showCreateDialog(options) {
        let that = this;
        // options.type -> the type of item to create
        // options.name -> the name of item type to create
        // options.created callback called after item was created
        // options.closed callback called after dialog was closed
        // options.multiple NYI (allow to create several
        // options.parent -> needed for folder tools (undefinef for root folders)
        // options.folder -> true for folder tools
        // prepare dialog - nice and clean..
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.html("");
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.removeClass("dlg-no-scroll");
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.addClass("dlg-v-scroll");
        // render form
        // The boolean {controlInitialized} is necessary because otherwise we can get
        // a JavaScript error in {reviewSaveState} below, if ctrl is not defined.
        let controlInitialized = false;
        let ctrl = new _Components_ItemForm__WEBPACK_IMPORTED_MODULE_3__.ItemControl({
            control: _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm,
            controlState: _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.DialogCreate,
            parent: options.parent,
            type: options.type,
            isItem: !options.folder,
            changed: function () {
                reviewSaveState();
            }
        });
        await ctrl.load();
        controlInitialized = true;
        async function reviewSaveState() {
            if (controlInitialized) {
                changeSaveState(await ctrl.needsSave() && await ctrl.hasTitle());
            }
        }
        var createdMultiple = false;
        _businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.MR1.onItemCreateDlgOpen().subscribe(this, this.onDialogOpen);
        let ok = false;
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog({
            autoOpen: true,
            title: "Create new " + options.name,
            height: 300,
            width: 900,
            modal: true,
            closeOnEscape: false,
            open: function () {
                if (options.singleCreate) {
                    $('.ui-dialog-buttonpane button:eq(0)', _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.parent()).hide();
                }
                else {
                    $('.ui-dialog-buttonpane button:eq(0)', _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.parent()).replaceWith('<label class="dlgCreateMultiple"><input type="checkbox" name="createMultiple">' +
                        'Create multiple</label>');
                }
                // needs to be after line above (changes the first button;-)
                changeSaveState(false);
                _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.startCommitTransaction();
            },
            close: function () {
                _businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.MR1.onItemCreateDlgOpen().unsubscribe(that.onDialogOpen);
                _businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.MR1.triggerItemCreateClose(ok);
                ctrl.destroy();
                _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.parent().html('');
                _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.css('display', "none");
                if (options.closed) {
                    options.closed();
                }
                _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.stopCommitTransaction();
                _MainTree_MainTree__WEBPACK_IMPORTED_MODULE_4__.NavigationPanel.focusTree();
            },
            resizeStop: function () {
                _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.resizeDlgContent([ctrl]);
            },
            buttons: [{
                    text: 'Create multiple',
                    class: 'btnCreateMultiple',
                    click: function () {
                    }
                }, {
                    text: 'Create',
                    class: 'btnDoIt',
                    click: function () {
                        ok = true;
                        window.setTimeout(function () {
                            // disable button during creation
                            // this needs to be done as soon as the create callback was handled
                            changeSaveState(false);
                        }, 1);
                        window.setTimeout(function () {
                            save();
                        }, 200);
                    }
                }, {
                    text: 'Cancel',
                    class: 'btnCancelIt',
                    click: function () {
                        _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.stopCommitTransaction();
                        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog("close");
                    }
                }]
        }).resizeDlgContent([ctrl], true);
        // disable create button
        function changeSaveState(enabled) {
            var saveButton = $('.ui-dialog-buttonpane button:eq(0)', _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.parent());
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.setEnabled(saveButton, enabled);
        }
        var save = async function () {
            if (await ctrl.needsSave()) {
                ctrl.saveAsync(options.type, null).then(function (result) {
                    if (!createdMultiple) {
                        // make sure the item is visible, open the folder
                        _MainTree_MainTree__WEBPACK_IMPORTED_MODULE_4__.NavigationPanel.openFolder(options.parent);
                    }
                    if (options.created) {
                        options.created({ to: result.item.id, title: result.item.title });
                    }
                    if (!$("input[name=createMultiple]", _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.parent()).is(':checked')) {
                        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog("close");
                        if (!createdMultiple && !options.dontOpenNewItem && (options.folder || !_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUISettings().legacyKeepFolder && !_globals__WEBPACK_IMPORTED_MODULE_0__.app.needsSave())) {
                            // just one folder was created: select it in tree
                            _globals__WEBPACK_IMPORTED_MODULE_0__.app.treeSelectionChangeAsync(result.item.id);
                        }
                    }
                    else {
                        createdMultiple = true;
                        changeSaveState(false);
                        ctrl.destroy();
                        ctrl.fillControls();
                    }
                }).catch(function () {
                    changeSaveState(true);
                });
            }
        };
        return this;
    }
    ;
    onDialogOpen(event) {
        let that = event.caller;
        if (that.onOpenDlg) {
            that.onOpenDlg(event.view);
        }
    }
    showCreateDialogEvent(event) {
        this.showCreateDialog({
            type: event.data.type,
            name: event.data.name,
            folder: event.data.folder,
            created: event.data.created,
            parent: event.data.parent,
            singleCreate: event.data.singleCreate,
            dontOpenNewItem: false
        });
    }
    ;
}


/***/ }),
/* 48 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ItemSelectionTools: () => (/* binding */ ItemSelectionTools)
/* harmony export */ });
/* harmony import */ var _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _Components_ProjectViewDefines__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(18);
/* harmony import */ var _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
// -----------------------------------------------------------
// Dialog to selection items
// -----------------------------------------------------------







class ItemSelectionTools {
    constructor() {
    }
    showDialog(options) {
        this.showSelectDialog(options);
    }
    renderButtons(options) {
        options.control.addClass("rowFlex");
        var buttonName = options.buttonName ? options.buttonName : "Select Existing";
        var renderStyle = options.smallbutton ? "btn-sm " : "";
        var seleniumClass = "sel_" + buttonName.replace(/ /g, "");
        var riskFormat = options.isRiskControl ? "btn-sm rcbn" : "";
        if (options.tinybutton) {
            buttonName = "()";
            renderStyle = "btn-xs";
            riskFormat = options.isRiskControl ? "rcbn" : "";
        }
        var button = $("<button name='selectRef' class='" + riskFormat + " buttonCreateSelect btn btn-default " + seleniumClass + " " + renderStyle + "'>" + buttonName + "</button>");
        var dlgOptions = {
            linkTypes: options.linkTypes,
            getSelectedItems: options.getSelectedItems,
            selectionChange: options.selectionChange,
            selectMode: options.selectMode,
            crossProject: options.crossProject,
            crossProjectInit: options.crossProjectInit,
            crossProjectProject: options.crossProjectProject,
            allowedProjects: options.allowedProjects,
            allowedCategories: options.allowedCategories,
            allowAutoDownlinkSelection: options.allowAutoDownlinkSelection,
            crossProjectFilter: options.crossProjectFilter ? options.crossProjectFilter : null,
            crossProjectFilterStrict: options.crossProjectFilterStrict
        };
        if (options.crossProject) {
            button.click(() => this.showCrossProjectDialog(dlgOptions));
        }
        else {
            button.click(() => this.showSelectDialog(dlgOptions));
        }
        options.control.append(button);
    }
    showSelectDialog(options) {
        let that = this;
        // remove global highlight and show only matches in dlg after
        _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Search.searchInDialog();
        var linkTypes = [];
        for (var idx = 0; idx < options.linkTypes.length; idx++) {
            linkTypes.push(options.linkTypes[idx].type);
        }
        let container = $("<div style='height: 100%'>");
        let tree = $("<div class='itemSelectionContainer'>").appendTo(container);
        tree.append(_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.getSpinningWait("Loading tree"));
        _globals__WEBPACK_IMPORTED_MODULE_4__.app.waitForMainTree(loadTree);
        let dlg = $("#selectItemDlg");
        _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showDialog(dlg, options.dialogTitle ? options.dialogTitle : "Select Items", container, 500, options.height ? options.height : 600, [{
                text: 'Select',
                class: 'btnDoIt',
                click: async function () {
                    options.selectionChange(await tree.getController().getValueAsync());
                    dlg.dialog("close");
                }
            }, {
                text: 'Cancel',
                class: 'btnCancelIt',
                click: function () {
                    dlg.dialog("close");
                }
            }], _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_3__.UIToolsConstants.Scroll.None, true, true, function () {
            // dlg is gone, remove highlights and back to global highlighting
            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Search.endSearchInDialog();
            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.popDialog(dlg);
        }, function () {
            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.pushDialog(dlg);
            if (options.selectOptions) {
                $(".treeContent", container).css("bottom", options.selectOptions.height());
                $(".listContent", container).css("bottom", options.selectOptions.height());
            }
            if (options.focusOn) {
                tree.getController().select(options.focusOn);
            }
        });
        async function loadTree() {
            //Let's remove the loading stuff
            tree.html("");
            let treeData = _globals__WEBPACK_IMPORTED_MODULE_4__.app.getTree(linkTypes);
            tree.projectView({
                tree: treeData,
                controlState: _globals__WEBPACK_IMPORTED_MODULE_4__.ControlState.DialogCreate,
                selectedItems: await options.getSelectedItems(),
                canSelectItems: true,
                selectMode: options.selectMode,
                expand: (options.selectMode == _Components_ProjectViewDefines__WEBPACK_IMPORTED_MODULE_2__.SelectMode.auto || options.selectMode == _Components_ProjectViewDefines__WEBPACK_IMPORTED_MODULE_2__.SelectMode.independent) ? 0 : 1,
                autoScroll: options.autoScroll
            });
            if (options.selectOptions) {
                container.append(options.selectOptions);
            }
        }
    }
    toggleSelect(enabled) {
        _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.setEnabled($(".btnDoIt", $("#selectItemDlg").parent()), enabled);
    }
    showCrossProjectDialog(options) {
        let that = this;
        let originalIC = _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.JSON.clone(_globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.ItemConfig);
        // remove global highligh and show only matches in dlg after
        _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Search.searchInDialog();
        var linkTypes = [];
        for (var idx = 0; idx < options.linkTypes.length; idx++) {
            linkTypes.push(options.linkTypes[idx].type);
        }
        var dlgUi = $("<div>");
        dlgUi.append('<span class="ui-helper-hidden-accessible"><input autocomplete="off" type="text"/></span>');
        var projectList = options.allowedProjects ? options.allowedProjects : _globals__WEBPACK_IMPORTED_MODULE_4__.matrixSession.getProjectList(true);
        var projectSelect = [];
        $.each(projectList, function (projectIdx, project) {
            if (!options.crossProjectProject || options.crossProjectProject === project.shortLabel) {
                projectSelect.push({ id: project.shortLabel, label: project.shortLabel + " - " + project.label });
            }
        });
        var tree = $("<div>").html("Select a project");
        var projectSelection = $("<div>").mxDropdown({
            controlState: _globals__WEBPACK_IMPORTED_MODULE_4__.ControlState.DialogCreate,
            canEdit: true,
            dummyData: false,
            help: 'Project',
            parameter: {
                readonly: false,
                placeholder: "select project",
                splitHuman: false,
                options: projectSelect
            },
            valueChanged: async function () {
                var newProjectId = await projectSelection.getController().getValueAsync();
                projectSelection.hide();
                options.crossProjectInit(newProjectId);
                (0,_globals__WEBPACK_IMPORTED_MODULE_4__.setIC)(new _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.ItemConfiguration(_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Logger, _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.JSON));
                if (options.allowAutoDownlinkSelection) {
                    // add a button to auto select downlinked items
                    $(`<div class='dlgLinkButton'>select all downlinks</div>`).appendTo($(".ui-dialog-buttonpane", dlg.parent())).click(async () => {
                        let selection = (await tree.getController().getValueAsync()).map(sel => sel.to);
                        let di = selection.map(sel => `uplinkm=${sel}`);
                        if (di.length) {
                            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.BlockingProgress.Init([{ name: "getting downlinks of current selection" }], true);
                            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.BlockingProgress.SetProgress(0, 1);
                            let search = `/needleminimal`;
                            let params = { search: `mrql:${di.join(" or ")}` };
                            _globals__WEBPACK_IMPORTED_MODULE_4__.restConnection.postServer(newProjectId + search).done((downlinks) => {
                                tree.getController().setValue(selection.concat(downlinks));
                                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.BlockingProgress.SetProgress(0, 100);
                            });
                        }
                    });
                }
                _globals__WEBPACK_IMPORTED_MODULE_4__.restConnection.getServer(newProjectId + "/cat").done(function (catDetails) {
                    _globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.ItemConfig.addCategories(catDetails);
                    _globals__WEBPACK_IMPORTED_MODULE_4__.restConnection.getServer(newProjectId + "/setting").done(function (settings) {
                        _globals__WEBPACK_IMPORTED_MODULE_4__.globalMatrix.ItemConfig.addSettings(settings);
                        let treeSearch = "/tree?fancy" + (options.crossProjectFilter ? ("&filter=" + options.crossProjectFilter) : "");
                        _globals__WEBPACK_IMPORTED_MODULE_4__.restConnection.getServer(newProjectId + treeSearch).done(async function (result) {
                            result = _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.RestDB.filterLegacyReportCat(result);
                            if (options.allowedCategories) {
                                result = result.filter(node => options.allowedCategories.includes(node.type));
                            }
                            if (options.crossProjectFilterStrict) {
                                result = that.removeHidden(result);
                            }
                            var pdb = new _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.DBCache();
                            await pdb.initMatrixTree(result, false);
                            var treeContent = pdb.getTree(linkTypes);
                            tree.html("").projectView({
                                tree: treeContent,
                                controlState: _globals__WEBPACK_IMPORTED_MODULE_4__.ControlState.DialogCreate,
                                selectedItems: options.getSelectedItems(),
                                canSelectItems: true,
                                selectMode: options.selectMode,
                                expand: options.selectMode == _Components_ProjectViewDefines__WEBPACK_IMPORTED_MODULE_2__.SelectMode.auto ? 0 : 1,
                                crossProject: newProjectId
                            });
                            if (options.selectOptions) {
                                $(".treeContent", tree).css("bottom", options.selectOptions.height() + 4);
                            }
                            that.toggleSelect(true);
                        }).fail(function () {
                            (0,_globals__WEBPACK_IMPORTED_MODULE_4__.setIC)(originalIC);
                        });
                    }).fail(function () {
                        (0,_globals__WEBPACK_IMPORTED_MODULE_4__.setIC)(originalIC);
                    });
                }).fail(function () {
                    (0,_globals__WEBPACK_IMPORTED_MODULE_4__.setIC)(originalIC);
                });
            }
        });
        dlgUi.append(projectSelection);
        dlgUi.append(tree);
        var niceSize = _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.getNiceDialogSize(750, 400);
        let dlg = $("#selectItemDlg");
        dlg.html("");
        dlg.removeClass("dlg-v-scroll");
        dlg.addClass("dlg-no-scroll");
        dlg.append(dlgUi);
        if (options.selectOptions) {
            dlg.append(options.selectOptions);
        }
        dlg.dialog({
            autoOpen: true,
            title: "Select Project and Items",
            height: niceSize.height,
            width: niceSize.width,
            modal: true,
            close: function () {
                // just in case it was added
                (0,_globals__WEBPACK_IMPORTED_MODULE_4__.setIC)(originalIC);
                $(".dlgLinkButton").remove();
                // dlg is gone, remove highlights and back to global highlighting
                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Search.endSearchInDialog();
                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.popDialog(dlg);
            },
            open: function () {
                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.pushDialog(dlg);
                if (options.crossProjectProject) {
                    projectSelection.getController().setValue(options.crossProjectProject, false, true);
                }
                that.toggleSelect(false);
            },
            resizeStop: function (event, ui) {
                if (tree) {
                    dlg.resizeDlgContent([tree]);
                }
            },
            buttons: [{
                    text: 'Select',
                    class: 'btnDoIt',
                    click: async function () {
                        options.selectionChange(await tree.getController().getValueAsync());
                        dlg.dialog("close");
                    }
                }, {
                    text: 'Cancel',
                    class: 'btnCancelIt',
                    click: function () {
                        dlg.dialog("close");
                    }
                }]
        }).resizeDlgContent([tree], false);
    }
    ;
    removeHidden(tree) {
        let that = this;
        let newTree = [];
        $.each(tree, function (idx, node) {
            if (!node.isUnselected) {
                let pushy = {
                    id: node.id,
                    title: node.title,
                    type: node.type,
                    isUnselected: node.isUnselected
                };
                if (typeof node.children !== 'undefined') {
                    pushy.children = that.removeHidden(node.children);
                }
                newTree.push(pushy);
            }
        });
        return newTree;
    }
}


/***/ }),
/* 49 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Cleanup: () => (/* binding */ Cleanup),
/* harmony export */   initialize: () => (/* binding */ initialize)
/* harmony export */ });
/* harmony import */ var _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);
/* harmony import */ var _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _common_businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(24);
/* harmony import */ var _common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(43);







class Cleanup {
    constructor() {
        // ****************************************
        // standard plugin interface
        // ****************************************
        this.isDefault = true;
    }
    initItem(_item, _jui) {
        this.item = _item;
        this.jui = _jui;
    }
    initServerSettings(serverSettings) {
    }
    updateMenu(ul, hook) {
        return;
    }
    supportsControl(fieldType) {
        return false;
    }
    createControl(ctrl, options) {
    }
    initProject() {
    }
    // project pages show in the top in Projects, Reports and Documents
    getProjectPagesAsync() {
        return new Promise((resolve, reject) => {
            let that = this;
            let pages = [];
            let extras = _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.ItemConfig.getExtrasConfig();
            if (extras && _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.JSON.isTrue(extras.cleanup)) {
                pages.push({
                    id: "CLEANUP",
                    title: "technical verification of project",
                    folder: "TOOLS",
                    order: 1000,
                    icon: "fal fa-washer",
                    usesFilters: true,
                    render: (options) => that.renderProjectPage(options)
                });
            }
            resolve(pages);
        });
    }
    // ****************************************
    // Misc functions called by task control
    // to create / refresh UI components
    // ****************************************
    renderProjectPage(options) {
        let that = this;
        _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.toggleFilters(false);
        let cleanUpTasks = $("<ul style='margin-top:6px'>");
        _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.getPageTitle("Cleanup").appendTo(options.control);
        let page = $('<div class="panel-body-v-scroll fillHeight" style="padding:12px">').appendTo(options.control);
        $("<button title class='btn btn-success hidden-print'>Find zombie smart links</button>")
            .appendTo(page)
            .click(function () {
            cleanUpTasks.html("").append(_common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.getSpinningWait("finding zombie links"));
            that.runCleanupSmartZombies(cleanUpTasks);
        });
        $("<button style='margin-left:12px' title class='btn btn-success hidden-print'>Find zombie images</button>")
            .appendTo(page)
            .click(function () {
            cleanUpTasks.html("").append(_common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.getSpinningWait("finding zombie links"));
            that.runCleanupImageZombies(cleanUpTasks);
        });
        $("<button style='margin-left:12px' title class='btn btn-success hidden-print'>Find invalid characters</button>")
            .appendTo(page)
            .click(function () {
            cleanUpTasks.html("").append(_common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.getSpinningWait("finding invalid characters"));
            that.runCleanupCharacters(cleanUpTasks);
        });
        let results = $("<div style='padding-top:6px'>").appendTo(page);
        results.append("<p><b>Zombie smart links</b> are smart links which point to items which done exist (anymore).</p>");
        results.append("<p><b>Zombie images</b> are images which are on a third party server. These are problematic, because during the report generation, our server might not have the right to access these, so they will be missing in the generated documents.</p>");
        results.append("<p><b>Invalid characters</b> are characters which cannot be printed. In case data gets imported (maybe through the api or excel), some items might these unprintable characters and printing will fail.</p>");
        results.append(cleanUpTasks).appendTo(page);
    }
    runCleanupSmartZombies(cleanUpTasks) {
        let that = this;
        _globals__WEBPACK_IMPORTED_MODULE_2__.app.getNeedlesAsync("category!=XTC", false, false, "*", false).done((needles) => {
            cleanUpTasks.html("");
            let zombies = [];
            let allItems = needles.map(function (needle) { return _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(needle.id).id; });
            let allFolders = that.getFolders(_globals__WEBPACK_IMPORTED_MODULE_2__.app.getTree());
            let all = allItems.concat(allFolders).concat(_globals__WEBPACK_IMPORTED_MODULE_2__.app.getItemTitle("F-XTC-1") ? _globals__WEBPACK_IMPORTED_MODULE_2__.app.getChildrenIdsRec("F-XTC-1") : []);
            $.each(needles, function (idx, needle) {
                let item = _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(needle.id).id;
                let smartLinks = that.getSmartLinks(needle);
                if (smartLinks) {
                    $.each(smartLinks, function (fsl, sl) {
                        if (all.indexOf(sl) == -1) {
                            console.log("zombie: " + sl + " in id " + item);
                            let parsed = _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(sl);
                            let first = (parsed.isFolder ? "F-" : "") + parsed.type;
                            cleanUpTasks.append("<li>" + item + " has a zombie link to <span>" + first + "-</span>" + parsed.number + "</li>");
                            zombies.push({ from: item, to: sl });
                        }
                    });
                }
            });
            cleanUpTasks.highlightReferences();
            if (zombies.length) {
                _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showConfirm(-1, { title: "Found " + zombies.length + " zombie links! These are smart links which point to non existing items.", ok: "Create Notifications", nok: "Review Manually" }, () => {
                    _globals__WEBPACK_IMPORTED_MODULE_2__.restConnection.getProject("todo", true).done(async function (allNotifications) {
                        let oldFixIt = allNotifications.todos.filter(function (todo) {
                            if (_common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_4__.NotificationsBL.getMessage(todo).indexOf(Cleanup.FIX_THE_ZOMBIE) != 0) {
                                // an unrelated notification - ignore it
                                return false;
                            }
                            for (var zidx = 0; zidx < zombies.length; zidx++) {
                                if (zombies[zidx].from == todo.itemRef && _common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_4__.NotificationsBL.getMessage(todo) == that.getZombieNotificationName(zombies[zidx].to)) {
                                    // there is a zombie and a notification, no need to create a new one, nor to remove  the old
                                    zombies.splice(zidx, 1);
                                    return false;
                                }
                            }
                            ;
                            return true;
                        });
                        // now oldFixIt contains all the obsolete notifications and zombies all new ones
                        await that.createSmartZombieNotifications(zombies, 0);
                        that.removeNotifications(oldFixIt, 0);
                    });
                }, null);
            }
            else {
                _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showSuccess("no zombies found!");
            }
        }).fail(function () {
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Error retrieving project data", "");
        });
    }
    // create a notification about a smart link being a zombie
    async createSmartZombieNotifications(zombies, idx) {
        let that = this;
        if (zombies.length <= idx) {
            return;
        }
        try {
            await _common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_4__.NotificationsBL.createNotification([_globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession.getUser()], _globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession.getProject(), zombies[idx].from, that.getZombieNotificationName(zombies[idx].to), null, null);
        }
        catch (e) { } // ignore errors
        try {
            await that.createSmartZombieNotifications(zombies, idx + 1);
        }
        catch (e) { } // ignore errors
        return;
    }
    getZombieNotificationName(itemId) {
        return Cleanup.FIX_THE_ZOMBIE + itemId;
    }
    getSmartLinks(needle) {
        if (!needle.fieldVal) {
            return null;
        }
        // define expression for smart links
        var regexstr = '((F-)*(\/)*(' + _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.ItemConfig.getCategories(true).join("|") + ')-[0-9]+)';
        var re = new RegExp(regexstr, 'g');
        // parse fields
        var links = [];
        $.each(needle.fieldVal, function (idx, fieldVal) {
            // some fields needs to be ignored
            let fieldType = _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.ItemConfig.getFieldById(_common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(needle.id).type, fieldVal.id).fieldType;
            if (fieldType == _common_businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_3__.FieldDescriptions.Field_crosslinks || fieldType == _common_businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_3__.FieldDescriptions.Field_fileManager || fieldType == _common_businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_3__.FieldDescriptions.Field_signCache || fieldType == _common_businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_3__.FieldDescriptions.Field_risk2 || fieldType == _common_businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_3__.FieldDescriptions.Field_publishedItemList) {
                return;
            }
            var match = fieldVal.value ? fieldVal.value.match(re) : null;
            if (match) {
                $.each(match, function (midx, m) {
                    if (m.indexOf("/") == 0)
                        return; // folder or cross project are not yet supported
                    if (links.indexOf(m) === -1) {
                        links.push(m);
                    }
                });
            }
        });
        return links;
    }
    runCleanupImageZombies(cleanUpTasks) {
        let that = this;
        _globals__WEBPACK_IMPORTED_MODULE_2__.app.getNeedlesAsync("category!=XXXXXX", false, false, "*", false).done((resultsNeedles) => {
            cleanUpTasks.html("");
            let zombies = [];
            $.each(resultsNeedles, function (idx, needle) {
                let item = needle.id;
                let imageLinks = that.getImages(needle);
                if (imageLinks) {
                    $.each(imageLinks, function (fsl, sl) {
                        console.log("zombie: " + sl + " in id " + item);
                        cleanUpTasks.append("<li>" + item + " has a zombie image '<span>" + sl + "'</li>");
                        zombies.push({ from: item, to: sl });
                    });
                }
            });
            $("img", cleanUpTasks).addClass("cleanupImg");
            cleanUpTasks.highlightReferences();
            if (zombies.length) {
                _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showConfirm(-1, { title: "Found " + zombies.length + " zombie images! These are images which point to an external file server.", ok: "Create Notifications", nok: "Review Manually" }, () => {
                    _globals__WEBPACK_IMPORTED_MODULE_2__.restConnection.getProject("todo", true).done(async function (allNotifications) {
                        let oldFixIt = allNotifications.todos.filter(function (todo) {
                            if (_common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_4__.NotificationsBL.getMessage(todo).indexOf(Cleanup.FIX_THE_IMAGE) != 0) {
                                // an unrelated notification - ignore that
                                return false;
                            }
                            for (var zidx = 0; zidx < zombies.length; zidx++) {
                                if (zombies[zidx].from == todo.itemRef && _common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_4__.NotificationsBL.getMessage(todo) == that.getZombieImageName(zombies[zidx].to)) {
                                    // there is a zombie and a notification, no need to create a new one, nor to remove  the old
                                    zombies.splice(zidx, 1);
                                    return false;
                                }
                            }
                            ;
                            return true;
                        });
                        // now oldFixIt contains all the obsolete notifications and zombies all new ones
                        try {
                            await that.createImageZombieNotifications(zombies, 0);
                        }
                        catch (e) {
                            console.warn(e);
                        }
                        that.removeNotifications(oldFixIt, 0);
                    });
                }, null);
            }
            else {
                _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showSuccess("no zombies found!");
            }
        }).fail(function () {
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Error retrieving project data", "");
        });
    }
    // create a notification about a smart link being a zombie
    async createImageZombieNotifications(zombies, idx) {
        let that = this;
        if (zombies.length <= idx) {
            return;
        }
        try {
            await _common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_4__.NotificationsBL.createNotification([_globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession.getUser()], _globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession.getProject(), zombies[idx].from, that.getZombieImageName(zombies[idx].to), null, null);
        }
        catch (e) {
            console.warn(e);
        }
        try {
            await that.createSmartZombieNotifications(zombies, idx + 1);
        }
        catch (e) {
            console.warn(e);
        }
    }
    getZombieImageName(link) {
        return Cleanup.FIX_THE_IMAGE;
    }
    removeNotifications(oldFixIt, idx) {
        let that = this;
        if (oldFixIt.length <= idx) {
            return;
        }
        _common_businesslogic_NotificationsBL__WEBPACK_IMPORTED_MODULE_4__.NotificationsBL.deleteNotification(oldFixIt[idx]).then(function () {
            that.removeNotifications(oldFixIt, idx + 1);
        });
    }
    getFolders(tree) {
        let that = this;
        let folders = [];
        $.each(tree, function (idx, folderOrItem) {
            if (folderOrItem.children) {
                folders.push(folderOrItem.id);
                folders = folders.concat(that.getFolders(folderOrItem.children));
            }
        });
        return folders;
    }
    // image links
    getImages(item) {
        let fields = _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.ItemConfig.getFields(_common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(item.id).type);
        // define expression for smart links
        let quote = "['" + '"]+';
        let regexstr = '<img.*?src.*?=.*?' + quote + '.*?' + quote + '.*?>';
        let re = new RegExp(regexstr, 'g');
        // parse fields
        var links = [];
        for (let field of fields) {
            let fieldVal = item[field.id];
            var match = fieldVal ? fieldVal.match(re) : null;
            if (match) {
                $.each(match, function (midx, m) {
                    if (m.indexOf(_globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.matrixBaseUrl) != -1)
                        return; // local - no issue
                    if (m.indexOf("data:image") != -1)
                        return; // embedded no issue
                    if (links.indexOf(m) == -1)
                        links.push(m.replace(/\\"/g, '"'));
                });
            }
        }
        ;
        return links;
    }
    /*****************************************
     *
     * invalid xml characters
     *
    */
    async runCleanupCharacters(cleanUpTasks) {
        let that = this;
        cleanUpTasks.html("");
        for (let category of _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.ItemConfig.getCategories(true)) {
            let line = $(`<li>Testing category: ${category}</li>`).appendTo(cleanUpTasks);
            let xmlCharIssues = [];
            let results = await _globals__WEBPACK_IMPORTED_MODULE_2__.restConnection.getProject(`needle?search=mrql:category=${category}&fieldsOut=*`);
            for (let needle of results.needles) {
                let itemId = _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(needle.itemOrFolderRef).id;
                for (let fieldVal of needle.fieldVal) {
                    that.testXML(xmlCharIssues, itemId, fieldVal.id, JSON.stringify(fieldVal.value));
                }
                that.testXML(xmlCharIssues, itemId, 0, needle.title);
            }
            if (xmlCharIssues.length == 0) {
                line.append("<span> - no issues found</span>");
            }
            for (let issue of xmlCharIssues) {
                cleanUpTasks.append("<li>" + _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(issue.itemId).link + " has an issue " + issue.details + "</li>");
            }
        }
    }
    static textOk(fieldVal) {
        if (!fieldVal) {
            return true;
        }
        let text = typeof fieldVal == "string" ? fieldVal : JSON.stringify(fieldVal);
        for (var j = 0; j < Cleanup.badEncodedChars.length; j++) {
            let matches = text.match(Cleanup.badEncodedChars[j]);
            if (matches) {
                return false;
            }
        }
        return true;
    }
    testXML(xmlCharIssues, itemId, fieldId, fieldVal) {
        for (var j = 0; j < Cleanup.badEncodedChars.length; j++) {
            if (fieldVal) {
                let matches = fieldVal.match(Cleanup.badEncodedChars[j]);
                if (!matches) {
                    try {
                        let parsed = JSON.parse(fieldVal);
                        matches = parsed.match(Cleanup.badEncodedChars[j]);
                    }
                    catch (e) {
                        // not sire
                    }
                }
                if (matches) {
                    let pos = matches["index"] - 10;
                    let cat = _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(itemId).type;
                    let fieldName = fieldId > 0 ? _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.ItemConfig.getFieldById(cat, fieldId).label : "title";
                    xmlCharIssues.push({ itemId: itemId, details: "field:'" + fieldName + "' pos:" + matches["index"] + " char:" + matches[0] + " near: " + fieldVal.substr(pos < 0 ? 0 : pos, 20) });
                }
            }
        }
    }
}
Cleanup.FIX_THE_ZOMBIE = "Fix the zombie link to ";
Cleanup.FIX_THE_IMAGE = "Fix the zombie image ";
Cleanup.FIX_INVALID_XML = "Find invalid xml";
Cleanup.badEncodedChars = [
    // ok: #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]
    "[\x00-\x08]",
    // OK: #x9 | #xA
    "[\x0B-\x0C]",
    // OK: #xD
    "[\x0E-\x1F]",
    // OK: [#x20-#xD7FF]
    "[\uD800-\uDFFF]",
    // OK: [#xE000-#xFFFD]
    "[\uFFFE-\uFFFF]",
    // some bad html characters NOT USED https://www.w3schools.com/tags/ref_charactersets.asp
    String.fromCharCode(129),
    String.fromCharCode(141),
    String.fromCharCode(143),
    String.fromCharCode(144),
    String.fromCharCode(157),
];
// register the engine as plugin
function initialize() {
    let mCleanup = new Cleanup();
    _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.plugins.register(mCleanup);
}


/***/ }),
/* 50 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   KeyboardShortcuts: () => (/* binding */ KeyboardShortcuts)
/* harmony export */ });
/* harmony import */ var _client_plugins_ReviewContextFrame__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(51);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var _businesslogic_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(11);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1);
// event.metaKey
// On Macintosh keyboards, the META key maps to the Command key (⌘).
// On Windows keyboards, the META key maps to the Windows key.
// PC   -> Mac
// CTRL    -> COMMAND
// ALT     -> Option (Alt-Gr)
// WINDOWS ->
/// <reference types="matrixrequirements-type-declarations" />






;
class KeyboardShortcuts {
    constructor() {
        this.documentSectionIdx = 0;
        let that = this;
        this.defineShortcuts();
        _businesslogic_index__WEBPACK_IMPORTED_MODULE_2__.MR1.onItemDisplayed().subscribe(this, this.initToggleSection);
    }
    defineShortcuts() {
        let that = this;
        this.shortCuts = [];
        this.addCtrlShortcut("?", "Global", "show help dialog", null, null, this.help, true, true);
        this.addShortcut("Delete", "Delete", "delete item", null, [".baseControl", ".itemTitle", "#itemDetails", "input", "textarea"], this.delete, true, false);
        this.addCtrlShortcut("l", "Global", "(l)ocate / find / search", null, null, this.focusSearch, false, true);
        this.addShortcut('<span class="short-ctrl">ctrl</span> - l - ITEM-ID <span class="short-ctrl">space</span>', "Global", "(l)ocate and select item in tree", null, null, this.focusSearch, false, true);
        this.addCtrlShortcut("m", "Global", "mirror current item in review frame", null, null, this.showInReview, false, false);
        this.addCtrlShortcut("Z", "Global", "zen preview of items and docs", null, null, this.showZen, false, false);
        this.addCtrlShortcut("1", "Item Editing/Creation", "click on 1st create / select button", null, null, this.createSelect, true, false);
        this.addCtrlShortcut("2", "Item Editing/Creation", "click on 2nd create / select button", null, null, this.createSelect, true, false);
        this.addCtrlShortcut("3", "Item Editing/Creation", "click on 3rd create / select button", null, null, this.createSelect, true, false);
        this.addCtrlShortcut("4", "Item Editing/Creation", "click on 4th create / select button", null, null, this.createSelect, true, false);
        this.addCtrlShortcut("s", "Item Editing/Creation", "save item, create in new item dialog, select in item select dialog", null, null, this.save, false, false);
        this.addCtrlShortcut("5", "", "", null, null, this.createSelect, true, false);
        this.addCtrlShortcut("6", "", "", null, null, this.createSelect, true, false);
        this.addCtrlShortcut("7", "", "", null, null, this.createSelect, true, false);
        this.addCtrlShortcut("8", "", "", null, null, this.createSelect, true, false);
        this.addCtrlShortcut("9", "", "", null, null, this.createSelect, true, false);
        this.addCtrlShortcutCode(39, "Documents", "right arrow", "open sections in document", null, [".baseControl", "input", "textarea", "#commentDlg"], this.toggleSections, true, false);
        this.addCtrlShortcutCode(37, "Documents", "left arrow", "close sections in document", null, [".baseControl", "input", "textarea", "#commentDlg"], this.toggleSections, true, false);
        this.addShortcutCode(39, "Documents", "right arrow", "open current section", null, [".baseControl", "input", "textarea", "#commentDlg"], this.toggleSection, true, false);
        this.addShortcutCode(38, "Documents", "up arrow", "section up", null, [".baseControl", "input", "textarea", "#commentDlg"], this.toggleSection, true, false);
        this.addShortcutCode(37, "Documents", "left arrow", "close current section", null, [".baseControl", "input", "textarea", "#commentDlg"], this.toggleSection, true, false);
        this.addShortcutCode(40, "Documents", "down arrow", "section down", null, [".baseControl", "input", "textarea", "#commentDlg"], this.toggleSection, true, false);
        this.addCtrlShortcutCode(32, "Documents", "space", "download document", null, [".baseControl", "input", "textarea", "#commentDlg"], this.downloadDocument, false, true);
        let ow = localStorage.getItem('shortcuts_ow');
        if (ow) {
            let oow = JSON.parse(ow);
            $.each(oow, function (oowidx, o) {
                $.each(that.shortCuts, function (si, s) {
                    if (s.key == o.orgKey && s.keyCode == o.orgKeyCode && s.withCtrl == o.orgCtrl) {
                        console.log("change key: " + (s.withCtrl ? "ctrl-" : "") + (s.keyCode ? s.keyCode : s.key) + " to " + (o.newCtrl ? "ctrl-" : "") + (o.newKeyCode ? o.newKeyCode : o.newKey));
                        s.key = o.newKey;
                        s.keyCode = o.newKeyCode;
                        s.withCtrl = o.newCtrl;
                    }
                });
            });
        }
    }
    print() {
        $.each(this.shortCuts, function (si, s) {
            console.log(s.help + ": " + (s.withCtrl ? "ctrl-" : "") + (s.keyCode ? s.keyCode : s.key));
        });
    }
    resetCustomKeys() {
        localStorage.setItem('shortcuts_ow', '');
        console.log("Reset all key to default. F5 (refresh browser) to make effective");
    }
    setKey(orgCtrl, newCtrl, orgKey, newKey) {
        let ow = localStorage.getItem('shortcuts_ow');
        let oow = (ow ? JSON.parse(ow) : []);
        oow.push({ orgCtrl: orgCtrl, orgKey: orgKey, newCtrl: newCtrl, newKey: newKey, orgKeyCode: 0, newKeyCode: 0 });
        localStorage.setItem('shortcuts_ow', JSON.stringify(oow));
        this.defineShortcuts();
        console.log("F5 (refresh browser) to make effective");
    }
    setKeyCode(orgCtrl, newCtrl, orgKeyCode, newKeyCode) {
        let ow = localStorage.getItem('shortcuts_ow');
        let oow = (ow ? JSON.parse(ow) : []);
        oow.push({ orgCtrl: orgCtrl, orgKey: '', newCtrl: newCtrl, newKey: '', orgKeyCode: orgKeyCode, newKeyCode: newKeyCode });
        localStorage.setItem('shortcuts_ow', JSON.stringify(oow));
        this.defineShortcuts();
        console.log("F5 (refresh browser) to make effective");
    }
    addCtrlShortcut(key, category, help, inElement, notInElement, fct, disableEdge, disableSafari) {
        this.shortCuts.push({ withCtrl: true, keyCode: 0, category: category, key: key, help: help, inElement: inElement, notInElement: notInElement, fct: fct, disableEdge, disableSafari });
    }
    addShortcut(key, category, help, inElement, notInElement, fct, disableEdge, disableSafari) {
        this.shortCuts.push({ withCtrl: false, keyCode: 0, category: category, key: key, help: help, inElement: inElement, notInElement: notInElement, fct: fct, disableEdge, disableSafari });
    }
    addCtrlShortcutCode(keyCode, category, key, help, inElement, notInElement, fct, disableEdge, disableSafari) {
        this.shortCuts.push({ withCtrl: true, keyCode: keyCode, category: category, key: key, help: help, inElement: inElement, notInElement: notInElement, fct: fct, disableEdge, disableSafari });
    }
    addShortcutCode(keyCode, category, key, help, inElement, notInElement, fct, disableEdge, disableSafari) {
        this.shortCuts.push({ withCtrl: false, keyCode: keyCode, category: category, key: key, help: help, inElement: inElement, notInElement: notInElement, fct: fct, disableEdge, disableSafari });
    }
    init() {
        let that = this;
        this.lastKeyDown = new Date();
        const queryString = window.location.search;
        const urlParams = new URLSearchParams(queryString);
        let urlGlobalShiftDown = _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.globalShiftDown = urlParams.has('globalShiftDown');
        let urlGlobalCtrltDown = _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.globalCtrlDown = urlParams.has('globalCtrltDown');
        $(window).on('keydown', function (event) {
            var continueEvent = true;
            // console.log("key:" + event.key + " charCode: " + event.charCode + " keyCode:" + event.keyCode + " which:" + event.which + "ctrlKey: " + event.ctrlKey + "metaKey: " + event.metaKey ); 
            let notEdge = Modernizr.smil && !(/Edge/i.test(navigator.userAgent));
            let notSafari = navigator.userAgent.indexOf("Safari") == -1 || navigator.userAgent.indexOf('Chrome') > -1;
            // shortcuts only work for reasonable browsers
            // edge leads straight to hell MATRIX-1912
            $.each(that.shortCuts, function (idx, shortcut) {
                if ((notEdge || !shortcut.disableEdge) && (notSafari || !shortcut.disableSafari)) { // CTRL (PC) or COMMAND (Mac) or background clicked
                    if (event.ctrlKey || event.metaKey || !shortcut.withCtrl) { // CTRL (PC) or COMMAND (Mac) or background clicked
                        if (shortcut.keyCode > 0 && event.which === shortcut.keyCode && that.isGoodTarget($(event.target), shortcut.inElement, shortcut.notInElement)) {
                            shortcut.fct(event, that);
                            //console.log("keyCode triggered" ); 
                            if (event.preventDefault)
                                event.preventDefault();
                        }
                        else if (event.key === shortcut.key && that.isGoodTarget($(event.target), shortcut.inElement, shortcut.notInElement)) {
                            shortcut.fct(event, that);
                            //console.log("key triggered" ); 
                            if (event.preventDefault)
                                event.preventDefault();
                        }
                    }
                }
            });
            if (event.shiftKey || urlGlobalShiftDown) {
                _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.globalShiftDown = true;
                _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.updateTooltip();
            }
            if (event.ctrlKey || urlGlobalCtrltDown) {
                _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.globalCtrlDown = true;
            }
            // every minute (at most) check if the item on the server changed if so inform the user
            // this also make sure that the system does not time out while someone is writing a big text
            // also if someone writes something after he has been away a a login dialog will show 
            var newKeyDown = new Date();
            if (newKeyDown.getTime() - that.lastKeyDown.getTime() > 60000) {
                _globals__WEBPACK_IMPORTED_MODULE_1__.app.pingCurrentItem();
                that.lastKeyDown = newKeyDown;
            }
            return continueEvent;
        });
        $(window).blur(() => { _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.globalShiftDown = false; });
        $(window).on('keyup', function (event) {
            // shift does not actually fire an event of a specific key
            if (event.keyCode === 16) {
                _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.globalShiftDown = false;
            }
            if (event.keyCode === 17 || event.keyCode === 91) {
                _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.globalCtrlDown = false;
            }
            return true;
        });
    }
    isGoodTarget(currentTarget, inElement, notInElement) {
        let isGood = true;
        if (inElement) {
            isGood = false;
            $.each(inElement, function (eidx, el) {
                if (currentTarget.closest(el).length > 0) {
                    isGood = true;
                }
            });
        }
        if (!isGood) {
            return false;
        }
        if (notInElement) {
            $.each(notInElement, function (eidx, el) {
                if (currentTarget.closest(el).length > 0) {
                    isGood = false;
                }
            });
        }
        return isGood;
    }
    isDialogOpen(dialogSelector) {
        return KeyboardShortcuts.isDialogOpen(dialogSelector);
    }
    static isDialogOpen(dialogSelector) {
        try {
            if (dialogSelector) {
                if ($(dialogSelector).hasClass("ui-dialog-content") && $(dialogSelector).is("isOpen")) {
                    return true;
                }
                else if ($(dialogSelector).hasClass("modal") && $(dialogSelector).css("display") == "block") {
                    return true;
                }
                return false;
            }
            if ($(".ui-dialog").is(":visible")) {
                return true;
            }
            if ($('.modal.in').length > 0) { // test if any bootstrap dialog is open
                return true;
            }
        }
        catch (ex) {
            return false;
        }
        return false;
    }
    showInReview(event, that) {
        // create / select dialog
        if (event.preventDefault) {
            event.preventDefault();
        }
        let itemId = _globals__WEBPACK_IMPORTED_MODULE_1__.app.getCurrentItemId();
        if (itemId && !_matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.Item.parseRef(itemId).isFolder) {
            _client_plugins_ReviewContextFrame__WEBPACK_IMPORTED_MODULE_0__.ReviewContextFrame.renderItem(itemId, 0, true);
        }
    }
    showZen(event, that) {
        if (event.preventDefault) {
            event.preventDefault();
        }
        if (!that.isDialogOpen() && _globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.lastMainItemForm) {
            let currentPanel = _globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.currentPanel;
            if (currentPanel.toggleZen) {
                currentPanel.toggleZen();
            }
        }
    }
    save(event, that) {
        // create / select dialog
        if (event.preventDefault) {
            event.preventDefault();
        }
        KeyboardShortcuts.doSave();
    }
    static doSave() {
        if (KeyboardShortcuts.isDialogOpen("#appPopup")) {
            var createBtn = $(".btnDoIt:visible", $("#appPopup").next());
            if (createBtn.length === 1 && !$(".btnDoIt:visible", $("#appPopup").next()).prop("disabled")) {
                var text = $(".btnDoIt:visible", $("#appPopup").next()).text();
                if (text === "Create" || text === "Select") {
                    createBtn.click();
                    return;
                }
            }
        }
        else if (!KeyboardShortcuts.isDialogOpen() && _globals__WEBPACK_IMPORTED_MODULE_1__.app.getNeedsSave()) {
            window.setTimeout(() => { _globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.saveSave(); }, 50);
        }
    }
    createSelect(event, that) {
        var createSelBtns = $(".buttonCreateSelect:visible");
        if (createSelBtns.length + 1 >= Number(event.key) && !($(createSelBtns[Number(event.key) - 1]).prop("disabled"))) {
            $(createSelBtns[Number(event.key) - 1]).click();
        }
    }
    toggleSections(event, that) {
        if (event.key === "ArrowRight") {
            $(".showHideAdmin:not(:checked)").click();
        }
        if (event.key === "ArrowLeft") {
            $(".showHideAdmin:checked").click();
        }
    }
    delete(event, that) {
        if (!that.isDialogOpen()) {
            let btns = $(".deleteItemBtn");
            if (btns.length === 1) {
                $(btns[0]).click();
            }
        }
    }
    initToggleSection(event) {
        let that = event.caller;
        that.documentSectionIdx = -1;
        if (!event.item || event.item.isFolder || !_businesslogic_index__WEBPACK_IMPORTED_MODULE_2__.mDHF.isDocumentFormType(event.item.type)) {
            return;
        }
        var sections = $("#itemDetails .cbimg");
        if (sections.length > 0) {
            that.documentSectionIdx = 0;
            $(sections[that.documentSectionIdx]).next().css("text-decoration", "underline");
        }
    }
    toggleSection(event, that) {
        if (this.documentSectionIdx < 0) {
            return;
        }
        var sections = $("#itemDetails .cbimg");
        if (that.documentSectionIdx < sections.length) {
            let cb = $(sections[that.documentSectionIdx]).parent().prev();
            if (event.key === "ArrowRight" && !cb.is(":checked")) {
                $(sections[that.documentSectionIdx]).click();
            }
            if (event.key === "ArrowLeft" && cb.is(":checked")) {
                $(sections[that.documentSectionIdx]).click();
            }
        }
        if (event.key === "ArrowUp" && that.documentSectionIdx > 0) {
            that.documentSectionIdx--;
        }
        if (event.key === "ArrowDown" && that.documentSectionIdx < sections.length - 1) {
            that.documentSectionIdx++;
        }
        sections.next().css("text-decoration", "inherit");
        if (that.documentSectionIdx < sections.length) {
            $(sections[that.documentSectionIdx]).next().css("text-decoration", "underline");
        }
    }
    downloadDocument(event, that) {
        $("#btnDownload").click();
    }
    focusSearch(event, that) {
        if ($("#appPopup [name=search]").is(":visible")) {
            $("#appPopup [name=search]").focus();
        }
        else {
            $("#projectTree [name=search]").focus();
        }
        event.preventDefault();
    }
    help(event, that) {
        if (_globals__WEBPACK_IMPORTED_MODULE_1__.app.dlgForm.html() !== "" && _globals__WEBPACK_IMPORTED_MODULE_1__.app.dlgForm.is(':visible')) {
            return;
        }
        if ($("#helpModal").length === 0) {
            let globals = "";
            let globalCategories = [];
            $.each(that.shortCuts, function (idx, shortcut) {
                if (shortcut.category !== "" && globalCategories.indexOf(shortcut.category) === -1) {
                    globalCategories.push(shortcut.category);
                }
            });
            $.each(globalCategories, function (cidx, category) {
                let right = true;
                globals += '<div class="row"><div class="col-sm-12"><h1>' + category + '</h1></div></div>';
                globals += '<div class="row">';
                $.each(that.shortCuts, function (idx, shortcut) {
                    if (shortcut.help !== "" && shortcut.category === category) {
                        right = !right;
                        globals += '<div class="col-sm-2 key">' + (shortcut.withCtrl ? "CMD-" : "") + shortcut.key + '</div>';
                        globals += '<div class="col-sm-4 command">' + shortcut.help + '</div>';
                        if (right && idx !== that.shortCuts.length - 1) { // new row
                            globals += '</div><div class="row">';
                        }
                    }
                });
                globals += '</div>';
            });
            let help = `

                <div class="modal" id="helpModal" tabindex="-1" role="dialog" >
                <div class="modal-dialog large" role="document">
                  <div class="modal-content">
                    <div class="modal-header">
                      <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                      <h4 class="modal-title" >Keyboard Shortcuts</h4>
                    </div>
                    <div class="modal-body scrollable-modal">

                    ${globals}

<div class="row"><div class="col-sm-12"><h1>Text Editor</h1></div></div>                    

                    <div class="row">
                              <div class="col-sm-2 key">CMD-b</div><div class="col-sm-4 command">bold</div>
                              <div class="col-sm-2 key">CMD-i</div><div class="col-sm-4 command">italic</div>
                    </div>
                    <div class="row">
                              <div class="col-sm-2 key">CMD-u</div><div class="col-sm-4 command">underline</div>
                              <div class="col-sm-2 key">CMD-k</div><div class="col-sm-4 command">hyperlink</div>
                    </div>
                    
                    
                <div class="row"><div class="col-sm-12"><h1>Table Control</h1></div></div>
              
                    <div class="row">
                              <div class="col-sm-2 key">tab</div><div class="col-sm-4 command">next cell (right)</div>
                              <div class="col-sm-2 key">SHIFT-tab</div><div class="col-sm-4 command">previous cell (left)</div>
                    </div>
                    <div class="row">
                              <div class="col-sm-2 key">CMD-enter</div><div class="col-sm-4 command">below cell (down)</div>
                              <div class="col-sm-2 key">SHIFT-enter</div><div class="col-sm-4 command">open / close text editor</div>
                    </div>
                    <div class="row">
                              <div class="col-sm-2 key">esc</div><div class="col-sm-4 command">cancel edit</div>
                    </div>

<div class="row"><div class="col-sm-12"><h1>Tree Navigation</h1></div></div>
              
                    <div class="row">
                              <div class="col-sm-2 key">arrow down</div><div class="col-sm-4 command">down</div>
                              <div class="col-sm-2 key">arrow right</div><div class="col-sm-4 command">open folder</div>
                    </div>
                    <div class="row">
                              <div class="col-sm-2 key">arrow up</div><div class="col-sm-4 command">up</div>
                              <div class="col-sm-2 key">arrow left</div><div class="col-sm-4 command">close folder</div>
                    </div>
                    <div class="row">
                              <div class="col-sm-2 key">space</div><div class="col-sm-4 command">select/show item</div>
                              <div class="col-sm-2 key"></div><div class="col-sm-4 command"></div>
                    </div>

                    </div>
                    <div class="modal-footer">
                      <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                  </div>
                </div>
              </div>`;
            if (navigator.appVersion.indexOf('Mac') > -1) {
                help = help.replace(/CMD-/g, '<span class="short-ctrl">\u2318</span><span class="short-and">-</span>');
                help = help.replace(/SHIFT-/g, '<span class="short-ctrl">\u21E7</span><span class="short-and">-</span>');
            }
            else {
                help = help.replace(/CMD-/g, '<span class="short-ctrl">ctrl</span><span class="short-and">-</span>');
                help = help.replace(/SHIFT-/g, '<span class="short-ctrl">shift</span><span class="short-and">-</span>');
            }
            $("body").append(help);
        }
        $("#helpModal").modal();
    }
}


/***/ }),
/* 51 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ReviewContextFrame: () => (/* binding */ ReviewContextFrame),
/* harmony export */   initialize: () => (/* binding */ initialize)
/* harmony export */ });
/* harmony import */ var _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);
/* harmony import */ var _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _common_UI_Components_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(16);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);







class ReviewContextFrame {
    constructor() {
        this.isDefault = true;
    }
    onUpdate(ui, config, context) {
        ui.addClass("reviewContextFrame");
        ui.addClass("noRefresh");
        if (!ReviewContextFrame.lastDisplayedItemId) {
            ui.html("no pinned item (use ctrl-m or the item menu to pin an item here)");
        }
    }
    static renderItem(itemId, version, showContextFrameIfNotVisible) {
        ReviewContextFrame.lastDisplayedItemId = itemId;
        // check if review context frame is configured
        let cp = _globals__WEBPACK_IMPORTED_MODULE_3__.globalMatrix.ItemConfig.getContextPagesConfig();
        if (!cp || !cp.tabs)
            return;
        let cps = cp.tabs.filter(function (cpc) { return cpc.type == ReviewContextFrame.reviewContextFrame; });
        if (cps.length == 0)
            return;
        // make sure context frames are visible and tab is selected
        let visible = _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.ContextFrames.showContextFrame(ReviewContextFrame.reviewContextFrame, showContextFrameIfNotVisible);
        if (!visible)
            return;
        // avoid getting same item again and again
        if (ReviewContextFrame.lastRenderedItem == itemId && ReviewContextFrame.lastRenderedVersion == version)
            return;
        _globals__WEBPACK_IMPORTED_MODULE_3__.app.getItemAsync(itemId, version ? version : undefined).done(async function (item) {
            $(".reviewContextFrame").html("");
            if (item.title === undefined) {
                _globals__WEBPACK_IMPORTED_MODULE_3__.matrixApplicationUI.renderErrorControl($(".reviewContextFrame"), "The item " + item.id + " was deleted", "Ýou can find it in the deleted item log.", true);
            }
            else if (_globals__WEBPACK_IMPORTED_MODULE_3__.app.canViewItem(item)) {
                var ctrl = new _common_UI_Components_index__WEBPACK_IMPORTED_MODULE_2__.ItemControl({
                    control: $(".reviewContextFrame"),
                    controlState: _globals__WEBPACK_IMPORTED_MODULE_3__.ControlState.Tooltip,
                    item: item,
                    isItem: (typeof item.children === 'undefined')
                });
                await ctrl.load();
                let bcs = _globals__WEBPACK_IMPORTED_MODULE_3__.app.getBreadcrumbs(item.id).filter(function (bc) {
                    return bc != item.id;
                });
                let breadcrumb = bcs.reverse().map(function (bid) {
                    return bid + " " + _globals__WEBPACK_IMPORTED_MODULE_3__.app.getItemTitle(bid);
                }).join(" > ");
                let title = $(".reviewContextFrame .itemTitle").addClass("tooltipItem").removeClass("pull-left").removeClass("itemTitle");
                title.closest(".itemTitleBarNoToolsNoEdit").removeClass("itemTitleBarNoToolsNoEdit");
                $("<hr style='border-top-color: #aaa;margin-top: 10px;width: 100%;margin-bottom: 10px;'/>").insertAfter(title);
                $('<div style="font-size: smaller;">').append($("<span class='inlineHelp'>").html(breadcrumb)).insertAfter(title);
            }
            else {
                _globals__WEBPACK_IMPORTED_MODULE_3__.matrixApplicationUI.renderErrorControl($(".reviewContextFrame"), "You have no rights to view " + item.id + "", "Talk to the project administrator.", true);
            }
        });
    }
    initItem(item, jui) {
        this._item = item;
    }
    initServerSettings() { }
    initProject() { }
    async getProjectPagesAsync() {
        return [];
    }
    updateMenu(ul) {
        let that = this;
        let cp = _globals__WEBPACK_IMPORTED_MODULE_3__.globalMatrix.ItemConfig.getContextPagesConfig();
        if (!cp || !cp.tabs)
            return;
        let cps = cp.tabs.filter(function (cpc) { return cpc.type == ReviewContextFrame.reviewContextFrame; });
        if (this._item.id && cps.length == 1 && !_common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(this._item.id).isFolder) {
            var dev = $('<li><span class="toolmenu">Pin item in review pane</span></li>').appendTo(ul);
            dev.click(function () {
                ReviewContextFrame.renderItem(that._item.id, 0, true);
            });
        }
    }
    supportsControl() {
        return false;
    }
}
ReviewContextFrame.reviewContextFrame = "reviewContextFrame";
ReviewContextFrame.lastDisplayedItemId = "";
function initialize() {
    let reviewContextFrame = new ReviewContextFrame();
    _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.ContextFrameManager.register({
        id: "reviewContextFrame",
        title: "Review Pane",
        adminOption: "allows to pin items for review",
        onUpdate: function (ui, config, context) {
            reviewContextFrame.onUpdate(ui, config, context);
        }
    });
    _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.plugins.register(reviewContextFrame);
}


/***/ }),
/* 52 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InitializeTestManager: () => (/* binding */ InitializeTestManager),
/* harmony export */   TestManager: () => (/* binding */ TestManager),
/* harmony export */   mTM: () => (/* binding */ mTM)
/* harmony export */ });
/* harmony import */ var _UI_Components_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16);
/* harmony import */ var _DBCache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(15);
/* harmony import */ var _RestDB__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(14);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1);
/* harmony import */ var _UI_Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9);
/* harmony import */ var _UI_Tools_ItemCreationView__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(47);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(5);
/* harmony import */ var _FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(24);
/* harmony import */ var _TestManagerConfiguration__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(53);











class TestManager {
    constructor() {
        this.isDefault = true;
        this.testConfig = new _TestManagerConfiguration__WEBPACK_IMPORTED_MODULE_8__.TestManagerConfiguration();
    }
    getConfiguration() {
        return this.testConfig;
    }
    UpdateFolderMenu(ul, item) {
        let that = this;
        if (!_globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.isEditor()) {
            return;
        }
        if (!item || _globals__WEBPACK_IMPORTED_MODULE_6__.app.isFolder(item.id)) {
            if (this.testConfig.XTCconfig && this.testConfig.XTCconfig.reExecute && this.isXTC(item.type)) {
                var miReExecute = $('<li><a href="javascript:void(0)" id="toolXtcRedo">Redo failed tests</a></li>').click(function () {
                    that.redoFailed(item);
                }).appendTo(ul);
            }
            return;
        }
        if (this.testConfig.isCloneSource(item.type)) {
            $('<li><a href="javascript:void(0)" id="toolXtc">Prepare for test run</a></li>').click(function () {
                _globals__WEBPACK_IMPORTED_MODULE_6__.app.canNavigateAwayAsync().done(function () {
                    that.ConvertAll(null, item.id);
                }).fail(function () {
                });
            }).appendTo(ul);
        }
    }
    InitializeProject() {
        this.testConfig.initialize(_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig);
    }
    // this function is executed before an executed test case is saved.
    // it allows set the test result ("test_result" field) from test steps results
    // in the test table ("test_steps_result" field) if it is set to automatic
    async PreSaveHook(isItem, item, type, controls) {
        if (isItem && type === this.testConfig.XTCconfig.xtcType &&
            this.testConfig.XTCconfig.automatic && this.testConfig.XTCconfig.automatic.length > 0) {
            await this.computeOverallResult(controls);
        }
        this.createHumanValues(item, controls);
    }
    RenderActionButtons(options, body) {
        let that = this;
        if (!this.isXTC(options.type)) {
            return false;
        }
        if (!options.isItem && options.item && options.controlState === _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.FormEdit) {
            // render controls for a folder
            body.append($("<span class='baseControlHelp'>Tools</span>"));
            var folderEdit = $("<div class='hidden-print baseControl'></div>");
            body.append(folderEdit);
            var createTools = new _UI_Tools_ItemCreationView__WEBPACK_IMPORTED_MODULE_5__.ItemCreationTools();
            createTools.renderButtons({
                parent: options.item.id,
                dontOpenNewItem: false,
                control: folderEdit,
                linkTypes: [
                    { type: options.item.type, name: "Test Run Folder", folder: true }
                ]
            });
            var testCreateUI = $("<div  class='hidden-print'></div>");
            body.append(testCreateUI);
            testCreateUI.append("<hr/>");
            testCreateUI.append('<span class="baseControlHelp">Select Test and Use Cases to Run</span>');
            testCreateUI.append("<br/>");
            testCreateUI.append("<br/>");
            var _createTestRun = $('<button class="buttonCreateSelect btn btn-success sel_create_TestForms">Create <b>Test Forms</b></button>').click(function () {
                that.ConvertAll(options.item.id);
            });
            testCreateUI.append(_createTestRun);
        }
        return true;
    }
    // **********************
    // public functions
    // **********************
    // check if the category is an executed test case (usually this will mean category type XTC)
    isXTC(type) {
        return this.testConfig.isXTC(type);
    }
    // check if this is a test case, use case, or something else which can be converted to a TC
    isTC(type) {
        return this.testConfig.isTC(type);
    }
    // return the executed test case category type, (usually this will mean type XTC)
    getXTCType() {
        return this.testConfig.getXTCType();
    }
    // return a simple array of all categories which can be converted to XTC
    getCloneSources() {
        return this.testConfig.getCloneSources();
    }
    redoFailed(folderItem) {
        let that = this;
        const fromFolder = folderItem.id;
        // get all failed tests
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.getNeedlesAsync(that.testConfig.XTCconfig.reExecute, true, false, "", false).done((needles) => {
            let tcs = [];
            // get all tests in selected folder
            let xtcs = _globals__WEBPACK_IMPORTED_MODULE_6__.app.getChildrenIdsRec(fromFolder);
            $.each(needles, function (idx, needle) {
                // for all failed tests in selected folder
                let xtcId = needle.id;
                if (xtcs.indexOf(xtcId) != -1) {
                    $.each(needle.upLinkList, function (uidx, ul) {
                        // get all uplinks which are tests - if there are more than one only use the one in the title
                        // this can happen if a TC includes others
                        let ulItem = _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.Item.parseRef(ul.itemRef);
                        if (that.testConfig.isCloneSource(ulItem.type) && (needle.upLinkList.length == 1 || needle.title.indexOf("(" + ulItem.id + ")") != -1) && tcs.indexOf(ulItem.id) == -1) {
                            tcs.push(ulItem.id);
                        }
                    });
                }
            });
            if (tcs.length == 0) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.showSuccess("All tests passed in this folder");
            }
            else {
                that.ConvertAll("F-" + folderItem.type + "-1", null, tcs);
            }
        }).fail(function () {
        });
    }
    // target folder is a folder or an item (TC) which should be converted to XTC
    // if sourceTC is set to a TC it is executed without letting the user choose a TC in the dialog and no parent folder is created
    ConvertAll(targetFolderId, sourceTC, preselectTC) {
        let that = this;
        let okButton;
        let exeParams = {};
        let tree;
        let wizardStep = 0;
        let niceSize = _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.getNiceDialogSize(730, 480);
        // decide which fields to map from use cases and test cases to XTC
        this.prepareMapping();
        // prepare dialog (wizard step 1)
        _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.Search.searchInDialog();
        // reading values from step one and preparation of step 2
        async function convertAllNext() {
            // change wizard button, start phase 2
            var hasUserChoice = false;
            wizardStep++;
            okButton.html('<span class="ui-button-text">Finish</span>');
            // prepare parameter
            exeParams = {};
            if (sourceTC) {
                exeParams.single = 1;
                exeParams.input = [sourceTC];
                exeParams.output = that.testConfig.XTCconfig.xtcType;
                exeParams.parentFolder = "F-" + that.testConfig.XTCconfig.xtcType + "-1"; // root folder of category
            }
            else {
                // get values step 1, clean ui
                var newSelection = await tree.getController().getValueAsync();
                var ul = $("<ul>");
                var inputItems = [];
                for (var idx = 0; idx < newSelection.length; idx++) {
                    inputItems.push(newSelection[idx].to);
                    let link = $("<div>").refLink({
                        folder: false,
                        id: newSelection[idx].to,
                        title: newSelection[idx].title,
                        style: _UI_Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_4__.refLinkStyle.link,
                        tooltip: _UI_Parts_RefLinkDefines__WEBPACK_IMPORTED_MODULE_4__.refLinkTooltip.html,
                        callback: function () {
                        }
                    });
                    ul.append($("<li>").append(link));
                }
                $(".fancytree-icontext", ul).remove();
                exeParams.input = inputItems;
                exeParams.output = that.testConfig.XTCconfig.xtcType;
                exeParams.parentFolder = (preselectTC && preselectTC.length > 0) ? "F-" + that.testConfig.XTCconfig.xtcType + "-1" : targetFolderId;
                tree.hide();
            }
            // prepare step 2 UI
            _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.addClass("dlg-v-scroll").removeClass("dlg-no-scroll");
            var scrollPanel = $('<div class="layoutContainerScroll"></div>');
            _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.append(scrollPanel);
            // selected items
            if (!sourceTC) {
                let ulContainer = $('<div class="controlContainer" ><span class="baseControlHelp">Items to convert</span></div>');
                ulContainer.append(ul);
                scrollPanel.append(ulContainer);
                // filter options
                var relevant_labels = _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.LabelTools.getLabelDefinitions(that.testConfig.XTCconfig.cloneSources); // labels of UC, TC, ...
                if (relevant_labels.length > 0) {
                    hasUserChoice = true;
                    // filtering execution by label
                    var filters = _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.LabelTools.getFilter().split(","); // currently selected filter
                    exeParams.filter = [];
                    let labelContainer = $('<div class="controlContainer" ><span class="baseControlHelp">Convert only items with all of these labels</span></div>');
                    scrollPanel.append(labelContainer);
                    var useFilters = {};
                    $.each(relevant_labels, function (index, rl) {
                        var set = filters.indexOf(rl.label) > -1;
                        if (set) {
                            exeParams.filter.push(rl.label);
                        }
                        var useFilter = $("<div>");
                        var name = rl.reportName;
                        if (rl.style && rl.style.filter && rl.style.filter.on && rl.style.filter.on.displayName) {
                            name = rl.style.filter.on.displayName;
                        }
                        useFilter.checkBox({
                            controlState: _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.FormEdit,
                            canEdit: true,
                            fieldValue: set ? "true" : "false",
                            help: name,
                            valueChanged: async () => {
                                exeParams.filter = [];
                                for (let ufid of Object.keys(useFilters)) {
                                    let uf = useFilters[ufid];
                                    if (await uf.getController().getValueAsync() === true) {
                                        exeParams.filter.push(ufid);
                                    }
                                }
                            }
                        });
                        // make list more compact, but skipping the last element
                        if (index !== relevant_labels.length - 1) {
                            useFilter.css("margin-bottom", "-8px");
                        }
                        useFilters[rl.label] = useFilter;
                        labelContainer.append(useFilter);
                    });
                }
            }
            var fieldList = _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getItemConfiguration(that.testConfig.XTCconfig.xtcType).fieldList;
            // preset field options
            exeParams.itemPresets = [];
            var defaultTestResult = that.testConfig.XTCconfig.defaultTestResultResult ? that.testConfig.XTCconfig.defaultTestResultResult : "";
            var testResultFieldId = 0;
            for (var tfi = 0; tfi < fieldList.length; tfi++) {
                if (fieldList[tfi].fieldType === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_test_result) {
                    testResultFieldId = fieldList[tfi].id;
                }
            }
            if (testResultFieldId && defaultTestResult) {
                exeParams.itemPresets.push({ field: testResultFieldId, value: defaultTestResult });
            }
            var presetFields = [];
            if (that.testConfig.XTCconfig.presetFields) {
                var inputCtrls = $("<div>");
                var ctrl;
                ctrl = new _UI_Components_index__WEBPACK_IMPORTED_MODULE_0__.ItemControl({
                    control: inputCtrls,
                    controlState: _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.DialogCreate,
                    parent: "",
                    type: that.testConfig.XTCconfig.xtcType,
                    isItem: true,
                    changed: async function () {
                        if (ctrl) {
                            var val = await ctrl.getValues({});
                            // reset defaults
                            exeParams.itemPresets = [];
                            // set default result
                            if (testResultFieldId && defaultTestResult) {
                                exeParams.itemPresets.push({ field: testResultFieldId, value: defaultTestResult });
                            }
                            // set defaults of entered values
                            $.each(presetFields, function (pfidx, pf) {
                                exeParams.itemPresets.push({ field: pf, value: val[pf] });
                            });
                        }
                    }
                });
                await ctrl.load();
                scrollPanel.append(inputCtrls);
                $(".panel-body-v-scroll", inputCtrls).removeClass("panel-body-v-scroll");
                // hide all ctrls by default
                hasUserChoice = showOnlyWantedFields(ctrl, inputCtrls, fieldList, presetFields);
            }
            return hasUserChoice;
        }
        function showOnlyWantedFields(ctrl, inputCtrls, fieldList, presetFields) {
            let hasUserChoice = false;
            $(".itemTitleBarNoTools", ctrl).hide();
            $(".baseControlHelp", inputCtrls).parent().hide();
            $.each(ctrl.getControls(), function (cidx, c) {
                c.getController().disableDelayedShow = true;
            });
            $.each(fieldList, function (tfi, tf) {
                $.each(that.testConfig.XTCconfig.presetFields, function (csi, preset) {
                    var preset = that.testConfig.XTCconfig.presetFields[csi];
                    if ((preset.field.toLowerCase() === "name" && tf.label.toLowerCase() === preset.value.toLowerCase()) ||
                        (preset.field.toLowerCase() === "meaning" && tf.parameterJson && tf.parameterJson.fieldMeaning && tf.parameterJson.fieldMeaning.toLowerCase() === preset.value.toLowerCase())) {
                        $.each($(".baseControlHelp", inputCtrls), function (bchidx, bch) {
                            if ($(bch).html().toLowerCase() === tf.label.toLowerCase() ||
                                (bch.firstChild && bch.firstChild.textContent && bch.firstChild.textContent.toLowerCase() == tf.label.toLowerCase())) {
                                $(bch).parent().show();
                                presetFields.push(tf.id);
                                hasUserChoice = true;
                            }
                        });
                    }
                });
            });
            return hasUserChoice;
        }
        function convertFinish() {
            exeParams.itemFieldMapping = that.getMappingItems();
            _globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getCommentAsync().done(function (comment) {
                exeParams.reason = comment;
                _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.setEnabled($("button", _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.parent()), false);
                _globals__WEBPACK_IMPORTED_MODULE_6__.restConnection.postProject("execute", exeParams, true).done(function (newXTC) {
                    if (newXTC.xtcInError && newXTC.xtcInError.length > 0) {
                        let issues = "";
                        $.each(newXTC.xtcInError, function (eidx, err) {
                            issues += `<b>${err.key}</b><br><ul style="text-align:left">`;
                            $.each(err.errors, function (edidx, errd) {
                                issues += `<li>${errd}</li>`;
                            });
                            issues += "</ul>";
                        });
                        if (newXTC.folder != " -- ")
                            _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.showAck(-1, issues, "Warning: issues during XTC generation");
                    }
                    if (newXTC.folder == " -- ") {
                        // after removing all the ugly things nothing left to create
                        _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.showError("No XTCs were created", "None of the selected tests had all the selected labels, therefore no XTCs have been created");
                        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.html("");
                        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.dialog("close");
                        return;
                    }
                    _globals__WEBPACK_IMPORTED_MODULE_6__.restConnection.getProject("tree?fancy").done(async function (result) {
                        var pdb = new _DBCache__WEBPACK_IMPORTED_MODULE_1__.DBCache();
                        result = _RestDB__WEBPACK_IMPORTED_MODULE_2__.RestDB.filterLegacyReportCat(result);
                        await pdb.initMatrixTree(result, false);
                        if (exeParams.single) {
                            // find new items in folder and copy them into F-XTC-1
                            var current = _globals__WEBPACK_IMPORTED_MODULE_6__.app.getChildrenIds(newXTC.folder);
                            var newItem = "";
                            $.each(pdb.getChildrenIds(newXTC.folder), function (cidx, cid) {
                                if (current.indexOf(cid) === -1) {
                                    _globals__WEBPACK_IMPORTED_MODULE_6__.app.copyFrom(exeParams.parentFolder, pdb.getItemFromCache(cid));
                                    newItem = cid;
                                }
                            });
                            _globals__WEBPACK_IMPORTED_MODULE_6__.app.canNavigateAwayAsync().done(function () {
                                _globals__WEBPACK_IMPORTED_MODULE_6__.app.treeSelectionChangeAsync(newItem);
                            }).fail(function () {
                            });
                        }
                        else {
                            // copy the new tree in the folder
                            var newFolder = pdb.getItemFromCache(newXTC.folder);
                            // insert stuff in folder
                            _globals__WEBPACK_IMPORTED_MODULE_6__.app.copyFrom(exeParams.parentFolder, newFolder);
                            // show folder if you can navigate away...
                            _globals__WEBPACK_IMPORTED_MODULE_6__.app.canNavigateAwayAsync().done(function () {
                                _globals__WEBPACK_IMPORTED_MODULE_6__.app.treeSelectionChangeAsync(newXTC.folder);
                            }).fail(function () {
                            });
                        }
                    });
                    _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.showSuccess("Test " + (sourceTC ? "form was" : "forms were") + " generated");
                    _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.setEnabled($("button", _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.parent()), true);
                    _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.html("");
                    _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.dialog("close");
                }).fail(function (jqxhr, textStatus, error) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.showError("Error", "Status:" + textStatus + "<br/>Error was:" + error);
                    _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.setEnabled($("button", _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.parent()), true);
                    _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.html("");
                    _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.dialog("close");
                });
            });
        }
        // show dialog
        function updateOkButton(enabled) {
            if (okButton) {
                okButton.prop("disabled", !enabled);
                if (enabled) {
                    okButton.removeClass("ui-state-disabled");
                }
                else {
                    okButton.addClass("ui-state-disabled");
                }
            }
        }
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.html("");
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.removeClass("dlg-v-scroll");
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.addClass("dlg-no-scroll");
        if (!sourceTC) {
            let treeConfig = {
                tree: _globals__WEBPACK_IMPORTED_MODULE_6__.app.getTree(this.testConfig.XTCconfig.cloneSources),
                controlState: _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.DialogCreate,
                canSelectItems: true,
                selectMode: _UI_Components_index__WEBPACK_IMPORTED_MODULE_0__.SelectMode.auto,
                collectionChanged: function (count) {
                    updateOkButton(count > 0);
                }
            };
            if (preselectTC) {
                treeConfig.selectedItems = preselectTC.map(function (tc) { return { to: tc, title: "" }; });
            }
            tree = $("<div style='display: flex;flex-direction: column;max-height: 100%;'>").projectView(treeConfig);
            _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.append(tree);
        }
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.dialog({
            autoOpen: true,
            title: "Create Test Form" + (sourceTC ? "" : "s"),
            height: niceSize.height,
            width: niceSize.width,
            modal: true,
            close: function () {
                _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.parent().html('');
                _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.css('display', "none");
                // dlg is gone, remove highlights and back to global highlighting
                _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.Search.endSearchInDialog();
            },
            resizeStop: function () {
                _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.resizeDlgContent([tree]);
            },
            open: function () {
                okButton = $(".ui-dialog-buttonpane button:contains('Next')", _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.parent());
                if (sourceTC) {
                    // skip step 0;
                    var hasUserInput = convertAllNext();
                    updateOkButton(true);
                    if (!hasUserInput) {
                        // no need to wait  / ask the user for more
                        convertFinish();
                    }
                }
                else {
                    // wait for user to select item (unless something was from pre-selection)
                    updateOkButton(preselectTC && preselectTC.length > 0);
                }
            },
            buttons: [{
                    text: 'Next',
                    class: 'btnDoIt',
                    click: function () {
                        if (wizardStep === 0) {
                            var hasUserInput = convertAllNext();
                            updateOkButton(true);
                            if (!hasUserInput) {
                                // no need to wait / ask the user for more
                                convertFinish();
                            }
                        }
                        else {
                            convertFinish();
                        }
                    },
                }, {
                    text: 'Cancel',
                    class: 'btnCancelIt',
                    click: function () {
                        _globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.stopCommitTransaction();
                        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.dialog("close");
                    }
                }]
        }).resizeDlgContent(tree ? [tree] : [], false);
    }
    // get the configuration for a test definition table (e.g. test actions and expected results)
    getTestStepsConfig(category) {
        return this.testConfig.getTestStepsConfig(category);
    }
    // get definition for a test execution table (e.g. including columns with results/comments)
    getTestStepsResultsConfig() {
        return this.testConfig.getTestStepsResultsConfig();
    }
    // returns possible values for the drop down of the completed test case
    getTestRunResultOptions() {
        return this.testConfig.getTestRunResultOptions();
    }
    // returns place holder text if no value is selected
    getTestRunResultPlaceholder(value) {
        return this.testConfig.getTestRunResultPlaceholder(value);
    }
    // creates a search expression needed to find XTCs with state new,progress,ok,error,warning
    getSearchExpression(resultType, notEqual) {
        let fields = _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getFieldsOfType("test_result");
        let compare = notEqual ? '!=' : '=';
        if (fields.length != 1) {
            return ""; // there needs to be exactly one XTC type with on test result field
        }
        // test result field with quotes around
        let fieldName = '"' + fields[0].field.label + '"';
        // all searches are "fieldname"="expression" or "fieldname"!="expression" -> sb + expression + sa
        let sb = fieldName + compare + '"';
        let sa = '"';
        let opts = [];
        // collect different possible results
        if (resultType == "new") {
            opts.push(sb + this.testConfig.XTCconfig.defaultTestResultResult + sa);
            opts.push(sb + "r" + sa); // r = special code: reset -> not executed not started
        }
        else if (resultType == "progress") {
            if (this.testConfig.XTCconfig.automatic.length) {
                // by default the last means automatic  means, undecided = in progress
                let autoProgress = this.testConfig.XTCconfig.automatic[this.testConfig.XTCconfig.automatic.length - 1];
                opts.push(sb + autoProgress.code + "|" + autoProgress.render + "|" + autoProgress.human + sa);
            }
            opts.push(sb + "i" + sa); // i = special code: in progress
        }
        else {
            for (let result of this.testConfig.XTCconfig.automatic) {
                if (result.render == resultType) {
                    opts.push(sb + result.code + "|" + result.render + "|" + result.human + sa);
                }
            }
            for (let result of this.testConfig.XTCconfig.manual) {
                if (result.render == resultType) {
                    opts.push(sb + result.code + sa);
                }
            }
        }
        // combine with and or or
        return " (" + (notEqual ? opts.join(" and ") : opts.join(" or ")) + ") ";
    }
    // **********************
    // helper functions to convert test case to executed test cases
    // this could happen on the server
    // create an automatic mapping of properties to be copied
    // the mapping is done
    // - if the items fields have the same label (e.g. Description to Description)
    // - from field_type "test_steps" to "test_steps_result"
    // - NOT from JIRA and maybe other items
    prepareMapping() {
        var fieldList = _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getItemConfiguration(this.testConfig.XTCconfig.xtcType).fieldList;
        this.lookup = {};
        for (var csi = 0; csi < this.testConfig.XTCconfig.cloneSources.length; csi++) {
            var cs = _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getItemConfiguration(this.testConfig.XTCconfig.cloneSources[csi]).fieldList;
            for (var csfi = 0; csfi < cs.length; csfi++) {
                var csf = cs[csfi];
                for (var tfi = 0; tfi < fieldList.length; tfi++) {
                    var tf = fieldList[tfi];
                    if (tf.label.toLowerCase() !== "jira") {
                        if ((tf.fieldType === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_test_steps_result && csf.fieldType === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_test_steps) ||
                            (tf.label === csf.label)) {
                            this.lookup[csf.id] = tf.id;
                        }
                    }
                }
            }
        }
        return this.lookup;
    }
    getMappingItems() {
        this.prepareMapping();
        var mapping = [];
        $.each(this.lookup, function (lidx, l) {
            if (l) {
                mapping.push({ fromId: lidx, toId: l });
            }
        });
        return mapping;
    }
    // **********************
    // helper functions to compute the values of the overall "test_result" field from
    // in the test table ("test_steps_result" field)
    // **********************
    getResultInfo(val) {
        if (val === "a") {
            return { automatic: true, label: "automatic" }; // automatic never changed
        }
        for (var idx = 0; idx < this.testConfig.XTCconfig.automatic.length; idx++) {
            if (this.testConfig.XTCconfig.automatic[idx].code === val) {
                return { automatic: true, label: this.testConfig.XTCconfig.automatic[idx].human };
            }
        }
        for (var idx = 0; idx < this.testConfig.XTCconfig.manual.length; idx++) {
            if (this.testConfig.XTCconfig.manual[idx].code === val) {
                return { automatic: false, label: this.testConfig.XTCconfig.manual[idx].human };
            }
        }
        return { automatic: false, label: "please select result" };
    }
    async allTestSteps(controls, code) {
        for (var idx = 0; idx < controls.length; idx++) {
            if (controls[idx].fieldType === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_test_steps_result) {
                var val = await controls[idx].control.getController().getValueAsync();
                var v = JSON.parse(val);
                for (var step = 0; step < v.length; step++) {
                    if (v[step].result !== code) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
    async oneTestStep(controls, code) {
        for (var idx = 0; idx < controls.length; idx++) {
            if (controls[idx].fieldType === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_test_steps_result) {
                var val = await controls[idx].control.getController().getValueAsync();
                var v = JSON.parse(val);
                for (var step = 0; step < v.length; step++) {
                    if (v[step].result === code) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    async computeOverallResult(controls) {
        // this should only happen if the value is not set to a manual
        for (var cidx = 0; cidx < controls.length; cidx++) {
            if (controls[cidx].fieldType === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_test_result) {
                var resultInfo = this.getResultInfo(controls[cidx].control.getController().getValueRaw());
                if (resultInfo.automatic) {
                    // apply rules to find a value
                    for (var r = 0; r < this.testConfig.XTCconfig.automatic.length; r++) {
                        var rule = this.testConfig.XTCconfig.automatic[r];
                        // rule: {human:"not started", code:"an", render:"warning", rule:"all", param:""},
                        // no specifc rule... default
                        if (rule.rule === "") {
                            controls[cidx].control.getController().setValue(rule.code, true);
                            return;
                        }
                        // all: check if it applies: all elements need to be set to a value
                        if (rule.rule === "all" && await this.allTestSteps(controls, rule.param)) {
                            controls[cidx].control.getController().setValue(rule.code, true);
                            return;
                        }
                        // one: check if it applies: at least one need to be set to a value
                        if (rule.rule === "one" && await this.oneTestStep(controls, rule.param)) {
                            controls[cidx].control.getController().setValue(rule.code, true);
                            return;
                        }
                    }
                }
            }
        }
    }
    // create for each test step a column human which has the test result as human readable string
    async createHumanValues(item, controls) {
        for (var ci = 0; ci < controls.length; ci++) {
            if (controls[ci].fieldType === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_test_steps_result) {
                var val = await controls[ci].control.getController().getValueAsync();
                var tsr = JSON.parse(val);
                for (var step = 0; step < tsr.length; step++) {
                    for (var idx = 0; idx < this.testConfig.XTCconfig.perStep.length; idx++) {
                        if (this.testConfig.XTCconfig.perStep[idx].code === tsr[step].result) {
                            tsr[step].human = this.testConfig.XTCconfig.perStep[idx].human;
                            tsr[step].render = this.testConfig.XTCconfig.perStep[idx].render;
                        }
                    }
                }
                controls[ci].control.getController().setValue(JSON.stringify(tsr));
            }
            else if (controls[ci].fieldType === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_test_result) {
                var tr = (await controls[ci].control).getController().getValueAsync();
                for (var idx = 0; idx < this.testConfig.XTCconfig.automatic.length; idx++) {
                    if (this.testConfig.XTCconfig.automatic[idx].code === tr) {
                        controls[ci].control.getController().setValue(tr + "|" + this.testConfig.XTCconfig.automatic[idx].render + "|" + this.testConfig.XTCconfig.automatic[idx].human, true);
                    }
                }
                for (var idx = 0; idx < this.testConfig.XTCconfig.manual.length; idx++) {
                    if (this.testConfig.XTCconfig.manual[idx].code === tr) {
                        controls[ci].control.getController().setValue(tr + "|" + this.testConfig.XTCconfig.manual[idx].render + "|" + this.testConfig.XTCconfig.manual[idx].human);
                    }
                }
            }
            else if (this.testConfig.XTCconfig.autoFillTester && controls[ci].fieldType === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_user) {
                // set the test to the first user saving it
                let tester = await controls[ci].control.getController().getValueAsync();
                let config = _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getFieldById("XTC", controls[ci].fieldId);
                if (config && config.parameterJson && config.parameterJson.fieldMeaning == "tester") {
                    if ((this.testConfig.XTCconfig.autoFillTester == "first" && item.history.length == 1 && // first version
                        (tester == item[config.id] || //  and the field is still the preset (from the creation)
                            !tester) // or the field is still empty
                    ) || this.testConfig.XTCconfig.autoFillTester == "last") { // last
                        controls[ci].control.getController().setValue(_globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getUser());
                    }
                }
            }
        }
    }
}
var mTM;
function InitializeTestManager() {
    mTM = new TestManager();
}


/***/ }),
/* 53 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TestManagerConfiguration: () => (/* binding */ TestManagerConfiguration)
/* harmony export */ });

class TestManagerConfiguration {
    constructor() {
        this.XTCconfig = {};
    }
    initialize(itemConfig) {
        this.XTCconfig = itemConfig.getTestConfig();
        if (!this.XTCconfig) {
            // default until 1.3
            this.XTCconfig = {
                "xtcType": "XTC",
                "cloneSources": ["TC", "UC"],
                "columnsSteps": [{ "name": "Action", "field": "action", "editor": "text" },
                    { "name": "Expected Result", "field": "expected", "editor": "text" }],
                "columnsStepsResult": [{ "name": "Action", "field": "action", "editor": "none" },
                    { "name": "Expected Result", "field": "expected", "editor": "none" },
                    { "name": "Passed/Failed", "field": "result", "editor": "result" },
                    { "name": "Comment", "field": "comment", "editor": "text" }],
                "automatic": [],
                "manual": [
                    { "human": "passed", "command": "passed", "render": "ok", "code": "p" },
                    { "human": "failed", "command": "failed", "render": "error", "code": "f" },
                    { "human": "", "command": "not executed", "render": "warning", "code": "" }
                ],
                "perStep": [
                    { "human": "passed", "command": "passed", "render": "ok", "code": "p", "key": "p", "image": "success.png" },
                    { "human": "failed", "command": "failed", "render": "error", "code": "f", "key": "f", "image": "fail.png" },
                    { "human": "", "command": "not executed", "render": "warning", "code": "", "key": "r", "image": "" }
                ]
            };
        }
    }
    // returns possible values for the drop down of the completed test case
    getTestRunResultOptions() {
        var opts = [];
        if (this.XTCconfig.automatic && this.XTCconfig.automatic.length > 0) {
            opts.push({ id: "a", label: "automatic" });
        }
        for (var idx = 0; idx < this.XTCconfig.manual.length; idx++) {
            opts.push({ id: this.XTCconfig.manual[idx].code, label: this.XTCconfig.manual[idx].command });
        }
        return opts;
    }
    // get the configuration for a test definition table (e.g. test actions and expected results)
    getTestStepsConfig(category) {
        if (this.XTCconfig.render && this.XTCconfig.render[category]) {
            return this.XTCconfig.render[category];
        }
        // this is actually a fallback for project created with version 1.5 or before
        // these project can be upgraded by just replacing the xtc_config with the latest version
        // UNLESS column names have been changed (which never happend)....
        return {
            columns: (category === this.XTCconfig.xtcType) ? this.XTCconfig.columnsStepsResult : this.XTCconfig.columnsSteps
        };
    }
    // get definition for a test execution table (e.g. including columns with results/comments)
    getTestStepsResultsConfig() {
        return {
            canBeModified: false,
            columns: this.getTestStepsConfig(this.XTCconfig.xtcType).columns,
            passFailEditorConfig: this.XTCconfig.perStep
        };
    }
    // check if the category is an executed test case (usually this will mean category type XTC)
    isXTC(type) {
        return this.XTCconfig.xtcType && this.XTCconfig.xtcType.toLowerCase() === type.toLowerCase();
    }
    // check if this is a test case, use case, or something else which can be converted to a TC
    isTC(type) {
        return this.isCloneSource(type);
    }
    // return the executed test case category type, (usually this will mean type XTC)
    getXTCType() {
        return this.XTCconfig.xtcType;
    }
    // return a simple array of all categories which can be converted to XTC
    getCloneSources() {
        return this.XTCconfig.cloneSources;
    }
    // returns place holder text if no value is selected
    getTestRunResultPlaceholder(value) {
        var code = value ? (value.split("|")[0]) : "";
        if (this.XTCconfig.automatic && this.XTCconfig.automatic.length > 0) {
            for (var idx = 0; idx < this.XTCconfig.automatic.length; idx++) {
                if (this.XTCconfig.automatic[idx].code === code) {
                    return "automatic - was '" + this.XTCconfig.automatic[idx].human + "' when last saved";
                }
            }
        }
        return "select test result";
    }
    isCloneSource(category) {
        if (!this.XTCconfig.cloneSources) {
            return false;
        }
        for (var csi = 0; csi < this.XTCconfig.cloneSources.length; csi++) {
            if (this.XTCconfig.cloneSources[csi] === category) {
                return true;
            }
        }
        return false;
    }
}


/***/ }),
/* 54 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Layouter: () => (/* binding */ Layouter)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _printinterface_PrintProcessorInterfaces__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(55);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);
/* harmony import */ var _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2);
/* harmony import */ var _JsonEditor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(56);






class Layouter {
    constructor() {
    }
    // show editor dialog
    show(itemId, fieldId, sectionConfig, fromSelection, toSelection, labelFilter, onUpdate, previewOnly = false, previewDiv) {
        let that = this;
        this.itemId = itemId;
        this.sectionConfig = (sectionConfig && sectionConfig.options) ? sectionConfig.options : {};
        // TODO(modules): property landscape not found on ICustomSectionOptions.
        this.isLandScape = sectionConfig && sectionConfig.landscape;
        this.toSelection = toSelection;
        this.fromSelection = fromSelection;
        let ui = $("<div style='width:100%'>");
        ui.append(_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.getSpinningWait("retrieving data..."));
        //MATRIX-6029: Hack to call a specific report for print with only 1 level of downlinks. For that we need to specify the reportNameOverride in the reportOptions
        let reportOptions = { format: "mf", reportNameOverride: "dhf_generic_print" };
        if (labelFilter && labelFilter.length > 0) {
            reportOptions.filter = JSON.parse(labelFilter).join(",");
        }
        let start1 = new Date().getTime();
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.startCreateDocumentAsync(this.itemId, reportOptions).done(function (result) {
            that.waitForJob(result.jobId).done(function (iXML) {
                let start2 = new Date().getTime();
                console.log("time to create filter[s]: " + (start2 - start1) / 1000);
                _globals__WEBPACK_IMPORTED_MODULE_0__.app.downloadInMemory(result.jobId, iXML.toString(), "text").done(function (iDown) {
                    let start3 = new Date().getTime();
                    console.log("time to download filter[s]: " + (start3 - start2) / 1000);
                    that.mf = $.parseXML(iDown);
                    let start4 = new Date().getTime();
                    console.log("time to create dom[s]: " + (start4 - start3) / 1000);
                    _globals__WEBPACK_IMPORTED_MODULE_0__.app.readSettingCustomerJSONAsync("PrintProcessor").done(function (formatters) {
                        if (!previewOnly)
                            that.initEditor(formatters, ui);
                        else
                            that.displayPreview(previewDiv);
                    });
                });
            });
        });
        // show dialog
        if (!previewOnly) {
            let dlg = $("<div class=''>").appendTo($("body"));
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showDialog(dlg, "Section Layout", ui, $(document).width() * 0.9, _globals__WEBPACK_IMPORTED_MODULE_0__.app.itemForm.height() * 0.9, [{
                    text: 'Save',
                    class: 'btnDoIt',
                    click: function () {
                        onUpdate(JSON.stringify(that.sectionConfig));
                        $("#layoutR").html("");
                        dlg.dialog("close");
                    }
                }, {
                    text: 'Cancel',
                    class: 'btnCancelIt',
                    click: function () {
                        $("#layoutR").html("");
                        dlg.dialog("close");
                    }
                }], _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_3__.UIToolsConstants.Scroll.None, true, true, () => { dlg.remove(); }, () => { }, () => {
                $("#layoutR").height(dlg.height());
                dlg.resizeDlgContent([]);
            });
        }
    }
    // show the layout editor
    initEditor(formatters, ui) {
        var sidebar = localStorage.getItem('layout_sidebar');
        if (!sidebar) {
            sidebar = '200px';
        }
        let layoutC = $(`<div id="layoutC" style="overflow:auto;width:${sidebar};padding-right:12px;float:left;height: 100%;margin-right: 6px;">`);
        let dragbar = $(`<div style="background-color:var(--Grey6);height: 100%;float:left;width: 5px;cursor: col-resize;">`);
        let layoutR = $(`<div id="layoutR" style="overflow:auto;padding-left:12px;height: 100%;">`);
        ui.html("").append(layoutC).append(dragbar).append(layoutR).css("height", "100%");
        const leftContainer = $(`<div class="layouter-left-container">`).appendTo(layoutC);
        // dropdown  to select width
        this.displayStyle = { width: this.isLandScape ? "26.7cm" : "18cm" };
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.addDropdownToValue(leftContainer, "page size & orientation (preview)", this.displayStyle, "width", [
            { id: "18cm", label: "Portrait (A4)" },
            { id: "18.6cm", label: "Portrait (Letter)" },
            { id: "26.6cm", label: "Portrait (A3)" },
            { id: "26.7cm", label: "Landscape (A4)" },
            { id: "24.9cm", label: "Landscape (Letter)" },
            { id: "39cm", label: "Landscape (A3)" },
            { id: "100%", label: "Full width" },
            { id: "EXCEL", label: "Excel (Plaintext)" }
        ], false, false, () => this.displayPreview(), null, { width: "100%" });
        const textOptionDiv = $("<div style='margin: -12px 0 0 -12px;'>").appendTo(leftContainer);
        $("<button class='btn btn-link'>Set introductory text</button>").click(() => this.introOptions()).appendTo(textOptionDiv);
        $("<button class='btn btn-link'>Set advanced options</button>").click(() => this.advancedOptions()).appendTo(textOptionDiv);
        let filter = $('<input type="text" style="margin-bottom:10px;padding: 6px 12px;" placeholder="filter..." class="form-control">').on("keyup", function (e) {
            let filterVal = filter.val().toLowerCase();
            $(".formatter-item").each((idx, fi) => {
                (filterVal && $(fi).text().toLowerCase().indexOf(filterVal) == -1) ? $(fi).hide() : $(fi).show();
            });
        }).appendTo(leftContainer);
        this.formatterList(formatters).appendTo(leftContainer);
        dragbar.mousedown(function (e) {
            if (e.preventDefault)
                e.preventDefault();
            $(document).mousemove(function (e) {
                let maxWidth = ui.width() - 100;
                let mousePos = e.pageX - layoutC.offset().left; // mousepos relative to left border of layoutC
                if (mousePos > 100 && mousePos < maxWidth) {
                    localStorage.setItem('layout_sidebar', (mousePos - 15) + "px");
                    layoutC.width(mousePos - 15);
                }
            });
        });
        if (!this.sectionConfig.formatter || this.sectionConfig.formatter.trim() == "" || !formatters.items[this.sectionConfig.formatter]) {
            layoutR.append(`<div style="padding: 16px;"><em>Please choose a layout!</em></div>`);
        }
        else {
            this.displayPreview();
        }
    }
    formatterList(formatters) {
        const createFormatter = (formatter) => {
            const selected = this.sectionConfig.formatter === formatter.uid ? "selected" : "";
            const id = `formatter-item-${formatter.uid}`;
            let help = formatter.help;
            if (help == null || help.trim() == "") {
                help = "<i>No description provided</i>";
            }
            return $(`<div class="formatter-item ${selected}" id="${id}" title="${formatter.path ? formatter.path : ""}"><div class="formatter-title"><span class="formatter-id">${formatter.uid}</span> ${formatter.name}</div><div class="formatter-help">${help}</div></div>`)
                .click(() => {
                this.sectionConfig.formatter = formatter.uid;
                this.displayPreview();
                $(".formatter-item.selected").removeClass("selected");
                $("#" + id).addClass("selected");
            });
        };
        const sectionTitle = (title) => {
            return $(`<div class="list-section-title">${title}</div>`);
        };
        const formatterList = $(`<div class="formatter-list">`);
        const scroller = () => {
            const id = `#formatter-item-${this.sectionConfig.formatter}`;
            const offsetElement = $(id);
            if (offsetElement.length > 0) {
                const me = offsetElement[0];
                const myOffset = me.offsetTop;
                const parentOffset = me.parentElement.offsetTop;
                formatterList.scrollTop(myOffset - parentOffset);
            }
        };
        sectionTitle("Lists").appendTo(formatterList);
        const topLevelLists = Layouter.filterTopLevelFormatters(formatters.items, "SEQUENTIAL");
        const topLevelTables = Layouter.filterTopLevelFormatters(formatters.items, "TABLE");
        Object.keys(topLevelLists).sort(Layouter.sortItems).forEach(id => {
            const formatter = formatters.items[id];
            createFormatter(formatter).appendTo(formatterList);
        });
        sectionTitle("Tables").appendTo(formatterList);
        Object.keys(topLevelTables).sort(Layouter.sortItems).forEach(id => {
            const formatter = formatters.items[id];
            createFormatter(formatter).appendTo(formatterList);
        });
        window.setTimeout(scroller, 100);
        return formatterList;
    }
    displayPreview(previewDiv) {
        let width = "100%";
        if (previewDiv == null) {
            previewDiv = $("#layoutR");
            width = this.displayStyle.width;
        }
        Layouter.convert(this.sectionConfig, this.fromSelection, this.toSelection, width, this.mf, previewDiv);
    }
    introOptions() {
        const dlg = $("<div>").appendTo($("body"));
        const ui = $("<div style='height:100%;width:100%'>");
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.addRichTextInput(ui, { width: "100%" }, "intro", this.sectionConfig, "description", () => { }, () => { });
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.addRichTextInput(ui, { width: "100%" }, "intro only if there are items selected", this.sectionConfig, "descriptionContent", () => { }, () => { });
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.addRichTextInput(ui, { width: "100%" }, "intro if there are no items selected", this.sectionConfig, "descriptionNoContent", () => { }, () => { });
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showDialog(dlg, "Set introductory text", ui, $(document).width() * 0.90, _globals__WEBPACK_IMPORTED_MODULE_0__.app.itemForm.height() * 0.90, [{
                text: "Close",
                "class": "btnDoIt",
                click: () => {
                    dlg.dialog("close");
                }
            }], _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_3__.UIToolsConstants.Scroll.Vertical, true, true, () => { dlg.remove(); this.displayPreview(); });
    }
    advancedOptions() {
        let current = this.sectionConfig.functionDefaults ? this.sectionConfig.functionDefaults : {};
        let je = new _JsonEditor__WEBPACK_IMPORTED_MODULE_4__.JsonEditor();
        let apiHelp = `<h1>Section options</h1>
<p>The content is rendered using functions specified in the PRINT project. Each function has some parameters with some default values.</p>
<p>The default parameters of functions can be overwritten globally (for all projects), in the PRINT project itself, for the project itself or for each section</p>
<p>These are the section settings with the following syntax</p>
<pre>
{
    "debug":number // default:0. if set to 1 or more some debugging information is printed.
    "FUNCTION_1_ID": { // the id of the function (see below a list of all functions)
        "FUNCTION_PARAM_1":value1 // the name of a parameter and it's value
        "FUNCTION_PARAM_2":value2
        ...
    },
    "FUNCTION_2_ID": {
        ...
    }
}
</pre>
<p>The following functions exist:</p>`;
        $.each(_printinterface_PrintProcessorInterfaces__WEBPACK_IMPORTED_MODULE_1__.globalPrintConfig.getAllFunctions(), function (uid, fct) {
            apiHelp += fct.getHelp(true).replace("<pre>", `<pre>"${uid}":{`).replace("</pre>", "}</pre>");
        });
        let currentCode = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.unEscapeJson(JSON.stringify(current));
        je.showDialog("Advanced Options", currentCode, (newValue) => {
            this.sectionConfig.functionDefaults = JSON.parse(_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.escapeJson(newValue));
            this.displayPreview();
        }, { apiHelp: apiHelp });
    }
    static sortItems(a, b) {
        const aRef = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.parseRef(a);
        const bRef = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.parseRef(b);
        return aRef.number - bRef.number;
    }
    static filterTopLevelFormatters(formatters, category) {
        const result = {};
        Object.keys(formatters).forEach(key => {
            if (key.indexOf(category + "-") == 0 && !formatters[key].deleted && formatters[key].topLevelTemplate) {
                result[key] = formatters[key];
            }
        });
        return result;
    }
    // wait until a document has been created
    waitForJob(jobId) {
        let that = this;
        let res = $.Deferred();
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.getReportDetails(jobId).done(function (progress) {
            if (progress.status === "Error" || progress.status.indexOf("Report generation error") === 0) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Error creating document", "");
            }
            else if (progress.status !== "Done" || progress.progress < 100) {
                window.setTimeout(function () {
                    that.waitForJob(jobId).done(function (iXML, oXML) {
                        res.resolve(iXML, oXML);
                    });
                }, 500);
            }
            else {
                let filters = progress.jobFile.filter(jobFile => jobFile.visibleName == "filter.xml");
                // let mos = progress.jobFile.filter( (jobFile) => { return jobFile.visibleName != "filter.xml" && jobFile.mimeType == "text/xml"});
                res.resolve(filters[0].jobFileId); //, mos[0].jobFileId);
            }
        });
        return res;
    }
    static convert(customSectionConfig, customSectionFroms, customSectionTo, paperWidth, mf, container) {
        let pp = _printinterface_PrintProcessorInterfaces__WEBPACK_IMPORTED_MODULE_1__.globalPrintConfig.getPrintProcessor();
        var format = "html";
        if (paperWidth === "EXCEL") {
            format = "xlsx";
        }
        let startPrepare = new Date().getTime();
        pp.prepareProcessing(mf, (message) => {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("processing error", message);
        }, format);
        let timer = new Date().getTime() - startPrepare;
        console.log("report preparation time [s]:" + timer / 1000);
        container.html("").append(_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.getSpinningWait("creating preview..."));
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.readSettingCustomerJSONAsync("PrintProcessor").done(async function (formatters) {
            // put newest into cache
            _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.setCustomerSettingJSON("PrintProcessor", formatters);
            let projectSettings = _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getDHFConfig();
            let projectFunctionDefaults = projectSettings && projectSettings.functionDefaults ? projectSettings.functionDefaults : { debug: 0 };
            let startDate = new Date().getTime();
            let rendered = await pp.processSection(formatters, customSectionConfig, projectFunctionDefaults, customSectionFroms ? customSectionFroms.split(",") : [], customSectionTo ? customSectionTo.split(",") : []);
            let timer = new Date().getTime() - startDate;
            console.log("report generation time [s]:" + timer / 1000);
            console.log(pp.globals.count);
            let iframe = $(`<iframe frameborder='0' style='width:${paperWidth}'>`);
            container.html("");
            container.append(iframe);
            let doc = (iframe[0].contentWindow || iframe[0].contentDocument).document;
            const ppStylingKey = "new_element_custom_style";
            let ppStyling = "";
            if (_globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getSetting(ppStylingKey)) {
                ppStyling += _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getSetting(ppStylingKey) + "\n";
            }
            ppStyling += pp.getCustomStylesheet();
            doc.write(`<!doctype html>
            <html>
                <head>
                <link href="/static/css/print.css" rel="stylesheet" type="text/css" />
                <link href="/css/font-awesome.min.css" rel="stylesheet" type="text/css" />
                <style>
                    ${ppStyling}
                </style>
                </head>
                <body>
                    ${rendered.html}
                </body>
            </html>`);
            doc.close();
            $("a", doc.body).attr("target", "_blank");
            iframe.width(paperWidth == "100%" ? (iframe[0].contentWindow.document.body.scrollWidth - 10) : iframe.width() + 50);
            iframe.height(iframe[0].contentWindow.document.body.scrollHeight + 50);
            window.setTimeout(() => {
                iframe.height(iframe[0].contentWindow.document.body.scrollHeight + 50);
            }, 1);
        });
    }
}


/***/ }),
/* 55 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PrintFindAllScriptsRegex: () => (/* binding */ PrintFindAllScriptsRegex),
/* harmony export */   globalPrintConfig: () => (/* binding */ globalPrintConfig),
/* harmony export */   setGlobalPrintConfig: () => (/* binding */ setGlobalPrintConfig)
/* harmony export */ });

const PrintFindAllScriptsRegex = /\$\[.*?\]\$/g;
var globalPrintConfig;
function setGlobalPrintConfig(config) {
    globalPrintConfig = config;
}
;
;


/***/ }),
/* 56 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   JsonEditor: () => (/* binding */ JsonEditor)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);




class JsonEditor {
    constructor() { }
    ;
    showDialog(title, value, onOk, semanticValidate = {}) {
        let dlg = $("<div>").appendTo("body");
        dlg.html("");
        dlg.addClass("dlg-v-scroll");
        dlg.removeClass("dlg-no-scroll");
        const container = $("<div id='jsonEditorContainer' class='jsonEditorContainer'>");
        // const containerContainer = $("<div id='jsonEditorContainerContainer'>");
        const editor = $("<div class='theeditor'>").appendTo(container);
        // container.append(containerContainer);
        // dlg.append(container);
        _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showDialog(dlg, title, container, $(document).width() * 0.9, _globals__WEBPACK_IMPORTED_MODULE_0__.app.itemForm.height() * 0.9, [
            {
                text: 'Ok',
                class: 'btnDoIt',
                click: async function (event) {
                    let value = await editor.getController().getValueAsync();
                    try {
                        let escapedJsonStr = _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.JSON.escapeJson(value);
                        jsl.parser.parse(escapedJsonStr);
                        let json = JSON.parse(escapedJsonStr);
                        const callback = (error) => {
                            const submit = () => {
                                onOk(value);
                                dlg.dialog("close");
                            };
                            if (error) {
                                if (event.shiftKey) {
                                    console.error("Validation error suppressed", error);
                                    submit();
                                    return;
                                }
                                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("JSON Validation error", `<div style='font-weight: bold'>You can still save if you press the Shift key while clicking OK.</div><div>${error}</div>`);
                                // ignore OK
                                event.preventDefault();
                                //return false;
                            }
                            else {
                                submit();
                            }
                        };
                        if (semanticValidate.validationFunction) {
                            semanticValidate.validationFunction(json)
                                .then(callback)
                                .catch((err) => console.log("error", err));
                        }
                        else if (semanticValidate.schema) {
                            _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.jsonValidator.validateType(json, semanticValidate.schema)
                                .then(errors => callback(_globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.jsonValidator.errorString(errors)))
                                .catch((err) => console.log("error", err));
                        }
                        else {
                            onOk(value);
                            dlg.dialog("close");
                        }
                    }
                    catch (parseException) {
                        if (typeof parseException === "object" && "message" in parseException) {
                            alert(parseException.message);
                        }
                    }
                }
            }, {
                text: 'Cancel',
                class: 'btnCancelIt',
                click: function () {
                    dlg.dialog("close");
                }
            }
        ], _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_2__.UIToolsConstants.Scroll.None, false, true, () => {
            dlg.remove();
        }, () => {
            editor.html("").plainText({
                id: "",
                help: "&nbsp;",
                controlState: _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.DialogCreate,
                valueChanged: function () { },
                isFolder: true,
                canEdit: true,
                fieldValue: value,
                parameter: {
                    code: 'json',
                    height: 0,
                    autoFormat: true,
                    showJSONFormat: true,
                    apiHelp: semanticValidate.apiHelp,
                    hideFullscreen: true
                }
            });
            if (semanticValidate.schema) {
                _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.jsonValidator.schemaView(semanticValidate.schema).then(view => {
                    editor.addClass("split");
                    let drag = $("<div id='codeDrag'>");
                    container.append(drag);
                    let help = $(view.render());
                    help.addClass("editorHelp");
                    container.append(help);
                    drag.mousedown(function (e) {
                        if (e.preventDefault)
                            e.preventDefault();
                        let mi = container.offset().left;
                        let ma = container.width() + mi;
                        $(document).mousemove(function (e) {
                            if (e.pageX > mi + 100 && e.pageX < ma - 100) {
                                let per = 100 * (e.pageX - mi) / container.width();
                                editor.css("width", per + "%");
                                help.css("width", (100 - per) + "%");
                            }
                        });
                    });
                }).catch((err) => console.log("error", err));
            }
            else {
                editor.css("width", "100%");
            }
        }, () => {
            $(".CodeMirror", dlg).height($(".apiEdit", dlg).height() - 50);
        }, false);
    }
}


/***/ }),
/* 57 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Redlining: () => (/* binding */ Redlining),
/* harmony export */   initialize: () => (/* binding */ initialize)
/* harmony export */ });
/* harmony import */ var _common_businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(24);
/* harmony import */ var _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11);
/* harmony import */ var _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);
/* harmony import */ var _common_matrixlib_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3);
/* harmony import */ var _common_matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(2);
/* harmony import */ var _common_UI_Components__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(16);
/* harmony import */ var _common_UI_Tools_ItemHistoryView__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(29);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(5);












class Redlining {
    constructor() {
        this.isDefault = true;
        this.selectedOnly = null;
        this.documentCompareCanceled = false;
    }
    initItem(item, jui) {
        this._item = item;
        this._jui = jui;
    }
    initServerSettings() { }
    initProject() { }
    supportsControl() {
        return false;
    }
    updateMenu(ul) {
        let that = this;
    }
    getProjectPagesAsync() {
        return new Promise((resolve, reject) => {
            let that = this;
            let pages = [];
            pages.push({ id: "REDLINE", title: "Redlining", folder: "AUDIT", order: 3000, icon: "fal fa-stream", usesFilters: false, render: (options) => that.renderProjectPage(options) });
            resolve(pages);
        });
    }
    compareDocuments(report, leftId, rightId) {
        let that = this;
        this.documentCompareCanceled = false;
        _globals__WEBPACK_IMPORTED_MODULE_7__.app.getItemAsync(leftId).done((leftItem) => {
            if (that.documentCompareCanceled)
                return;
            _globals__WEBPACK_IMPORTED_MODULE_7__.app.getItemAsync(rightId).done((rightItem) => {
                if (that.documentCompareCanceled)
                    return;
                let leftDate = _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.parseRef(leftId).type == "DOC" ? new Date().toISOString() : leftItem.history[leftItem.history.length - 1].date;
                let rightDate = _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.parseRef(rightId).type == "DOC" ? new Date().toISOString() : rightItem.history[rightItem.history.length - 1].date;
                let leftFilter = that.getFilterOfDoc(leftId, leftItem);
                let rightFilter = that.getFilterOfDoc(rightId, rightItem);
                that.compareDocumentsDetail(report, leftId, rightId, leftDate, rightDate, leftFilter, rightFilter);
            });
        });
    }
    cancelCompare() {
        this.documentCompareCanceled = true;
    }
    compareDocumentsDetail(report, leftId, rightId, leftCreationDate, rightCreationDate, leftFilter, rightFilter) {
        let that = this;
        this.selectedOnly = null;
        report.html("");
        let containerDetailsSections = $("<div>").appendTo(report);
        let containerDetailsItems = $("<div>").appendTo(report);
        let step1 = _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.getSpinningWait("Retrieving documents - please wait");
        containerDetailsSections.append(step1);
        let leftParams = { format: "html" };
        if (leftFilter)
            leftParams["filter"] = leftFilter;
        let rightParams = { format: "html" };
        if (rightFilter)
            leftParams["filter"] = rightFilter;
        _globals__WEBPACK_IMPORTED_MODULE_7__.app.startCreateDocumentAsync(leftId, leftParams).done(function (result) {
            if (that.documentCompareCanceled)
                return;
            _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.mDHF.loadDocument(result.jobId, function (leftHTML) {
                if (that.documentCompareCanceled)
                    return;
                _globals__WEBPACK_IMPORTED_MODULE_7__.app.startCreateDocumentAsync(rightId, rightParams).done(function (result) {
                    if (that.documentCompareCanceled)
                        return;
                    _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.mDHF.loadDocument(result.jobId, function (rightHTML) {
                        if (that.documentCompareCanceled)
                            return;
                        if (new Date(leftCreationDate) < new Date(rightCreationDate)) {
                            that.showDetailedSectionChanges(containerDetailsSections, leftId, rightId, leftHTML, rightHTML);
                            that.showDetailedItemChanges(containerDetailsItems, leftId, rightId, leftCreationDate, rightCreationDate, leftHTML, rightHTML);
                        }
                        else {
                            that.showDetailedSectionChanges(containerDetailsSections, rightId, leftId, rightHTML, leftHTML);
                            that.showDetailedItemChanges(containerDetailsItems, rightId, leftId, rightCreationDate, leftCreationDate, rightHTML, leftHTML);
                        }
                    });
                });
            });
        });
    }
    destroy() {
    }
    getFilterOfDoc(id, item) {
        if (_common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.parseRef(id).type != "DOC") {
            return ""; // only interested in filter of DOC items
        }
        let filterFieldIds = _globals__WEBPACK_IMPORTED_MODULE_7__.globalMatrix.ItemConfig.getFieldsOfType("docFilter", "DOC");
        if (filterFieldIds.length == 0) {
            return ""; // no filter field
        }
        // get filter id
        let filterFieldId = filterFieldIds[0].field.id;
        // get filter from item
        let filter = item[filterFieldId];
        if (!filter) {
            return "";
        }
        return JSON.parse(filter).join(",");
    }
    // shows pure text changes for each section
    showDetailedSectionChanges(container, leftId, rightId, leftHTML, rightHTML) {
        let that = this;
        container.html('<h1>Document sections</h1>');
        let dynamicSections = _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.mDHF.getSections(true);
        let staticSections = _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.mDHF.getSections(false);
        let allSections = dynamicSections.concat(staticSections);
        // get all the right sections as 'baseline'
        let left23 = false;
        let right23 = false;
        let pairs = [];
        $(".subchapter,.subsubchapter,.checksection", $(rightHTML)).each((idx, section) => {
            let type = that.getTypeFromClass($(section).attr("class"), allSections);
            if (type)
                right23 = true;
            pairs.push({ right: {
                    html: that.getHtmlFromSection($(section)),
                    title: that.getTitleFromSection($(section)),
                    type: type
                }, left: null,
                dynamic: dynamicSections.indexOf(type) != -1 });
        });
        // add the left sections to the matching right or at end
        // get all the left sections
        $(".subchapter,.subsubchapter,.checksection", $(leftHTML)).each((idx, section) => {
            let type = that.getTypeFromClass($(section).attr("class"), allSections);
            if (type)
                left23 = true;
        });
        let only23 = left23 && right23;
        $(".subchapter,.subsubchapter,.checksection", $(leftHTML)).each((idx, section) => {
            let type = that.getTypeFromClass($(section).attr("class"), allSections);
            if (type)
                left23 = true;
            let left = {
                html: that.getHtmlFromSection($(section)),
                title: that.getTitleFromSection($(section)),
                type: type
            };
            let added = false;
            for (let pair of pairs) {
                // if both are 2.3 generated documents, go by section type and title - if not only title
                if (!added && !pair.left && pair.right.title == left.title && (!only23 || pair.right.type == left.type)) {
                    pair.left = left;
                    added = true;
                }
            }
            if (!added) {
                // no match
                pairs.push({ left: left, right: null, dynamic: dynamicSections.indexOf(type) != -1 });
            }
        });
        // now the pairs is a list of matching section pairs
        let table = $(`<table class="table table-bordered">
            <thead><tr><th style='width:50%'>${leftId}!</th><th style='width:50%'>${rightId}!</th></tr></thead>
            <tbody></tbody>
        </table>`).appendTo(container).highlightReferences();
        for (let pair of pairs) {
            let sectionItems = `${pair.dynamic ? " - see item differences below" : ""}`;
            if (pair.left && pair.right) {
                if (pair.left.html.html() == pair.right.html.html()) {
                    $(`<tr><td colspan=2><b>${pair.left.title}</b> did not change${sectionItems} <span class="viewHtml">(view rendered text)</span>.</td></tr>`)
                        .appendTo($("tbody", table))
                        .data("single", pair.left);
                }
                else {
                    $(`<tr><td colspan=2><b>${pair.left.title}</b> has changed${sectionItems} <span class="compareHtml">(compare rendered text)</span>.</td></tr>`)
                        .appendTo($("tbody", table))
                        .data("pair", pair);
                }
            }
            else if (pair.left) {
                $(`<tr><td><b>${pair.left.title}</b> does not exist in other${sectionItems} <span class="viewHtml">(view rendered text)</span>.</td><td>n/a</td></tr>`)
                    .appendTo($("tbody", table))
                    .data("single", pair.left);
            }
            else {
                $(`<tr><td>n/a</td><td><b>${pair.right.title}</b> does not exist in other${sectionItems} <span class="viewHtml">(view rendered text)</span>.</td></tr>`)
                    .appendTo($("tbody", table))
                    .data("single", pair.right);
            }
        }
        $(".compareHtml").click((event) => {
            that.compareHtmlSection(event, leftId, rightId);
        });
        $(".viewHtml").click((event) => {
            that.viewHtmlSection(event);
        });
    }
    // goes from ".subchapter,.subsubchapter" and takes all until end or next  ".subchapter,.subsubchapter",
    getHtmlFromSection(section) {
        if (section.hasClass("checksection")) {
            return section.clone();
        }
        let div = $("<div>");
        let next = section.next();
        while (next && next.length) {
            if (next.hasClass("subchapter") || next.hasClass("subsubchapter") || next.hasClass("checksection")) {
                next = null;
            }
            else {
                let after = next.next();
                if (next[0].nodeName != "HR") { // there are some HRs in the html rendering between sections to make it pretty
                    div.append(next.clone());
                }
                next = after.length ? after : null;
            }
        }
        return div;
    }
    getTitleFromSection(section) {
        if (section.hasClass("checksection")) {
            return $("b", section).text();
        }
        else {
            return section.text();
        }
    }
    // view a rendered html section
    compareHtmlSection(event, leftId, rightId) {
        let btn = $(event.delegateTarget);
        let pair = btn.closest("tr").data("pair");
        let left = new _common_matrixlib_index__WEBPACK_IMPORTED_MODULE_3__.HTMLCleaner(pair.left.html.html(), false).getClean(_common_matrixlib_index__WEBPACK_IMPORTED_MODULE_3__.HTMLCleaner.CleanLevel.Strict, true);
        let right = new _common_matrixlib_index__WEBPACK_IMPORTED_MODULE_3__.HTMLCleaner(pair.right.html.html(), false).getClean(_common_matrixlib_index__WEBPACK_IMPORTED_MODULE_3__.HTMLCleaner.CleanLevel.Strict, true);
        let param = {
            arg: JSON.stringify({ versions: [left, right] })
        };
        _globals__WEBPACK_IMPORTED_MODULE_7__.app.compareHTML(param).done(function (result) {
            let dlg = $("<div>").appendTo($("body"));
            let content = $(`<table class="table table-bordered">
                <thead><tr></tr></thead>
                <tbody></tbody>
            </table>`);
            $("thead tr", content).append($("<th style='width:50%'>").append(_common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.renderLink(leftId, null, true)));
            $("thead tr", content).append($("<th style='width:50%'>").append(_common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.renderLink(rightId, null, true)));
            $(`<tr><td>${result.html[0]}</td><td>${result.html[1]}</td></tr>`)
                .appendTo($("tbody", content));
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showDialog(dlg, "Section Compare", content, $(document).width() * 0.85, _globals__WEBPACK_IMPORTED_MODULE_7__.app.itemForm.height() * 0.85, [{
                    text: "Ok",
                    class: 'btnDoIt',
                    click: function () {
                        dlg.dialog("close");
                    }
                }], _common_matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_4__.UIToolsConstants.Scroll.Vertical, true, true, () => { dlg.remove(); }, () => { }, () => { });
        });
    }
    // view a rendered html section
    viewHtmlSection(event) {
        let btn = $(event.delegateTarget);
        let single = btn.closest("tr").data("single");
        let dlg = $("<div>").appendTo($("body"));
        let content = $("<div>").append($("<div class='redlineView'>").append(single.html));
        _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showDialog(dlg, "Section Content '" + single.title + "'", content, 800, _globals__WEBPACK_IMPORTED_MODULE_7__.app.itemForm.height() * 0.90, [{
                text: "Ok",
                class: 'btnDoIt',
                click: function () {
                    dlg.dialog("close");
                }
            }], _common_matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_4__.UIToolsConstants.Scroll.Vertical, true, true, () => { dlg.remove(); }, () => { }, () => { });
    }
    // returns a section type of a document section
    getTypeFromClass(css, allSections) {
        // here I could remove other classes...
        if (!css)
            return "";
        let classes = css.split(" ");
        for (let cls of classes) {
            if (allSections.indexOf(cls) != -1) {
                return cls;
            }
        }
        // no known section
        return "";
    }
    // show a list of items side by side
    showDetailedItemChanges(container, leftId, rightId, leftCreationDate, rightCreationDate, leftHTML, rightHTML) {
        let that = this;
        let step3 = _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.getSpinningWait("Retrieving all changed items");
        container.append(step3);
        _globals__WEBPACK_IMPORTED_MODULE_7__.restConnection.getProject("tree?fancy&atDate=" + new Date(leftCreationDate).toISOString()).done(function (leftTree) {
            if (that.documentCompareCanceled)
                return;
            _globals__WEBPACK_IMPORTED_MODULE_7__.restConnection.getProject("tree?fancy&atDate=" + new Date(rightCreationDate).toISOString()).done(function (rightTree) {
                if (that.documentCompareCanceled)
                    return;
                // this are all the link ids in any of the documents + some which might be false positives
                let leftLinks = that.extractLinks(leftHTML);
                let rightLinks = that.extractLinks(rightHTML);
                // let step3 = ml.UI.getSpinningWait( "1/4 Getting details " + rightId);
                // report.append( step2 );
                let leftVersions = [];
                let rightVersions = [];
                that.createItemsFromTree(leftTree, leftVersions);
                that.createItemsFromTree(rightTree, rightVersions);
                // filter the items from a certain time by those in the actual documents
                leftVersions = leftVersions.filter(version => leftLinks[version.ref]);
                rightVersions = rightVersions.filter(version => rightLinks[version.ref]);
                let leftDisplay = leftId + "! (" + _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.DateTime.renderHumanDate(new Date(leftCreationDate), false) + ")";
                let rightDisplay = rightId + "! (" + _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.DateTime.renderHumanDate(new Date(rightCreationDate), false) + ")";
                container.html('<h1>Referenced items</h1>');
                let warning = $("<div>").appendTo(container);
                if (leftVersions.length == 0 && rightVersions.length == 0) {
                    warning.html("Neither document contains any items.");
                    return;
                }
                that.addFilters(container, leftId, rightId);
                let diffTable = $("<div>").appendTo(container);
                that.showDifferences(diffTable, leftVersions, rightVersions, leftDisplay, rightDisplay);
                that.hideShow();
            });
        });
    }
    // gets all the potential hyperlinks in a <a>XXX-YY</a>
    extractLinks(html) {
        let links = {};
        $.each($("a,.smartreplace", $(html)), (idx, item) => {
            let linkText = $(item).text();
            if (linkText) {
                let beforeSpace = linkText.split(" ")[0];
                if (!beforeSpace.match(/[^A-Z0-9\-]/)) {
                    // potential link only letters, digits and -
                    links[beforeSpace] = true;
                }
            }
        });
        return links;
    }
    // retrieve a list of included items
    getIncludedItems(leftId, rightId) {
        let that = this;
        let res = $.Deferred();
        _globals__WEBPACK_IMPORTED_MODULE_7__.restConnection.getProject("itemlist/" + leftId).done(function (leftItems) {
            if (that.documentCompareCanceled)
                return;
            _globals__WEBPACK_IMPORTED_MODULE_7__.restConnection.getProject("itemlist/" + rightId).done(function (rightItems) {
                if (that.documentCompareCanceled)
                    return;
                // the list might have some duplicates...
                that.selectedOnly = rightItems.items.map(item => item.ref).concat(leftItems.items.map(item => item.ref));
                res.resolve();
            });
        });
        return res;
    }
    // project pages show in the top in Projects, Reports and Documents
    renderProjectPage(options) {
        let that = this;
        if (options.controlState === _globals__WEBPACK_IMPORTED_MODULE_7__.ControlState.Print) {
            return;
        }
        document.title = "Redline - " + _globals__WEBPACK_IMPORTED_MODULE_7__.matrixSession.getProject();
        options.control.html("");
        options.control.prepend(_common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.getPageTitle("Change between two dates"));
        if (_common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.DateTime.requiresTimeZoneWarning()) {
            $(".toolbarButtons .buttonCTA").remove();
            $(".toolbarButtons").append(_common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.DateTime.getTimeZoneCTA());
        }
        this.panel = $('<div class="panel-body-v-scroll fillHeight" style="padding: 0 12px;">').appendTo(options.control);
        if (_globals__WEBPACK_IMPORTED_MODULE_7__.globalMatrix.ItemConfig.getTimeWarp()) {
            $("<h2>Browse tree to find changes done after: " + _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.DateTime.renderCustomerHumanDate(new Date(_globals__WEBPACK_IMPORTED_MODULE_7__.globalMatrix.ItemConfig.getTimeWarp()), false) + "</h2>").appendTo(this.panel);
            $("<div>The tree shows items in red if they changed after the above date</div>").appendTo(this.panel);
            $("<div>History of items shows the last change before the date in red, versions after in grey.</div>").appendTo(this.panel);
            return;
        }
        let report = $("<div>");
        this.showDateSelection(report);
        this.panel.append(report);
    }
    addFilters(report, leftId, rightId) {
        let that = this;
        let filters = $("<div class='hideCopy'>").appendTo(report);
        $('<div class="alignHorizontal" ><div class="checkbox" ><label><input type="checkbox" class="checkboxFilter" data-hide="unchanged" >show identical</label></div></div>').appendTo(filters);
        $('<div class="alignHorizontal" ><div class="checkbox" ><label><input type="checkbox" class="checkboxFilter" data-hide="column1_not_included" checked >show added</label></div></div>').appendTo(filters);
        $('<div class="alignHorizontal" ><div class="checkbox" ><label><input type="checkbox" class="checkboxFilter" data-hide="column2_not_included" checked >show removed</label></div></div>').appendTo(filters);
        $('<div class="alignHorizontal" ><div class="checkbox" ><label><input type="checkbox" class="checkboxFilter" data-hide="changed" checked >show changed</label></div></div>').appendTo(filters);
        if (leftId && rightId) {
            $('<div class="alignHorizontal" ><div class="checkbox" ><label><input disabled type="checkbox" class="selectedOnly">selected items only</label></div></div>').appendTo(filters);
            this.getIncludedItems(leftId, rightId).done(() => {
                _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.setEnabled($(".selectedOnly"), true);
            });
        }
        $("input", report).change(function () {
            that.hideShow();
        });
        _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.copyBuffer(filters, "copy to clipboard", report, this.panel, null, "copy overview");
        this.addDiffDownload(filters);
    }
    addDiffDownload(filters) {
        let that = this;
        let diffConfig = _globals__WEBPACK_IMPORTED_MODULE_7__.globalMatrix.ItemConfig.getSettingJSON("downloadDiff");
        if (diffConfig && diffConfig.doc && _globals__WEBPACK_IMPORTED_MODULE_7__.app.getItemTitle(diffConfig.doc)) {
            $('<i class="fal fa-file-download" aria-hidden="true" style="padding-left:12px;cursor:pointer" data-original-title="create DOC"> create DOC</i>').appendTo(filters).click(() => {
                let dlg = $("<div id='progressDlg' style='z-index:2001'>").appendTo("body");
                let content = $("<div id='progressDetails'>");
                _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showDialog(dlg, "Creating Redline Document", content, 900, 600, [{
                        text: 'Cancel',
                        class: 'btnCancel btnCancelStop',
                        click: function () {
                            dlg.dialog("close");
                        }
                    },], _common_matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_4__.UIToolsConstants.Scroll.Vertical, false, true, () => { that.diffCancelled = true; dlg.remove(); });
                that.diffCancelled = false;
                // copy the template
                _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.mDHF.preparePasteBuffer(null);
                _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.mDHF.copyTemplate([diffConfig.doc], 0, true).done(async () => {
                    content.append(`<p>Prepared document</p>`);
                    // prepare the differencing
                    let diff = that.prepareDiffSections(diffConfig);
                    // build the data
                    await that.createDiffContent(content, diff);
                    if (that.diffCancelled) {
                        _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showSuccess("Cancelled Redlining Document");
                    }
                    else {
                        // create the document
                        that.createDiffDoc(diffConfig, diff).done((result) => {
                            _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showSuccess("Created Redlining Document");
                            $(".btnCancelStop").html("OK");
                            content.append(`<p>Finalized document ${_common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.renderLink(result.item.id, result.item.title, true).html()}</p>`);
                        });
                    }
                });
            }).tooltip();
        }
    }
    /** This method creates the content for the diff doc, going through all displayed lines in the table */
    async createDiffContent(progressDlg, diff) {
        let that = this;
        async function getHTMLForDoc(itemData, v) {
            let itemControl = $("<div>");
            // render it
            let itemC = new _common_UI_Components__WEBPACK_IMPORTED_MODULE_5__.ItemControl({
                control: itemControl,
                controlState: _globals__WEBPACK_IMPORTED_MODULE_7__.ControlState.HistoryView,
                isHistory: v,
                item: itemData,
                isItem: !itemData.children,
                parameter: { manualTableHeights: true, reviewMode: true }
            });
            await itemC.load();
            // prepare the object to be compared later
            let diffBase = $("<div>");
            let versionInfo = itemData.history[itemData.history.length - v];
            diffBase.append(`<div class="diffInfo"><div class="diffTitle"><span>${itemData.id}</span> <span>${versionInfo.title}</span></div><div class="diffVersionInfo">diffVersionInfodiffVersionInfo</div></div>`);
            $.each($(itemControl).children(".panel-body-v-scroll").children(".dialog-body").children(), (idx, field) => {
                diffBase.append(field);
            });
            // prepare for printing (remove replace inputs with texts etc)
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.SmartText.prepareForReadReadRender($(diffBase));
            // prepare for diffing (add markup)
            $("textarea,pre", diffBase).each(function (idx, select) {
                $(select).replaceWith("<div>" + $(select).html().replace(/(?:\r\n|\r|\n)/g, '<br>') + "</div>");
            });
            $(".fal.fa-square", diffBase).each((idx, elem) => {
                $(elem).parent().addClass("history-unchecked");
                $(elem).replaceWith("<span>&#10004; </span>");
            });
            $(".fal.fa-check-square", diffBase).each((idx, elem) => {
                $(elem).parent().addClass("history-checked");
                $(elem).replaceWith("<span>&#x25a2; </span>");
            });
            // remove markup for rendering in UI
            $(".refIdHyper", diffBase).each((idx, rih) => {
                $(rih).parent().replaceWith($(rih).text() + " ");
            });
            $(".baseControlHelp", diffBase).removeClass("baseControlHelp");
            // get the code
            return diffBase[0].outerHTML.replace(/pull-left/g, "");
        }
        function getHeader(itemData, v) {
            let versionInfo = itemData.history[itemData.history.length - v];
            return ` <div class="diffRevision"><span class="diffAttribute">Revision:</span> <span class="diffValue">${v}</span></div>
                     <div class="diffAuthor"><span class="diffAttribute">Author:</span> <span class="diffValue">${versionInfo.user}</span></div>
                     <div class="diffDate"><span class="diffAttribute">Date:</span> <span class="diffValue">${versionInfo.date}</span></div>
                     <div class="diffAction"><span class="diffAttribute">Action:</span> <span class="diffValue">${versionInfo.action}</span></div>
                     <div class="diffComment"><span class="diffAttribute">Comment:</span> <span class="diffValue">${versionInfo.comment}</span></div>`;
        }
        async function compareTwoRevisions(itemId, v0, v1) {
            let ht = new _common_UI_Tools_ItemHistoryView__WEBPACK_IMPORTED_MODULE_6__.HistoryTools();
            let versions = [];
            let headers = [];
            for (let v of [v0, v1]) {
                let itemData = await _globals__WEBPACK_IMPORTED_MODULE_7__.app.getItemAsync(itemId, v);
                versions.push(await getHTMLForDoc(itemData, v));
                headers.push(getHeader(itemData, v));
            }
            let splittedVersions = ht.splitVersions(versions);
            let compareParams = {
                arg: JSON.stringify(splittedVersions ? { versionsMultiple: splittedVersions } : { versions: versions })
            };
            // call compare
            let compareResults = await _globals__WEBPACK_IMPORTED_MODULE_7__.app.compareHTML(compareParams);
            if (splittedVersions) {
                for (let assemble = 0; assemble < compareResults.htmlMultiple.length; assemble++) {
                    let left = compareResults.htmlMultiple[assemble][0].replace("diffVersionInfodiffVersionInfo", headers[0]);
                    let right = compareResults.htmlMultiple[assemble][1].replace("diffVersionInfodiffVersionInfo", headers[1]);
                    if ($(left).text() || $(right).text()) {
                        diff.diffText += `<tr><td>${left}</td><td>${right}</td></tr>`;
                    }
                }
            }
            else {
                let left = compareResults.html[0].replace("diffVersionInfodiffVersionInfo", headers[0]);
                let right = compareResults.html[1].replace("diffVersionInfodiffVersionInfo", headers[1]);
                if ($(left).text() || $(right).text()) {
                    diff.diffText += `<tr><td>${left}</td><td>${right}</td></tr>`;
                }
            }
        }
        async function showRevision(itemId, vVersion) {
            let v = Number(vVersion.replace("v", ""));
            let itemData = await _globals__WEBPACK_IMPORTED_MODULE_7__.app.getItemAsync(itemId, v);
            let item = await getHTMLForDoc(itemData, v);
            let header = getHeader(itemData, v);
            return item.replace("diffVersionInfodiffVersionInfo", header);
        }
        async function renderRow(itemId, row) {
            let compareResult = $($("td", row)[3]).text();
            if (compareResult == "compare versions" && diff.diffSection) {
                let sm = $("span", $("td", row)[3]);
                await compareTwoRevisions(itemId, $(sm).data("v0"), $(sm).data("v1"));
            }
            else if (compareResult == "added/included" && diff.addedSection) {
                diff.addedText += await showRevision(itemId, $($("td", row)[2]).text());
            }
            else if (compareResult == "deleted/excluded" && diff.removedSection) {
                diff.removedText += await showRevision(itemId, $($("td", row)[1]).text());
            }
            else if (compareResult == "no changes" && diff.sameSection) {
                diff.sameText += await showRevision(itemId, $($("td", row)[1]).text());
            }
        }
        let table = $(".diffTable");
        if (!table.length) {
            // for < 2.4
            table = $(".compareItem").closest("table");
        }
        let headers = $("thead > tr > th", table);
        diff.diffText = diff.diffSection ? `<table class="table table-bordered diffSection"><thead><tr><th>${$(headers[1]).html()}</th><th>${$(headers[2]).html()}</th></tr></thead><tbody>` : "";
        diff.addedText = diff.addedSection ? "<div class='addedSection'>" : "";
        diff.removedText = diff.removedSection ? "<div class='removedSection'>" : "";
        diff.sameText = diff.sameSection ? "<div class='sameSection'>" : "";
        // all visible rows
        let rows = table.children("tbody").children("tr:visible");
        let count = rows.length;
        // prepare a visible todo list showing all items in table
        let progress = [];
        let ul = $(`<p>`).appendTo(progressDlg);
        for (let idx = 0; idx < count; idx++) {
            let row = rows[idx];
            let p = $(`<div><i class="fal fa-square"> ${$(row).data("ci")} ${_globals__WEBPACK_IMPORTED_MODULE_7__.app.getItemTitle($(row).data("ci"))}</div>`).appendTo(ul);
            progress.push(p);
        }
        // process one item after the other and show progress
        for (let idx = 0; idx < count && !that.diffCancelled; idx++) {
            let row = rows[idx];
            $(".versionpane").remove();
            await renderRow($(row).data("ci"), $(row));
            $("i", progress[idx]).removeClass("fa-square").addClass("fa-check");
        }
        if (that.diffCancelled) {
            diff.diffText = "";
            diff.addedText = "";
            diff.removedText = "";
            diff.sameText = "";
        }
        else {
            diff.diffText += diff.diffSection ? `</tbody></table>` : "";
            diff.addedText += diff.addedSection ? "</div>" : "";
            diff.removedText += diff.removedSection ? "</div>" : "";
            diff.sameText += diff.sameSection ? "</div>" : "";
        }
        return diff;
    }
    /** This method fills DOC based on the differences computed  */
    createDiffDoc(diffConfig, diff) {
        let res = $.Deferred();
        let that = this;
        let folderId = diffConfig.targetFolder ? diffConfig.targetFolder : "F-DOC-1";
        let currentBufferString = localStorage.getItem(_common_businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.mDHF.COPY_PASTE_BUFFER);
        let pasteBuffer = JSON.parse(currentBufferString).items[0];
        let sourceref = 0;
        let srfs = _globals__WEBPACK_IMPORTED_MODULE_7__.globalMatrix.ItemConfig.getFieldsOfType("sourceref", "DOC");
        if (srfs.length) {
            sourceref = srfs.length ? srfs[0].field.id : 0;
        }
        // prepare the item to be created
        let itemJson = {};
        itemJson.title = pasteBuffer.title + " " + _globals__WEBPACK_IMPORTED_MODULE_7__.app.getCurrentItemId();
        if (sourceref) {
            itemJson[sourceref] = pasteBuffer.sourceProject + "/" + pasteBuffer.sourceItem;
        }
        let fields = _globals__WEBPACK_IMPORTED_MODULE_7__.globalMatrix.ItemConfig.getItemConfiguration("DOC").fieldList;
        $.each(fields, function (fidx, f) {
            for (var idx = 0; idx < pasteBuffer.item.length; idx++) {
                if (pasteBuffer.item[idx].def.label === f.label && sourceref != f.id) {
                    itemJson[f.id] = pasteBuffer.item[idx].val;
                }
            }
        });
        // fill in diff section: items which differ between the two timelines
        if (diff.diffSection) {
            let val = JSON.parse(diff.diffSection.val);
            val.fieldValue = diff.diffText;
            itemJson[diff.diffSection.def.id] = JSON.stringify(val);
        }
        // fill in added section: items which have been added
        if (diff.addedSection) {
            let val = JSON.parse(diff.addedSection.val);
            val.fieldValue = diff.addedText;
            itemJson[diff.addedSection.def.id] = JSON.stringify(val);
        }
        // fill in added section: items which have been removed
        if (diff.removedSection) {
            let val = JSON.parse(diff.removedSection.val);
            val.fieldValue = diff.removedText;
            itemJson[diff.removedSection.def.id] = JSON.stringify(val);
        }
        // fill in unchanged section: items which are identical
        if (diff.sameSection) {
            let val = JSON.parse(diff.sameSection.val);
            val.fieldValue = diff.sameText;
            itemJson[diff.sameSection.def.id] = JSON.stringify(val);
        }
        _globals__WEBPACK_IMPORTED_MODULE_7__.app.createItemOfTypeAsync("DOC", itemJson, "redlining", folderId).done(function (result) {
            console.log(result);
            res.resolve(result);
        }).fail(function (error) {
        });
        return res;
    }
    ;
    /** This method figures out what needs to go into the redlining diff document, depending on the configuration and the actual template */
    prepareDiffSections(diffConfig) {
        // to collect results
        let diff = {
            diffText: "",
            addedText: "",
            removedText: "",
            sameText: "",
            diffSection: null,
            addedSection: null,
            removedSection: null,
            sameSection: null
        };
        // get the info from the template document
        let currentBufferString = localStorage.getItem(_common_businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.mDHF.COPY_PASTE_BUFFER);
        let pasteBuffer = JSON.parse(currentBufferString).items[0];
        // if there's a section define in the config, check if the same section is in the template
        if (diffConfig.diffSection) {
            let diffTextFields = pasteBuffer.item.filter(f => f.def.fieldType == _common_businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_dhf && f.val && JSON.parse(f.val) && JSON.parse(f.val).name.toLowerCase() == diffConfig.diffSection.toLowerCase());
            if (diffTextFields.length == 1) {
                diff.diffSection = diffTextFields[0];
            }
            else {
                console.log(`Warning diffSection="${diffConfig.diffSection}" property in config does not exist in template document`);
            }
        }
        if (diffConfig.addedSection) {
            let addedTextFields = pasteBuffer.item.filter(f => f.def.fieldType == _common_businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_dhf && f.val && JSON.parse(f.val) && JSON.parse(f.val).name.toLowerCase() == diffConfig.addedSection.toLowerCase());
            if (addedTextFields.length == 1) {
                diff.addedSection = addedTextFields[0];
            }
            else {
                console.log(`Warning addedSection="${diffConfig.addedSection}" property in config does not exist in template document`);
            }
        }
        if (diffConfig.removedSection) {
            let removedTextFields = pasteBuffer.item.filter(f => f.def.fieldType == _common_businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_dhf && f.val && JSON.parse(f.val) && JSON.parse(f.val).name.toLowerCase() == diffConfig.removedSection.toLowerCase());
            if (removedTextFields.length == 1) {
                diff.removedSection = removedTextFields[0];
            }
            else {
                console.log(`Warning removedSection="${diffConfig.removedSection}" property in config does not exist in template document`);
            }
        }
        if (diffConfig.sameSection) {
            let sameTextFields = pasteBuffer.item.filter(f => f.def.fieldType == _common_businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_dhf && f.val && JSON.parse(f.val) && JSON.parse(f.val).name.toLowerCase() == diffConfig.sameSection.toLowerCase());
            if (sameTextFields.length == 1) {
                diff.sameSection = sameTextFields[0];
            }
            else {
                console.log(`Warning sameSection="${diffConfig.sameSection}" property in config does not exist in template document`);
            }
        }
        return diff;
    }
    hideShow() {
        let that = this;
        $("tr", this.panel).show();
        // by default show all
        $(".compareItem").show().removeClass("hideCopy");
        $.each($(".checkboxFilter", this.panel), function (idx, input) {
            if ($(input).data("hide")) {
                let sh = $("." + $(input).data("hide"), that.panel);
                if ($(input).prop("checked")) {
                    sh.show();
                    sh.removeClass("hideCopy");
                }
                else {
                    sh.hide();
                    sh.addClass("hideCopy");
                }
            }
        });
        if ($(".selectedOnly").prop("checked")) {
            $(".compareItem").each((idx, ci) => {
                if (that.selectedOnly.indexOf($(ci).data("ci")) == -1) {
                    $(ci).hide().addClass("hideCopy");
                }
            });
        }
    }
    showDateSelection(report) {
        let that = this;
        let bc = $('<div class="baseControl controlContainer">').appendTo(this.panel);
        let p = $("<p>").appendTo(bc);
        $('<span class="">From </span>').appendTo(p);
        let fromDate = $("<input type='text' class='form-control redlineDates'>").appendTo(p);
        $('<span class=""> to </span>').appendTo(p);
        let toDate = $("<input type='text' class='form-control redlineDates'>").appendTo(p);
        let goButton = $('<button style="margin-left: 12px" type="button" class="btn btn-success">Compare</button>').appendTo(p);
        let timeWarp = $('<span>').appendTo(p);
        fromDate.datetimepicker({ format: _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.DateTime.getSimpleDateTimeFormatMoment() });
        toDate.datetimepicker({
            defaultDate: new Date(),
            useCurrent: false,
            format: _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.DateTime.getSimpleDateTimeFormatMoment()
        });
        _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.setEnabled(goButton, fromDate.data("DateTimePicker").date() && toDate.data("DateTimePicker").date());
        timeWarp.hide();
        fromDate.on("dp.change", function (e) {
            toDate.data("DateTimePicker").minDate(e.date);
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.setEnabled(goButton, fromDate.data("DateTimePicker").date() && toDate.data("DateTimePicker").date());
            if (fromDate.data("DateTimePicker").date()) {
                timeWarp.html("<a style='margin-left: 12px' type='button' class='showMore' >Time warp</a>: show project as it was at " + _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.DateTime.renderCustomerHumanDate(new Date(fromDate.data("DateTimePicker").date()), false));
                timeWarp.show();
            }
            else {
                timeWarp.hide();
            }
        });
        toDate.on("dp.change", function (e) {
            fromDate.data("DateTimePicker").maxDate(e.date);
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.setEnabled(goButton, fromDate.data("DateTimePicker").date() && toDate.data("DateTimePicker").date());
        });
        goButton.click(function () {
            that.createRedLineDates(report, fromDate.data("DateTimePicker").date(), toDate.data("DateTimePicker").date());
        });
        timeWarp.click(function () {
            let win = window.open(_globals__WEBPACK_IMPORTED_MODULE_7__.globalMatrix.matrixBaseUrl + "/" + _globals__WEBPACK_IMPORTED_MODULE_7__.matrixSession.getProject() + "?atDate=" + fromDate.data("DateTimePicker").date().toISOString(), '_blank');
            if (win) {
                //Browser has allowed it to be opened
                win.focus();
            }
            else {
                //Browser has blocked it
                alert('Please allow popups for this site');
            }
        });
    }
    createRedLineDates(report, fromDate, toDate) {
        let that = this;
        report.html("");
        report.append(_common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.getSpinningWait("retrieving changes between the dates"));
        // get the tree at both dates
        _globals__WEBPACK_IMPORTED_MODULE_7__.restConnection.getProject("tree?fancy&atDate=" + fromDate.toISOString()).done(function (fromTree) {
            _globals__WEBPACK_IMPORTED_MODULE_7__.restConnection.getProject("tree?fancy&atDate=" + toDate.toISOString()).done(function (toTree) {
                fromTree = _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.RestDB.filterLegacyReportCat(fromTree);
                toTree = _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.RestDB.filterLegacyReportCat(toTree);
                report.html("");
                that.addFilters(report);
                let diffTable = $("<div>").appendTo(report);
                let fromItems = [];
                let toItems = [];
                that.createItemsFromTree(fromTree, fromItems);
                that.createItemsFromTree(toTree, toItems);
                that.showDifferences(diffTable, fromItems, toItems, _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.DateTime.renderHumanDate(new Date(fromDate.toISOString()), false), _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.DateTime.renderHumanDate(new Date(toDate.toISOString()), false));
                that.hideShow();
            });
        });
    }
    createItemsFromTree(tree, items) {
        let that = this;
        $.each(tree, function (idx, node) {
            if (node.children) {
                // this is a folder
                that.createItemsFromTree(node.children, items);
            }
            else {
                // this is a leaf
                items.push({
                    author: "",
                    birth: "",
                    ref: node.id,
                    title: node.title,
                    version: (node.version ? Number(node.version.split("/")[0]) : 0)
                });
            }
        });
    }
    showDifferences(diffTable, fromItems, toItems, fromText, toText) {
        let fromIds = fromItems.map(function (item) { return item.ref; }).sort(function (a, b) { return _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.sort(a, b); });
        let toIds = toItems.map(function (item) { return item.ref; }).sort(function (a, b) { return _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.sort(a, b); });
        // create a sorted list of ids (every id only once)
        let fromToIdsAll = fromIds.concat(toIds);
        let fromToIds = [];
        $.each(fromToIdsAll, function (ftidx, ft) {
            if (fromToIds.indexOf(ft) == -1)
                fromToIds.push(ft);
        });
        fromToIds = fromToIds.sort(function (a, b) { return _common_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.sort(a, b); });
        // build table header
        let table = $("<table class='table table-bordered'>").appendTo(diffTable);
        let head = $("<thead>").appendTo(table);
        let trh = $("<tr>").appendTo(head);
        $("<th>").html("Item").appendTo(trh);
        // build table body
        let tbody = $("<tbody>").appendTo(table);
        $("<th>").html(fromText).appendTo(trh);
        $("<th>").html(toText).appendTo(trh);
        this.addItems(tbody, fromToIds, fromItems, toItems);
        $("<th class='hideCopy'>").html("Changes").appendTo(trh);
        $(".showMore", table).click(function (event) {
            var ht = new _common_UI_Tools_ItemHistoryView__WEBPACK_IMPORTED_MODULE_6__.HistoryTools();
            let link = $(event.delegateTarget);
            ht.compareVersions(link.data("item"), link.data("v0"), link.data("v1"));
        });
        table.highlightReferences();
    }
    addItems(tbody, fromToRefs, fromRefs, toRefs) {
        let that = this;
        $.each(fromToRefs, function (ftIdx, ft) {
            // left column / first doc
            let fromDetails = fromRefs.filter(function (ref) { return ref.ref == ft; });
            // right column / second doc
            let toDetails = toRefs.filter(function (ref) { return ref.ref == ft; });
            // check which version is in which column (if included)
            let both = 0;
            let afterIdx = 0;
            let beforeIdx = 0;
            let existsInFirst = false;
            let tr = $(`<tr class="compareItem" data-ci="${ft}">`).appendTo(tbody);
            let itemColumn = $("<td>").appendTo(tr);
            itemColumn.append($("<span class='hideCopy'>").html(ft + "!"));
            itemColumn.append($("<span class='replaceCopy'>").data("with", ft + "!"));
            if (fromDetails.length != 1) {
                $("<td>").html("not included").appendTo(tr);
                tr.addClass("column1_not_included");
            }
            else {
                existsInFirst = true;
                both++;
                beforeIdx = fromDetails[0].version;
                $("<td>").html("v" + beforeIdx).appendTo(tr);
            }
            if (toDetails.length != 1) {
                $("<td>").html("not included").appendTo(tr);
                tr.addClass("column2_not_included");
            }
            else {
                both++;
                afterIdx = toDetails[0].version;
                $("<td>").html("v" + afterIdx).appendTo(tr);
            }
            // add changes column
            let td = $("<td class='hideCopy'>").appendTo(tr);
            if (both != 2) {
                // not included in both docs - no need to show changes between
                if (existsInFirst) {
                    td.html("deleted/excluded");
                }
                else {
                    td.html("added/included");
                }
            }
            else if (afterIdx != beforeIdx) {
                let compare = $("<span class='showMore' data-item='" + ft + "' data-v0=" + beforeIdx + " data-v1=" + afterIdx + ">compare versions</span>");
                tr.addClass("changed");
                td.append(compare);
            }
            else {
                td.html("no changes");
                tr.addClass("unchanged");
            }
        });
    }
}
function initialize() {
    _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_1__.plugins.register(new Redlining());
}


/***/ }),
/* 58 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Hidden: () => (/* binding */ Hidden)
/* harmony export */ });
/* harmony import */ var _BaseDHFSection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(59);


class Hidden extends _BaseDHFSection__WEBPACK_IMPORTED_MODULE_0__.BaseDHFSection {
    renderControl(ctrl, ctrlParameter) { ctrl.control.hidden(ctrlParameter); }
    showSpecificSettings(ctrl, ctrlParameter, custom) { }
    async saveSpecificSettingsAsync(ctrl, ctrlParameter, custom) { return false; }
    async verifyContentAsync(ctrl) { }
}


/***/ }),
/* 59 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseDHFSection: () => (/* binding */ BaseDHFSection)
/* harmony export */ });
class BaseDHFSection {
    getFieldHandler() {
        return this.fieldHandler;
    }
    renderControl(ctrl, ctrlParameter) {
        ctrl.control.checkBox(ctrlParameter);
    }
    setFieldHandler(fieldHandler) {
        this.fieldHandler = fieldHandler;
    }
    getConfig(ctrl) {
        let controllerConfig = this.fieldHandler.dhfFieldConfig;
        if (!controllerConfig) {
            controllerConfig = this.fieldHandler.getDefaultConfig();
        }
        return controllerConfig;
    }
}


/***/ }),
/* 60 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseTableFieldHandler: () => (/* reexport safe */ _BaseTableFieldHandler__WEBPACK_IMPORTED_MODULE_17__.BaseTableFieldHandler),
/* harmony export */   BaseValidatedTableFieldHandler: () => (/* reexport safe */ _BaseValidatedTableFieldHandler__WEBPACK_IMPORTED_MODULE_18__.BaseValidatedTableFieldHandler),
/* harmony export */   CheckboxFieldHandler: () => (/* reexport safe */ _CheckboxFieldHandler__WEBPACK_IMPORTED_MODULE_4__.CheckboxFieldHandler),
/* harmony export */   ColumnEditor: () => (/* reexport safe */ _BaseTableFieldHandler__WEBPACK_IMPORTED_MODULE_17__.ColumnEditor),
/* harmony export */   CrosslinksFieldHandler: () => (/* reexport safe */ _CrosslinksFieldHandler__WEBPACK_IMPORTED_MODULE_15__.CrosslinksFieldHandler),
/* harmony export */   DHFFieldHandler: () => (/* reexport safe */ _DHFFieldHandler__WEBPACK_IMPORTED_MODULE_16__.DHFFieldHandler),
/* harmony export */   DateFieldHandler: () => (/* reexport safe */ _DateFieldHandler__WEBPACK_IMPORTED_MODULE_12__.DateFieldHandler),
/* harmony export */   DropdownFieldHandler: () => (/* reexport safe */ _DropdownFieldHandler__WEBPACK_IMPORTED_MODULE_7__.DropdownFieldHandler),
/* harmony export */   EmptyFieldHandler: () => (/* reexport safe */ _EmptyFieldHandler__WEBPACK_IMPORTED_MODULE_1__.EmptyFieldHandler),
/* harmony export */   FieldHandlerFactory: () => (/* binding */ FieldHandlerFactory),
/* harmony export */   GenericFieldHandler: () => (/* reexport safe */ _GenericFieldHandler__WEBPACK_IMPORTED_MODULE_6__.GenericFieldHandler),
/* harmony export */   HyperlinkFieldHandler: () => (/* reexport safe */ _HyperlinkFieldHandler__WEBPACK_IMPORTED_MODULE_14__.HyperlinkFieldHandler),
/* harmony export */   InitializeFieldHandlers: () => (/* binding */ InitializeFieldHandlers),
/* harmony export */   ItemSelectionFieldHandler: () => (/* reexport safe */ _ItemSelectionFieldHandler__WEBPACK_IMPORTED_MODULE_19__.ItemSelectionFieldHandler),
/* harmony export */   ItemSelectionFieldHandlerFromTo: () => (/* reexport safe */ _ItemSelectionFieldHandlerFromTo__WEBPACK_IMPORTED_MODULE_20__.ItemSelectionFieldHandlerFromTo),
/* harmony export */   RichtextFieldHandler: () => (/* reexport safe */ _RichtextFieldHandler__WEBPACK_IMPORTED_MODULE_2__.RichtextFieldHandler),
/* harmony export */   SteplistFieldHandler: () => (/* reexport safe */ _SteplistFieldHandler__WEBPACK_IMPORTED_MODULE_5__.SteplistFieldHandler),
/* harmony export */   TestResultFieldHandler: () => (/* reexport safe */ _TestResultFieldHandler__WEBPACK_IMPORTED_MODULE_10__.TestResultFieldHandler),
/* harmony export */   TestStepsFieldHandler: () => (/* reexport safe */ _TestStepsFieldHandler__WEBPACK_IMPORTED_MODULE_8__.TestStepsFieldHandler),
/* harmony export */   TestStepsResultFieldHandler: () => (/* reexport safe */ _TestStepsResultFieldHandler__WEBPACK_IMPORTED_MODULE_9__.TestStepsResultFieldHandler),
/* harmony export */   TextlineFieldHandler: () => (/* reexport safe */ _TextlineFieldHandler__WEBPACK_IMPORTED_MODULE_3__.TextlineFieldHandler),
/* harmony export */   UserFieldHandler: () => (/* reexport safe */ _UserFieldHandler__WEBPACK_IMPORTED_MODULE_11__.UserFieldHandler),
/* harmony export */   initialize: () => (/* reexport safe */ _SteplistFieldHandler__WEBPACK_IMPORTED_MODULE_5__.initialize)
/* harmony export */ });
/* harmony import */ var _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(24);
/* harmony import */ var _EmptyFieldHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(61);
/* harmony import */ var _RichtextFieldHandler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62);
/* harmony import */ var _TextlineFieldHandler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(63);
/* harmony import */ var _CheckboxFieldHandler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(64);
/* harmony import */ var _SteplistFieldHandler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(65);
/* harmony import */ var _GenericFieldHandler__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(68);
/* harmony import */ var _DropdownFieldHandler__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(69);
/* harmony import */ var _TestStepsFieldHandler__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(70);
/* harmony import */ var _TestStepsResultFieldHandler__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(71);
/* harmony import */ var _TestResultFieldHandler__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(72);
/* harmony import */ var _UserFieldHandler__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(73);
/* harmony import */ var _DateFieldHandler__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(75);
/* harmony import */ var _GateFieldHandler__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(76);
/* harmony import */ var _HyperlinkFieldHandler__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(77);
/* harmony import */ var _CrosslinksFieldHandler__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(78);
/* harmony import */ var _DHFFieldHandler__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(80);
/* harmony import */ var _BaseTableFieldHandler__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(67);
/* harmony import */ var _BaseValidatedTableFieldHandler__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(66);
/* harmony import */ var _ItemSelectionFieldHandler__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(79);
/* harmony import */ var _ItemSelectionFieldHandlerFromTo__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(92);
/**
 * Matrix stores data for each item field in a serialized, structured format defined
 * by the type of field. A FieldHandler is a class that allows safe creation and
 * manipulation of these structured types.
 */



































function InitializeFieldHandlers() {
    (0,_SteplistFieldHandler__WEBPACK_IMPORTED_MODULE_5__.initialize)();
}
// TODO(modules): At the moment, handling of structured data is spread all over the client
// code base. We'd like to get all the data manipulation into these classes, separating
// that code from say, UI code.
class FieldHandlerFactory {
    static UpdateFieldConfig(itemConfig, testConfig, fieldType, itemType, fieldValue, config) {
        switch (fieldType) {
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_test_steps:
                _TestStepsFieldHandler__WEBPACK_IMPORTED_MODULE_8__.TestStepsFieldHandler.UpdateFieldConfig(config, itemType, testConfig);
                break;
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_test_steps_result:
                _TestStepsResultFieldHandler__WEBPACK_IMPORTED_MODULE_9__.TestStepsResultFieldHandler.UpdateFieldConfig(config, testConfig);
                break;
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_test_result:
                _TestResultFieldHandler__WEBPACK_IMPORTED_MODULE_10__.TestResultFieldHandler.UpdateFieldConfig(config, testConfig);
                break;
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_user:
                _UserFieldHandler__WEBPACK_IMPORTED_MODULE_11__.UserFieldHandler.UpdateFieldConfig(config, fieldValue, itemConfig);
                break;
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_crosslinks:
                _CrosslinksFieldHandler__WEBPACK_IMPORTED_MODULE_15__.CrosslinksFieldHandler.UpdateFieldConfig(config);
                break;
            default:
                break;
        }
    }
    static CreateHandler(itemConfig, fieldType, config) {
        const description = _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.findById(fieldType);
        if (!description) {
            // Do not throw an error here, because this is called for every field on every item...
            // see MATRIX-5683 for discussion on this issue. Some installations may contains
            // plugins that implement field handlers, but we don't have that information here.
            // User changes the data (string/json/etc) at their own risk.
            return new _GenericFieldHandler__WEBPACK_IMPORTED_MODULE_6__.GenericFieldHandler(fieldType, config);
        }
        switch (description.id) {
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_tasksControl:
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_section:
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_links:
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_uplinkinfo:
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_labels:
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_workflow:
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_syncStatus:
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_syncSourceInfo:
                return new _EmptyFieldHandler__WEBPACK_IMPORTED_MODULE_1__.EmptyFieldHandler(description.id, config);
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_textline:
                return new _TextlineFieldHandler__WEBPACK_IMPORTED_MODULE_3__.TextlineFieldHandler(config);
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_richtext:
                return new _RichtextFieldHandler__WEBPACK_IMPORTED_MODULE_2__.RichtextFieldHandler(config);
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_checkbox:
                return new _CheckboxFieldHandler__WEBPACK_IMPORTED_MODULE_4__.CheckboxFieldHandler(config);
            // Table-like handlers
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_steplist:
                return new _SteplistFieldHandler__WEBPACK_IMPORTED_MODULE_5__.SteplistFieldHandler(config);
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_test_steps:
                return new _TestStepsFieldHandler__WEBPACK_IMPORTED_MODULE_8__.TestStepsFieldHandler(config);
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_test_steps_result:
                return new _TestStepsResultFieldHandler__WEBPACK_IMPORTED_MODULE_9__.TestStepsResultFieldHandler(config);
            // Dropdown-like field handlers
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_dropdown:
                return new _DropdownFieldHandler__WEBPACK_IMPORTED_MODULE_7__.DropdownFieldHandler(config);
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_user:
                return new _UserFieldHandler__WEBPACK_IMPORTED_MODULE_11__.UserFieldHandler(config);
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_test_result:
                return new _TestResultFieldHandler__WEBPACK_IMPORTED_MODULE_10__.TestResultFieldHandler(config);
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_date:
                return new _DateFieldHandler__WEBPACK_IMPORTED_MODULE_12__.DateFieldHandler(config);
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_gateControl:
                return new _GateFieldHandler__WEBPACK_IMPORTED_MODULE_13__.GateFieldHandler(config);
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_crosslinks:
                return new _CrosslinksFieldHandler__WEBPACK_IMPORTED_MODULE_15__.CrosslinksFieldHandler(config);
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_hyperlink:
                return new _HyperlinkFieldHandler__WEBPACK_IMPORTED_MODULE_14__.HyperlinkFieldHandler(config);
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_dummy:
                return new _EmptyFieldHandler__WEBPACK_IMPORTED_MODULE_1__.EmptyFieldHandler(fieldType, config);
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_dhf:
                return new _DHFFieldHandler__WEBPACK_IMPORTED_MODULE_16__.DHFFieldHandler(itemConfig, config);
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_colorPicker:
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_sourceref:
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_markAsTemplate:
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_docFilter:
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_text:
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_fileManager:
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_risk2:
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_report:
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_cascadingSelect:
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_reportId:
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_filter_file:
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_signature:
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_signatureControl:
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_publishedContent:
            case _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_reviewControl:
            default:
                return new _GenericFieldHandler__WEBPACK_IMPORTED_MODULE_6__.GenericFieldHandler(fieldType, config);
        }
    }
}



/***/ }),
/* 61 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EmptyFieldHandler: () => (/* binding */ EmptyFieldHandler)
/* harmony export */ });

class EmptyFieldHandler {
    constructor(fieldTypeIn, configIn) {
        this.fieldType = fieldTypeIn;
        this.config = configIn;
    }
    getFieldType() { return this.fieldType; }
    initData(serializedFieldData) { }
    getData() { return ""; }
}


/***/ }),
/* 62 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RichtextFieldHandler: () => (/* binding */ RichtextFieldHandler)
/* harmony export */ });
/* harmony import */ var _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(24);


class RichtextFieldHandler {
    constructor(configIn) {
        this.data = "";
        this.config = configIn;
    }
    getFieldType() { return _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_richtext; }
    // TODO: is there more to richtext than just an html string?
    initData(serializedFieldData) { this.data = serializedFieldData; }
    getData() { return this.data; }
    getHtml() { return this.data; }
    setHtml(str) {
        this.data = str;
        return this;
    }
}


/***/ }),
/* 63 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextlineFieldHandler: () => (/* binding */ TextlineFieldHandler)
/* harmony export */ });
/* harmony import */ var _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(24);


class TextlineFieldHandler {
    constructor(configIn) {
        this.data = "";
        this.config = configIn;
    }
    getFieldType() { return _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_textline; }
    initData(serializedFieldData) { this.data = serializedFieldData; }
    getData() { return this.data; }
    getText() { return this.data; }
    setText(str) {
        // make sure there are no newlines.
        this.data = str.replace("\n", "");
    }
}


/***/ }),
/* 64 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CheckboxFieldHandler: () => (/* binding */ CheckboxFieldHandler)
/* harmony export */ });
/* harmony import */ var _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(24);


class CheckboxFieldHandler {
    constructor(configIn) {
        this.config = configIn;
    }
    getFieldType() { return _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_checkbox; }
    initData(serializedFieldData) {
        this.data = serializedFieldData;
    }
    getData() {
        return this.data;
    }
    getValue() {
        if (this.data) {
            if (this.data == "1" || this.data == "true") {
                return true;
            }
            else if (this.data == "0" || this.data == "false") {
                return false;
            }
        }
        return undefined;
    }
    setValue(value) {
        if (value !== undefined) {
            this.data = value ? "true" : "false";
        }
        else {
            this.data = undefined;
        }
    }
}


/***/ }),
/* 65 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SteplistFieldHandler: () => (/* binding */ SteplistFieldHandler),
/* harmony export */   initialize: () => (/* binding */ initialize)
/* harmony export */ });
/* harmony import */ var _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(24);
/* harmony import */ var _BaseValidatedTableFieldHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(66);



class SteplistFieldHandler extends _BaseValidatedTableFieldHandler__WEBPACK_IMPORTED_MODULE_1__.BaseValidatedTableFieldHandler {
    constructor(configIn) {
        super(configIn);
    }
}
function validateTableControlParams(json) {
    return new Promise((resolve) => {
        if (!json.columns || json.columns.length == 0) {
            resolve("There are no columns defined. You need at least one column!");
        }
        const validXmlRegex = /^([_a-z][\w]?|[a-w_yz][\w]{2,}|[_a-z][a-l_n-z\d][\w]+|[_a-z][\w][a-k_m-z\d][\w]*)$/i;
        // check for bad column field properties
        let badFields = [];
        json.columns.forEach(function (column, idx) {
            if (!column.field) {
                badFields.push("Column " + (idx + 1) + " needs a field property");
            }
            else if (!column.field.match(validXmlRegex)) {
                badFields.push("The field of column " + (idx + 1) + ": ' " + column.field + "' needs to be a valid XML element name.");
            }
            if (column.options) {
                for (let option in column.options) {
                    if (!option.match(validXmlRegex)) {
                        badFields.push("The option '" + option + "' of field of column " + (idx + 1) + ": ' " + column.field + "' needs to be a valid XML element name.");
                    }
                }
            }
        });
        if (badFields.length) {
            resolve(badFields.join("<br>"));
        }
        resolve(null);
    });
}
function initialize() {
    _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.setValidationFunction(_FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_steplist, validateTableControlParams);
}


/***/ }),
/* 66 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseValidatedTableFieldHandler: () => (/* binding */ BaseValidatedTableFieldHandler)
/* harmony export */ });
/* harmony import */ var _BaseTableFieldHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(67);
// A field handler base implementation for field types that ultimately are displayed
// by the table control.


class BaseValidatedTableFieldHandler extends _BaseTableFieldHandler__WEBPACK_IMPORTED_MODULE_0__.BaseTableFieldHandler {
    constructor(configIn) {
        super(configIn);
    }
    validate() {
        // Data should be an array.
        if (typeof this.data.length == 'undefined') {
            throw new Error("data is not an array of rows");
        }
        for (let row of this.data) {
            // Each row has a property name for each column.
            for (const fieldId in row) {
                let colDetails = this.getColumnByField(fieldId);
                if (!colDetails) {
                    throw new Error(`Unable to find definition for column with field id ${fieldId}`);
                }
                // TODO: validate the type of the field data.
            }
        }
    }
    setData(dataIn, fixData = false) {
        const oldData = this.data;
        if (fixData) {
            for (let row of this.data) {
                // Each row has a property name for each column.
                for (const colId in row) {
                    let colDetails = this.getColumnByField(colId);
                    if (!colDetails) {
                        delete row[colId];
                    }
                }
            }
        }
        this.data = dataIn;
        this.validate();
    }
}


/***/ }),
/* 67 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseTableFieldHandler: () => (/* binding */ BaseTableFieldHandler),
/* harmony export */   ColumnEditor: () => (/* binding */ ColumnEditor)
/* harmony export */ });
/* harmony import */ var _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(24);
// A field handler base implementation for field types that ultimately are displayed
// by the table control.


// A steplist has a table with different column types. They are defined here and interpreted in the table
// control and field configuration options.
var ColumnEditor;
(function (ColumnEditor) {
    ColumnEditor["none"] = "none";
    ColumnEditor["number"] = "number";
    ColumnEditor["textline"] = "textline";
    ColumnEditor["select"] = "select";
    ColumnEditor["commentlog"] = "commentlog";
    ColumnEditor["colorPicker"] = "colorPicker";
    ColumnEditor["category"] = "category";
    ColumnEditor["readonly"] = "readonly";
    ColumnEditor["selectIcon"] = "selectIcon";
    ColumnEditor["text"] = "text";
    ColumnEditor["date_today"] = "date_today";
    ColumnEditor["date"] = "date";
    ColumnEditor["today"] = "today";
    ColumnEditor["current_version"] = "current_version";
    ColumnEditor["versionletter"] = "versionletter";
    ColumnEditor["signaturemeaning"] = "signaturemeaning";
    ColumnEditor["user"] = "user";
    ColumnEditor["user_self"] = "user_self";
    ColumnEditor["self"] = "self";
    ColumnEditor["group"] = "group";
    ColumnEditor["revision"] = "revision";
    ColumnEditor["result"] = "result";
    ColumnEditor["design"] = "design";
    ColumnEditor["uprules"] = "uprules";
    ColumnEditor["downrules"] = "downrules";
    ColumnEditor["ecocapa"] = "ecocapa";
    ColumnEditor["eco"] = "eco";
    ColumnEditor["uid"] = "uid";
    ColumnEditor["rules"] = "rules";
})(ColumnEditor || (ColumnEditor = {}));
class BaseTableFieldHandler {
    constructor(configIn) {
        this.data = [];
        this.tableConfig = configIn;
    }
    getFieldType() {
        return _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_steplist;
    }
    getColumnByField(fieldId) {
        if (this.tableConfig.columns) {
            const cols = this.tableConfig.columns.filter((col) => col.field == fieldId);
            if (cols.length >= 1) {
                return cols[0];
            }
        }
        return undefined;
    }
    columnNumberToFieldId(columnNumber) {
        if (columnNumber >= this.tableConfig.columns.length) {
            throw new Error(`${columnNumber} is outside the range [0..${this.tableConfig.columns.length}]`);
        }
        return this.tableConfig.columns[columnNumber].field;
    }
    validate() {
        // No validation by default
    }
    initData(serializedFieldData) {
        if (!serializedFieldData) {
            this.data = [];
        }
        else {
            // This requirement to remove <div> tags comes from the table control implementation.
            this.data = JSON.parse(serializedFieldData.replace("<div/>", ""));
        }
    }
    getData() {
        return JSON.stringify(this.data);
    }
    setData(dataIn, fixData = false) {
        this.data = dataIn;
    }
    getRowCount() {
        return this.data.length;
    }
    deleteRow(rowNumber) {
        if (rowNumber >= this.data.length) {
            throw new Error(`Row ${rowNumber} not found`);
        }
        this.data.splice(rowNumber, 1);
        this.validate();
    }
    insertRow(rowNumber, columnData) {
        // Construct a row object from the column data
        let o = {};
        columnData.forEach((v, i) => {
            o[this.columnNumberToFieldId(i)] = v;
        });
        this.data.splice(rowNumber, 0, o);
        this.validate();
    }
    clear() {
        this.data = [];
    }
    getColumnCount() {
        let columnCount = 0;
        if (this.tableConfig.columns) {
            columnCount = this.tableConfig.columns.length;
        }
        return columnCount;
    }
    /**
     * Set data for a particular cell in the table given by a row number and
     * a column name.
     * @param row the zero-based row number.
     * @param columnId the column name.
     * @param data
     */
    setColumnData(row, columnId, data) {
        // Create rows if necessary.
        if (this.data.length <= row) {
            for (let i = this.data.length; i <= row; i++) {
                this.data.push({});
            }
        }
        // TODO: there should be a switch statement here on type. Complex types may
        // be JSON objects and should be parsed.
        this.data[row][columnId] = data;
    }
    getColumnData(row, columnId) {
        // TODO: there should be a switch statement here on type. Complex types may
        // be JSON objects and should be parsed.
        return this.data[row][columnId];
    }
    getRowData(row) {
        let result = [];
        for (let i = 0; i < this.getColumnCount(); i++) {
            const columnId = this.columnNumberToFieldId(i);
            result[i] = this.getColumnData(row, columnId);
        }
        return result;
    }
}


/***/ }),
/* 68 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GenericFieldHandler: () => (/* binding */ GenericFieldHandler)
/* harmony export */ });

class GenericFieldHandler {
    constructor(fieldTypeIn, configIn) {
        this.fieldType = fieldTypeIn;
        this.config = configIn;
    }
    getFieldType() { return this.fieldType; }
    initData(serializedFieldData) { this.data = serializedFieldData; }
    getData() { return this.data; }
}


/***/ }),
/* 69 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DropdownFieldHandler: () => (/* binding */ DropdownFieldHandler)
/* harmony export */ });
/* harmony import */ var _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(24);

class DropdownFieldHandler {
    getData() {
        return this.rawData;
    }
    constructor(params, initialValue) {
        this.rawData = "";
        this.human = "";
        this.params = params;
        this.initData(initialValue);
    }
    getFieldType() {
        return _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_dropdown;
    }
    initData(serializedFieldData) {
        this.rawData = serializedFieldData;
        let that = this;
        if (typeof serializedFieldData === 'undefined') {
            serializedFieldData = "";
        }
        if (this.params && this.params.splitHuman) {
            let split = serializedFieldData.split("|");
            this.rawData = split[0];
            this.human = split[split.length - 1];
        }
        else {
            this.rawData = serializedFieldData;
            if (this.params && this.params.options) {
                const data = that.getData();
                for (let value of this.params.options) {
                    if (data && value.id === data) {
                        that.human = value.label;
                    }
                }
            }
        }
    }
    /**
     * Retrieve the current value of the field, formatted as an array.
     * If there are N current values, the array will have N items.
     * @param filterOnOptions true if you only want to get back values that show up
     *     in the options list.
     * @returns an array. Empty if there is no current value.
     */
    getValues(filterOnOptions = true) {
        if (this.rawData != undefined || this.rawData != null) {
            let values = this.rawData.split(",");
            if (filterOnOptions && this.params && !this.params.create) {
                return values.filter((value) => {
                    return this.params.options.some((option) => {
                        return option.id === value;
                    });
                });
            }
            else {
                // When creating new values, we don't want to return empty value like this : [""] but []
                if (this.params && this.params.create && this.rawData === "")
                    return [];
                else
                    return values;
            }
        }
        return [];
    }
    getHuman() {
        return this.human;
    }
}


/***/ }),
/* 70 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TestStepsFieldHandler: () => (/* binding */ TestStepsFieldHandler)
/* harmony export */ });
/* harmony import */ var _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(24);
/* harmony import */ var _BaseValidatedTableFieldHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(66);



class TestStepsFieldHandler extends _BaseValidatedTableFieldHandler__WEBPACK_IMPORTED_MODULE_1__.BaseValidatedTableFieldHandler {
    static UpdateFieldConfig(options, itemType, testConfig) {
        // This field handler gets it's configuration options from the test manager.
        // Ignore input options completely.
        const rconfig = testConfig.getTestStepsConfig(itemType);
        for (let name in rconfig) {
            options[name] = rconfig[name];
        }
    }
    constructor(options) {
        super(options);
    }
    getFieldType() {
        return _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_test_steps;
    }
}


/***/ }),
/* 71 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TestStepsResultFieldHandler: () => (/* binding */ TestStepsResultFieldHandler)
/* harmony export */ });
/* harmony import */ var _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(24);
/* harmony import */ var _BaseValidatedTableFieldHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(66);



class TestStepsResultFieldHandler extends _BaseValidatedTableFieldHandler__WEBPACK_IMPORTED_MODULE_1__.BaseValidatedTableFieldHandler {
    static UpdateFieldConfig(options, testConfig) {
        // This field handler gets it's configuration options from the test manager.
        const rconfig = testConfig.getTestStepsResultsConfig();
        for (let name in rconfig) {
            options[name] = rconfig[name];
        }
    }
    constructor(options) {
        super(options);
    }
    getFieldType() {
        return _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_test_steps_result;
    }
    validate() {
        // TODO: validation for this kind of table is more difficult.
        // There is a property "passFailEditorConfig" on the options that needs to
        // be looked at.
    }
}


/***/ }),
/* 72 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TestResultFieldHandler: () => (/* binding */ TestResultFieldHandler)
/* harmony export */ });
/* harmony import */ var _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(24);


// TODO: This is configuring a dropdown control. It should be possible to combine this code
// with the DropdownFieldHandler code.
class TestResultFieldHandler {
    static UpdateFieldConfig(params, testConfig) {
        // There are default params for dropdown for test results
        params.maxItems = 1; // maxItems which can be selected
        params.options = [], // options in dropdown  [{id:..., label: ...}]
            params.create = false, // true if values can be added
            params.splitHuman = true; // if human values differ from real values (e.g. for XTCs which are passed|ok|p (only the fist part is interesting).
        // This field handler gets its configuration options from the test manager.
        params.options = testConfig.getTestRunResultOptions();
    }
    constructor(params, initialValue) {
        this.rawData = "";
        this.human = "";
        this.params = params;
        this.initData(initialValue);
    }
    getFieldType() {
        return _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_test_result;
    }
    getData() {
        return this.rawData;
    }
    initData(serializedFieldData) {
        this.rawData = serializedFieldData;
        let that = this;
        if (typeof serializedFieldData === 'undefined') {
            serializedFieldData = "";
        }
        if (this.params.splitHuman) {
            let split = serializedFieldData.split("|");
            this.rawData = split[0];
            this.human = split[split.length - 1];
        }
        else {
            this.rawData = serializedFieldData;
            const data = that.getData();
            for (let value of this.params.options) {
                if (value.id === data) {
                    that.human = value.label;
                }
            }
        }
    }
    getValues(filterOnOptions = true) {
        if (this.rawData) {
            let values = this.rawData.split(",");
            if (filterOnOptions && !this.params.create) {
                return values.filter((value) => {
                    return this.params.options.some((option) => {
                        return option.id === value;
                    });
                });
            }
            else {
                return values;
            }
        }
        return [];
    }
    getHuman() {
        return this.human;
    }
}


/***/ }),
/* 73 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UserFieldHandler: () => (/* binding */ UserFieldHandler)
/* harmony export */ });
/* harmony import */ var _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(24);
/* harmony import */ var _BasicFunctions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(74);


// TODO: UserFieldHandler is a lot like DropdownFieldHandler. Combine them somehow.
class UserFieldHandler {
    // TODO: IDropdownParams is too broad. Use a narrower type
    static UpdateFieldConfig(params, fieldValue, itemConfig) {
        let userDropdown = itemConfig.getValidUserOptions(!_BasicFunctions__WEBPACK_IMPORTED_MODULE_1__.BasicFunctions.isFalse(params.showUsers), // by default show users, if not specified
        _BasicFunctions__WEBPACK_IMPORTED_MODULE_1__.BasicFunctions.isTrue(params.showGroups), // by default do not show groups
        undefined, fieldValue); // special treatment for deleted users
        params.create = false;
        // TODO: WARNING ! ERROR ! BUG ! This is altering the params object stored in the item configuration
        // where it was originally retrieved from. We need a clone operation by the caller to stop doing this, however,
        // I'm wondering if we have code that relies on these things being updated.
        params.options = userDropdown;
        params.maxItems = params.maxItems ? params.maxItems : 1;
    }
    getData() {
        return this.rawData;
    }
    constructor(params, initialValue) {
        this.rawData = "";
        this.human = "";
        this.params = params;
        this.initData(initialValue);
    }
    getFieldType() {
        return _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_user;
    }
    initData(serializedFieldData) {
        if (typeof serializedFieldData === 'undefined') {
            serializedFieldData = "";
        }
        if (this.params.splitHuman) {
            let split = serializedFieldData.split("|");
            this.rawData = split[0];
            this.human = split[split.length - 1];
        }
        else {
            this.rawData = serializedFieldData;
            const data = this.getData();
            for (let value of this.params.options) {
                if (value.id === data) {
                    // TODO: what to do about "human" when there are multiple values?
                    this.human = value.label;
                }
            }
        }
    }
    getValues(filterOnOptions = true) {
        if (this.rawData) {
            let values = this.rawData.split(",");
            if (filterOnOptions && !this.params.create) {
                return values.filter((value) => {
                    return this.params.options.some((option) => {
                        return option.id === value;
                    });
                });
            }
            else {
                return values;
            }
        }
        return [];
    }
    getMaxItems() {
        if (this.params.maxItems) {
            return Number(this.params.maxItems);
        }
        return undefined;
    }
    setValues(values) {
        const maxItems = this.getMaxItems();
        if (maxItems && maxItems < values.length) {
            throw new Error(`The field may only store ${maxItems} items`);
        }
        if (!this.params.create) {
            // Validate against the existing options.
            // TODO: validation should probably be in a central method checked by
            // setData().
            for (let value of values) {
                if (!this.params.options.some(o => o.id === value)) {
                    throw new Error(`Value ${value} not found in accepted options`);
                }
            }
        }
        this.initData(values.join());
    }
    getHuman() {
        return this.human;
    }
}


/***/ }),
/* 74 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BasicFunctions: () => (/* binding */ BasicFunctions)
/* harmony export */ });
/**
 * Basic Functions can be referred to by other businesslogic modules and elsewhere,
 * however it should only import the absolute minimum necessary dependencies.
 * It supports the Matrix SDK, which runs in non-web environments.
 */

class BasicFunctions {
    static isTrue(obj) {
        if (obj && (obj.toString().toLowerCase() === "true" || obj.toString() === "1")) {
            return true;
        }
        return false;
    }
    static isFalse(obj) {
        if (typeof obj == "undefined") {
            return false;
        }
        if (obj == false || obj == 0 || obj.toString().toLowerCase() === "false" || obj.toString() === "0") {
            return true;
        }
        return false;
    }
}


/***/ }),
/* 75 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DateFieldHandler: () => (/* binding */ DateFieldHandler)
/* harmony export */ });
/* harmony import */ var _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(24);

class DateFieldHandler {
    constructor(config) {
        this.date = undefined;
    }
    getData() {
        if (!this.date) {
            return "";
        }
        return this.date.getFullYear() + "/" + (this.date.getMonth() + 1) + "/" + this.date.getDate();
    }
    getFieldType() {
        return _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_date;
    }
    initData(serializedFieldData) {
        if (!serializedFieldData)
            return;
        let date = DateFieldHandler.getDateFromString(serializedFieldData);
        if (date) {
            this.date = date;
        }
        else {
            this.date = undefined;
        }
    }
    static getDateFromString(dateStr) {
        if (dateStr) {
            let split = (dateStr).split("/");
            if (split.length === 3 && split[0] !== "NaN") {
                let date = new Date(parseInt(split[0]), parseInt(split[1]) - 1, parseInt(split[2]));
                return date;
            }
        }
        return null;
    }
    setDate(date) {
        this.date = date;
    }
    getDate() {
        return this.date;
    }
}


/***/ }),
/* 76 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GateFieldHandler: () => (/* binding */ GateFieldHandler)
/* harmony export */ });
/* harmony import */ var _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(24);

class GateFieldHandler {
    constructor(config) {
        this.defautValue = {
            passed: false,
            failed: false,
            lines: [],
            search: "",
        };
        // TODO: implement
        this.config = config;
    }
    getData() {
        return JSON.stringify(this.currentValue);
    }
    getFieldType() {
        return _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_gateControl;
    }
    initData(serializedFieldData) {
        this.currentValue = this.parseFieldValue(serializedFieldData);
    }
    // the field value is saved as json object
    parseFieldValue(stored) {
        // default
        let state = Object.assign({}, this.defautValue);
        // if something was saved before, use it
        if (stored) {
            state = JSON.parse(stored);
        }
        // remove lines which do not exist anymore (might happen if config changes)
        let lineIds = this.config.lines.map((lineDef) => { return lineDef.id; });
        state.lines = state.lines.filter((line) => { return lineIds.indexOf(line.id) != -1; });
        // add missing lines
        let existsIds = state.lines.map((lineValue) => { return lineValue.id; });
        let newLines = this.config.lines.map((lineDef) => {
            return {
                id: lineDef.id,
                passed: false,
                failed: false,
                user: "",
                comment: "",
                date: "",
                dateUser: ""
            };
        }).filter((defaultLine) => {
            return existsIds.indexOf(defaultLine.id) == -1;
        });
        state.lines = state.lines.concat(newLines);
        // update overall status and text
        this.updateOverallStatusInternal(state);
        return state;
    }
    updateOverallStatus() {
        this.updateOverallStatusInternal(this.currentValue);
    }
    updateOverallStatusInternal(status) {
        let that = this;
        this.allPassed = false;
        status.passed = false;
        // if one line is failed, the whole status is failed
        status.failed = status.lines.filter((line) => { return line.failed; }).length > 0;
        if (!status.failed) {
            // if all lines passed, the status is passed
            status.passed = status.lines.filter((line) => { return line.passed; }).length == status.lines.length;
        }
        // build searchable string
        /*
            _passed_ (all lines passed)
            _failed_ (one line failed)
            _todo_ (needs some action)
            _pass_userId_ (a user passed it)
            _fail_userId_ (a user failed it)
            _todo_userId_ (a user needs to do something)
        */
        status.search = "";
        if (status.passed) {
            status.search += "_passed_";
            this.allPassed = true;
        }
        else if (status.failed) {
            status.search += "_failed_";
        }
        else {
            status.search += "_todo_";
        }
        for (let state of status.lines) {
            if (state.passed) {
                status.search += "_pass_" + state.user + "_";
            }
            else if (state.failed) {
                status.search += "_fail_" + state.user + "_";
            }
            else {
                for (let lineDef of that.config.lines) {
                    if (lineDef.id == state.id) {
                        for (let user of lineDef.users) {
                            status.search += "_todo_" + user + "_";
                        }
                    }
                }
            }
        }
    }
    getGateValue() {
        return this.currentValue;
    }
    setGateValue(gateValue) {
        if (!gateValue)
            gateValue = Object.assign({}, this.defautValue);
        this.currentValue = gateValue;
    }
}


/***/ }),
/* 77 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HyperlinkFieldHandler: () => (/* binding */ HyperlinkFieldHandler)
/* harmony export */ });
/* harmony import */ var _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(24);


class HyperlinkFieldHandler {
    constructor(configIn) {
        this.config = configIn;
    }
    getFieldType() { return _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_hyperlink; }
    initData(serializedFieldData) {
        this.data = serializedFieldData;
    }
    getData() {
        return this.data;
    }
    getValue() {
        if (this.data) {
            if (this.data == "1" || this.data == "true") {
                return true;
            }
            else if (this.data == "0" || this.data == "false") {
                return false;
            }
        }
        return undefined;
    }
    setValue(value) {
        if (value !== undefined) {
            this.data = value ? "true" : "false";
        }
        else {
            this.data = undefined;
        }
    }
}


/***/ }),
/* 78 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CrosslinksFieldHandler: () => (/* binding */ CrosslinksFieldHandler)
/* harmony export */ });
/* harmony import */ var _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(24);
/* harmony import */ var _ItemSelectionFieldHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(79);



class CrosslinksFieldHandler extends _ItemSelectionFieldHandler__WEBPACK_IMPORTED_MODULE_1__.ItemSelectionFieldHandler {
    static UpdateFieldConfig(params) {
        params.crossProject = true;
        if (params.linkTypes == undefined) {
            params.linkTypes = [];
        }
        if (params.prefix == undefined) {
            params.prefix = "Links";
        }
    }
    constructor(configIn) {
        super(configIn, _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_crosslinks);
    }
    /**
     * Add an item to the list at the given position
     * @param position
     * @param item
     * @returns the field handler
     * @throws Error in case a projectShortLabel doesn't exist in the item.
     */
    insertItem(position, item) {
        if (!item.projectShortLabel) {
            throw new Error("item must be a cross project link");
        }
        return super.insertItem(position, item);
    }
    /**
     * Append the given item to the end of the list of items.
     * @param item
     * @returns the field handler.
     * @throws Error in case a projectShort label doesn't exist in the item.
     */
    appendItem(item) {
        if (!item.projectShortLabel) {
            throw new Error("item must be a cross project link");
        }
        return super.appendItem(item);
    }
}


/***/ }),
/* 79 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ItemSelectionFieldHandler: () => (/* binding */ ItemSelectionFieldHandler)
/* harmony export */ });
/* harmony import */ var _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(24);
// A field handler base implementation for field types that ultimately are displayed
// by the item selection control


class ItemSelectionFieldHandler {
    constructor(configIn, fieldTypeIn) {
        this.name = "";
        this.config = configIn;
        if (fieldTypeIn) {
            this.fieldType = fieldTypeIn;
        }
        else {
            // Field_links is a kind of default. This field handler is often used
            // in cases that don't map to an item field, just to a control used
            // to display a UI. In those cases, no one cares about the field type.
            this.fieldType = _FieldDescriptions__WEBPACK_IMPORTED_MODULE_0__.FieldDescriptions.Field_links;
        }
    }
    addSignatures(signatures, includeAll) {
        //Nothing to do here
    }
    getFieldType() { return this.fieldType; }
    initData(serializedFieldData) {
        this.data = serializedFieldData;
        if (serializedFieldData)
            this.items = JSON.parse(serializedFieldData);
        else
            this.items = [];
    }
    getData() {
        return JSON.stringify(this.items);
    }
    getItems() {
        return this.items;
    }
    getItemCount() {
        return this.getItems().length;
    }
    hasItems() {
        return this.getItemCount() > 0;
    }
    hasItem(itemId, projectShortLabel) {
        for (let item of this.getItems()) {
            if (item.to == itemId && item.projectShortLabel == projectShortLabel) {
                return true;
            }
        }
        return false;
    }
    insertItem(position, item) {
        if (this.hasItem(item.to, item.projectShortLabel)) {
            const label = item.projectShortLabel ? (item.projectShortLabel + "/") : "";
            throw new Error(`Item ${label}${item.to} is already included`);
        }
        let items = this.getItems();
        items.splice(position, 0, item);
        this.data = JSON.stringify(items);
        return this;
    }
    appendItem(item) {
        const position = this.getItemCount();
        return this.insertItem(position, item);
    }
    removeItem(position) {
        let items = this.getItems();
        items.splice(position, 1);
        this.data = JSON.stringify(items);
        return this;
    }
    clear() {
        let items = [];
        this.data = JSON.stringify(items);
        return this;
    }
    setItems(selectedItems) {
        if (!selectedItems)
            selectedItems = [];
        this.items = selectedItems;
    }
    getFieldName() {
        return this.name;
    }
    setFieldName(value) {
        this.name = value;
    }
}


/***/ }),
/* 80 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DHFFieldHandler: () => (/* binding */ DHFFieldHandler)
/* harmony export */ });
/* harmony import */ var isomorphic_dompurify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81);
/* harmony import */ var isomorphic_dompurify__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(isomorphic_dompurify__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _GenericFieldHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(68);
/* harmony import */ var _FieldDescriptions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(24);
/* harmony import */ var _Document_GenericDocFieldHandler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(83);
/* harmony import */ var _Document_SectionDescriptions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(85);
/* harmony import */ var _Document__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(86);
/* harmony import */ var _matrixlib_JQueryExtendReplacement__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(97);







class DHFFieldHandler extends _GenericFieldHandler__WEBPACK_IMPORTED_MODULE_1__.GenericFieldHandler {
    constructor(itemConfig, fieldConfig) {
        super(_FieldDescriptions__WEBPACK_IMPORTED_MODULE_2__.FieldDescriptions.Field_dhf, fieldConfig);
        this.itemConfig = itemConfig;
        this.fieldConfig = fieldConfig;
        this.innerDataHandler = new _Document_GenericDocFieldHandler__WEBPACK_IMPORTED_MODULE_3__.GenericDocFieldHandler(_Document_SectionDescriptions__WEBPACK_IMPORTED_MODULE_4__.SectionDescriptions.section_hidden, {}, "");
    }
    getData() {
        if (this.innerDataHandler == undefined || this.innerDataHandler.getFieldType() == _Document_SectionDescriptions__WEBPACK_IMPORTED_MODULE_4__.SectionDescriptions.section_hidden) {
            return undefined;
        }
        let dhfValue = {
            type: this.innerDataHandler.getFieldType(),
            name: this.innerDataHandler.getFieldName(),
            fieldValueXML: "",
            fieldValue: ""
        };
        // create the controller
        let fieldHandler = this.innerDataHandler;
        // udpate the controller values
        dhfValue.fieldValue = fieldHandler.getData();
        // define global options
        let controllerConfig = (0,_matrixlib_JQueryExtendReplacement__WEBPACK_IMPORTED_MODULE_6__.extend)(fieldHandler.dhfFieldConfig, fieldHandler.getDefaultConfig());
        let global = {
            globalOptions: true,
            page_break: controllerConfig['page_break'],
            sub_section: controllerConfig['sub_section'],
            landscape: controllerConfig['landscape'],
            show_section_title: controllerConfig['show_section_title'],
            automation: controllerConfig['automation']
        };
        // get specific options of control and add global as a row
        let options = JSON.parse(fieldHandler.getXmlValue());
        options.push(global);
        // update the xml dump
        dhfValue.fieldValueXML = JSON.stringify(options);
        dhfValue['ctrlConfig'] = controllerConfig;
        dhfValue.name = ((0,isomorphic_dompurify__WEBPACK_IMPORTED_MODULE_0__.sanitize)(dhfValue.name) + '');
        dhfValue.name = dhfValue.name.replace(/&lt;/g, "<");
        return JSON.stringify(dhfValue);
    }
    initData(fieldValue) {
        if (fieldValue && fieldValue.length > 0 && this.itemConfig) {
            try {
                this.fieldConfig.dhfValue = JSON.parse(fieldValue);
            }
            catch (e) {
                console.error("Error parsing dhfValue. Defaulting to empty", e);
                this.fieldConfig.dhfValue = {};
            }
            this.fieldConfig.dhfValue.ctrlConfig = _Document__WEBPACK_IMPORTED_MODULE_5__.DocFieldHandlerFactory.GetDHFFieldConfig(this.itemConfig, this.fieldConfig.dhfValue.type, this.fieldConfig.dhfValue.ctrlConfig);
            this.setInnerFieldHandler(_Document__WEBPACK_IMPORTED_MODULE_5__.DocFieldHandlerFactory.createHandler(this.itemConfig, this.fieldConfig.dhfValue));
        }
    }
    setInnerFieldHandler(docFieldHandler) {
        this.innerDataHandler = docFieldHandler;
    }
}


/***/ }),
/* 81 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = window.DOMPurify || (window.DOMPurify = (__webpack_require__(82)["default"]) || __webpack_require__(82));

/***/ }),
/* 82 */
/***/ (function(module) {

/*! @license DOMPurify 2.4.7 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.4.7/LICENSE */

(function (global, factory) {
   true ? module.exports = factory() :
  0;
})(this, (function () { 'use strict';

  function _typeof(obj) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof(obj);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var hasOwnProperty = Object.hasOwnProperty,
      setPrototypeOf = Object.setPrototypeOf,
      isFrozen = Object.isFrozen,
      getPrototypeOf = Object.getPrototypeOf,
      getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var freeze = Object.freeze,
      seal = Object.seal,
      create = Object.create; // eslint-disable-line import/no-mutable-exports

  var _ref = typeof Reflect !== 'undefined' && Reflect,
      apply = _ref.apply,
      construct = _ref.construct;

  if (!apply) {
    apply = function apply(fun, thisValue, args) {
      return fun.apply(thisValue, args);
    };
  }

  if (!freeze) {
    freeze = function freeze(x) {
      return x;
    };
  }

  if (!seal) {
    seal = function seal(x) {
      return x;
    };
  }

  if (!construct) {
    construct = function construct(Func, args) {
      return _construct(Func, _toConsumableArray(args));
    };
  }

  var arrayForEach = unapply(Array.prototype.forEach);
  var arrayPop = unapply(Array.prototype.pop);
  var arrayPush = unapply(Array.prototype.push);
  var stringToLowerCase = unapply(String.prototype.toLowerCase);
  var stringToString = unapply(String.prototype.toString);
  var stringMatch = unapply(String.prototype.match);
  var stringReplace = unapply(String.prototype.replace);
  var stringIndexOf = unapply(String.prototype.indexOf);
  var stringTrim = unapply(String.prototype.trim);
  var regExpTest = unapply(RegExp.prototype.test);
  var typeErrorCreate = unconstruct(TypeError);
  function unapply(func) {
    return function (thisArg) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return apply(func, thisArg, args);
    };
  }
  function unconstruct(func) {
    return function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return construct(func, args);
    };
  }
  /* Add properties to a lookup table */

  function addToSet(set, array, transformCaseFunc) {
    var _transformCaseFunc;

    transformCaseFunc = (_transformCaseFunc = transformCaseFunc) !== null && _transformCaseFunc !== void 0 ? _transformCaseFunc : stringToLowerCase;

    if (setPrototypeOf) {
      // Make 'in' and truthy checks like Boolean(set.constructor)
      // independent of any properties defined on Object.prototype.
      // Prevent prototype setters from intercepting set as a this value.
      setPrototypeOf(set, null);
    }

    var l = array.length;

    while (l--) {
      var element = array[l];

      if (typeof element === 'string') {
        var lcElement = transformCaseFunc(element);

        if (lcElement !== element) {
          // Config presets (e.g. tags.js, attrs.js) are immutable.
          if (!isFrozen(array)) {
            array[l] = lcElement;
          }

          element = lcElement;
        }
      }

      set[element] = true;
    }

    return set;
  }
  /* Shallow clone an object */

  function clone(object) {
    var newObject = create(null);
    var property;

    for (property in object) {
      if (apply(hasOwnProperty, object, [property]) === true) {
        newObject[property] = object[property];
      }
    }

    return newObject;
  }
  /* IE10 doesn't support __lookupGetter__ so lets'
   * simulate it. It also automatically checks
   * if the prop is function or getter and behaves
   * accordingly. */

  function lookupGetter(object, prop) {
    while (object !== null) {
      var desc = getOwnPropertyDescriptor(object, prop);

      if (desc) {
        if (desc.get) {
          return unapply(desc.get);
        }

        if (typeof desc.value === 'function') {
          return unapply(desc.value);
        }
      }

      object = getPrototypeOf(object);
    }

    function fallbackValue(element) {
      console.warn('fallback value for', element);
      return null;
    }

    return fallbackValue;
  }

  var html$1 = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']); // SVG

  var svg$1 = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);
  var svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']); // List of SVG elements that are disallowed by default.
  // We still need to know them so that we can do namespace
  // checks properly in case one wants to add them to
  // allow-list.

  var svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'fedropshadow', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);
  var mathMl$1 = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover']); // Similarly to SVG, we want to know all MathML elements,
  // even those that we disallow by default.

  var mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);
  var text = freeze(['#text']);

  var html = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'nonce', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns', 'slot']);
  var svg = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'targetx', 'targety', 'transform', 'transform-origin', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);
  var mathMl = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);
  var xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);

  var MUSTACHE_EXPR = seal(/\{\{[\w\W]*|[\w\W]*\}\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode

  var ERB_EXPR = seal(/<%[\w\W]*|[\w\W]*%>/gm);
  var TMPLIT_EXPR = seal(/\${[\w\W]*}/gm);
  var DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]/); // eslint-disable-line no-useless-escape

  var ARIA_ATTR = seal(/^aria-[\-\w]+$/); // eslint-disable-line no-useless-escape

  var IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i // eslint-disable-line no-useless-escape
  );
  var IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
  var ATTR_WHITESPACE = seal(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g // eslint-disable-line no-control-regex
  );
  var DOCTYPE_NAME = seal(/^html$/i);

  var getGlobal = function getGlobal() {
    return typeof window === 'undefined' ? null : window;
  };
  /**
   * Creates a no-op policy for internal use only.
   * Don't export this function outside this module!
   * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.
   * @param {Document} document The document object (to determine policy name suffix)
   * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types
   * are not supported).
   */


  var _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, document) {
    if (_typeof(trustedTypes) !== 'object' || typeof trustedTypes.createPolicy !== 'function') {
      return null;
    } // Allow the callers to control the unique policy name
    // by adding a data-tt-policy-suffix to the script element with the DOMPurify.
    // Policy creation with duplicate names throws in Trusted Types.


    var suffix = null;
    var ATTR_NAME = 'data-tt-policy-suffix';

    if (document.currentScript && document.currentScript.hasAttribute(ATTR_NAME)) {
      suffix = document.currentScript.getAttribute(ATTR_NAME);
    }

    var policyName = 'dompurify' + (suffix ? '#' + suffix : '');

    try {
      return trustedTypes.createPolicy(policyName, {
        createHTML: function createHTML(html) {
          return html;
        },
        createScriptURL: function createScriptURL(scriptUrl) {
          return scriptUrl;
        }
      });
    } catch (_) {
      // Policy creation failed (most likely another DOMPurify script has
      // already run). Skip creating the policy, as this will only cause errors
      // if TT are enforced.
      console.warn('TrustedTypes policy ' + policyName + ' could not be created.');
      return null;
    }
  };

  function createDOMPurify() {
    var window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();

    var DOMPurify = function DOMPurify(root) {
      return createDOMPurify(root);
    };
    /**
     * Version label, exposed for easier checks
     * if DOMPurify is up to date or not
     */


    DOMPurify.version = '2.4.7';
    /**
     * Array of elements that DOMPurify removed during sanitation.
     * Empty if nothing was removed.
     */

    DOMPurify.removed = [];

    if (!window || !window.document || window.document.nodeType !== 9) {
      // Not running in a browser, provide a factory function
      // so that you can pass your own Window
      DOMPurify.isSupported = false;
      return DOMPurify;
    }

    var originalDocument = window.document;
    var document = window.document;
    var DocumentFragment = window.DocumentFragment,
        HTMLTemplateElement = window.HTMLTemplateElement,
        Node = window.Node,
        Element = window.Element,
        NodeFilter = window.NodeFilter,
        _window$NamedNodeMap = window.NamedNodeMap,
        NamedNodeMap = _window$NamedNodeMap === void 0 ? window.NamedNodeMap || window.MozNamedAttrMap : _window$NamedNodeMap,
        HTMLFormElement = window.HTMLFormElement,
        DOMParser = window.DOMParser,
        trustedTypes = window.trustedTypes;
    var ElementPrototype = Element.prototype;
    var cloneNode = lookupGetter(ElementPrototype, 'cloneNode');
    var getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');
    var getChildNodes = lookupGetter(ElementPrototype, 'childNodes');
    var getParentNode = lookupGetter(ElementPrototype, 'parentNode'); // As per issue #47, the web-components registry is inherited by a
    // new document created via createHTMLDocument. As per the spec
    // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)
    // a new empty registry is used when creating a template contents owner
    // document, so we use that as our parent document to ensure nothing
    // is inherited.

    if (typeof HTMLTemplateElement === 'function') {
      var template = document.createElement('template');

      if (template.content && template.content.ownerDocument) {
        document = template.content.ownerDocument;
      }
    }

    var trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, originalDocument);

    var emptyHTML = trustedTypesPolicy ? trustedTypesPolicy.createHTML('') : '';
    var _document = document,
        implementation = _document.implementation,
        createNodeIterator = _document.createNodeIterator,
        createDocumentFragment = _document.createDocumentFragment,
        getElementsByTagName = _document.getElementsByTagName;
    var importNode = originalDocument.importNode;
    var documentMode = {};

    try {
      documentMode = clone(document).documentMode ? document.documentMode : {};
    } catch (_) {}

    var hooks = {};
    /**
     * Expose whether this browser supports running the full DOMPurify.
     */

    DOMPurify.isSupported = typeof getParentNode === 'function' && implementation && implementation.createHTMLDocument !== undefined && documentMode !== 9;
    var MUSTACHE_EXPR$1 = MUSTACHE_EXPR,
        ERB_EXPR$1 = ERB_EXPR,
        TMPLIT_EXPR$1 = TMPLIT_EXPR,
        DATA_ATTR$1 = DATA_ATTR,
        ARIA_ATTR$1 = ARIA_ATTR,
        IS_SCRIPT_OR_DATA$1 = IS_SCRIPT_OR_DATA,
        ATTR_WHITESPACE$1 = ATTR_WHITESPACE;
    var IS_ALLOWED_URI$1 = IS_ALLOWED_URI;
    /**
     * We consider the elements and attributes below to be safe. Ideally
     * don't add any new ones but feel free to remove unwanted ones.
     */

    /* allowed element names */

    var ALLOWED_TAGS = null;
    var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray(html$1), _toConsumableArray(svg$1), _toConsumableArray(svgFilters), _toConsumableArray(mathMl$1), _toConsumableArray(text)));
    /* Allowed attribute names */

    var ALLOWED_ATTR = null;
    var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray(html), _toConsumableArray(svg), _toConsumableArray(mathMl), _toConsumableArray(xml)));
    /*
     * Configure how DOMPUrify should handle custom elements and their attributes as well as customized built-in elements.
     * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)
     * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)
     * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.
     */

    var CUSTOM_ELEMENT_HANDLING = Object.seal(Object.create(null, {
      tagNameCheck: {
        writable: true,
        configurable: false,
        enumerable: true,
        value: null
      },
      attributeNameCheck: {
        writable: true,
        configurable: false,
        enumerable: true,
        value: null
      },
      allowCustomizedBuiltInElements: {
        writable: true,
        configurable: false,
        enumerable: true,
        value: false
      }
    }));
    /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */

    var FORBID_TAGS = null;
    /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */

    var FORBID_ATTR = null;
    /* Decide if ARIA attributes are okay */

    var ALLOW_ARIA_ATTR = true;
    /* Decide if custom data attributes are okay */

    var ALLOW_DATA_ATTR = true;
    /* Decide if unknown protocols are okay */

    var ALLOW_UNKNOWN_PROTOCOLS = false;
    /* Decide if self-closing tags in attributes are allowed.
     * Usually removed due to a mXSS issue in jQuery 3.0 */

    var ALLOW_SELF_CLOSE_IN_ATTR = true;
    /* Output should be safe for common template engines.
     * This means, DOMPurify removes data attributes, mustaches and ERB
     */

    var SAFE_FOR_TEMPLATES = false;
    /* Decide if document with <html>... should be returned */

    var WHOLE_DOCUMENT = false;
    /* Track whether config is already set on this instance of DOMPurify. */

    var SET_CONFIG = false;
    /* Decide if all elements (e.g. style, script) must be children of
     * document.body. By default, browsers might move them to document.head */

    var FORCE_BODY = false;
    /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html
     * string (or a TrustedHTML object if Trusted Types are supported).
     * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead
     */

    var RETURN_DOM = false;
    /* Decide if a DOM `DocumentFragment` should be returned, instead of a html
     * string  (or a TrustedHTML object if Trusted Types are supported) */

    var RETURN_DOM_FRAGMENT = false;
    /* Try to return a Trusted Type object instead of a string, return a string in
     * case Trusted Types are not supported  */

    var RETURN_TRUSTED_TYPE = false;
    /* Output should be free from DOM clobbering attacks?
     * This sanitizes markups named with colliding, clobberable built-in DOM APIs.
     */

    var SANITIZE_DOM = true;
    /* Achieve full DOM Clobbering protection by isolating the namespace of named
     * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.
     *
     * HTML/DOM spec rules that enable DOM Clobbering:
     *   - Named Access on Window (§7.3.3)
     *   - DOM Tree Accessors (§3.1.5)
     *   - Form Element Parent-Child Relations (§4.10.3)
     *   - Iframe srcdoc / Nested WindowProxies (§4.8.5)
     *   - HTMLCollection (§4.2.10.2)
     *
     * Namespace isolation is implemented by prefixing `id` and `name` attributes
     * with a constant string, i.e., `user-content-`
     */

    var SANITIZE_NAMED_PROPS = false;
    var SANITIZE_NAMED_PROPS_PREFIX = 'user-content-';
    /* Keep element content when removing element? */

    var KEEP_CONTENT = true;
    /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead
     * of importing it into a new Document and returning a sanitized copy */

    var IN_PLACE = false;
    /* Allow usage of profiles like html, svg and mathMl */

    var USE_PROFILES = {};
    /* Tags to ignore content of when KEEP_CONTENT is true */

    var FORBID_CONTENTS = null;
    var DEFAULT_FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);
    /* Tags that are safe for data: URIs */

    var DATA_URI_TAGS = null;
    var DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);
    /* Attributes safe for values like "javascript:" */

    var URI_SAFE_ATTRIBUTES = null;
    var DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'role', 'summary', 'title', 'value', 'style', 'xmlns']);
    var MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
    /* Document namespace */

    var NAMESPACE = HTML_NAMESPACE;
    var IS_EMPTY_INPUT = false;
    /* Allowed XHTML+XML namespaces */

    var ALLOWED_NAMESPACES = null;
    var DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE], stringToString);
    /* Parsing of strict XHTML documents */

    var PARSER_MEDIA_TYPE;
    var SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];
    var DEFAULT_PARSER_MEDIA_TYPE = 'text/html';
    var transformCaseFunc;
    /* Keep a reference to config to pass to hooks */

    var CONFIG = null;
    /* Ideally, do not touch anything below this line */

    /* ______________________________________________ */

    var formElement = document.createElement('form');

    var isRegexOrFunction = function isRegexOrFunction(testValue) {
      return testValue instanceof RegExp || testValue instanceof Function;
    };
    /**
     * _parseConfig
     *
     * @param  {Object} cfg optional config literal
     */
    // eslint-disable-next-line complexity


    var _parseConfig = function _parseConfig(cfg) {
      if (CONFIG && CONFIG === cfg) {
        return;
      }
      /* Shield configuration object from tampering */


      if (!cfg || _typeof(cfg) !== 'object') {
        cfg = {};
      }
      /* Shield configuration object from prototype pollution */


      cfg = clone(cfg);
      PARSER_MEDIA_TYPE = // eslint-disable-next-line unicorn/prefer-includes
      SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? PARSER_MEDIA_TYPE = DEFAULT_PARSER_MEDIA_TYPE : PARSER_MEDIA_TYPE = cfg.PARSER_MEDIA_TYPE; // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.

      transformCaseFunc = PARSER_MEDIA_TYPE === 'application/xhtml+xml' ? stringToString : stringToLowerCase;
      /* Set configuration parameters */

      ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;
      ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;
      ALLOWED_NAMESPACES = 'ALLOWED_NAMESPACES' in cfg ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;
      URI_SAFE_ATTRIBUTES = 'ADD_URI_SAFE_ATTR' in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), // eslint-disable-line indent
      cfg.ADD_URI_SAFE_ATTR, // eslint-disable-line indent
      transformCaseFunc // eslint-disable-line indent
      ) // eslint-disable-line indent
      : DEFAULT_URI_SAFE_ATTRIBUTES;
      DATA_URI_TAGS = 'ADD_DATA_URI_TAGS' in cfg ? addToSet(clone(DEFAULT_DATA_URI_TAGS), // eslint-disable-line indent
      cfg.ADD_DATA_URI_TAGS, // eslint-disable-line indent
      transformCaseFunc // eslint-disable-line indent
      ) // eslint-disable-line indent
      : DEFAULT_DATA_URI_TAGS;
      FORBID_CONTENTS = 'FORBID_CONTENTS' in cfg ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;
      FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};
      FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};
      USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;
      ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true

      ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true

      ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false

      ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false; // Default true

      SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false

      WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false

      RETURN_DOM = cfg.RETURN_DOM || false; // Default false

      RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false

      RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false

      FORCE_BODY = cfg.FORCE_BODY || false; // Default false

      SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true

      SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false; // Default false

      KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true

      IN_PLACE = cfg.IN_PLACE || false; // Default false

      IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$1;
      NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;
      CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};

      if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {
        CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;
      }

      if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {
        CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;
      }

      if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === 'boolean') {
        CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;
      }

      if (SAFE_FOR_TEMPLATES) {
        ALLOW_DATA_ATTR = false;
      }

      if (RETURN_DOM_FRAGMENT) {
        RETURN_DOM = true;
      }
      /* Parse profile info */


      if (USE_PROFILES) {
        ALLOWED_TAGS = addToSet({}, _toConsumableArray(text));
        ALLOWED_ATTR = [];

        if (USE_PROFILES.html === true) {
          addToSet(ALLOWED_TAGS, html$1);
          addToSet(ALLOWED_ATTR, html);
        }

        if (USE_PROFILES.svg === true) {
          addToSet(ALLOWED_TAGS, svg$1);
          addToSet(ALLOWED_ATTR, svg);
          addToSet(ALLOWED_ATTR, xml);
        }

        if (USE_PROFILES.svgFilters === true) {
          addToSet(ALLOWED_TAGS, svgFilters);
          addToSet(ALLOWED_ATTR, svg);
          addToSet(ALLOWED_ATTR, xml);
        }

        if (USE_PROFILES.mathMl === true) {
          addToSet(ALLOWED_TAGS, mathMl$1);
          addToSet(ALLOWED_ATTR, mathMl);
          addToSet(ALLOWED_ATTR, xml);
        }
      }
      /* Merge configuration parameters */


      if (cfg.ADD_TAGS) {
        if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {
          ALLOWED_TAGS = clone(ALLOWED_TAGS);
        }

        addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);
      }

      if (cfg.ADD_ATTR) {
        if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
          ALLOWED_ATTR = clone(ALLOWED_ATTR);
        }

        addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);
      }

      if (cfg.ADD_URI_SAFE_ATTR) {
        addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);
      }

      if (cfg.FORBID_CONTENTS) {
        if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {
          FORBID_CONTENTS = clone(FORBID_CONTENTS);
        }

        addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);
      }
      /* Add #text in case KEEP_CONTENT is set to true */


      if (KEEP_CONTENT) {
        ALLOWED_TAGS['#text'] = true;
      }
      /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */


      if (WHOLE_DOCUMENT) {
        addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);
      }
      /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */


      if (ALLOWED_TAGS.table) {
        addToSet(ALLOWED_TAGS, ['tbody']);
        delete FORBID_TAGS.tbody;
      } // Prevent further manipulation of configuration.
      // Not available in IE8, Safari 5, etc.


      if (freeze) {
        freeze(cfg);
      }

      CONFIG = cfg;
    };

    var MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);
    var HTML_INTEGRATION_POINTS = addToSet({}, ['foreignobject', 'desc', 'title', 'annotation-xml']); // Certain elements are allowed in both SVG and HTML
    // namespace. We need to specify them explicitly
    // so that they don't get erroneously deleted from
    // HTML namespace.

    var COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ['title', 'style', 'font', 'a', 'script']);
    /* Keep track of all possible SVG and MathML tags
     * so that we can perform the namespace checks
     * correctly. */

    var ALL_SVG_TAGS = addToSet({}, svg$1);
    addToSet(ALL_SVG_TAGS, svgFilters);
    addToSet(ALL_SVG_TAGS, svgDisallowed);
    var ALL_MATHML_TAGS = addToSet({}, mathMl$1);
    addToSet(ALL_MATHML_TAGS, mathMlDisallowed);
    /**
     *
     *
     * @param  {Element} element a DOM element whose namespace is being checked
     * @returns {boolean} Return false if the element has a
     *  namespace that a spec-compliant parser would never
     *  return. Return true otherwise.
     */

    var _checkValidNamespace = function _checkValidNamespace(element) {
      var parent = getParentNode(element); // In JSDOM, if we're inside shadow DOM, then parentNode
      // can be null. We just simulate parent in this case.

      if (!parent || !parent.tagName) {
        parent = {
          namespaceURI: NAMESPACE,
          tagName: 'template'
        };
      }

      var tagName = stringToLowerCase(element.tagName);
      var parentTagName = stringToLowerCase(parent.tagName);

      if (!ALLOWED_NAMESPACES[element.namespaceURI]) {
        return false;
      }

      if (element.namespaceURI === SVG_NAMESPACE) {
        // The only way to switch from HTML namespace to SVG
        // is via <svg>. If it happens via any other tag, then
        // it should be killed.
        if (parent.namespaceURI === HTML_NAMESPACE) {
          return tagName === 'svg';
        } // The only way to switch from MathML to SVG is via`
        // svg if parent is either <annotation-xml> or MathML
        // text integration points.


        if (parent.namespaceURI === MATHML_NAMESPACE) {
          return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);
        } // We only allow elements that are defined in SVG
        // spec. All others are disallowed in SVG namespace.


        return Boolean(ALL_SVG_TAGS[tagName]);
      }

      if (element.namespaceURI === MATHML_NAMESPACE) {
        // The only way to switch from HTML namespace to MathML
        // is via <math>. If it happens via any other tag, then
        // it should be killed.
        if (parent.namespaceURI === HTML_NAMESPACE) {
          return tagName === 'math';
        } // The only way to switch from SVG to MathML is via
        // <math> and HTML integration points


        if (parent.namespaceURI === SVG_NAMESPACE) {
          return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];
        } // We only allow elements that are defined in MathML
        // spec. All others are disallowed in MathML namespace.


        return Boolean(ALL_MATHML_TAGS[tagName]);
      }

      if (element.namespaceURI === HTML_NAMESPACE) {
        // The only way to switch from SVG to HTML is via
        // HTML integration points, and from MathML to HTML
        // is via MathML text integration points
        if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {
          return false;
        }

        if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {
          return false;
        } // We disallow tags that are specific for MathML
        // or SVG and should never appear in HTML namespace


        return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);
      } // For XHTML and XML documents that support custom namespaces


      if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && ALLOWED_NAMESPACES[element.namespaceURI]) {
        return true;
      } // The code should never reach this place (this means
      // that the element somehow got namespace that is not
      // HTML, SVG, MathML or allowed via ALLOWED_NAMESPACES).
      // Return false just in case.


      return false;
    };
    /**
     * _forceRemove
     *
     * @param  {Node} node a DOM node
     */


    var _forceRemove = function _forceRemove(node) {
      arrayPush(DOMPurify.removed, {
        element: node
      });

      try {
        // eslint-disable-next-line unicorn/prefer-dom-node-remove
        node.parentNode.removeChild(node);
      } catch (_) {
        try {
          node.outerHTML = emptyHTML;
        } catch (_) {
          node.remove();
        }
      }
    };
    /**
     * _removeAttribute
     *
     * @param  {String} name an Attribute name
     * @param  {Node} node a DOM node
     */


    var _removeAttribute = function _removeAttribute(name, node) {
      try {
        arrayPush(DOMPurify.removed, {
          attribute: node.getAttributeNode(name),
          from: node
        });
      } catch (_) {
        arrayPush(DOMPurify.removed, {
          attribute: null,
          from: node
        });
      }

      node.removeAttribute(name); // We void attribute values for unremovable "is"" attributes

      if (name === 'is' && !ALLOWED_ATTR[name]) {
        if (RETURN_DOM || RETURN_DOM_FRAGMENT) {
          try {
            _forceRemove(node);
          } catch (_) {}
        } else {
          try {
            node.setAttribute(name, '');
          } catch (_) {}
        }
      }
    };
    /**
     * _initDocument
     *
     * @param  {String} dirty a string of dirty markup
     * @return {Document} a DOM, filled with the dirty markup
     */


    var _initDocument = function _initDocument(dirty) {
      /* Create a HTML document */
      var doc;
      var leadingWhitespace;

      if (FORCE_BODY) {
        dirty = '<remove></remove>' + dirty;
      } else {
        /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */
        var matches = stringMatch(dirty, /^[\r\n\t ]+/);
        leadingWhitespace = matches && matches[0];
      }

      if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && NAMESPACE === HTML_NAMESPACE) {
        // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)
        dirty = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + dirty + '</body></html>';
      }

      var dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
      /*
       * Use the DOMParser API by default, fallback later if needs be
       * DOMParser not work for svg when has multiple root element.
       */

      if (NAMESPACE === HTML_NAMESPACE) {
        try {
          doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);
        } catch (_) {}
      }
      /* Use createHTMLDocument in case DOMParser is not available */


      if (!doc || !doc.documentElement) {
        doc = implementation.createDocument(NAMESPACE, 'template', null);

        try {
          doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;
        } catch (_) {// Syntax error if dirtyPayload is invalid xml
        }
      }

      var body = doc.body || doc.documentElement;

      if (dirty && leadingWhitespace) {
        body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);
      }
      /* Work on whole document or just its body */


      if (NAMESPACE === HTML_NAMESPACE) {
        return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];
      }

      return WHOLE_DOCUMENT ? doc.documentElement : body;
    };
    /**
     * _createIterator
     *
     * @param  {Document} root document/fragment to create iterator for
     * @return {Iterator} iterator instance
     */


    var _createIterator = function _createIterator(root) {
      return createNodeIterator.call(root.ownerDocument || root, root, // eslint-disable-next-line no-bitwise
      NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, null, false);
    };
    /**
     * _isClobbered
     *
     * @param  {Node} elm element to check for clobbering attacks
     * @return {Boolean} true if clobbered, false if safe
     */


    var _isClobbered = function _isClobbered(elm) {
      return elm instanceof HTMLFormElement && (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function' || typeof elm.namespaceURI !== 'string' || typeof elm.insertBefore !== 'function' || typeof elm.hasChildNodes !== 'function');
    };
    /**
     * _isNode
     *
     * @param  {Node} obj object to check whether it's a DOM node
     * @return {Boolean} true is object is a DOM node
     */


    var _isNode = function _isNode(object) {
      return _typeof(Node) === 'object' ? object instanceof Node : object && _typeof(object) === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string';
    };
    /**
     * _executeHook
     * Execute user configurable hooks
     *
     * @param  {String} entryPoint  Name of the hook's entry point
     * @param  {Node} currentNode node to work on with the hook
     * @param  {Object} data additional hook parameters
     */


    var _executeHook = function _executeHook(entryPoint, currentNode, data) {
      if (!hooks[entryPoint]) {
        return;
      }

      arrayForEach(hooks[entryPoint], function (hook) {
        hook.call(DOMPurify, currentNode, data, CONFIG);
      });
    };
    /**
     * _sanitizeElements
     *
     * @protect nodeName
     * @protect textContent
     * @protect removeChild
     *
     * @param   {Node} currentNode to check for permission to exist
     * @return  {Boolean} true if node was killed, false if left alive
     */


    var _sanitizeElements = function _sanitizeElements(currentNode) {
      var content;
      /* Execute a hook if present */

      _executeHook('beforeSanitizeElements', currentNode, null);
      /* Check if element is clobbered or can clobber */


      if (_isClobbered(currentNode)) {
        _forceRemove(currentNode);

        return true;
      }
      /* Check if tagname contains Unicode */


      if (regExpTest(/[\u0080-\uFFFF]/, currentNode.nodeName)) {
        _forceRemove(currentNode);

        return true;
      }
      /* Now let's check the element's type and name */


      var tagName = transformCaseFunc(currentNode.nodeName);
      /* Execute a hook if present */

      _executeHook('uponSanitizeElement', currentNode, {
        tagName: tagName,
        allowedTags: ALLOWED_TAGS
      });
      /* Detect mXSS attempts abusing namespace confusion */


      if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && regExpTest(/<[/\w]/g, currentNode.innerHTML) && regExpTest(/<[/\w]/g, currentNode.textContent)) {
        _forceRemove(currentNode);

        return true;
      }
      /* Mitigate a problem with templates inside select */


      if (tagName === 'select' && regExpTest(/<template/i, currentNode.innerHTML)) {
        _forceRemove(currentNode);

        return true;
      }
      /* Remove element if anything forbids its presence */


      if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
        /* Check if we have a custom element to handle */
        if (!FORBID_TAGS[tagName] && _basicCustomElementTest(tagName)) {
          if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) return false;
          if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) return false;
        }
        /* Keep content except for bad-listed elements */


        if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {
          var parentNode = getParentNode(currentNode) || currentNode.parentNode;
          var childNodes = getChildNodes(currentNode) || currentNode.childNodes;

          if (childNodes && parentNode) {
            var childCount = childNodes.length;

            for (var i = childCount - 1; i >= 0; --i) {
              parentNode.insertBefore(cloneNode(childNodes[i], true), getNextSibling(currentNode));
            }
          }
        }

        _forceRemove(currentNode);

        return true;
      }
      /* Check whether element has a valid namespace */


      if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {
        _forceRemove(currentNode);

        return true;
      }
      /* Make sure that older browsers don't get fallback-tag mXSS */


      if ((tagName === 'noscript' || tagName === 'noembed' || tagName === 'noframes') && regExpTest(/<\/no(script|embed|frames)/i, currentNode.innerHTML)) {
        _forceRemove(currentNode);

        return true;
      }
      /* Sanitize element content to be template-safe */


      if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {
        /* Get the element's text content */
        content = currentNode.textContent;
        content = stringReplace(content, MUSTACHE_EXPR$1, ' ');
        content = stringReplace(content, ERB_EXPR$1, ' ');
        content = stringReplace(content, TMPLIT_EXPR$1, ' ');

        if (currentNode.textContent !== content) {
          arrayPush(DOMPurify.removed, {
            element: currentNode.cloneNode()
          });
          currentNode.textContent = content;
        }
      }
      /* Execute a hook if present */


      _executeHook('afterSanitizeElements', currentNode, null);

      return false;
    };
    /**
     * _isValidAttribute
     *
     * @param  {string} lcTag Lowercase tag name of containing element.
     * @param  {string} lcName Lowercase attribute name.
     * @param  {string} value Attribute value.
     * @return {Boolean} Returns true if `value` is valid, otherwise false.
     */
    // eslint-disable-next-line complexity


    var _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {
      /* Make sure attribute cannot clobber */
      if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {
        return false;
      }
      /* Allow valid data-* attributes: At least one character after "-"
          (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)
          XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)
          We don't need to check the value; it's always URI safe. */


      if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR$1, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR$1, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {
        if ( // First condition does a very basic check if a) it's basically a valid custom element tagname AND
        // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
        // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck
        _basicCustomElementTest(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) || // Alternative, second condition checks if it's an `is`-attribute, AND
        // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
        lcName === 'is' && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ; else {
          return false;
        }
        /* Check value is safe. First, is attr inert? If so, is safe */

      } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE$1, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA$1, stringReplace(value, ATTR_WHITESPACE$1, ''))) ; else if (value) {
        return false;
      } else ;

      return true;
    };
    /**
     * _basicCustomElementCheck
     * checks if at least one dash is included in tagName, and it's not the first char
     * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name
     * @param {string} tagName name of the tag of the node to sanitize
     */


    var _basicCustomElementTest = function _basicCustomElementTest(tagName) {
      return tagName.indexOf('-') > 0;
    };
    /**
     * _sanitizeAttributes
     *
     * @protect attributes
     * @protect nodeName
     * @protect removeAttribute
     * @protect setAttribute
     *
     * @param  {Node} currentNode to sanitize
     */


    var _sanitizeAttributes = function _sanitizeAttributes(currentNode) {
      var attr;
      var value;
      var lcName;
      var l;
      /* Execute a hook if present */

      _executeHook('beforeSanitizeAttributes', currentNode, null);

      var attributes = currentNode.attributes;
      /* Check if we have attributes; if not we might have a text node */

      if (!attributes) {
        return;
      }

      var hookEvent = {
        attrName: '',
        attrValue: '',
        keepAttr: true,
        allowedAttributes: ALLOWED_ATTR
      };
      l = attributes.length;
      /* Go backwards over all attributes; safely remove bad ones */

      while (l--) {
        attr = attributes[l];
        var _attr = attr,
            name = _attr.name,
            namespaceURI = _attr.namespaceURI;
        value = name === 'value' ? attr.value : stringTrim(attr.value);
        lcName = transformCaseFunc(name);
        /* Execute a hook if present */

        hookEvent.attrName = lcName;
        hookEvent.attrValue = value;
        hookEvent.keepAttr = true;
        hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set

        _executeHook('uponSanitizeAttribute', currentNode, hookEvent);

        value = hookEvent.attrValue;
        /* Did the hooks approve of the attribute? */

        if (hookEvent.forceKeepAttr) {
          continue;
        }
        /* Remove attribute */


        _removeAttribute(name, currentNode);
        /* Did the hooks approve of the attribute? */


        if (!hookEvent.keepAttr) {
          continue;
        }
        /* Work around a security issue in jQuery 3.0 */


        if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\/>/i, value)) {
          _removeAttribute(name, currentNode);

          continue;
        }
        /* Sanitize attribute content to be template-safe */


        if (SAFE_FOR_TEMPLATES) {
          value = stringReplace(value, MUSTACHE_EXPR$1, ' ');
          value = stringReplace(value, ERB_EXPR$1, ' ');
          value = stringReplace(value, TMPLIT_EXPR$1, ' ');
        }
        /* Is `value` valid for this attribute? */


        var lcTag = transformCaseFunc(currentNode.nodeName);

        if (!_isValidAttribute(lcTag, lcName, value)) {
          continue;
        }
        /* Full DOM Clobbering protection via namespace isolation,
         * Prefix id and name attributes with `user-content-`
         */


        if (SANITIZE_NAMED_PROPS && (lcName === 'id' || lcName === 'name')) {
          // Remove the attribute with this value
          _removeAttribute(name, currentNode); // Prefix the value and later re-create the attribute with the sanitized value


          value = SANITIZE_NAMED_PROPS_PREFIX + value;
        }
        /* Handle attributes that require Trusted Types */


        if (trustedTypesPolicy && _typeof(trustedTypes) === 'object' && typeof trustedTypes.getAttributeType === 'function') {
          if (namespaceURI) ; else {
            switch (trustedTypes.getAttributeType(lcTag, lcName)) {
              case 'TrustedHTML':
                {
                  value = trustedTypesPolicy.createHTML(value);
                  break;
                }

              case 'TrustedScriptURL':
                {
                  value = trustedTypesPolicy.createScriptURL(value);
                  break;
                }
            }
          }
        }
        /* Handle invalid data-* attribute set by try-catching it */


        try {
          if (namespaceURI) {
            currentNode.setAttributeNS(namespaceURI, name, value);
          } else {
            /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. "x-schema". */
            currentNode.setAttribute(name, value);
          }

          arrayPop(DOMPurify.removed);
        } catch (_) {}
      }
      /* Execute a hook if present */


      _executeHook('afterSanitizeAttributes', currentNode, null);
    };
    /**
     * _sanitizeShadowDOM
     *
     * @param  {DocumentFragment} fragment to iterate over recursively
     */


    var _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {
      var shadowNode;

      var shadowIterator = _createIterator(fragment);
      /* Execute a hook if present */


      _executeHook('beforeSanitizeShadowDOM', fragment, null);

      while (shadowNode = shadowIterator.nextNode()) {
        /* Execute a hook if present */
        _executeHook('uponSanitizeShadowNode', shadowNode, null);
        /* Sanitize tags and elements */


        if (_sanitizeElements(shadowNode)) {
          continue;
        }
        /* Deep shadow DOM detected */


        if (shadowNode.content instanceof DocumentFragment) {
          _sanitizeShadowDOM(shadowNode.content);
        }
        /* Check attributes, sanitize if necessary */


        _sanitizeAttributes(shadowNode);
      }
      /* Execute a hook if present */


      _executeHook('afterSanitizeShadowDOM', fragment, null);
    };
    /**
     * Sanitize
     * Public method providing core sanitation functionality
     *
     * @param {String|Node} dirty string or DOM node
     * @param {Object} configuration object
     */
    // eslint-disable-next-line complexity


    DOMPurify.sanitize = function (dirty) {
      var cfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var body;
      var importedNode;
      var currentNode;
      var oldNode;
      var returnNode;
      /* Make sure we have a string to sanitize.
        DO NOT return early, as this will return the wrong type if
        the user has requested a DOM object rather than a string */

      IS_EMPTY_INPUT = !dirty;

      if (IS_EMPTY_INPUT) {
        dirty = '<!-->';
      }
      /* Stringify, in case dirty is an object */


      if (typeof dirty !== 'string' && !_isNode(dirty)) {
        if (typeof dirty.toString === 'function') {
          dirty = dirty.toString();

          if (typeof dirty !== 'string') {
            throw typeErrorCreate('dirty is not a string, aborting');
          }
        } else {
          throw typeErrorCreate('toString is not a function');
        }
      }
      /* Check we can run. Otherwise fall back or ignore */


      if (!DOMPurify.isSupported) {
        if (_typeof(window.toStaticHTML) === 'object' || typeof window.toStaticHTML === 'function') {
          if (typeof dirty === 'string') {
            return window.toStaticHTML(dirty);
          }

          if (_isNode(dirty)) {
            return window.toStaticHTML(dirty.outerHTML);
          }
        }

        return dirty;
      }
      /* Assign config vars */


      if (!SET_CONFIG) {
        _parseConfig(cfg);
      }
      /* Clean up removed elements */


      DOMPurify.removed = [];
      /* Check if dirty is correctly typed for IN_PLACE */

      if (typeof dirty === 'string') {
        IN_PLACE = false;
      }

      if (IN_PLACE) {
        /* Do some early pre-sanitization to avoid unsafe root nodes */
        if (dirty.nodeName) {
          var tagName = transformCaseFunc(dirty.nodeName);

          if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
            throw typeErrorCreate('root node is forbidden and cannot be sanitized in-place');
          }
        }
      } else if (dirty instanceof Node) {
        /* If dirty is a DOM element, append to an empty document to avoid
           elements being stripped by the parser */
        body = _initDocument('<!---->');
        importedNode = body.ownerDocument.importNode(dirty, true);

        if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {
          /* Node is already a body, use as is */
          body = importedNode;
        } else if (importedNode.nodeName === 'HTML') {
          body = importedNode;
        } else {
          // eslint-disable-next-line unicorn/prefer-dom-node-append
          body.appendChild(importedNode);
        }
      } else {
        /* Exit directly if we have nothing to do */
        if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && // eslint-disable-next-line unicorn/prefer-includes
        dirty.indexOf('<') === -1) {
          return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
        }
        /* Initialize the document to work on */


        body = _initDocument(dirty);
        /* Check we have a DOM node from the data */

        if (!body) {
          return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';
        }
      }
      /* Remove first element node (ours) if FORCE_BODY is set */


      if (body && FORCE_BODY) {
        _forceRemove(body.firstChild);
      }
      /* Get node iterator */


      var nodeIterator = _createIterator(IN_PLACE ? dirty : body);
      /* Now start iterating over the created document */


      while (currentNode = nodeIterator.nextNode()) {
        /* Fix IE's strange behavior with manipulated textNodes #89 */
        if (currentNode.nodeType === 3 && currentNode === oldNode) {
          continue;
        }
        /* Sanitize tags and elements */


        if (_sanitizeElements(currentNode)) {
          continue;
        }
        /* Shadow DOM detected, sanitize it */


        if (currentNode.content instanceof DocumentFragment) {
          _sanitizeShadowDOM(currentNode.content);
        }
        /* Check attributes, sanitize if necessary */


        _sanitizeAttributes(currentNode);

        oldNode = currentNode;
      }

      oldNode = null;
      /* If we sanitized `dirty` in-place, return it. */

      if (IN_PLACE) {
        return dirty;
      }
      /* Return sanitized string or DOM */


      if (RETURN_DOM) {
        if (RETURN_DOM_FRAGMENT) {
          returnNode = createDocumentFragment.call(body.ownerDocument);

          while (body.firstChild) {
            // eslint-disable-next-line unicorn/prefer-dom-node-append
            returnNode.appendChild(body.firstChild);
          }
        } else {
          returnNode = body;
        }

        if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmod) {
          /*
            AdoptNode() is not used because internal state is not reset
            (e.g. the past names map of a HTMLFormElement), this is safe
            in theory but we would rather not risk another attack vector.
            The state that is cloned by importNode() is explicitly defined
            by the specs.
          */
          returnNode = importNode.call(originalDocument, returnNode, true);
        }

        return returnNode;
      }

      var serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;
      /* Serialize doctype if allowed */

      if (WHOLE_DOCUMENT && ALLOWED_TAGS['!doctype'] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {
        serializedHTML = '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\n' + serializedHTML;
      }
      /* Sanitize final string template-safe */


      if (SAFE_FOR_TEMPLATES) {
        serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR$1, ' ');
        serializedHTML = stringReplace(serializedHTML, ERB_EXPR$1, ' ');
        serializedHTML = stringReplace(serializedHTML, TMPLIT_EXPR$1, ' ');
      }

      return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
    };
    /**
     * Public method to set the configuration once
     * setConfig
     *
     * @param {Object} cfg configuration object
     */


    DOMPurify.setConfig = function (cfg) {
      _parseConfig(cfg);

      SET_CONFIG = true;
    };
    /**
     * Public method to remove the configuration
     * clearConfig
     *
     */


    DOMPurify.clearConfig = function () {
      CONFIG = null;
      SET_CONFIG = false;
    };
    /**
     * Public method to check if an attribute value is valid.
     * Uses last set config, if any. Otherwise, uses config defaults.
     * isValidAttribute
     *
     * @param  {string} tag Tag name of containing element.
     * @param  {string} attr Attribute name.
     * @param  {string} value Attribute value.
     * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.
     */


    DOMPurify.isValidAttribute = function (tag, attr, value) {
      /* Initialize shared config vars if necessary. */
      if (!CONFIG) {
        _parseConfig({});
      }

      var lcTag = transformCaseFunc(tag);
      var lcName = transformCaseFunc(attr);
      return _isValidAttribute(lcTag, lcName, value);
    };
    /**
     * AddHook
     * Public method to add DOMPurify hooks
     *
     * @param {String} entryPoint entry point for the hook to add
     * @param {Function} hookFunction function to execute
     */


    DOMPurify.addHook = function (entryPoint, hookFunction) {
      if (typeof hookFunction !== 'function') {
        return;
      }

      hooks[entryPoint] = hooks[entryPoint] || [];
      arrayPush(hooks[entryPoint], hookFunction);
    };
    /**
     * RemoveHook
     * Public method to remove a DOMPurify hook at a given entryPoint
     * (pops it from the stack of hooks if more are present)
     *
     * @param {String} entryPoint entry point for the hook to remove
     * @return {Function} removed(popped) hook
     */


    DOMPurify.removeHook = function (entryPoint) {
      if (hooks[entryPoint]) {
        return arrayPop(hooks[entryPoint]);
      }
    };
    /**
     * RemoveHooks
     * Public method to remove all DOMPurify hooks at a given entryPoint
     *
     * @param  {String} entryPoint entry point for the hooks to remove
     */


    DOMPurify.removeHooks = function (entryPoint) {
      if (hooks[entryPoint]) {
        hooks[entryPoint] = [];
      }
    };
    /**
     * RemoveAllHooks
     * Public method to remove all DOMPurify hooks
     *
     */


    DOMPurify.removeAllHooks = function () {
      hooks = {};
    };

    return DOMPurify;
  }

  var purify = createDOMPurify();

  return purify;

}));
//# sourceMappingURL=purify.js.map


/***/ }),
/* 83 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GenericDocFieldHandler: () => (/* binding */ GenericDocFieldHandler)
/* harmony export */ });
/* harmony import */ var _GenericDocAbstractFieldHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84);

class GenericDocFieldHandler extends _GenericDocAbstractFieldHandler__WEBPACK_IMPORTED_MODULE_0__.GenericDocAbstractFieldHandler {
    getDefaultConfig() {
        return {};
    }
    getXmlValue() {
        var _a;
        return JSON.stringify([((_a = this.rawValue) !== null && _a !== void 0 ? _a : "")]);
    }
    addSignatures(signatures, includeAll) { }
}


/***/ }),
/* 84 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GenericDocAbstractFieldHandler: () => (/* binding */ GenericDocAbstractFieldHandler)
/* harmony export */ });
class GenericDocAbstractFieldHandler {
    constructor(sectionType, config, fieldValue) {
        this.name = "";
        if (!config)
            config = this.getDefaultConfig();
        this.dhfFieldConfig = config;
        this.sectionType = sectionType;
        this.rawValue = fieldValue;
    }
    setDHFConfig(config) {
        this.dhfFieldConfig = config;
    }
    addSignatures(signatures, includeAll) {
        //Nothing to do here
    }
    getData() {
        return this.rawValue;
    }
    getFieldType() {
        return this.sectionType;
    }
    initData(serializedFieldData) {
        this.rawValue = serializedFieldData;
    }
    getFieldName() {
        return this.name;
    }
    setFieldName(value) {
        this.name = value;
    }
}


/***/ }),
/* 85 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SectionDescriptions: () => (/* binding */ SectionDescriptions)
/* harmony export */ });

class SectionDescriptions {
}
SectionDescriptions.section_Checkbox = "Checkbox";
SectionDescriptions.section_Custom = "Custom";
SectionDescriptions.section_derivedfrom = "derivedfrom";
SectionDescriptions.section_dashboard = "dashboard";
SectionDescriptions.section_designreviews = "designreviews";
SectionDescriptions.section_audittrail = "audittrail";
SectionDescriptions.section_signatures = "signatures";
SectionDescriptions.section_responsibilities = "responsibilities";
SectionDescriptions.section_genericTable = "genericTable";
SectionDescriptions.section_dhf_table = "dhf_table";
SectionDescriptions.section_document_options = "document_options";
SectionDescriptions.section_Date = "Date";
SectionDescriptions.section_item_index = "item_index";
SectionDescriptions.section_itemlist = "itemlist";
SectionDescriptions.section_package = "package";
SectionDescriptions.section_items = "items";
SectionDescriptions.section_itemtable = "itemtable";
SectionDescriptions.section_linklist = "linklist";
SectionDescriptions.section_figures_tables = "figures_tables";
SectionDescriptions.section_multiselect = "multiselect";
SectionDescriptions.section_remarks = "remarks";
SectionDescriptions.section_richtext = "richtext";
SectionDescriptions.section_riskstats = "riskstats";
SectionDescriptions.section_terms_abbreviations = "terms_abbreviations";
SectionDescriptions.section_table_of_content = "table_of_content";
SectionDescriptions.section_testresults = "testresults";
SectionDescriptions.section_textline = "textline";
SectionDescriptions.section_tracematrix = "tracematrix";
SectionDescriptions.section_downtraces = "downtraces";
SectionDescriptions.section_uptraces = "uptraces";
SectionDescriptions.section_duedate = "duedate";
SectionDescriptions.section_templateapproval = "templateapproval";
SectionDescriptions.section_signaturebox = "signaturebox";
SectionDescriptions.section_CustomSection = "CustomSection";
SectionDescriptions.section_checkbox = "checkbox";
SectionDescriptions.section_hidden = "hidden";


/***/ }),
/* 86 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DocFieldHandlerFactory: () => (/* binding */ DocFieldHandlerFactory)
/* harmony export */ });
/* harmony import */ var _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(85);
/* harmony import */ var _GenericDocFieldHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(83);
/* harmony import */ var _GenericTableDocHandler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(87);
/* harmony import */ var _DateDocHandler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(88);
/* harmony import */ var _CustomDocFieldHandler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(90);
/* harmony import */ var _RemarksDocFieldHandler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(93);
/* harmony import */ var _CheckBoxDocFieldHandler__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(95);
/* harmony import */ var _DesignReviewDocFieldHandler__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(96);
/* harmony import */ var _ItemIndexDocFieldHander__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(98);
/* harmony import */ var _ItemListDocFieldHandler__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(99);
/* harmony import */ var _LinkListDocFieldHandler__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(101);
/* harmony import */ var _ItemTableDocFieldHandler__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(102);
/* harmony import */ var _RiskStatsDocFieldHandler__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(103);
/* harmony import */ var _ItemRefDocFieldHandler__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(104);
/* harmony import */ var _ListOfFiguresDocFieldHandler__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(105);
/* harmony import */ var _SmartTextDocFieldHandler__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(106);
/* harmony import */ var _TableOfContentDocFieldHandler__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(107);
/* harmony import */ var _testResultsDocFieldHandler__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(108);
/* harmony import */ var _DerivedFromDocFieldHandler__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(109);
/* harmony import */ var _DocumentOptionsFieldHandler__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(110);
/* harmony import */ var _TextLineDocFieldHandler__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(111);
/* harmony import */ var _TraceMatrixDocFieldHandler__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(113);
/* harmony import */ var _TraceDocFieldHandler__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(114);
/* harmony import */ var _DropdownDocFieldHandler__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(115);
/* harmony import */ var _RichTextDocFieldHandler__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(112);
/* harmony import */ var _DashboardDocFieldHandler__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(116);


























class DocFieldHandlerFactory {
    static GetDHFFieldConfig(itemConfig, fieldType, config) {
        let dhfConfig = itemConfig.getDHFConfig();
        let foundConfig = undefined;
        // special case for signatures
        if (fieldType == _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_signaturebox || fieldType == _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_templateapproval)
            fieldType = "signatures";
        if (dhfConfig && dhfConfig[fieldType]) {
            foundConfig = dhfConfig[fieldType];
        }
        if (foundConfig != undefined)
            return Object.assign(Object.assign({}, foundConfig), (config || {}));
        return config;
    }
    static createHandler(itemConfig, dhfValue) {
        let returnedFieldHandler = undefined;
        switch (dhfValue.type) {
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_audittrail:
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_signatures:
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_signaturebox:
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_responsibilities:
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_genericTable:
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_templateapproval:
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_dhf_table:
                returnedFieldHandler = new _GenericTableDocHandler__WEBPACK_IMPORTED_MODULE_2__.GenericTableDocHandler(dhfValue.type, dhfValue.ctrlConfig, dhfValue.fieldValue);
                break;
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_Date:
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_duedate:
                returnedFieldHandler = new _DateDocHandler__WEBPACK_IMPORTED_MODULE_3__.DateDocHandler(dhfValue.type, dhfValue.ctrlConfig, dhfValue.fieldValue);
                break;
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_remarks:
                returnedFieldHandler = new _RemarksDocFieldHandler__WEBPACK_IMPORTED_MODULE_5__.RemarksDocFieldHandler(itemConfig, dhfValue.type, dhfValue.ctrlConfig, dhfValue.fieldValue);
                break;
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_multiselect:
                returnedFieldHandler = new _DropdownDocFieldHandler__WEBPACK_IMPORTED_MODULE_23__.MultiSelectDocFieldHandler(itemConfig, dhfValue.type, dhfValue.ctrlConfig, dhfValue.fieldValue);
                break;
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_downtraces:
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_uptraces:
                returnedFieldHandler = new _TraceDocFieldHandler__WEBPACK_IMPORTED_MODULE_22__.TraceDocFieldHandler(itemConfig, dhfValue.type, dhfValue.ctrlConfig, dhfValue.fieldValue);
                break;
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_dashboard:
                returnedFieldHandler = new _DashboardDocFieldHandler__WEBPACK_IMPORTED_MODULE_25__.DashboardDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig, dhfValue.fieldValue);
                break;
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_designreviews:
                returnedFieldHandler = new _DesignReviewDocFieldHandler__WEBPACK_IMPORTED_MODULE_7__.DesignReviewDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig, dhfValue.fieldValue);
                break;
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_package:
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_itemlist:
                returnedFieldHandler = new _ItemRefDocFieldHandler__WEBPACK_IMPORTED_MODULE_13__.ItemRefDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig, dhfValue.fieldValue);
                break;
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_riskstats:
                returnedFieldHandler = new _RiskStatsDocFieldHandler__WEBPACK_IMPORTED_MODULE_12__.RiskStatsDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig, dhfValue.fieldValue);
                break;
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_linklist:
                returnedFieldHandler = new _LinkListDocFieldHandler__WEBPACK_IMPORTED_MODULE_10__.LinkListDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig, dhfValue.fieldValue);
                break;
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_itemtable:
                returnedFieldHandler = new _ItemTableDocFieldHandler__WEBPACK_IMPORTED_MODULE_11__.ItemTableDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig, dhfValue.fieldValue);
                break;
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_items:
                returnedFieldHandler = new _ItemListDocFieldHandler__WEBPACK_IMPORTED_MODULE_9__.ItemListDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig, dhfValue.fieldValue);
                break;
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_Checkbox: // Legacy
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_checkbox:
                returnedFieldHandler = new _CheckBoxDocFieldHandler__WEBPACK_IMPORTED_MODULE_6__.CheckBoxDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig, dhfValue.fieldValue);
                break;
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_Custom: // Legacy
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_CustomSection:
                returnedFieldHandler = new _CustomDocFieldHandler__WEBPACK_IMPORTED_MODULE_4__.CustomDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig, dhfValue.fieldValue);
                break;
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_item_index:
                returnedFieldHandler = new _ItemIndexDocFieldHander__WEBPACK_IMPORTED_MODULE_8__.ItemIndexDocFieldHander(dhfValue.type, dhfValue.ctrlConfig, dhfValue.fieldValue);
                break;
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_figures_tables:
                returnedFieldHandler = new _ListOfFiguresDocFieldHandler__WEBPACK_IMPORTED_MODULE_14__.ListOfFiguresDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig, dhfValue.fieldValue);
                break;
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_terms_abbreviations:
                returnedFieldHandler = new _SmartTextDocFieldHandler__WEBPACK_IMPORTED_MODULE_15__.SmartTextDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig, dhfValue.fieldValue);
                break;
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_table_of_content:
                returnedFieldHandler = new _TableOfContentDocFieldHandler__WEBPACK_IMPORTED_MODULE_16__.TableOfContentDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig, dhfValue.fieldValue);
                break;
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_testresults:
                returnedFieldHandler = new _testResultsDocFieldHandler__WEBPACK_IMPORTED_MODULE_17__.TestResultsDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig, dhfValue.fieldValue);
                break;
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_derivedfrom:
                returnedFieldHandler = new _DerivedFromDocFieldHandler__WEBPACK_IMPORTED_MODULE_18__.DerivedFromDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig, dhfValue.fieldValue);
                break;
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_document_options:
                returnedFieldHandler = new _DocumentOptionsFieldHandler__WEBPACK_IMPORTED_MODULE_19__.DocumentOptionsFieldHandler(dhfValue.type, dhfValue.ctrlConfig, dhfValue.fieldValue);
                break;
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_richtext:
                returnedFieldHandler = new _RichTextDocFieldHandler__WEBPACK_IMPORTED_MODULE_24__.RichTextDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig, dhfValue.fieldValue);
                break;
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_textline:
                returnedFieldHandler = new _TextLineDocFieldHandler__WEBPACK_IMPORTED_MODULE_20__.TextLineDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig, dhfValue.fieldValue);
                break;
            case _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_tracematrix:
                returnedFieldHandler = new _TraceMatrixDocFieldHandler__WEBPACK_IMPORTED_MODULE_21__.TraceMatrixDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig, dhfValue.fieldValue);
                break;
            default:
                returnedFieldHandler = new _GenericDocFieldHandler__WEBPACK_IMPORTED_MODULE_1__.GenericDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig, dhfValue.fieldValue);
        }
        if (dhfValue.name) {
            returnedFieldHandler.setFieldName(dhfValue.name);
        }
        return returnedFieldHandler;
    }
}


/***/ }),
/* 87 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GenericTableDocHandler: () => (/* binding */ GenericTableDocHandler)
/* harmony export */ });
/* harmony import */ var _BaseTableFieldHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(67);

class GenericTableDocHandler extends _BaseTableFieldHandler__WEBPACK_IMPORTED_MODULE_0__.BaseTableFieldHandler {
    constructor(sectionType, config, fieldValue) {
        // The IDHFSectionOptions config parameter is really a ITableControlBaseParams.
        super(config);
        this.sectionType = sectionType;
        this.name = "";
        this.dhfFieldConfig = config;
        this.initData(fieldValue);
    }
    validate() {
        super.validate();
    }
    setDHFConfig(config) {
        this.dhfFieldConfig = config;
    }
    getFieldType() {
        return this.sectionType;
    }
    GetColumnCount(controllerConfig) {
        return controllerConfig.columns ? controllerConfig.columns.length : 0;
    }
    getXmlValue() {
        let controllerConfig = this.dhfFieldConfig;
        // get data entered into table
        let table = [];
        let fieldValue = this.getData();
        if (fieldValue) {
            table = JSON.parse(fieldValue);
        }
        // add some extras for the xml dump: table header, sorting and colum type
        const col_order = { sortedtable: 1 };
        const col_types = { columnTypes: 1 };
        const col_header = {};
        const colSorter = [];
        let idx = 0;
        //There might be no columns defined
        let columns = controllerConfig.columns || [];
        for (let columnConfig of columns) {
            let castedColumnConfig = columnConfig;
            colSorter.push({ name: castedColumnConfig.field, order: castedColumnConfig.pos });
            col_types[castedColumnConfig.field] = castedColumnConfig.columnType;
            col_header[castedColumnConfig.field] = castedColumnConfig.name;
            // fix custom drop down values
            let colOpts = this.getColumnByField(controllerConfig.columns[idx].field);
            if (colOpts) {
                for (let row = 0; row < table.length; row++) {
                    if (table[row]["col" + idx] && colOpts[table[row]["col" + idx]]) {
                        // replace value with human readable value
                        table[row]["col" + idx] = colOpts[table[row]["col" + idx]];
                    }
                }
            }
            idx++;
        }
        // make sure col indexes start at 0
        colSorter.sort(function (a, b) {
            return a.order - b.order;
        });
        let colIdx = 0;
        for (let s of colSorter) {
            col_order[s.name] = colIdx;
            colIdx++;
        }
        table.splice(0, 0, col_header);
        table.splice(0, 0, col_types);
        table.splice(0, 0, col_order);
        // return the xml dump
        return JSON.stringify(table);
    }
    getDefaultConfig() {
        // Default is empty as it's configured from itemConfig.getDHFConfig();
        return {};
    }
    getFieldName() {
        return this.name;
    }
    setFieldName(value) {
        this.name = value;
    }
    addSignatures(signatures, includeAll) {
        let controllerConfig = this.dhfFieldConfig;
        let signatureNameColumn;
        let eSign = false;
        for (let col = 0; col < this.getColumnCount(); col++) {
            if (controllerConfig.columns[col].columnType === "type4") {
                // drop down with user names
                signatureNameColumn = controllerConfig.columns[col].field;
            }
            else if (controllerConfig.columns[col].columnType === "type10") {
                // drop down with user names
                signatureNameColumn = controllerConfig.columns[col].field;
            }
            else if (controllerConfig.columns[col].columnType === "type3") {
                // empty field to add signature image and token
                eSign = true;
            }
        }
        if (!eSign && !signatureNameColumn) {
            return;
        }
        if (!eSign) {
            return;
        }
        if (!signatureNameColumn) {
            return;
        }
        // get data entered into table
        let table = [];
        table = JSON.parse(this.getData());
        for (let row = 0; row < table.length; row++) {
            let userId = table[row][signatureNameColumn];
            if ((includeAll || userId) && signatures.indexOf(userId) === -1) {
                signatures.push(userId);
            }
        }
    }
}


/***/ }),
/* 88 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DateDocHandler: () => (/* binding */ DateDocHandler)
/* harmony export */ });
/* harmony import */ var _DateFieldHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75);
/* harmony import */ var _DateTimeBL__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(89);


class DateDocHandler extends _DateFieldHandler__WEBPACK_IMPORTED_MODULE_0__.DateFieldHandler {
    constructor(type, config, fieldValue) {
        if (config == undefined)
            config = DateDocHandler.default_config;
        super(config);
        this.name = "";
        this.type = type;
        this.dhfFieldConfig = config;
        this.initData(fieldValue);
    }
    getFieldType() {
        return this.type;
    }
    setDHFConfig(config) {
        this.dhfFieldConfig = config;
    }
    getXmlValue() {
        let xmlval = [];
        let yyyymmdd = this.getDate();
        // new Date take mm-1
        let dateStr = _DateTimeBL__WEBPACK_IMPORTED_MODULE_1__.DateTimeBL.getInstance().renderCustomerHumanDate(yyyymmdd, true);
        xmlval.push({ "date": dateStr });
        return JSON.stringify(xmlval);
    }
    addSignatures(signatures, includeAll) {
        //Nothing to do here
    }
    getDefaultConfig() {
        return {};
    }
    getFieldName() {
        return this.name;
    }
    setFieldName(value) {
        this.name = value;
    }
}
DateDocHandler.default_config = {
    default: {}
};


/***/ }),
/* 89 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DateTimeBL: () => (/* binding */ DateTimeBL)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);

class DateTimeBL {
    static getInstance() {
        if (DateTimeBL.instance == null) {
            DateTimeBL.instance = new DateTimeBL();
        }
        return DateTimeBL.instance;
    }
    constructor() {
        this.userDateTimeFormat = "yyyy/MM/dd HH:mm:ss";
        this.userDateOnlyFormat = "yyyy/MM/dd";
        this.userTimezone = "UTC";
        this.simpleDateTimeFormat = new SimpleDateFormat(this.userDateTimeFormat);
        this.simpleDateFormat = new SimpleDateFormat(this.userDateOnlyFormat);
        this.dateIso8601FromServer = "";
        this.dateUserFromServer = "";
        this.serverDateTimeFormat = "yyyy/MM/dd HH:mm:ss";
        this.serverDateOnlyFormat = "yyyy/MM/dd";
        this.serverTimezone = "UTC";
        this.simpleCustomerDateTimeFormat = new SimpleDateFormat(this.userDateTimeFormat);
        this.simpleCustomerDateFormat = new SimpleDateFormat(this.userDateOnlyFormat);
    }
    // isValidateDate(new Date("ccccc")) -> false
    isValidDate(d) {
        if (Object.prototype.toString.call(d) === "[object Date]") {
            return !isNaN(d.getTime());
        }
        return false;
    }
    // render a human date and time in the user's preferred style
    renderHumanDate(date, dateOnly) {
        if (!this.isValidDate(date)) {
            return "";
        }
        if (dateOnly) {
            return this.simpleDateFormat.format(date);
        }
        return this.simpleDateTimeFormat.format(date);
    }
    // render a human date and time in the user's preferred style
    renderCustomerHumanDate(date, dateOnly) {
        if (!this.isValidDate(date)) {
            return "";
        }
        if (dateOnly) {
            return this.simpleCustomerDateFormat.format(date);
        }
        return this.simpleCustomerDateTimeFormat.format(date);
    }
    // render a date 3 letter abbreviation (e.g. for calendars)
    renderHumanMonth(dateObj) {
        let dateFormat = new SimpleDateFormat("MMM");
        return dateFormat.format(dateObj);
    }
    renderDashFormat(dateObj) {
        let dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        return dateFormat.format(dateObj);
    }
    // return the simple date format for controls
    getSimpleDateFormat() {
        return this.userDateOnlyFormat;
    }
    toMoment(format) {
        // see https://www.angularfaces.net/cheatsheet/
        return format
            .replace("a", "A")
            .replace("DDD", "DDDD")
            .replace("D", "DDD")
            .replace("dd", "DD")
            .replace("d", "D")
            .replace("EEEE", "dddd")
            .replace("EEE", "ddd")
            .replace("EE", "dd")
            .replace("E", "d")
            .replace("u", "E")
            .replace("w", "W")
            .replace("ww", "WW")
            .replace("xxx", "Z")
            .replace("xx", "ZZ")
            .replace("YYYY", "gggg")
            .replace("YY", "gg")
            .replace("yyyy", "YYYY")
            .replace("yyy", "YYY")
            .replace("yy", "YY")
            .replace("y", "Y")
            .replace("Z", "ZZ");
    }
    getSimpleDateFormatMoment() {
        return this.toMoment(this.userDateOnlyFormat);
    }
    getSimpleDateTimeFormatMoment() {
        return this.toMoment(this.userDateTimeFormat);
    }
    async initDateTimeSettings(update) {
        let dateSettings;
        let that = this;
        function updateSettings() {
            that.userDateTimeFormat = dateSettings.timeformat;
            that.userDateOnlyFormat = dateSettings.dateformat;
            that.userTimezone = dateSettings.timeZone;
            that.serverDateOnlyFormat = dateSettings.customerDateformat;
            that.serverDateTimeFormat = dateSettings.customerTimeformat;
            that.serverTimezone = dateSettings.customerTimezone;
            // create formatting strings
            that.simpleCustomerDateTimeFormat = new SimpleDateFormat(that.serverDateTimeFormat);
            that.simpleCustomerDateFormat = new SimpleDateFormat(that.serverDateOnlyFormat);
            // remember the date time settings as the server thinks it should be
            that.dateIso8601FromServer = dateSettings.dateIso8601;
            that.dateUserFromServer = dateSettings.timeUserFormat;
            // create formatting strings
            that.simpleDateTimeFormat = new SimpleDateFormat(that.userDateTimeFormat);
            that.simpleDateFormat = new SimpleDateFormat(that.userDateOnlyFormat);
        }
        if (update) {
            await _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.getServer("all/date").done(function (ds) {
                dateSettings = ds;
                updateSettings();
            });
        }
        else {
            dateSettings = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getDateInfo();
            updateSettings();
        }
        return;
    }
}


/***/ }),
/* 90 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CustomDocFieldHandler: () => (/* binding */ CustomDocFieldHandler)
/* harmony export */ });
/* harmony import */ var _ItemSelectionFromToAbstractDocFieldHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91);

class CustomDocFieldHandler extends _ItemSelectionFromToAbstractDocFieldHandler__WEBPACK_IMPORTED_MODULE_0__.ItemSelectionFromToAbstractDocFieldHandler {
    getDefaultConfig() {
        return CustomDocFieldHandler.default_config.default;
    }
    getXmlValue() {
        let controllerConfig = this.dhfFieldConfig;
        // get lists
        let reflist = this.getSelectedItems();
        let td = [];
        let r0 = {};
        for (let idx = 0; idx < reflist.from.length; idx++) {
            r0["from" + idx] = reflist.from[idx].to;
        }
        td.push(r0);
        let r1 = {};
        for (let idx = 0; idx < reflist.to.length; idx++) {
            r1["to" + idx] = reflist.to[idx].to;
        }
        td.push(r1);
        // copy parameters
        let r2 = {};
        r2["SETTINGS"] = JSON.stringify(controllerConfig.options);
        td.push(r2);
        // return the xml dump
        return JSON.stringify(td);
    }
}
CustomDocFieldHandler.default_config = {
    default: {
        includeInToc: false, landscape: false, options: {
            description: "",
            descriptionContent: "",
            descriptionNoContent: "<p>not applicable</p>",
            formatter: ""
        }
    }
};


/***/ }),
/* 91 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ItemSelectionFromToAbstractDocFieldHandler: () => (/* binding */ ItemSelectionFromToAbstractDocFieldHandler)
/* harmony export */ });
/* harmony import */ var _ItemSelectionFieldHandlerFromTo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(92);

class ItemSelectionFromToAbstractDocFieldHandler extends _ItemSelectionFieldHandlerFromTo__WEBPACK_IMPORTED_MODULE_0__.ItemSelectionFieldHandlerFromTo {
    constructor(fielType, config, fieldValue) {
        super(config, fielType);
        this.name = "";
        if (!config)
            config = this.getDefaultConfig();
        this.dhfFieldConfig = config;
        this.initData(fieldValue);
    }
    setDHFConfig(config) {
        this.dhfFieldConfig = config;
    }
    addSignatures(signatures, includeAll) {
        //Nothing to do here
    }
    getFieldName() {
        return this.name;
    }
    setFieldName(value) {
        this.name = value;
    }
}


/***/ }),
/* 92 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ItemSelectionFieldHandlerFromTo: () => (/* binding */ ItemSelectionFieldHandlerFromTo)
/* harmony export */ });
class ItemSelectionFieldHandlerFromTo {
    constructor(configIn, fieldTypeIn) {
        this.defaultSelection = [];
        this.config = configIn;
        this.fieldType = fieldTypeIn;
        // initialize object
        this.selectedItems = { from: [], to: [] };
    }
    getData() {
        return JSON.stringify(this.selectedItems);
    }
    getFieldType() {
        return this.fieldType;
    }
    initData(serializedFieldData) {
        this.selectedItems = { from: [], to: [] };
        if (serializedFieldData && serializedFieldData !== 'undefined' && serializedFieldData !== "") {
            this.selectedItems = JSON.parse(serializedFieldData);
        }
        else if (this.config && this.config.parameter && this.config.parameter.allTo) {
            this.selectedItems.to = this.defaultSelection;
        }
    }
    getSelectedItems() {
        return this.selectedItems;
    }
    setSelectedItems(data) {
        this.selectedItems = data;
    }
    setFromSelectiont(newSelection) {
        this.selectedItems.from = newSelection;
    }
    setToSelectiont(newSelection) {
        this.selectedItems.to = newSelection;
    }
    isDefaultSelection() {
        if (this.defaultSelection.length !== this.selectedItems.to.length) {
            return false;
        }
        const notInDefault = this.selectedItems.to.filter((d) => {
            return this.defaultSelection.reduce((prev, item) => {
                if (item.to === d.to) {
                    return false;
                }
                else {
                    return prev;
                }
            }, true);
        });
        return notInDefault.length === 0;
    }
    setDefaultSelection(map) {
        this.defaultSelection = map;
    }
    setConfig(config) {
        this.config = config;
    }
}


/***/ }),
/* 93 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RemarksDocFieldHandler: () => (/* binding */ RemarksDocFieldHandler)
/* harmony export */ });
/* harmony import */ var _DropdownAbstractDocFieldHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(94);

class RemarksDocFieldHandler extends _DropdownAbstractDocFieldHandler__WEBPACK_IMPORTED_MODULE_0__.DropdownAbstractDocFieldHandler {
    getXmlValue() {
        let tt = [];
        tt.push({ lines: this.getData() });
        return JSON.stringify(tt);
    }
    getDefaultConfig() {
        return RemarksDocFieldHandler.default_config.default;
    }
}
RemarksDocFieldHandler.default_config = {
    default: {}
};


/***/ }),
/* 94 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DropdownAbstractDocFieldHandler: () => (/* binding */ DropdownAbstractDocFieldHandler)
/* harmony export */ });
/* harmony import */ var _DropdownFieldHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(69);

class DropdownAbstractDocFieldHandler extends _DropdownFieldHandler__WEBPACK_IMPORTED_MODULE_0__.DropdownFieldHandler {
    constructor(itemConfig, type, config, initialValue) {
        super(config, initialValue);
        this.itemConfig = itemConfig;
        this.name = "";
        if (!config)
            config = this.getDefaultConfig();
        this.dhfFieldConfig = config;
        this.sectionType = type;
    }
    getFieldType() {
        return this.sectionType;
    }
    setDHFConfig(config) {
        this.dhfFieldConfig = config;
    }
    addSignatures(signatures, includeAll) {
        //Nothing to do here
    }
    getFieldName() {
        return this.name;
    }
    setFieldName(value) {
        this.name = value;
    }
}


/***/ }),
/* 95 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CheckBoxDocFieldHandler: () => (/* binding */ CheckBoxDocFieldHandler)
/* harmony export */ });
/* harmony import */ var _CheckboxFieldHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(64);

class CheckBoxDocFieldHandler extends _CheckboxFieldHandler__WEBPACK_IMPORTED_MODULE_0__.CheckboxFieldHandler {
    constructor(sectionType, config, fieldValue) {
        super(config);
        this.name = "";
        this.sectionType = sectionType;
        if (!config)
            config = this.getDefaultConfig();
        this.dhfFieldConfig = config;
        this.initData(fieldValue);
    }
    getFieldType() {
        return this.sectionType;
    }
    addSignatures(signatures, includeAll) {
        //Nothing to do here
    }
    getDefaultConfig() {
        return CheckBoxDocFieldHandler.default_config.default;
    }
    setDHFConfig(config) {
        this.dhfFieldConfig = config;
    }
    getXmlValue() {
        let xmlval = [];
        let val = this.getValue();
        xmlval.push({ "checked": val ? "true" : "false" });
        return JSON.stringify(xmlval);
    }
    getFieldName() {
        return this.name;
    }
    setFieldName(value) {
        this.name = value;
    }
}
CheckBoxDocFieldHandler.default_config = {
    default: {}
};


/***/ }),
/* 96 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DesignReviewDocFieldHandler: () => (/* binding */ DesignReviewDocFieldHandler)
/* harmony export */ });
/* harmony import */ var _ItemSelectionFieldHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(79);
/* harmony import */ var _matrixlib_JQueryExtendReplacement__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(97);


class DesignReviewDocFieldHandler extends _ItemSelectionFieldHandler__WEBPACK_IMPORTED_MODULE_0__.ItemSelectionFieldHandler {
    constructor(sectionType, config, fieldValue) {
        super(config, sectionType);
        if (!config)
            config = this.getDefaultConfig();
        this.dhfFieldConfig = config;
        this.initData(fieldValue);
    }
    getDefaultConfig() {
        return DesignReviewDocFieldHandler.defaut_config.default;
    }
    setDHFConfig(config) {
        this.dhfFieldConfig = config;
    }
    getXmlValue() {
        let js = this.getItems();
        if (!js) {
            return JSON.stringify({});
        }
        let controllerConfig = this.dhfFieldConfig;
        let reviews = {
            user: controllerConfig.user,
            date: controllerConfig.date,
            revision: controllerConfig.revision,
            comment: controllerConfig.comment,
            includeInToc: controllerConfig.includeInToc,
            numericalOrder: controllerConfig.numericalOrder
        };
        for (let review of controllerConfig.reviews) {
            reviews[review] = '1';
        }
        for (let row = 0; row < js.length; row++) {
            (0,_matrixlib_JQueryExtendReplacement__WEBPACK_IMPORTED_MODULE_1__.extend)(true, js[row], reviews);
        }
        return JSON.stringify(js);
    }
}
DesignReviewDocFieldHandler.defaut_config = {
    default: { reviews: [], user: false, date: false, revision: false, comment: false, includeInToc: false, numericalOrder: false }
};


/***/ }),
/* 97 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   extend: () => (/* binding */ extend)
/* harmony export */ });

// This is ported from the JQuery 3.5.1 codebase. It is tough to get a recursive extend function
// exactly right. Safest option is to keep the implementation we've used for years, and eliminate
// the JQuery dependency.
function isFunction(obj) {
    // Support: Chrome <=57, Firefox <=52
    // In some browsers, typeof returns "function" for HTML <object> elements
    // (i.e., `typeof document.createElement( "object" ) === "function"`).
    // We don't want to classify *any* DOM node as a function.
    return typeof obj === "function" && typeof obj.nodeType !== "number";
}
var class2type = {};
const hasOwn = class2type.hasOwnProperty;
const fnToString = hasOwn.toString;
const ObjectFunctionString = fnToString.call(Object);
function isPlainObject(obj) {
    var proto, Ctor;
    // Detect obvious negatives
    // Use toString instead of jQuery.type to catch host objects
    if (!obj || toString.call(obj) !== "[object Object]") {
        return false;
    }
    proto = Object.getPrototypeOf(obj);
    // Objects with no prototype (e.g., `Object.create( null )`) are plain
    if (!proto) {
        return true;
    }
    // Objects with prototype are plain iff they were constructed by a global Object function
    Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
    return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
}
function extend(...args) {
    var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
    // Handle a deep copy situation
    if (typeof target === "boolean") {
        deep = target;
        // Skip the boolean and the target
        target = arguments[i] || {};
        i++;
    }
    // Handle case when target is a string or something (possible in deep copy)
    if (typeof target !== "object" && !isFunction(target)) {
        target = {};
    }
    // Extend jQuery itself if only one argument is passed
    if (i === length) {
        target = this;
        i--;
    }
    for (; i < length; i++) {
        // Only deal with non-null/undefined values
        if ((options = arguments[i]) != null) {
            // Extend the base object
            for (name in options) {
                copy = options[name];
                // Prevent Object.prototype pollution
                // Prevent never-ending loop
                if (name === "__proto__" || target === copy) {
                    continue;
                }
                // Recurse if we're merging plain objects or arrays
                if (deep && copy && (isPlainObject(copy) ||
                    (copyIsArray = Array.isArray(copy)))) {
                    src = target[name];
                    // Ensure proper type for the source value
                    if (copyIsArray && !Array.isArray(src)) {
                        clone = [];
                    }
                    else if (!copyIsArray && !isPlainObject(src)) {
                        clone = {};
                    }
                    else {
                        clone = src;
                    }
                    copyIsArray = false;
                    // Never move original objects, clone them
                    target[name] = extend(deep, clone, copy);
                    // Don't bring in undefined values
                }
                else if (copy !== undefined) {
                    target[name] = copy;
                }
            }
        }
    }
    // Return the modified object
    return target;
}
var initCalled = false;
function init() {
    if (initCalled)
        return;
    initCalled = true;
    const typeStrings = ["Boolean", "Number", "String", "Function", "Array", "Date", "RegExp", "Object", "Error", "Symbol"];
    typeStrings.forEach((t) => {
        class2type["[object " + t + "]"] = t.toLowerCase();
    });
}
init();


/***/ }),
/* 98 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ItemIndexDocFieldHander: () => (/* binding */ ItemIndexDocFieldHander)
/* harmony export */ });
/* harmony import */ var _GenericDocAbstractFieldHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84);

class ItemIndexDocFieldHander extends _GenericDocAbstractFieldHandler__WEBPACK_IMPORTED_MODULE_0__.GenericDocAbstractFieldHandler {
    getXmlValue() {
        let controllerConfig = this.dhfFieldConfig;
        if (this.dhfFieldConfig == undefined)
            controllerConfig = ItemIndexDocFieldHander.defaultConfig;
        let options = { format: controllerConfig.format };
        return JSON.stringify([options]);
    }
    getDefaultConfig() {
        return ItemIndexDocFieldHander.defaultConfig.default;
    }
}
ItemIndexDocFieldHander.defaultConfig = { default: { format: '\\e "\\t" \\c "1"' } };


/***/ }),
/* 99 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ItemListDocFieldHandler: () => (/* binding */ ItemListDocFieldHandler)
/* harmony export */ });
/* harmony import */ var _matrixlib_JQueryExtendReplacement__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(97);
/* harmony import */ var _ItemSelectionAbstractDocFieldHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(100);


class ItemListDocFieldHandler extends _ItemSelectionAbstractDocFieldHandler__WEBPACK_IMPORTED_MODULE_1__.ItemSelectionAbstractDocFieldHandler {
    getDefaultConfig() {
        return ItemListDocFieldHandler.default_config.default;
    }
    setDHFConfig(config) {
        this.dhfFieldConfig = config;
    }
    getXmlValue() {
        let js = this.getItems();
        // add params (parameter: "showbreadcrumb:true,extracolumn:EX") to each row
        let controllerConfig = this.dhfFieldConfig;
        for (let row = 0; row < js.length; row++) {
            (0,_matrixlib_JQueryExtendReplacement__WEBPACK_IMPORTED_MODULE_0__.extend)(true, js[row], controllerConfig);
        }
        return JSON.stringify(js);
    }
}
ItemListDocFieldHandler.default_config = {
    default: {
        breadcrumb: true,
        folderDetails: '',
        extracolumn: '',
        showlinks: true,
        showUpOnly: false,
        showDownOnly: false,
        showDeeplinks: false,
        showExternal: 0,
        dateoptions: '',
        refdocs: false,
        hideLinkErrors: false,
        hideLabels: false,
        showAllParentFolders: false,
        hideEmptyFolders: false,
        includeInToc: false,
        breakAfterItems: false
    }
};


/***/ }),
/* 100 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ItemSelectionAbstractDocFieldHandler: () => (/* binding */ ItemSelectionAbstractDocFieldHandler)
/* harmony export */ });
/* harmony import */ var _ItemSelectionFieldHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(79);

class ItemSelectionAbstractDocFieldHandler extends _ItemSelectionFieldHandler__WEBPACK_IMPORTED_MODULE_0__.ItemSelectionFieldHandler {
    addSignatures(signatures, includeAll) {
        //Nothing to do here
    }
    constructor(sectionType, config, fieldValue) {
        super(config, sectionType);
        if (!config)
            config = this.getDefaultConfig();
        this.dhfFieldConfig = config;
        this.initData(fieldValue);
    }
    setDHFConfig(config) {
        this.dhfFieldConfig = config;
    }
}


/***/ }),
/* 101 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LinkListDocFieldHandler: () => (/* binding */ LinkListDocFieldHandler)
/* harmony export */ });
/* harmony import */ var _ItemSelectionAbstractDocFieldHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(100);

class LinkListDocFieldHandler extends _ItemSelectionAbstractDocFieldHandler__WEBPACK_IMPORTED_MODULE_0__.ItemSelectionAbstractDocFieldHandler {
    getDefaultConfig() {
        return LinkListDocFieldHandler.default_config.default;
    }
    getXmlValue() {
        let reflist = this.getItems();
        for (let idx = 0; idx < reflist.length; idx++) {
            reflist[idx]['showExternal'] = this.dhfFieldConfig.showExternal;
            reflist[idx]['includeInToc'] = this.dhfFieldConfig.includeInToc;
        }
        return JSON.stringify(reflist);
    }
}
LinkListDocFieldHandler.default_config = { default: { showExternal: 1, includeInToc: false } };


/***/ }),
/* 102 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ItemTableDocFieldHandler: () => (/* binding */ ItemTableDocFieldHandler)
/* harmony export */ });
/* harmony import */ var _ItemSelectionAbstractDocFieldHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(100);

class ItemTableDocFieldHandler extends _ItemSelectionAbstractDocFieldHandler__WEBPACK_IMPORTED_MODULE_0__.ItemSelectionAbstractDocFieldHandler {
    getDefaultConfig() {
        return ItemTableDocFieldHandler.default_config.default;
    }
    getXmlValue() {
        let reflist = this.getItems();
        for (let idx = 0; idx < reflist.length; idx++) {
            reflist[idx]['includeInToc'] = this.dhfFieldConfig.includeInToc;
            reflist[idx]['includeFolders'] = this.dhfFieldConfig.includeFolders;
            reflist[idx]['sortedList'] = this.dhfFieldConfig.sortedList;
            reflist[idx]['columns'] = this.dhfFieldConfig.columns;
        }
        return JSON.stringify(reflist);
    }
}
ItemTableDocFieldHandler.default_config = {
    default: { includeInToc: false, sortedList: false, includeFolders: false, columns: "item,labels,down" }
};


/***/ }),
/* 103 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RiskStatsDocFieldHandler: () => (/* binding */ RiskStatsDocFieldHandler)
/* harmony export */ });
/* harmony import */ var _matrixlib_JQueryExtendReplacement__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(97);
/* harmony import */ var _ItemSelectionAbstractDocFieldHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(100);


class RiskStatsDocFieldHandler extends _ItemSelectionAbstractDocFieldHandler__WEBPACK_IMPORTED_MODULE_1__.ItemSelectionAbstractDocFieldHandler {
    getDefaultConfig() {
        return RiskStatsDocFieldHandler.default_config.default;
    }
    getXmlValue() {
        let reflist = this.getItems();
        for (let idx = 0; idx < reflist.length; idx++) {
            (0,_matrixlib_JQueryExtendReplacement__WEBPACK_IMPORTED_MODULE_0__.extend)(true, reflist[idx], this.dhfFieldConfig);
        }
        return JSON.stringify(reflist);
    }
}
RiskStatsDocFieldHandler.default_config = {
    default: {
        includeInToc: false,
        table: "Risk table",
        rbm: "Risk levels before controls",
        ram: "Risk levels after controls",
        noTest: "Test coverage overview",
        mustReduce: "Risks which need to be further reduced",
        noBenefits: "Risks which are not justified by benefits",
        riskAfterByZone: "Risks by zone after control",
        riskBeforeByZone: "Risks by zone before control",
        riskNoTest: "Risks without tests",
        mitNoTest: "Risk controls without tests",
        traceMitTest: "Traces from risks to tests"
    }
};


/***/ }),
/* 104 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ItemRefDocFieldHandler: () => (/* binding */ ItemRefDocFieldHandler)
/* harmony export */ });
/* harmony import */ var _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(85);
/* harmony import */ var _ItemSelectionAbstractDocFieldHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(100);


class ItemRefDocFieldHandler extends _ItemSelectionAbstractDocFieldHandler__WEBPACK_IMPORTED_MODULE_1__.ItemSelectionAbstractDocFieldHandler {
    setDHFConfig(config) {
        this.dhfFieldConfig = config;
    }
    getDefaultConfig() {
        if (this.fieldType == _SectionDescriptions__WEBPACK_IMPORTED_MODULE_0__.SectionDescriptions.section_itemlist)
            return ItemRefDocFieldHandler.default_configs.default;
        else
            return ItemRefDocFieldHandler.default_configs.defaultPackage;
    }
    constructor(type, ctrlConfig, fieldValue) {
        super(type, ctrlConfig, fieldValue);
        this.initData(fieldValue);
    }
    getXmlValue() {
        let reflist = this.getItems();
        for (let ref of reflist) {
            let refOption = ref;
            refOption['recursive'] = this.dhfFieldConfig.recursive;
            refOption['tree'] = this.dhfFieldConfig.tree;
            refOption['hideEmptyFolders'] = this.dhfFieldConfig.hideEmptyFolders;
            refOption['showParentFolders'] = this.dhfFieldConfig.showParentFolders;
            refOption['includeInToc'] = this.dhfFieldConfig.includeInToc;
            refOption['sortedList'] = this.dhfFieldConfig.sortedList;
        }
        return JSON.stringify(reflist);
    }
}
ItemRefDocFieldHandler.default_configs = {
    default: {
        recursive: true,
        tree: true,
        refdocs: false,
        hideEmptyFolders: false,
        includeInToc: false,
        sortedList: false,
        showParentFolders: false
    },
    defaultPackage: {
        recursive: false,
        tree: false,
        refdocs: false,
        hideEmptyFolders: false,
        includeInToc: false,
        sortedList: true,
        showParentFolders: false
    }
};


/***/ }),
/* 105 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ListOfFiguresDocFieldHandler: () => (/* binding */ ListOfFiguresDocFieldHandler)
/* harmony export */ });
/* harmony import */ var _GenericDocAbstractFieldHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84);

class ListOfFiguresDocFieldHandler extends _GenericDocAbstractFieldHandler__WEBPACK_IMPORTED_MODULE_0__.GenericDocAbstractFieldHandler {
    getXmlValue() {
        return JSON.stringify([this.dhfFieldConfig]);
    }
    getDefaultConfig() {
        return ListOfFiguresDocFieldHandler.default_config.default;
    }
}
ListOfFiguresDocFieldHandler.default_config = {
    default: {
        figures: true, tables: true
    }
};


/***/ }),
/* 106 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SmartTextDocFieldHandler: () => (/* binding */ SmartTextDocFieldHandler)
/* harmony export */ });
/* harmony import */ var _GenericDocAbstractFieldHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84);

class SmartTextDocFieldHandler extends _GenericDocAbstractFieldHandler__WEBPACK_IMPORTED_MODULE_0__.GenericDocAbstractFieldHandler {
    getDefaultConfig() {
        return SmartTextDocFieldHandler.default_config.default;
    }
    getXmlValue() {
        let options = {
            abbreviations: this.dhfFieldConfig.abbreviations,
            terms: this.dhfFieldConfig.terms,
            richtext: this.dhfFieldConfig.richtext,
            plaintext: this.dhfFieldConfig.plaintext,
            includeAll: this.dhfFieldConfig.includeAll,
            customerTags: true,
            projectTags: true,
            firstColumnName: this.dhfFieldConfig.firstColumnName ? this.dhfFieldConfig.firstColumnName : "",
            secondColumnName: this.dhfFieldConfig.secondColumnName ? this.dhfFieldConfig.secondColumnName : ""
        };
        return JSON.stringify([options]);
    }
}
SmartTextDocFieldHandler.default_config = { default: {
        plaintext: false, richtext: false, abbreviations: true, terms: true, customerTags: true, projectTags: true, includeAll: false,
        firstColumnName: "", secondColumnName: ""
    } };


/***/ }),
/* 107 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TableOfContentDocFieldHandler: () => (/* binding */ TableOfContentDocFieldHandler)
/* harmony export */ });
/* harmony import */ var _GenericDocAbstractFieldHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84);

class TableOfContentDocFieldHandler extends _GenericDocAbstractFieldHandler__WEBPACK_IMPORTED_MODULE_0__.GenericDocAbstractFieldHandler {
    getDefaultConfig() {
        return TableOfContentDocFieldHandler.default_config.default;
    }
    getXmlValue() {
        let options = { format: this.dhfFieldConfig.format };
        return JSON.stringify([options]);
    }
}
TableOfContentDocFieldHandler.default_config = { default: { format: "\\o \"1-3\" \\h \\z \\u \\f" } };


/***/ }),
/* 108 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TestResultsDocFieldHandler: () => (/* binding */ TestResultsDocFieldHandler)
/* harmony export */ });
/* harmony import */ var _ItemSelectionFromToAbstractDocFieldHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91);

class TestResultsDocFieldHandler extends _ItemSelectionFromToAbstractDocFieldHandler__WEBPACK_IMPORTED_MODULE_0__.ItemSelectionFromToAbstractDocFieldHandler {
    getDefaultConfig() {
        return TestResultsDocFieldHandler.default_config.default;
    }
    getXmlValue() {
        let controllerConfig = this.dhfFieldConfig;
        // get lists
        let reflist = this.getSelectedItems();
        let td = [];
        let r0 = {};
        for (let idx = 0; idx < reflist.from.length; idx++) {
            r0["from" + idx] = reflist.from[idx].to;
        }
        td.push(r0);
        let r1 = {};
        for (let idx = 0; idx < reflist.to.length; idx++) {
            r1["to" + idx] = reflist.to[idx].to;
        }
        td.push(r1);
        td.push({ lastOnly: controllerConfig.lastOnly });
        td.push({ lastCreatedOnly: controllerConfig.lastCreatedOnly });
        td.push({ completeTree: controllerConfig.completeTree });
        td.push({ failedOnly: controllerConfig.failedOnly });
        td.push({ includeInToc: controllerConfig.includeInToc });
        td.push({ numericalOrder: controllerConfig.numericalOrder });
        td.push({ dateoptions: controllerConfig.dateoptions });
        return JSON.stringify(td);
    }
}
TestResultsDocFieldHandler.default_config = { default: { lastOnly: true, lastCreatedOnly: false, completeTree: false, failedOnly: false, dateoptions: '', includeInToc: false, numericalOrder: false } };


/***/ }),
/* 109 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DerivedFromDocFieldHandler: () => (/* binding */ DerivedFromDocFieldHandler)
/* harmony export */ });
/* harmony import */ var _ItemSelectionFromToAbstractDocFieldHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91);

class DerivedFromDocFieldHandler extends _ItemSelectionFromToAbstractDocFieldHandler__WEBPACK_IMPORTED_MODULE_0__.ItemSelectionFromToAbstractDocFieldHandler {
    getDefaultConfig() {
        return DerivedFromDocFieldHandler.default_config.default;
    }
    getXmlValue() {
        let reflist = this.getSelectedItems();
        let td = [];
        let r0 = {};
        for (let idx = 0; idx < reflist.from.length; idx++) {
            r0["from" + idx] = reflist.from[idx].to;
        }
        td.push(r0);
        let r1 = {};
        for (let idx = 0; idx < reflist.to.length; idx++) {
            r1["to" + idx] = reflist.to[idx].to;
        }
        td.push(r1);
        // copy parameters
        let r2 = Object.assign({}, this.dhfFieldConfig);
        td.push(r2);
        // update the xml dump
        return JSON.stringify(td);
    }
}
DerivedFromDocFieldHandler.default_config = {
    default: { render: 'items', includeInToc: false, numericalOrder: false, noHitMessage: "" } // list, items, tree, table
};


/***/ }),
/* 110 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DocumentOptionsFieldHandler: () => (/* binding */ DocumentOptionsFieldHandler)
/* harmony export */ });
/* harmony import */ var _GenericDocAbstractFieldHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84);

class DocumentOptionsFieldHandler extends _GenericDocAbstractFieldHandler__WEBPACK_IMPORTED_MODULE_0__.GenericDocAbstractFieldHandler {
    getDefaultConfig() {
        return DocumentOptionsFieldHandler.default_config.default;
    }
    setDHFConfig(config) {
        this.dhfFieldConfig = config;
    }
    getXmlValue() {
        let controllerConfig = this.dhfFieldConfig;
        let options = {};
        options.auto_number = controllerConfig.auto_number || false;
        options.omit_title = controllerConfig.omit_title || false;
        options.internal_links = controllerConfig.internal_links || false;
        options.no_folder_ids = controllerConfig.no_folder_ids || false;
        options.hide_links = controllerConfig.hide_links || false;
        return JSON.stringify([options]);
    }
}
DocumentOptionsFieldHandler.default_config = {
    default: { auto_number: true, omit_title: true, internal_links: false }
};


/***/ }),
/* 111 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextLineDocFieldHandler: () => (/* binding */ TextLineDocFieldHandler)
/* harmony export */ });
/* harmony import */ var _GenericDocAbstractFieldHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84);
/* harmony import */ var _RichTextDocFieldHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(112);


class TextLineDocFieldHandler extends _GenericDocAbstractFieldHandler__WEBPACK_IMPORTED_MODULE_0__.GenericDocAbstractFieldHandler {
    getDefaultConfig() {
        return _RichTextDocFieldHandler__WEBPACK_IMPORTED_MODULE_1__.RichTextDocFieldHandler.default_config.default;
    }
    getXmlValue() {
        return JSON.stringify([]);
    }
}
TextLineDocFieldHandler.default_config = {
    default: {}
};


/***/ }),
/* 112 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RichTextDocFieldHandler: () => (/* binding */ RichTextDocFieldHandler)
/* harmony export */ });
/* harmony import */ var _GenericDocAbstractFieldHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84);

class RichTextDocFieldHandler extends _GenericDocAbstractFieldHandler__WEBPACK_IMPORTED_MODULE_0__.GenericDocAbstractFieldHandler {
    getDefaultConfig() {
        return RichTextDocFieldHandler.default_config.default;
    }
    getXmlValue() {
        return JSON.stringify([]);
    }
}
RichTextDocFieldHandler.default_config = {
    default: {}
};


/***/ }),
/* 113 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TraceMatrixDocFieldHandler: () => (/* binding */ TraceMatrixDocFieldHandler)
/* harmony export */ });
/* harmony import */ var _ItemSelectionFromToAbstractDocFieldHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91);

class TraceMatrixDocFieldHandler extends _ItemSelectionFromToAbstractDocFieldHandler__WEBPACK_IMPORTED_MODULE_0__.ItemSelectionFromToAbstractDocFieldHandler {
    getDefaultConfig() {
        return TraceMatrixDocFieldHandler.default_config.default;
    }
    getXmlValue() {
        let controllerConfig = this.dhfFieldConfig;
        // get lists
        let reflist = this.getSelectedItems();
        let td = [];
        let r0 = {};
        for (let idx = 0; idx < reflist.from.length; idx++) {
            r0["from" + idx] = reflist.from[idx].to;
        }
        td.push(r0);
        let r1 = {};
        for (let idx = 0; idx < reflist.to.length; idx++) {
            r1["to" + idx] = reflist.to[idx].to;
        }
        td.push(r1);
        // copy parameters
        let r2 = Object.assign({}, this.dhfFieldConfig);
        td.push(r2);
        // update the xml dump
        return JSON.stringify(td);
    }
}
TraceMatrixDocFieldHandler.default_config = {
    default: { includeInToc: false, numericalOrder: false, showIdOnly: false, columnDef: "" }
};


/***/ }),
/* 114 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TraceDocFieldHandler: () => (/* binding */ TraceDocFieldHandler)
/* harmony export */ });
/* harmony import */ var _DropdownAbstractDocFieldHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(94);

class TraceDocFieldHandler extends _DropdownAbstractDocFieldHandler__WEBPACK_IMPORTED_MODULE_0__.DropdownAbstractDocFieldHandler {
    getDefaultConfig() {
        return TraceDocFieldHandler.default_config.default;
    }
    getXmlValue() {
        let data = this.getData();
        let traces = {};
        if (data) {
            let sel = data.split('|');
            traces.from = sel[0];
            traces.to = sel[1].split("+").join(",");
        }
        traces.strict = this.dhfFieldConfig.strict;
        traces.dateoptions = this.dhfFieldConfig.dateoptions;
        traces.includeInToc = this.dhfFieldConfig.includeInToc;
        traces.numericalOrder = this.dhfFieldConfig.numericalOrder;
        return JSON.stringify([traces]);
    }
}
TraceDocFieldHandler.default_config = { default: { strict: true, dateoptions: '', includeInToc: false, numericalOrder: false }
};


/***/ }),
/* 115 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MultiSelectDocFieldHandler: () => (/* binding */ MultiSelectDocFieldHandler)
/* harmony export */ });
/* harmony import */ var _DropdownAbstractDocFieldHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(94);

class MultiSelectDocFieldHandler extends _DropdownAbstractDocFieldHandler__WEBPACK_IMPORTED_MODULE_0__.DropdownAbstractDocFieldHandler {
    getXmlValue() {
        let selectionIds = this.getValues(false);
        // convert to values
        let selectionLabels = [];
        let dropdownOptions = this.itemConfig.getSettingJSON(this.dhfFieldConfig.optionSetting);
        if (dropdownOptions) {
            for (let id of selectionIds) {
                let label = id;
                for (let option of dropdownOptions.options) {
                    if (option.id == id) {
                        label = option.label;
                    }
                }
                selectionLabels.push({ label: label, id: id });
            }
            selectionLabels.push({ optionSetting: this.dhfFieldConfig.optionSetting });
        }
        return JSON.stringify(selectionLabels);
    }
    getDefaultConfig() {
        return MultiSelectDocFieldHandler.default_config.default;
    }
}
MultiSelectDocFieldHandler.default_config = {
    default: { maxItems: 1, create: false, sort: false, optionSetting: "" }
};


/***/ }),
/* 116 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DashboardDocFieldHandler: () => (/* binding */ DashboardDocFieldHandler)
/* harmony export */ });
/* harmony import */ var _GenericDocAbstractFieldHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84);
/* harmony import */ var _PluginManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(12);


class DashboardDocFieldHandler extends _GenericDocAbstractFieldHandler__WEBPACK_IMPORTED_MODULE_0__.GenericDocAbstractFieldHandler {
    getDefaultConfig() {
        return {};
    }
    constructor(sectionType, config, fieldValue) {
        super(sectionType, config, fieldValue);
        this.dashboardParams = config;
    }
    getXmlValue() {
        return this.getData();
    }
    getData() {
        // A dashboard doesn't *really* have a value. But it has a cached html version of the
        // last time we saved based on the given configuration. So the html is the part that
        // matters.
        return JSON.stringify({ value: "", html: this.getHtmlValue() });
    }
    getHtmlValue() {
        // Note it calls *super*.getData(), where the cached html is stored.
        return super.getData();
    }
    /**
     * If you need to re-render the cached html, call this.
     * @returns valid html
     */
    async getNewHtmlValue() {
        let pluginsList = _PluginManager__WEBPACK_IMPORTED_MODULE_1__.plugins.getPlugins();
        for (let p of pluginsList) {
            if ("Plugin" in p) {
                let plugin = p["Plugin"];
                if (plugin.getDashboardAsync) {
                    let dashboard = await plugin.getDashboardAsync();
                    if (dashboard.renderProjectPageWithParams) {
                        let config = this.dhfFieldConfig;
                        if (config && config.dashboardID && config.dashboardID == plugin.getConfig().dashboard.id) {
                            // We have a match
                            if (config.dashboardParams) {
                                let html = await dashboard.renderProjectPageWithParams(config.dashboardParams, false);
                                return html.html();
                            }
                        }
                    }
                }
            }
        }
    }
    // TODO:
    // What is the difference between getValue() and getData()? So a dashboard doc has a "value" and a "data".
    // The value is dashboardParams, and the data is something like { value: ""; html: <cached html or empty string?> }
    getValue() {
        return this.dashboardParams;
    }
    initData(serializedFieldData) {
        if (serializedFieldData)
            this.dashboardParams = JSON.parse(serializedFieldData);
        else
            this.dashboardParams = { dashboardID: "", dashboardParams: {} };
    }
    setDashboardID(newValue) {
        if (!this.dashboardParams) {
            this.dashboardParams = { dashboardID: "", dashboardParams: {} };
        }
        this.dashboardParams.dashboardID = newValue;
        console.log("Settings dahboard ID!!!");
    }
    setDashboardParams(newValue) {
        if (!this.dashboardParams) {
            this.dashboardParams = { dashboardID: "", dashboardParams: {} };
        }
        this.dashboardParams.dashboardParams = newValue;
    }
}


/***/ }),
/* 117 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DocumentSectionType: () => (/* binding */ DocumentSectionType)
/* harmony export */ });
var DocumentSectionType;
(function (DocumentSectionType) {
    DocumentSectionType[DocumentSectionType["Static"] = 1] = "Static";
    DocumentSectionType[DocumentSectionType["Database"] = 2] = "Database";
    DocumentSectionType[DocumentSectionType["Table"] = 3] = "Table";
    DocumentSectionType[DocumentSectionType["Technical"] = 4] = "Technical";
    DocumentSectionType[DocumentSectionType["CustomTable"] = 5] = "CustomTable";
})(DocumentSectionType || (DocumentSectionType = {}));


/***/ }),
/* 118 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InitializePluginManagerFormulas: () => (/* binding */ InitializePluginManagerFormulas),
/* harmony export */   TableMath: () => (/* binding */ TableMath),
/* harmony export */   tableMath: () => (/* binding */ tableMath)
/* harmony export */ });


class TableMath {
    constructor() {
        this.functions = {};
    }
    /** allow to add new functions:  */
    registerFunction(functionId, execute) {
        this.functions[functionId] = execute;
    }
    /** executes function on a table */
    execute(functionId, table, parameterJson) {
        if (!this.functions[functionId]) {
            return `called function "${functionId}" does not exist!`;
        }
        return this.functions[functionId](table, parameterJson);
    }
}
var tableMath;
function InitializePluginManagerFormulas() {
    tableMath = new TableMath();
    tableMath.registerFunction("percent", (table, parameterJson) => {
        for (let row of table) {
            if (row.y == 0)
                return `The value in fy cannot be 0!`;
            row.z = Math.round(100 * Number(row.x) / Number(row.y));
        }
        return "";
    });
}


/***/ }),
/* 119 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InitializeTasks: () => (/* binding */ InitializeTasks),
/* harmony export */   Tasks: () => (/* binding */ Tasks),
/* harmony export */   mTasks: () => (/* binding */ mTasks)
/* harmony export */ });
/* harmony import */ var _UI_Components_ProjectViewDefines__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(18);
/* harmony import */ var _MatrixRequirementsAPI__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);
/* harmony import */ var _PluginManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1);
/* harmony import */ var _UI_Tools_ItemSelectionView__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(48);
/* harmony import */ var _TestManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(52);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(5);
/* harmony import */ var _FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(24);










class Tasks {
    constructor() {
        //
        // ****************************************
        // standard plugin interface
        // ****************************************
        this.isDefault = true;
    }
    initItem(_item, _jui) {
        this.item = _item;
        this.jui = _jui;
    }
    reset() {
        this.item = null;
        this.jui = null;
    }
    initServerSettings(serverSettings) { }
    updateMenu(ul, hook) {
        let that = this;
        if (hook !== _PluginManager__WEBPACK_IMPORTED_MODULE_2__.pluginHooks.shares) {
            return;
        }
        if (!this.item || _globals__WEBPACK_IMPORTED_MODULE_6__.app.isFolder(this.item.id)) {
            return; // do not show tasks for folders
        }
        if (!_globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.isEditor() || !Tasks.tasksConfiguration || Tasks.tasksConfiguration.length == 0) {
            return;
        }
        let miDivider = $('<li class="divider"></li>');
        ul.append(miDivider);
        $.each(Tasks.tasksConfiguration, function (idx, config) {
            if (config.catFieldMapping && config.catFieldMapping[that.item.type]) {
                $($(`<li><span class="toolmenu">Push to ${config.pluginName}</span></li>`))
                    .click(() => {
                    that.pushIssueDlg(config);
                })
                    .appendTo(ul);
            }
            if (!config.hideCreateTask) {
                if (config.handleAsLink) {
                    $(`<li><span class="toolmenu">Add web link</span></li>`)
                        .appendTo(ul)
                        .data("config", config)
                        .click(function (event) {
                        Tasks.createAndLinkWebDlg($(event.delegateTarget).data("config"), null, function (linkTitle, linkUrl) {
                            let extItem = {
                                externalItemId: "" + new Date().getTime(),
                                externalItemTitle: linkTitle,
                                externalItemUrl: linkUrl,
                                externalDescription: "",
                                externalDone: false,
                                plugin: config.pluginId,
                            };
                            Tasks.postCreateLinks(that.item.id, [extItem]).done(function (allITems) {
                                that.updateUI(allITems);
                                that.jui.dialog("close");
                            });
                        });
                    });
                }
                else {
                    $(`<li><span class="toolmenu">Create and link ${config.pluginName} task</span></li>`)
                        .appendTo(ul)
                        .data("config", config)
                        .click(function (event) {
                        that.createAndLinkIssueDlg($(event.delegateTarget).data("config"));
                    });
                }
            }
            if (config.nativeCreateUrl && config.nativeCreateSearch) {
                var dev = $(`<li><span class="toolmenu">Open ${config.pluginName} create page</span></li>`)
                    .appendTo(ul)
                    .data("config", config)
                    .click(function (event) {
                    that.createSearchAndLinkIssueDlg($(event.delegateTarget).data("config"));
                });
            }
            if (!config.hideSearchTasks && !config.handleAsLink) {
                var dev = $(`<li><span class="toolmenu">Link to existing ${config.pluginName} task</span></li>`)
                    .appendTo(ul)
                    .data("config", config)
                    .click(function (event) {
                    that.searchAndLinkIssueDlg($(event.delegateTarget).data("config"));
                });
            }
        });
        return;
    }
    supportsControl(fieldType) {
        return fieldType === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_tasksControl;
    }
    createControl(ctrl, options) {
        ctrl.tasksControl(options);
    }
    initProject() {
        Tasks.tasksConfiguration = [];
        let pluginSettings = _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getPluginSettings();
        // setup highlight rules
        $.each(pluginSettings, function (tidx, plugin) {
            if (plugin.pluginId > 200) {
                let a;
                // version 2 plugin
                let clientConfig = {};
                let enabled = false;
                // get client config setting and find out if enabled
                $.each(plugin.settings, function (idx, setting) {
                    if (setting.setting === "clientConfig" && setting.value) {
                        clientConfig = JSON.parse(setting.value);
                    }
                    else if (setting.setting === "clientEnabled") {
                        enabled = _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.JSON.isTrue(setting.value);
                    }
                });
                if (enabled) {
                    clientConfig.pluginId = plugin.pluginId;
                    $.each(clientConfig.smartLinks, function (idx, smartLink) {
                        // in case there are some hypelinks configured
                        addHighlightRegex(smartLink.regex, smartLink.url);
                    });
                    // unless names are defined, use server's default
                    if (!clientConfig.pluginLongName) {
                        clientConfig.pluginLongName = plugin.pluginLongName;
                    }
                    if (!clientConfig.pluginName) {
                        clientConfig.pluginName = plugin.pluginShortName;
                    }
                    if (typeof clientConfig.handleAsLink == "undefined") {
                        clientConfig.handleAsLink = plugin.capabilities.handleAsLink;
                    }
                    if (typeof clientConfig.hideCreateTask == "undefined") {
                        clientConfig.hideCreateTask = !plugin.capabilities.canCreate && !clientConfig.handleAsLink;
                    }
                    if (typeof clientConfig.hideSearchTasks == "undefined") {
                        clientConfig.hideSearchTasks = !plugin.capabilities.canFind;
                    }
                    /*if ( typeof clientConfig.createBacklinks == 'undefined') {
                       clientConfig.createBacklinks = plugin.capabilities.canCreateBacklinks;
                    }
                    */
                    // need to run again though settings
                    $.each(plugin.settings, function (idx, setting) {
                        if (setting.setting === "projectFilter") {
                            clientConfig.projectFilter = setting.value ? setting.value.split(",") : [];
                        }
                    });
                    if (typeof clientConfig.hasMeta == "undefined") {
                        clientConfig.hasMeta = plugin.capabilities.hasMeta;
                    }
                    $.each(plugin.computedSettings, function (idx, setting) {
                        if (setting.setting === "nativeCreateUrl" && !clientConfig.nativeCreateUrl) {
                            // client does not overwrite capability, so take default from server
                            clientConfig.nativeCreateUrl = setting.value;
                        }
                        if (setting.setting === "nativeCreateSearch" && !clientConfig.nativeCreateSearch) {
                            // client does not overwrite capability, so take default from server
                            clientConfig.nativeCreateSearch = setting.value;
                        }
                    });
                    Tasks.tasksConfiguration.push(clientConfig);
                }
            }
        });
    }
    getProjectPagesAsync() {
        return new Promise((resolve, reject) => {
            let that = this;
            let pages = [];
            if (_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getTimeWarp()) {
                // remove the pages - too complicated
                resolve(pages);
                return;
            }
            $.each(Tasks.tasksConfiguration, function (idx, conf) {
                pages.push({
                    id: "TASKS" + conf.pluginId,
                    title: conf.pluginName + " addon",
                    folder: "ADDONS",
                    order: 1000 + conf.pluginId,
                    icon: "fal fa-external-link-square",
                    usesFilters: false,
                    render: (options) => that.renderProjectPage(options),
                });
            });
            resolve(pages);
            return;
        });
    }
    // this function goes through all tests steps and applies all smartlink rules to find hyperlinks to issues
    async preSaveHookAsync(isItem, type, controls) {
        let that = this;
        return new Promise(async (resolve, reject) => {
            if (isItem && _TestManager__WEBPACK_IMPORTED_MODULE_5__.mTM.isXTC(type)) {
                let linksToBeCreated = []; // array of matches
                for (let idx = 0; idx < controls.length; idx++) {
                    if (controls[idx].fieldType === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_7__.FieldDescriptions.Field_test_steps_result) {
                        let val = await controls[idx].control.getController().getValueAsync();
                        let v = JSON.parse(val);
                        for (let step = 0; step < v.length; step++) {
                            var comment = v[step].comment;
                            if (comment && comment !== "") {
                                // find matches
                                $.each(Tasks.tasksConfiguration, function (tidx, config) {
                                    $.each(config.smartLinks, function (idx, smartLink) {
                                        let re = new RegExp(smartLink.regex, "g");
                                        let hits = comment.match(re);
                                        if (hits) {
                                            $.each(hits, function (hidx, hit) {
                                                if (linksToBeCreated.indexOf(hit) === -1) {
                                                    linksToBeCreated.push(hit);
                                                }
                                            });
                                        }
                                    });
                                });
                            }
                        }
                    }
                }
                if (linksToBeCreated.length > 0) {
                    that.createLinksAsync(linksToBeCreated)
                        .done(function () {
                        resolve({});
                    })
                        .fail(function () {
                        reject();
                    });
                }
                else {
                    resolve({});
                }
            }
            else {
                resolve({});
            }
        });
    }
    // ****************************************
    // Misc functions for jiraPlugin (running inside JIRA)
    // ****************************************
    isPluginEnabled(pluginId) {
        let enabled = false;
        $.each(Tasks.tasksConfiguration, function (idx, config) {
            if (config.pluginId == pluginId) {
                enabled = true;
            }
        });
        return enabled;
    }
    // ****************************************
    // Misc functions for matrixreq and others
    // ****************************************
    // verifies if a save comment has all required task id's if not
    evaluateTaskIds(comment) {
        let issues = [];
        $.each(Tasks.tasksConfiguration, function (idx, config) {
            if (config.requireCommitTicket) {
                let hasId = false;
                $.each(config.smartLinks, function (sidx, smartLink) {
                    let re = new RegExp(smartLink.regex, "g");
                    let hits = comment.match(re);
                    if (hits) {
                        hasId = true;
                    }
                });
                if (!hasId) {
                    issues.push(`missing task id for ${config.pluginName}`);
                }
            }
        });
        return issues;
    }
    // test if a dropped URL is a link to an issue -> if so convert it to externalitem struct
    static externalItemFromUrl(url) {
        let matches = null;
        let priority = 0;
        $.each(Tasks.tasksConfiguration, function (idx, config) {
            $.each(config.smartUrls, function (sidx, smartUrl) {
                if (!matches || priority < (smartUrl.priority ? smartUrl.priority : 0)) {
                    let re = new RegExp(smartUrl.regex);
                    let ma = url.match(re);
                    if (ma) {
                        // it matches: replace all palceholders, $0, $1, $2, with matching groups
                        let issueId = smartUrl.issueId;
                        let issueProjectId = smartUrl.issueProjectId;
                        let title = smartUrl.title ? smartUrl.title : "";
                        for (let i = 0; i < Math.min(ma.length, 10); i++) {
                            let rep = new RegExp("\\$" + i, "g");
                            issueProjectId = issueProjectId.replace(rep, ma[i]);
                            issueId = issueId.replace(rep, ma[i]);
                            title = title.replace(rep, ma[i]);
                        }
                        priority = smartUrl.priority ? smartUrl.priority : 0;
                        matches = {
                            plugin: config.pluginId,
                            externalProject: issueProjectId,
                            externalItemId: issueId,
                            externalItemUrl: url,
                            externalDescription: "",
                            externalItemTitle: title,
                            externalDone: false,
                            externalType: "",
                        };
                    }
                }
            });
        });
        return matches;
    }
    async addCommentToAllLinkedIssues(config, comment, whatChanged, version) {
        let that = this;
        let versionStr = version ? `to version v${version}` : "";
        if (comment == undefined) {
            comment = "";
            if (Tasks.getConfig(config.pluginId).defaultComment != undefined) {
                comment = Tasks.getConfig(config.pluginId).defaultComment;
            }
            comment += `*${_globals__WEBPACK_IMPORTED_MODULE_6__.app.getCurrentItemId()} -  ${(await _globals__WEBPACK_IMPORTED_MODULE_6__.app.getCurrentTitle()).trim()}*  has been updated ${versionStr}\n *See :* ${_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.matrixBaseUrl}/${_globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getProject()}/${_globals__WEBPACK_IMPORTED_MODULE_6__.app.getCurrentItemId()} \n----`;
        }
        if (whatChanged != undefined)
            comment += "\n" + whatChanged;
        Tasks.getTasks(that.item.id, [config.pluginId]).then((externalItems) => {
            externalItems.forEach((externalItem) => {
                let job = {
                    pluginId: config.pluginId,
                    action: "AddComment",
                    matrixItem: {
                        project: _globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getProject(),
                    },
                    externalItem: {
                        externalItemId: externalItem.externalItemId,
                    },
                    more: [{ key: "comment", value: comment }],
                };
                _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.wfgwConnection
                    .postServer("?" + jQuery.param({ payload: JSON.stringify(job) }), job, true)
                    .done(() => {
                    console.log("Comment added! ");
                })
                    .fail(function (jqxhr, textStatus, error) {
                    Tasks.showError("AddComment failed", jqxhr, textStatus, error);
                });
            });
        });
    }
    /** this creates a new item and jira and sets the define fields with values coming from Matrix */
    pushIssueDlg(config) {
        let that = this;
        let options = "";
        // create project / type drop down menu
        $.each(config.projectsCreate, function (i, project) {
            $.each(project.taskTypes, function (j, taskType) {
                let oName = [];
                if (project.projectName)
                    oName.push(project.projectName);
                if (taskType.taskTypeName)
                    oName.push(taskType.taskTypeName);
                options +=
                    "<option value='" +
                        project.projectId +
                        "|" +
                        taskType.taskTypeId +
                        "' " +
                        (i + j == 0 ? "selected" : "") +
                        ">" +
                        oName.join(" / ") +
                        "</option>";
            });
        });
        let form = $(`<div class="container" style="width:100%;height:100%">
                        <div class="row optionsSelectRow" style="margin-top:4px;margin-bottom:6px">
                            <div class="col-md-2" style="margin-top: 6px;"><label style="white-space: nowrap" for="inputType"
                                    class="control-label">Issue Type:</label></div>
                            <div class="col-md-10"><select class="form-control inputType" style="width:100%;height:32px" id="inputType">
                                    ${options}
                                </select></div>
                        </div>
                    </div>`);
        this.jui.html("");
        this.jui.removeClass("dlg-v-scroll");
        this.jui.addClass("dlg-no-scroll");
        this.jui.append(form);
        this.jui.dialog({
            autoOpen: true,
            title: "Create linked task",
            height: 200,
            width: 600,
            modal: true,
            open: function () { },
            close: function () { },
            buttons: [
                {
                    text: "Ok",
                    class: "btnDoIt",
                    click: async function () {
                        let title = await _globals__WEBPACK_IMPORTED_MODULE_6__.app.getCurrentTitle();
                        let type = $(".inputType", that.jui).val();
                        let where = type.split("|");
                        Tasks.postPushIssue(config.pluginId, that.item.id, title, "", where[0], where[1]).then(function (newTask) {
                            that.updateUI(newTask);
                        });
                        that.jui.dialog("close");
                    },
                },
                {
                    text: "Cancel",
                    class: "btnCancelIt",
                    click: function () {
                        that.jui.dialog("close");
                    },
                },
            ],
        });
    }
    static postPushIssue(pluginId, itemId, title, description, projectId, taskTypeId) {
        return new Promise(async (resolve, reject) => {
            let project = _globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getProject();
            let job = {
                pluginId: pluginId,
                action: "CreateIssue",
                matrixItem: {
                    project: project,
                    matrixItem: itemId,
                },
                externalItem: { externalItemTitle: title, externalDescription: description },
                more: [
                    { key: "project", value: projectId },
                    { key: "issueType", value: taskTypeId },
                ],
            };
            let cat = _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.Item.parseRef(itemId).type;
            if (Tasks.getConfig(pluginId).catFieldMapping) {
                let fm = Tasks.getConfig(pluginId).catFieldMapping[cat];
                if (fm) {
                    let uMap = Tasks.getConfig(pluginId).userMapping;
                    for (let key of Object.keys(fm)) {
                        let field = _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getFieldByName(cat, key);
                        let value = undefined;
                        if (field && field.id) {
                            value = await _globals__WEBPACK_IMPORTED_MODULE_6__.app.getFieldValueAsync(field.id);
                        }
                        // current User is gotten from session
                        if (!value && fm[key].converter == "currentUser") {
                            if (!uMap[_globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getUser()]) {
                                _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.showError(`No user mapped for user '${_globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getUser()}'`, "Please ask your administrator to check that your user ID is correclty mapped in Jira Cloud extension configuration.");
                                reject("current user is not mapped in Jira");
                                return;
                            }
                            value = JSON.stringify({ accountId: uMap[_globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getUser()] });
                        }
                        if (value) {
                            switch (fm[key].converter) {
                                case "plaintext":
                                    value = $("<div>").html(value).text();
                                    break;
                                case "dropdown":
                                    if (fm[key].ddMapping && fm[key].ddMapping[value])
                                        value = JSON.stringify({ id: fm[key].ddMapping[value] });
                                    else {
                                        console.info("Cannot convert " + value + " to dropdown value");
                                        value = undefined;
                                    }
                                    break;
                                case "tags":
                                    value = JSON.stringify(value.replace(" ", "_").split(","));
                                    break;
                                case "labels": // converter something to jira tags
                                    let labelList = JSON.parse(value);
                                    if (labelList && labelList.length > 0) {
                                        // whatever it is jira tags cannot have spaces
                                        value = JSON.stringify(labelList.map((l) => l.replace(" ", "_")));
                                    }
                                    break;
                                case "multiselect":
                                    let values = value.split(",");
                                    if (fm[key].ddMapping) {
                                        let valuesMapped = values.map((v) => {
                                            return { id: fm[key].ddMapping[v] };
                                        });
                                        if (value.filter((v) => {
                                            return v.id == null || v.id == undefined;
                                        }).length == 0) {
                                            value = JSON.stringify(valuesMapped);
                                        }
                                        else {
                                            // there's at least one missing mapping
                                            console.info(`Cannot convert '${value}' to dropdown value -> there is a missing mapping`);
                                            value = undefined;
                                        }
                                    }
                                    else {
                                        console.info("Cannot convert " + value + " to dropdown value");
                                        value = undefined;
                                    }
                                    break;
                                case "currentUser":
                                    // handled before switch statement
                                    break;
                                case "user":
                                    if (uMap && uMap[value]) {
                                        value = JSON.stringify({ accountId: uMap[value] });
                                    }
                                    else {
                                        console.info("Cannot convert " + value + " to mapped user");
                                        value = undefined;
                                    }
                                    break;
                            }
                        }
                        if (value != undefined) {
                            job.more.push({ key: fm[key].extFieldId, value: value });
                        }
                    }
                }
            }
            _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.wfgwConnection
                .postServer("?" + jQuery.param({ payload: JSON.stringify(job) }), job, true)
                .done(function (task) {
                resolve(task);
            })
                .fail(function (jqxhr, textStatus, error) {
                Tasks.showError("Creating issue failed", jqxhr, textStatus, error);
                reject(error);
            });
        });
    }
    subscribe() {
        let that = this;
        _MatrixRequirementsAPI__WEBPACK_IMPORTED_MODULE_1__.MR1.onAfterSave().subscribe(this, function (event) {
            try {
                that.afterSaveHookAddComment(event);
            }
            catch (ex) {
                console.log("failed to update the task:");
                console.log(ex);
            }
        });
    }
    afterSaveHookAddComment(event) {
        let that = this;
        let message = "";
        // message += "-------------------------------------------------------------------------- \n";
        if (event.before.title != event.after.title) {
            message += `*Title has been updated*
                            _Old value for title_
                            {{${event.before.title}}}
                            _New value for title_
                            {{${event.before.title}}}\n----\n`;
        }
        // API is not symmetric so before and after are handled differently
        let labelsBefore = event.before.labels && event.before.labels.length > 0 ? event.before.labels.join(",") : "[no labels set]";
        let labelsAfter = event.after.labels && event.before.labels.length > 0 ? event.after.labels : "[no labels set]";
        if (labelsBefore != labelsAfter) {
            message += `*Labels has been updated*
                        _Old value for labels_
                        {{${labelsBefore}}}
                        _New value for labels_
                        {{${labelsAfter}}}\n----\n`;
        }
        for (let key of Object.keys(event.after)) {
            // in theory we need to check both before and after keys (to handle rollbacks...)
            if (Number.isSafeInteger(parseInt(key))) {
                // event after/before field values are strings or boolean (as far as we see...)
                let valueBefore = event.before[key] != undefined && event.before[key].length > 0
                    ? event.before[key]
                    : "[value not set]";
                let valueAfter = event.after[key] != undefined && event.after[key].length > 0 ? event.after[key] : "[value not set]";
                if (valueBefore.toString() != valueAfter.toString()) {
                    let ref = _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.Item.parseRef(that.item.id);
                    if (!ref.isFolder) {
                        let field = _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getFieldById(ref.type, parseInt(key));
                        if (field != undefined) {
                            message += `*Field '${field.label}' has been updated*
                                    _Old value for ${field.label}_
                                    {{${$("<div>").html(valueBefore).text()}}}
                                    _New value for ${field.label}_
                                    {{${$("<div>").html(valueAfter).text()}}}\n----\n`;
                        }
                    }
                }
            }
        }
        $.each(Tasks.tasksConfiguration, function (idx, config) {
            if (config.autoAddCommentOnSave) {
                that.addCommentToAllLinkedIssues(config, undefined, message, event.after.maxVersion);
            }
        });
    }
    // convert url to linked external item
    static createTaskFromUrl(itemId, url) {
        let externalItem = Tasks.externalItemFromUrl(url);
        if (externalItem) {
            Tasks.postCreateLinks(itemId, [externalItem]).done(function (createdTasks) {
                mTasks.updateUI(createdTasks);
            });
        }
    }
    // check if a string is an id of an external item
    static isTaskId(someId) {
        let isId = false;
        $.each(Tasks.tasksConfiguration, function (tidx, config) {
            $.each(config.smartLinks, function (idx, smartLink) {
                let re = new RegExp(smartLink.regex, "g");
                let hits = someId.match(re);
                if (hits && hits[0] == someId) {
                    isId = true;
                    return;
                }
            });
        });
        return isId;
    }
    static getOne2OneTask(externalItemId) {
        let res = $.Deferred();
        let handled = false;
        $.each(Tasks.tasksConfiguration, function (idx, config) {
            if (config.one2OneMapping) {
                handled = true;
                Tasks.getMeta(config.pluginId, externalItemId)
                    .done(function (externalItem) {
                    res.resolve(externalItem);
                })
                    .fail(function () {
                    res.reject("failed to retrieve one to one mapping status for " + externalItemId);
                });
                return;
            }
        });
        if (!handled) {
            res.reject("no one 2 one mapping configured");
        }
        return res;
    }
    static createOne2OneTask(itemId) {
        let res = $.Deferred();
        let handled = false;
        $.each(Tasks.tasksConfiguration, function (idx, config) {
            if (config.one2OneMapping) {
                handled = true;
                let taskTitle = "workflow status for " + itemId;
                let taskDescription = "";
                Tasks.postPushIssue(config.pluginId, itemId, taskTitle, taskDescription, config.one2OneMapping.projectId, config.one2OneMapping.taskTypeId)
                    .then(function (newTasks) {
                    res.resolve(newTasks[0]);
                })
                    .catch(function () {
                    res.reject("failed to create task for one to one mapping");
                });
                return;
            }
        });
        if (!handled) {
            res.reject("no one 2 one mapping configured");
        }
        return res;
    }
    static getOne2OneRenderInfo(task) {
        let renderInfo = {
            text: "click to link",
            color: "grey",
            background: "transparent",
            strikethrough: false,
        };
        if (task) {
            renderInfo.text = task.externalItemId;
            renderInfo.color = "black";
            $.each(task.more, function (idx, val) {
                if (val.key === "status") {
                    $.each(Tasks.tasksConfiguration, function (idx2, config) {
                        if (config.one2OneMapping) {
                            $.each(config.one2OneMapping.statusOverwrites, function (idx3, statusOverwrite) {
                                if (statusOverwrite.externalStatusName == val.value) {
                                    renderInfo = _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.JSON.clone(statusOverwrite);
                                    if (config.one2OneMapping.showId) {
                                        renderInfo.text = task.externalItemId + ":" + renderInfo.text;
                                    }
                                }
                            });
                        }
                    });
                }
            });
        }
        return renderInfo;
    }
    // ****************************************
    // Misc functions called by task control
    // to create / refresh UI components
    // ****************************************
    static showTasks(itemId, control, canEdit, pluginFilter) {
        let that = this;
        if (!Tasks.tasksConfiguration || Tasks.tasksConfiguration.length == 0) {
            control.append('<div style="color: #bbb;font-size: 12px;">no valid configuration</div>');
            return;
        }
        Tasks.getTasks(itemId, pluginFilter)
            .done(function (tasks) {
            Tasks.renderTasks(itemId, tasks, control, canEdit, false);
        })
            .fail(function (message) {
            if (message) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.Logger.log("error", "Could not retrieve tasks for " + itemId);
                _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.Logger.log("error", "Error was:" + message);
            }
        });
    }
    // ****************************************
    // private functions
    // ****************************************
    /*** UI
     *
     */
    async createAndLinkIssueDlg(config) {
        let that = this;
        let options = "";
        let ocount = 0;
        // create project / type drop down menu
        $.each(config.projectsCreate, function (i, project) {
            $.each(project.taskTypes, function (j, taskType) {
                ocount++;
                let oName = [];
                if (project.projectName)
                    oName.push(project.projectName);
                if (taskType.taskTypeName)
                    oName.push(taskType.taskTypeName);
                options +=
                    "<option value='" +
                        project.projectId +
                        "|" +
                        taskType.taskTypeId +
                        "' " +
                        (i + j == 0 ? "selected" : "") +
                        ">" +
                        oName.join(" / ") +
                        "</option>";
            });
        });
        // define default title
        let iTitle = config.useEmptyTitle ? "" : await _globals__WEBPACK_IMPORTED_MODULE_6__.app.getCurrentTitle();
        // define default content
        let iContent = "";
        if (config.useAsDescription == "text") {
            let descriptionFields = _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getFieldsOfType("richtext", this.item.type);
            if (descriptionFields.length > 0) {
                let html = await _globals__WEBPACK_IMPORTED_MODULE_6__.app.getFieldValueAsync(descriptionFields[0].field.id);
                let tempdiv = $("<div style='display:none'>").html(html).appendTo("body");
                iContent = tempdiv.text();
                tempdiv.remove();
            }
        }
        let form = $('<div class="container" style="width:100%;height:100%">' +
            '<div class="row optionsSelectRow" style="margin-top:4px;margin-bottom:6px">' +
            '    <div class="col-md-2" style="margin-top: 6px;"><label style="white-space: nowrap" for="inputType" class="control-label">Issue Type:</label></div>' +
            '    <div class="col-md-10"><select  class="form-control inputType" style="width:100%;height:32px" id="inputType">' +
            options +
            "        </select></div>" +
            "  </div>" +
            '  <div class="row">' +
            '    <div class="col-md-2" style="margin-top: 6px;"><label style="white-space: nowrap" for="inputTitle" class="control-label">Title:</label></div>' +
            '    <div class="col-md-10"><input autocomplete="off" type="text" class="form-control inputTitle" id="inputTitle" placeholder="enter title"></div>' +
            "  </div>" +
            '<div class="row jira-description">' +
            '    <div class="col-md-12"  style="height:100%"><textarea class="jira-textarea inputComment" placeholder="enter description">' +
            iContent +
            "</textarea></div>" +
            "</div></div>");
        this.jui.html("");
        this.jui.removeClass("dlg-v-scroll");
        this.jui.addClass("dlg-no-scroll");
        this.jui.append(form);
        $(".inputTitle", this.jui).val(iTitle);
        let height = 500;
        if (config.useAsDescription == "hide") {
            $(".jira-description", this.jui).hide();
            height -= 300;
        }
        if (ocount == 1) {
            $(".optionsSelectRow", this.jui).hide();
            height -= 30;
        }
        this.jui.dialog({
            autoOpen: true,
            title: "Create linked task",
            height: height,
            width: 600,
            modal: true,
            open: function () { },
            close: function () { },
            buttons: [
                {
                    text: "Ok",
                    class: "btnDoIt",
                    click: function () {
                        let title = $("#inputTitle", that.jui).val();
                        let type = $(".inputType", that.jui).val();
                        let description = $(".inputComment", that.jui).val();
                        let where = type.split("|");
                        Tasks.postCreateIssue(config.pluginId, that.item.id, title, description, where[0], where[1]).done(function (newTask) {
                            that.updateUI(newTask);
                        });
                        that.jui.dialog("close");
                    },
                },
                {
                    text: "Cancel",
                    class: "btnCancelIt",
                    click: function () {
                        that.jui.dialog("close");
                    },
                },
            ],
        });
    }
    static createAndLinkWebDlg(config, task, changeFunction) {
        let form = $('<div class="container" style="width:100%;height:100%;position:relative">' +
            '  <div class="row"><br/>' +
            "  </div>" +
            '  <div class="row">' +
            '    <div style="padding:0" class="col-md-1"><label style="white-space: nowrap;padding-top:6px" for="inputTitle" class="control-label">Text:</label></div>' +
            '    <div class="col-md-11"><input autocomplete="off" type="text" class="form-control" id="inputTitle" placeholder="enter text to display"></div>' +
            "  </div>" +
            '  <div class="row"><br/>' +
            "  </div>" +
            '  <div class="row">' +
            '    <div style="padding:0" class="col-md-1"><label style="white-space: nowrap;padding-top:6px" for="inputUrl" class="control-label">Url:</label></div>' +
            '    <div class="col-md-11"><input autocomplete="off" type="text" class="form-control" id="inputUrl" placeholder="enter link address"></div>' +
            "  </div>" +
            "</div>");
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.html("");
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.removeClass("dlg-v-scroll");
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.addClass("dlg-no-scroll");
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.append(form);
        let emptyTitle = !task || !task.externalItemTitle;
        $("#inputTitle").on("mouseup keyup mouseout", function () {
            emptyTitle = $("#inputTitle").val() === "";
        });
        $("#inputUrl").on("mouseup keyup mouseout", function () {
            if (emptyTitle) {
                $("#inputTitle").val($("#inputUrl").val());
            }
            updateCanOK();
        });
        $("#doSearch").prop("disabled", true);
        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.dialog({
            autoOpen: true,
            title: "Add web link",
            height: 250,
            width: 600,
            modal: true,
            resizeStop: function () { },
            buttons: [
                {
                    text: "Ok",
                    class: "btnDoIt",
                    click: function () {
                        let newUrl = $("#inputUrl").val();
                        let newTitle = $("#inputTitle").val() ? $("#inputTitle").val() : newUrl;
                        changeFunction(newTitle, newUrl);
                        $("button", _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm).prop("disabled", true);
                        window.setTimeout(function () {
                            _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.dialog("close");
                        }, 300);
                    },
                },
                {
                    text: "Cancel",
                    class: "btnCancelIt",
                    click: function () {
                        _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.dialog("close");
                    },
                },
            ],
            open: function () {
                if (task) {
                    if (task.externalItemUrl) {
                        $("#inputUrl").val(task ? task.externalItemUrl : "");
                    }
                    if (task.externalItemTitle) {
                        $("#inputTitle").val(task ? task.externalItemTitle : "");
                    }
                }
                updateCanOK();
                $("#inputUrl").focus();
            },
        });
        function updateCanOK() {
            let okButton = $(".btnDoIt", _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.parent());
            _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.setEnabled(okButton, $("#inputUrl").val() !== "");
        }
    }
    createSearchAndLinkIssueDlg(config) {
        let that = this;
        // open new page
        let win = window.open(config.nativeCreateUrl);
        this.waitForNewTaskOrWindowCloseActive = true;
        // show wait dialog
        let form = _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.getSpinningWait("Opened native create in other browser tab. Waiting for task to be created or tab to be closed.");
        this.jui.html("");
        this.jui.removeClass("dlg-v-scroll");
        this.jui.addClass("dlg-no-scroll");
        this.jui.append(form);
        this.jui.dialog({
            autoOpen: true,
            title: "Wait for new task from other tab",
            height: 300,
            width: 600,
            modal: true,
            buttons: [
                {
                    text: "Cancel",
                    class: "btnCancelIt",
                    click: function () {
                        that.waitForNewTaskOrWindowCloseActive = false;
                        window.clearTimeout(that.waitForNewTaskOrWindowCloseTimer);
                        that.jui.dialog("close");
                    },
                },
            ],
            open: function () { },
            close: function () {
                _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.setEnabled($(".btnDoIt", _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.parent()), true);
            },
        });
        // run the config.nativeCreateSearch to get a list of hits BEFORE user can create an issue
        Tasks.getFindTasks(config.pluginId, config.nativeCreateSearch, 0).done(function (result) {
            that.waitForNewTaskOrWindowClose(config, win, result);
        });
    }
    waitForNewTaskOrWindowClose(config, win, taskSearchBefore) {
        let that = this;
        if (!this.waitForNewTaskOrWindowCloseActive) {
            // the wait has been handled, e.g. by closing the dialogs
            return;
        }
        if (win.closed !== false) {
            // !== is required for compatibility with Opera
            this.waitForNewTaskOrWindowCloseActive = false;
            window.clearTimeout(this.waitForNewTaskOrWindowCloseTimer);
            that.jui.dialog("close");
            this.searchAndLinkIssueDlg(config, config.nativeCreateSearch);
        }
        else {
            Tasks.getFindTasks(config.pluginId, config.nativeCreateSearch, 0).done(function (result) {
                if (!that.waitForNewTaskOrWindowCloseActive) {
                    // the wait has been handled, e.g. by closing the dialogs
                    return;
                }
                if (result.tasks.length > taskSearchBefore.tasks.length ||
                    (result.tasks.length > 0 &&
                        result.tasks[0].externalItemId !== taskSearchBefore.tasks[0].externalItemId)) {
                    that.waitForNewTaskOrWindowCloseActive = false;
                    window.clearTimeout(that.waitForNewTaskOrWindowCloseTimer);
                    that.jui.dialog("close");
                    that.searchAndLinkIssueDlg(config, config.nativeCreateSearch);
                }
                else {
                    that.waitForNewTaskOrWindowCloseTimer = window.setTimeout(function () {
                        that.waitForNewTaskOrWindowClose(config, win, result);
                    }, 300);
                }
            });
        }
    }
    searchAndLinkIssueDlg(config, showSearch) {
        let that = this;
        // help jira: https://matrixreq.atlassian.net/wiki/x/AwD3
        let jh = config.searchHelp
            ? "<a style='margin-left:10px' href='" +
                config.searchHelp +
                "' target='_blank'><span class='fal fa-info-circle'></span></a>"
            : "";
        let defaultSearch = config.defaultSearches && config.defaultSearches.length > 0 ? config.defaultSearches[0] : "";
        if (showSearch) {
            defaultSearch = { name: showSearch, expression: showSearch };
        }
        let form = $('<div style="width:100%;height:100%;position:relative">').append(this.getSearchField(config, refreshSearch));
        let results = $('<div class="row taskFit">').appendTo(form);
        let moreInfo = $('<div class="moreTasks" style="width: 100%;text-align: center;"><br/>enter search term</div>').appendTo(results);
        this.jui.html("");
        this.jui.removeClass("dlg-v-scroll");
        this.jui.addClass("dlg-no-scroll");
        this.jui.append(form);
        let start = 0;
        let select = [];
        this.jui.dialog({
            autoOpen: true,
            title: "Search tasks",
            height: 500,
            width: 600,
            modal: true,
            buttons: [
                {
                    text: "Ok",
                    class: "btnDoIt",
                    click: function () {
                        _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.setEnabled($(".btnDoIt", _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.parent()), false);
                        Tasks.postCreateLinks(that.item.id, select).done(function () {
                            that.updateUI(select);
                            that.jui.dialog("close");
                        });
                        results.html("");
                        results.append(_matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.getSpinningWait("creating links..."));
                        _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.setEnabled($(".ui-dialog-buttonset button", that.jui.parent()), false);
                        _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.setEnabled($("#appPopup button", that.jui.parent()), false);
                    },
                },
                {
                    text: "Cancel",
                    class: "btnCancelIt",
                    click: function () {
                        that.jui.dialog("close");
                    },
                },
            ],
            open: function () {
                updateCanOK();
                if (showSearch) {
                    refreshSearch(showSearch, true);
                }
                else if (config.defaultSearches && config.defaultSearches.length > 0 && config.autoSearch) {
                    refreshSearch(config.defaultSearches[0].expression, true);
                }
                else {
                    $("#inputSearch").focus();
                }
            },
            close: function () {
                _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.setEnabled($(".btnDoIt", _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.parent()), true);
            },
        });
        function updateCanOK() {
            _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.setEnabled($(".btnDoIt", _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.parent()), select.length > 0);
        }
        function refreshSearch(searchExpression, reset) {
            select = [];
            updateCanOK();
            moreInfo.remove();
            if (reset) {
                // user launched a new search, need to get rid of previous results
                start = 0;
            }
            if (start == 0) {
                results.html("").append(moreInfo);
            }
            moreInfo.html("").append(_matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.getSpinningWait("searching...")).appendTo(results);
            Tasks.getFindTasks(config.pluginId, searchExpression, start)
                .done(function (result) {
                moreInfo.remove();
                if (result.tasks.length === 0) {
                    results.append('<br/><br/><div class="moreTasks">no (more) results have been found</div><br/><br/>');
                    results.scrollTop(results[0].scrollHeight);
                    return;
                }
                let more = result.tasks.length == result.maxResults;
                $.each(result.tasks, function (ridx, task) {
                    let res = $("<div style='cursor:pointer'>").append(Tasks.renderTask(that.item.id, task, false, true, true));
                    results.append(res);
                    res.data("task", task);
                    res.dblclick(function (event) {
                        $(".selectedIssue").removeClass("selectedIssue");
                        select = [$(event.delegateTarget).data("task")];
                        $(event.delegateTarget).addClass("selectedIssue");
                        updateCanOK();
                        $(".ui-dialog-buttonpane button:contains('Ok')", _globals__WEBPACK_IMPORTED_MODULE_6__.app.dlgForm.parent()).trigger("click");
                    }).click(function (event) {
                        // MATRIX-1367: attaching existing jira issues: allow multi select
                        // $(".selectedIssue").removeClass("selectedIssue");
                        $(event.delegateTarget).toggleClass("selectedIssue");
                        select = [];
                        $.each($(".selectedIssue"), function (idx, si) {
                            select.push($(si).data("task"));
                        });
                        updateCanOK();
                    });
                });
                results.highlightReferences({ noExternals: true });
                if (more) {
                    start += result.maxResults;
                    let next = "get more results...";
                    moreInfo = $("<div class='moreTasks' style='cursor:pointer'>").html(next);
                    moreInfo.appendTo(results).click(function (event) {
                        moreInfo.html("").append(_matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.getSpinningWait("searching..."));
                        refreshSearch(searchExpression, false);
                    });
                }
                // dont scroll down to "get more results..." button:
                // results.scrollTop(results[0].scrollHeight);
            })
                .fail(function (result) {
                results.html(result);
            });
        }
    }
    static getConfig(pluginId) {
        for (let idx = 0; idx < Tasks.tasksConfiguration.length; idx++) {
            if (Tasks.tasksConfiguration[idx].pluginId == pluginId) {
                return Tasks.tasksConfiguration[idx];
            }
        }
        return null;
    }
    renderProjectPage(options) {
        let that = this;
        if (options.controlState === _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.Print) {
            return;
        }
        let pluginId = Number(options.type.replace("_TASKS", ""));
        options.control.html("").append(_matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.getSpinningWait("retrieving tasks"));
        // get all tasks for plugin
        Tasks.getAllTasksProject(pluginId)
            .done(function (alltasks) {
            let selectedFolders = [];
            let textFilter = "";
            let TaskStatus;
            (function (TaskStatus) {
                TaskStatus["All"] = "All";
                TaskStatus["Open"] = "Open";
                TaskStatus["Closed"] = "Closed";
            })(TaskStatus || (TaskStatus = {}));
            let activeStatusFilter = TaskStatus.All;
            options.control.html("");
            if (alltasks.length === 0) {
                options.control.append("<b>There are no tasks for this project!</b>");
                return;
            }
            const folderPlaceHolderText = "Select folders to include";
            const removeLinksByStatus = (task) => {
                if (activeStatusFilter === TaskStatus.All) {
                    return task;
                }
                const copy = JSON.parse(JSON.stringify(task));
                copy.links = copy.links.filter((link) => {
                    switch (activeStatusFilter) {
                        case TaskStatus.All:
                            return true;
                        case TaskStatus.Closed:
                            return link.externalDone;
                        case TaskStatus.Open:
                            return !link.externalDone;
                    }
                });
                return copy;
            };
            const removeItemsWithoutLinks = (task) => task.links.length > 0;
            const removeLinksByText = (task) => {
                const loweredFilter = textFilter.toLowerCase();
                const matrixItemMatches = (task.matrixItem.title && task.matrixItem.title.toLowerCase().indexOf(loweredFilter) !== -1) ||
                    (task.matrixItem.matrixItem &&
                        task.matrixItem.matrixItem.toLowerCase().indexOf(loweredFilter) !== -1);
                if (matrixItemMatches) {
                    // The matrix item matches, return all links
                    return task;
                }
                else {
                    const copy = JSON.parse(JSON.stringify(task));
                    copy.links = copy.links.filter((link) => (link.externalItemTitle &&
                        link.externalItemTitle.toLowerCase().indexOf(loweredFilter) !== -1) ||
                        (link.externalDescription &&
                            link.externalDescription.toLowerCase().indexOf(loweredFilter) !== -1) ||
                        (link.externalItemId &&
                            link.externalItemId.toLocaleLowerCase().indexOf(loweredFilter) !== -1));
                    return copy;
                }
            };
            let tableItem = null;
            const renderTable = () => {
                const buttonText = selectedFolders.length > 0 ? selectedFolders.join(",") : folderPlaceHolderText;
                folderSelectionButton.text(buttonText);
                if (tableItem)
                    tableItem.remove();
                const filteredTasks = alltasks
                    .map(removeLinksByStatus)
                    .filter(removeItemsWithoutLinks)
                    .map(removeLinksByText)
                    .filter(removeItemsWithoutLinks);
                // console.log("Filtered tasks", filteredTasks);
                tableItem = Tasks.renderTasksInTable(filteredTasks, selectedFolders, (folderAdd) => {
                    if (selectedFolders.indexOf(folderAdd.id) === -1) {
                        selectedFolders.push(folderAdd.id);
                    }
                    renderTable();
                });
                options.control.append(tableItem);
            };
            const filterToolbar = $("<div id='taskFilterToolbar' style='padding: 5px;display: flex;'>");
            const itemSelection = new _UI_Tools_ItemSelectionView__WEBPACK_IMPORTED_MODULE_4__.ItemSelectionTools();
            const categories = _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getCategories(true).map((cat) => ({ type: cat }));
            const selectOptions = {
                selectMode: _UI_Components_ProjectViewDefines__WEBPACK_IMPORTED_MODULE_0__.SelectMode.folders,
                linkTypes: categories,
                focusOn: _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getCategories(true)[0],
                autoScroll: false,
                getSelectedItems: async () => selectedFolders.map((folder) => ({ to: folder, title: folder })),
                selectionChange: (newSelection) => {
                    // console.log("Selected items", newSelection);
                    selectedFolders = newSelection.map((selection) => selection.to);
                    renderTable();
                },
            };
            const treeFilterGroup = $("<div class='btn-group' style='max-width: 75%; display: flex;'>");
            const folderSelectionButton = $("<button class='btn btn-default btn-xs' style='text-align: left; " +
                "overflow:hidden; text-overflow: ellipsis; min-width: 20em;'>")
                .text(folderPlaceHolderText)
                .click(() => {
                itemSelection.showDialog(selectOptions);
            });
            treeFilterGroup.append(folderSelectionButton);
            const clearButton = $("<button class='btn btn-default btn-xs' style='flex-grow: 0; flex-shrink: 0;'>")
                .text("Clear")
                .click(() => {
                selectedFolders = [];
                renderTable();
            });
            treeFilterGroup.append(clearButton);
            filterToolbar.append(treeFilterGroup);
            const selectStatus = $("<select class='form-control input-sm' style='height: 22px; width: 12em; margin: 0; margin-right: 5px;'>").change((ev) => {
                activeStatusFilter = $(ev.target).val();
                renderTable();
            });
            Object.keys(TaskStatus).forEach((value) => selectStatus.append(`<option ${activeStatusFilter == value ? "selected" : ""}>${value}</option>`));
            filterToolbar.append(selectStatus);
            // From https://davidwalsh.name/javascript-debounce-function
            function debounce(func, wait, immediate = false) {
                let timeout;
                return function () {
                    let context = this, args = arguments;
                    let later = function () {
                        timeout = null;
                        // @ts-ignore
                        if (!immediate)
                            func.apply(context, args);
                    };
                    let callNow = immediate && !timeout;
                    clearTimeout(timeout);
                    timeout = window.setTimeout(later, wait);
                    // @ts-ignore
                    if (callNow)
                        func.apply(context, args);
                };
            }
            const filterTextInput = $("<input type='text' class='form-control input-sm' placeholder='Filter by Title' " +
                "style='height: 22px;margin-top: 0px;'>")
                .val(textFilter)
                .keyup(debounce(function (ev) {
                textFilter = $(ev.target).val();
                renderTable();
            }, 250));
            filterToolbar.append(filterTextInput);
            options.control.append(filterToolbar);
            renderTable();
        })
            .fail(function (errorMsg) {
            options.control.html("");
            options.control.append("<b>Failed to retrieve tasks!</b><br>Error was:" + errorMsg);
        });
    }
    /* helper */
    updateUI(tasks) {
        let that = this;
        let ctrls = _globals__WEBPACK_IMPORTED_MODULE_6__.matrixApplicationUI.lastMainItemForm.getControls("tasksControl");
        for (let idx = 0; idx < ctrls.length; idx++) {
            let filter = ctrls[idx].getController().getPluginFilter();
            let ul = $(".ticket-list", ctrls[idx]);
            if (ul.length == 0) {
                // list still empty
                ul = $("<ul class='ticket-list baseControl'>");
                $("ul", ctrls[idx]).replaceWith(ul);
            }
            $.each(tasks, function (idx, task) {
                if (!filter || filter.length == 0 || filter.indexOf(task.plugin) !== -1) {
                    // Check if the task is already displayed
                    const matchingTasks = ul.children().filter((index, child) => {
                        const segments = child.innerText.split("\n");
                        return segments.length > 0 && segments[0] == task.externalItemId;
                    });
                    if (matchingTasks.length == 0) {
                        let item = $("<li class='taskDisplayContainer'>").append(Tasks.renderTask(that.item.id, task, true, false));
                        ul.append(item);
                    }
                }
            });
        }
    }
    static getTaskDefinition(task) {
        let res;
        $.each(Tasks.tasksConfiguration, function (tci, tc) {
            $.each(tc.projectsCreate, function (i, project) {
                if (project.projectId == task.externalProject) {
                    $.each(project.taskTypes, function (j, taskType) {
                        if (taskType.taskTypeId == task.externalType) {
                            res = taskType;
                        }
                    });
                }
            });
        });
        return res;
    }
    // render a bunch of tasks in a list
    static renderTasks(itemId, linkedTasks, root, canEdit, fullWidth) {
        if (linkedTasks.length > 0) {
            var items = $("<ul class='ticket-list'></ul>").addClass("baseControl");
            root.append(items);
            for (let tidx = 0; tidx < linkedTasks.length; tidx++) {
                let item = $("<li class='taskDisplayContainer'>").append(Tasks.renderTask(itemId, linkedTasks[tidx], canEdit, fullWidth));
                items.append(item);
            }
        }
        else {
            var items = $("<ul style='margin-top:0px;margin-bottom:0px'></ul>");
            root.append(items);
            items.append($("<li>").append('<div style="color: #bbb;font-size: 12px;">no tasks linked</div>'));
        }
    }
    // From Tom Gruner @ http://stackoverflow.com/a/12034334/1660815
    static escapeHtml(source) {
        let entityMap = {
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#39;",
            "/": "&#x2F;",
        };
        return String(source).replace(/[<>"'\/]/g, (s) => entityMap[s]);
    }
    // render a single task, maybe with option to unlink
    static renderTask(itemId, task, unlink, fullWidth, tinyLink) {
        function showDescription(id, task) {
            let prefix = "";
            if (task.externalProject) {
                prefix = task.externalProject + "-";
            }
            _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.showTaskAsTooltip(prefix + task.externalItemId, task.externalItemTitle, task.externalItemUrl, "<div>" + _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.getSpinningWait("loading description...").html() + "</div>", id);
            Tasks.getMeta(task.plugin, task.externalItemId).done(function (externalData) {
                let status = "";
                if (task.externalMeta) {
                    // "{"issueType":"Task","status":"Backlog"}"
                    let metaJson = JSON.parse(task.externalMeta);
                    status = `<span class='taskStatus' >${metaJson.status}</span> `;
                }
                _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.showTaskAsTooltip(prefix + task.externalItemId, task.externalItemTitle, task.externalItemUrl, `<div> ${externalData.externalDescription} </div><span style="position:absolute;top:6px;right:18px;" >${status}</span>`, id);
            });
            return "";
        }
        let ret = $("<span class='taskDisplay'>").data("externalItemId", task.externalItemId);
        let taskTypeDef = Tasks.getTaskDefinition(task);
        let config = this.getConfig(task.plugin);
        if (!config) {
            return ret;
        }
        let hiddenStyle = "";
        // there is no external project known here when showing external links from server... so let's not do anything
        //if ( config.projectFilter && config.projectFilter.length > 0 && config.projectFilter.indexOf(task.externalProject) == -1) {
        //    hiddenStyle = "color:#ccc !important";
        //}
        let isWebLink = config && config.handleAsLink;
        let icon = '<i class="ticket-icon-icon fal fa-thumbtack">';
        if (isWebLink) {
            let fixIcon = "$(this).css('display','none').parent().addClass('fal fa-external-link')";
            icon = '<i class="ticket-icon-icon fal fa-external-link">';
            try {
                icon =
                    '<span><img class="" src="https://www.google.com/s2/favicons?domain_url=' +
                        encodeURIComponent(new URL(task.externalItemUrl).hostname) +
                        '" onerror="' +
                        fixIcon +
                        '" /></span>';
            }
            catch (e) {
                // probably a bad URL
            }
        }
        if (taskTypeDef && taskTypeDef.iconClass) {
            icon = '<i class="ticket-icon-icon ' + taskTypeDef.iconClass + '">';
        }
        else if (taskTypeDef && taskTypeDef.iconUrl) {
            icon = '<img class="ticket-icon-icon" src="' + taskTypeDef.iconUrl + '">';
        }
        ret.append("<span class='ticket-icon'>" + icon + "<span class='ticket-key'>");
        if (isWebLink) {
            let id = $(`<span title='${config.pluginName}' class='ticket-id'><b style='${task.externalDone ? "text-decoration:line-through" : ""}'>${task.externalItemTitle}</b></span>`);
            id.tooltip({ placement: "bottom", container: "body" });
            ret.append(id);
            if (task.externalItemUrl) {
                id.data("url", task.externalItemUrl).click(function (event) {
                    window.open($(event.delegateTarget).data("url"), "_blank");
                });
            }
        }
        else {
            let ttip = "hold shift to see a preview";
            if (!config.hasMeta) {
                ttip = "click to follow link";
            }
            // tiny links are used to have a selectable row in jira addon for example (when clicking on ticket it should not follow the link but select the row)
            let id = tinyLink
                ? $(`<span class='tinylinkc'><b style='${hiddenStyle};${task.externalDone ? "text-decoration: line-through" : ""}'>${task.externalItemId}</b><a class='ticket-id fas fa-arrow-to-right' data-original-title="${ttip}" title="${ttip}"></a></span>`)
                : $(`<a class='ticket-id' data-original-title="${ttip}" title="${ttip}"><b style='${hiddenStyle};${task.externalDone ? "text-decoration: line-through" : ""}'>${task.externalItemId}</b></a>`);
            id.tooltip({ placement: "bottom", container: "body" });
            if (config.hasMeta) {
                id.hover(() => {
                    if (_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.globalShiftDown)
                        showDescription(id, task);
                }, () => {
                    if (!_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.globalShiftDown) {
                        setTimeout(() => {
                            _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.hideTooltip();
                        }, 1000);
                    }
                });
            }
            ret.append(id);
            if (task.externalItemUrl) {
                let clickHandler = tinyLink ? $("a", id) : id;
                clickHandler.data("url", task.externalItemUrl).click(function (event) {
                    window.open($(event.delegateTarget).data("url"), "_blank");
                    if (event.preventDefault)
                        event.preventDefault();
                    if (event.stopPropagation)
                        event.stopPropagation();
                });
            }
            ret.append("<span class='ticket-title " +
                (fullWidth ? "ticket-title-full" : "") +
                "'>" +
                Tasks.escapeHtml(task.externalItemTitle) +
                "</span>");
            if (config.hasMeta && config.showStatus) {
                if (task.externalMeta) {
                    // "{"issueType":"Task","status":"Backlog"}"
                    let metaJson = JSON.parse(task.externalMeta);
                    $(".ticket-title", ret).append(`<span class='taskStatus' >${metaJson.status}</span> `);
                }
            }
        }
        if (task.externalUser) {
            ret.append("<span class='ticket-user'>(" + task.externalUser + ")</span>");
        }
        if (unlink) {
            let ulb = $("<span style='padding-left:20px' title='remove link'><i class='fal fa-unlink'></i></span>")
                .click(function (event) {
                let theButton = $(event.delegateTarget);
                let theRow = theButton.closest(".taskDisplayContainer");
                let theItem = theButton.data("itemId");
                let theTask = theButton.data("task");
                _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.showConfirm(3, {
                    title: "Remove link to '" + theTask.externalItemId + " " + theTask.externalItemTitle + "'?",
                    ok: "Remove",
                }, function () {
                    theButton.replaceWith($("<span class='fal fa-sync-alt refresh-animate'>"));
                    Tasks.deleteLink(theItem, theTask)
                        .done(function () {
                        theRow.css("display", "none");
                    })
                        .fail(function (message) {
                        _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.showError("Cannot remove link: ", message);
                    });
                }, function () {
                    // nothing to do...
                });
            })
                .tooltip()
                .data("task", task)
                .data("itemId", itemId);
            ret.append($("<span class='ticket-unlink'>").append(ulb));
            if (isWebLink) {
                let editb = $("<span style='padding-left:20px' title='edit link'><i class='fal fa-pencil'></i></span>")
                    .click(function (event) {
                    let theButton = $(event.delegateTarget);
                    let theRow = theButton.closest(".taskDisplayContainer");
                    let theItem = theButton.data("itemId");
                    let theConfig = theButton.data("config");
                    let theTask = theButton.data("task");
                    Tasks.createAndLinkWebDlg(theConfig, task, function (linkTitle, linkUrl) {
                        // create a copy of the old task (to delete it later)
                        let oldTask = _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.JSON.clone(theTask);
                        // update the task
                        theTask.externalItemId = "" + new Date().getTime();
                        theTask.externalItemTitle = linkTitle;
                        theTask.externalItemUrl = linkUrl;
                        Tasks.postCreateLinks(theItem, [theTask]).done(function (results) {
                            $.each(results, function (tidx, task) {
                                // overwrite the task with the data fromt he server (e.g. the plugin might change the done status)
                                if (task.externalItemId == theTask.externalItemId) {
                                    theTask = task;
                                }
                            });
                            Tasks.deleteLink(theItem, oldTask).done(function () {
                                $(".ticket-id", theRow)
                                    .data("url", theTask.externalItemUrl)
                                    .html("<b style='" +
                                    (theTask.externalDone ? "text-decoration: line-through" : "") +
                                    "'>" +
                                    theTask.externalItemTitle +
                                    "</b></span>");
                                theButton.data("task", theTask);
                            });
                        });
                    });
                })
                    .tooltip()
                    .data("config", config)
                    .data("task", task)
                    .data("itemId", itemId);
                ret.append($("<span class='ticket-unlink'>").append(editb));
            }
        }
        return ret;
    }
    getSearchField(config, searchFunction) {
        let that = this;
        let inputSpace = $('<div class="input-group rowFlex rowFlexNoWrapNoGap" >');
        var textInput = $('<input autocomplete="off" type="text" autofocus="autofocus" name="search" placeholder="Search..." class="form-control searchNoX" style="height:36px">')
            .appendTo(inputSpace)
            .on("mouseup keyup mouseout", function () {
            mir_btn.prop("disabled", !config.allowEmptySearches && textInput.val().length < 3);
        })
            .keypress(function (e) {
            if (e.which == 13 && (config.allowEmptySearches === true || textInput.val().length >= 3)) {
                mir_btn.trigger("click");
            }
        });
        var mir_btn = $('<button class="btn btn-item taskSearch" type="button" data-toggle="tooltip" data-placement="bottom" title="Search for tasks"><i style="position:relative;top:4px;color:#bbb" class="fal fa-file-alt"></i><i style="position:relative;margin-left:-7px" class="fal fa-search"></button>')
            .appendTo(inputSpace)
            .click(function () {
            searchFunction(textInput.val(), true);
        })
            .prop("disabled", true);
        let dropDown = $('<button class="btn btn-item taskDropdown" type="button" data-toggle="dropdown"><span class="caret"></span></button>');
        let ul = $(' <ul class="dropdown-menu dropdown-menu-sub pull-right role="menu"> ');
        $.each(config.defaultSearches, function (idx, search) {
            if (search.name) {
                $('<li title="Search for ' +
                    search.expression +
                    '"><a href="javascript:void(0)">' +
                    search.name +
                    "</a></li>")
                    .appendTo(ul)
                    .data("expression", search.expression)
                    .click(function (event) {
                    textInput.val($(event.delegateTarget).data("expression"));
                    mir_btn.trigger("click");
                });
            }
        });
        if (config.defaultSearches && config.defaultSearches.length > 0 && config.defaultSearches[0].name) {
            textInput.val(config.defaultSearches[0].expression);
        }
        if (config.searchHelp) {
            let help = $('<li title="Search help" ><a class="documentationLink" href="javascript:void(0)">Search Help</a></li>');
            ul.append(help);
            help.click(function () {
                window.open(config.searchHelp);
            });
        }
        if (ul.children().length > 0) {
            inputSpace.append($("<div class='taskSearchAddon taskDropDownGroup'>").append(dropDown).append(ul));
        }
        return inputSpace;
    }
    // this function receives a list of smart links to tasks as defined by the user in test results
    // it must take these tasks and create something the server can link to
    createLinksAsync(linksToBeCreated) {
        let that = this;
        let linkJobs = [];
        // build a list of link job tupels, which plugin and with which 'command'
        $.each(Tasks.tasksConfiguration, function (tidx, config) {
            $.each(config.smartLinks, function (sidx, smartLink) {
                $.each(linksToBeCreated, function (idx, ltc) {
                    let re = new RegExp(smartLink.regex);
                    let ma = ltc.match(re);
                    if (ma) {
                        // it matches: replace all placeholders, $0, $1, $2, with matching groups
                        let issueProjectId = smartLink.issueProjectId;
                        let issueId = smartLink.issueId;
                        let url = smartLink.url;
                        let title = smartLink.title;
                        for (let i = 0; i < Math.min(ma.length, 10); i++) {
                            let rep = new RegExp("\\$" + i, "g");
                            issueProjectId = issueProjectId.replace(rep, ma[i]);
                            issueId = issueId.replace(rep, ma[i]);
                            url = url.replace(rep, ma[i]);
                            title = title.replace(rep, ma[i]);
                        }
                        linkJobs.push({
                            plugin: config.pluginId,
                            externalProject: issueProjectId,
                            externalItemId: issueId,
                            externalItemUrl: url,
                            externalDescription: "",
                            externalItemTitle: title,
                            externalDone: false,
                            externalType: "",
                        });
                    }
                });
            });
        });
        return Tasks.postCreateLinks(this.item.id, linkJobs).done(function (createdTasks) {
            that.updateUI(createdTasks);
        });
    }
    /** rest api */
    // this links one matrix item to multiple issues in multiple plugins
    // not private: used by jiraPlugin.js
    static postCreateLinks(itemId, tasksToLink) {
        let res = $.Deferred();
        let project = _globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getProject();
        $.each(tasksToLink, function (tidx, task) {
            if (!task.externalItemId || task.externalItemId == " ") {
                task.externalItemId = "" + new Date().getTime();
            }
        });
        let job = {
            action: "CreateLinks",
            matrixItem: {
                project: project,
                matrixItem: itemId,
            },
            externalItems: tasksToLink,
        };
        _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.wfgwConnection
            .postServer("?" + jQuery.param({ payload: JSON.stringify(job) }, true))
            .done(function (results) {
            let nt = [];
            $.each(tasksToLink, function (idx, link) {
                link.matrixItemIds = [itemId];
                nt.push(link);
            });
            res.resolve(nt);
        })
            .fail(function (jqxhr, textStatus, error) {
            Tasks.showError("Creating link(s) to issue(s) failed", jqxhr, textStatus, error);
            res.reject(jqxhr);
        });
        return res;
    }
    // this creates an issue in a specified plugin and links it to the item
    static postCreateIssue(pluginId, itemId, title, description, projectId, taskTypeId) {
        let res = $.Deferred();
        let project = _globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getProject();
        // Tasks.getConfig(pluginId).createBacklinks;
        let job = {
            pluginId: pluginId,
            action: "CreateIssue",
            matrixItem: {
                project: project,
                matrixItem: itemId,
            },
            externalItem: { externalItemTitle: title, externalDescription: description },
            more: [
                { key: "project", value: projectId },
                { key: "issueType", value: taskTypeId },
            ],
        };
        _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.wfgwConnection
            .postServer("?" + jQuery.param({ payload: JSON.stringify(job) }), job, true)
            .done(function (task) {
            res.resolve(task);
        })
            .fail(function (jqxhr, textStatus, error) {
            Tasks.showError("Creating issue failed", jqxhr, textStatus, error);
        });
        return res;
    }
    // this gets linked tasks of a matrix item from multiple plugins. if no item is specified it gets all tasks...
    // not private: used by jiraPlugin.js
    static getTasks(itemId, pluginFilter) {
        let res = $.Deferred();
        let project = _globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getProject();
        let job = {
            action: "GetIssues",
            matrixItem: {
                project: project,
                matrixItem: itemId,
            },
        };
        let nt = [];
        _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.wfgwConnection
            .getServer("?" + jQuery.param({ payload: JSON.stringify(job) }, true))
            .done(function (links) {
            $.each(links, function (idx, hit) {
                $.each(hit.links, function (jdx, link) {
                    if (!pluginFilter || pluginFilter.length == 0 || pluginFilter.indexOf(link.plugin) != -1) {
                        nt.push(link);
                    }
                });
            });
            res.resolve(nt);
        })
            .fail(function (jqxhr, textStatus, error) {
            Tasks.showError("Getting issues failed", jqxhr, textStatus, error);
        });
        return res;
    }
    static getAllTasksProject(plugin) {
        let res = $.Deferred();
        let project = _globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getProject();
        let job = {
            pluginId: plugin,
            action: "GetIssues",
            matrixItem: {
                project: project,
            },
        };
        _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.wfgwConnection
            .getServer("?" + jQuery.param({ payload: JSON.stringify(job) }, true))
            .done(function (links) {
            res.resolve(links);
        })
            .fail(function (jqxhr, textStatus, error) {
            Tasks.showError("Getting all issues failed", jqxhr, textStatus, error);
        });
        return res;
    }
    // this finds tasks in one plugin
    static getFindTasks(pluginId, search, startAt) {
        let res = $.Deferred();
        let project = _globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getProject();
        let job = {
            pluginId: pluginId,
            action: "FindIssues",
            matrixItem: {
                project: project,
            },
            startAt: startAt,
            searchTerm: search,
        };
        _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.wfgwConnection
            .getServer("?" + jQuery.param({ payload: JSON.stringify(job) }, true))
            .done(function (results) {
            res.resolve({ startAt: startAt, maxResults: 50, tasks: results });
        })
            .fail(function (jqxhr, textStatus, error) {
            Tasks.showError("Search failed", jqxhr, textStatus, error);
        });
        return res;
    }
    static showError(text, jqxhr, textStatus, error) {
        let details = _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.getDisplayError(jqxhr, textStatus, error);
        if (details) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.showError(text, details);
        }
        else {
            _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.showError(text, jqxhr ? jqxhr.statusText : "Server error");
        }
    }
    static deleteLink(itemId, task) {
        let res = $.Deferred();
        let project = _globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getProject();
        let job = {
            pluginId: task.plugin,
            action: "BreakLinks",
            matrixItem: {
                project: project,
                matrixItem: itemId,
            },
            externalItems: [task],
        };
        _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.wfgwConnection
            .deleteServerAsync("", job, true)
            .done(function () {
            res.resolve();
        })
            .fail(function (jqxhr, textStatus, error) {
            Tasks.showError("Removing link failed", jqxhr, textStatus, error);
        });
        return res;
    }
    static getMeta(pluginId, externalItemId) {
        let res = $.Deferred();
        let project = _globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.getProject();
        let job = {
            pluginId: pluginId,
            action: "GetMeta",
            matrixItem: {
                project: project,
            },
            externalItem: {
                externalItemId: externalItemId,
            },
        };
        _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.wfgwConnection
            .getServer("?" + jQuery.param({ payload: JSON.stringify(job) }, true))
            .done(function (result) {
            res.resolve(result);
        })
            .fail(function (jqxhr, textStatus, error) {
            Tasks.showError("Getting meta info of issue failed", jqxhr, textStatus, error);
        });
        return res;
    }
    static fillTree(tree, alltasks) {
        return tree.reduce((accumulator, item) => {
            if (item.id.indexOf("_") === 0) {
                // Ingore these
            }
            else if (item.id && item.id.indexOf("F-") === 0) {
                const children = Tasks.fillTree(item.children, alltasks);
                if (children.length > 0) {
                    accumulator.push({
                        name: item.title,
                        id: item.id,
                        children: children,
                    });
                }
            }
            else {
                const issues = alltasks.filter((taskItem) => taskItem.matrixItem.matrixItem === item.id);
                if (issues.length > 0) {
                    if (issues.length !== 1) {
                        console.error("Filter by ID returned more than 1 result. Check!!!", item.id);
                    }
                    const issueItem = issues[0];
                    accumulator.push(issueItem);
                }
            }
            return accumulator;
        }, []);
    }
    static isFolder(item) {
        return item.hasOwnProperty("name");
    }
    static appendIssueItems(parentElement, folderItems, selectedFolders, folderChangeCallback, folders = []) {
        folderItems.forEach((item) => {
            if (Tasks.isFolder(item)) {
                Tasks.appendIssueItems(parentElement, item.children, selectedFolders, folderChangeCallback, folders.concat(item));
            }
            else {
                $.each(item.links, function (midx, task) {
                    const tr = $("<tr class='taskDisplayContainer'>");
                    const folderColumn = $("<td>");
                    const previousFolders = [];
                    folders.forEach((folder) => {
                        if (previousFolders.length !== 0) {
                            folderColumn.append($("<span>/</span>"));
                        }
                        previousFolders.push(folder);
                        const folderLink = $("<span style='cursor: pointer; color: var(--BlueLink);font-weight: 700;font-size: 14px;'>")
                            .text(folder.name)
                            .click((ev) => {
                            // console.log("Click on folder", previousFolders.join("/"));
                            folderChangeCallback(folder);
                        });
                        folderColumn.append(folderLink);
                    });
                    const matrix = $("<td>").append(_matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.Item.renderLink(item.matrixItem.matrixItem, item.matrixItem.title));
                    const link = $("<td>").append(Tasks.renderTask(item.matrixItem.matrixItem, task, true, false));
                    const thisFolderPath = previousFolders.map((f) => f.id).join("/");
                    if (Tasks.thisFolderPathIsInSelection(thisFolderPath, selectedFolders)) {
                        parentElement.append(tr.append(folderColumn).append(matrix).append(link));
                    }
                });
            }
        });
    }
    static renderTasksInTable(alltasks, selectedFolders, folderChangeCallback) {
        const tableContainer = $("<div id='tablecontainer' style='height: 100%; overflow: hidden; padding-bottom: 15px;'>");
        let table = $("<table class='table'><thead><tr><th>Folder</th><th>Matrix Item</th><th>Task</th><th></th></tr></thead></table>");
        let items = $("<tbody>");
        table.append(items);
        const expandedFolders = Tasks.expandFolders(_globals__WEBPACK_IMPORTED_MODULE_6__.app.getTree(), selectedFolders, []);
        // console.log("Expanded Folders", expandedFolders);
        let folderItems = Tasks.fillTree(_globals__WEBPACK_IMPORTED_MODULE_6__.app.getTree(), alltasks);
        // console.log("Item Tree:", folderItems);
        Tasks.appendIssueItems(items, folderItems, expandedFolders, folderChangeCallback);
        let scroller = $("<div class='panel-body-v-scroll' style='height:100%'>");
        tableContainer.append(scroller.append(table));
        table.tablesorter({
            sortList: [
                [0, 0],
                [1, 0],
                [2, 0],
            ],
        });
        return tableContainer;
    }
    static expandFolders(tree, selectedFolders, prefix) {
        const folders = [];
        tree.forEach((treeitem) => {
            if (treeitem.id.indexOf("F-") === 0) {
                const newPrefix = prefix.concat(treeitem.id);
                if (selectedFolders.indexOf(treeitem.id) !== -1) {
                    folders.push(newPrefix.join("/"));
                }
                folders.push(...Tasks.expandFolders(treeitem.children, selectedFolders, newPrefix));
            }
        });
        return folders;
    }
    static thisFolderPathIsInSelection(thisFolderPath, selectedFolders) {
        if (selectedFolders.length === 0) {
            return true;
        }
        const matchingFolders = selectedFolders.filter((folder) => thisFolderPath.indexOf(folder) === 0);
        return matchingFolders.length > 0;
    }
}
let mTasks;
function InitializeTasks() {
    mTasks = new Tasks();
    globalThis.Tasks = mTasks;
    // register the engine as plugin
    _PluginManager__WEBPACK_IMPORTED_MODULE_2__.plugins.register(mTasks);
    mTasks.subscribe();
}


/***/ }),
/* 120 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ContextFrameManager: () => (/* binding */ ContextFrameManager),
/* harmony export */   InitializeTrainingManager: () => (/* binding */ InitializeTrainingManager)
/* harmony export */ });


class ContextFrameManagerImpl {
    constructor() {
        this.pages = [];
    }
    getPages() {
        return this.pages;
    }
    // register a plugin providing  a context page
    register(plugin) {
        this.pages.push(plugin);
    }
    // check if a context page is supplied by plugin 
    implements(id) {
        return !!this.getPlugin(id);
    }
    renderTab(panel, id, config, context) {
        let p = this.getPlugin(id);
        p.onUpdate(panel, config, context);
    }
    // return a context page plugin of a given type
    getPlugin(id) {
        for (var idx = 0; idx < this.pages.length; idx++) {
            if (this.pages[idx].id == id) {
                return this.pages[idx];
            }
        }
        return null;
    }
}
var ContextFrameManager;
function InitializeTrainingManager() {
    ContextFrameManager = new ContextFrameManagerImpl();
}


/***/ }),
/* 121 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BranchingConstants: () => (/* binding */ BranchingConstants),
/* harmony export */   BranchingHelper: () => (/* binding */ BranchingHelper),
/* harmony export */   EItemChangeState: () => (/* binding */ EItemChangeState),
/* harmony export */   EMergeActionChoice: () => (/* binding */ EMergeActionChoice),
/* harmony export */   EMergeChangeStatus: () => (/* binding */ EMergeChangeStatus),
/* harmony export */   EMergeType: () => (/* binding */ EMergeType)
/* harmony export */ });
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);


class BranchingConstants {
}
BranchingConstants.BRANCH_INFO_SETTING = "branch_info_02";
// this indicated how items changed between the last sync point and now
var EMergeChangeStatus;
(function (EMergeChangeStatus) {
    EMergeChangeStatus[EMergeChangeStatus["deleted"] = 0] = "deleted"; // item was deleted since last merge/branching off
    EMergeChangeStatus[EMergeChangeStatus["created"] = 1] = "created"; // item was created (or restored) since last merge/branching off
    EMergeChangeStatus[EMergeChangeStatus["changed"] = 2] = "changed"; // item was changed since last merge/branching off
    EMergeChangeStatus[EMergeChangeStatus["unchanged"] = 3] = "unchanged"; // item was not changed since last merge/branching off
    EMergeChangeStatus[EMergeChangeStatus["notExist"] = 4] = "notExist"; // item did not and is not existing nor and at last merge/branching off
})(EMergeChangeStatus || (EMergeChangeStatus = {}));
var EItemChangeState;
(function (EItemChangeState) {
    EItemChangeState[EItemChangeState["never"] = 0] = "never";
    EItemChangeState[EItemChangeState["notNow"] = 1] = "notNow";
    EItemChangeState[EItemChangeState["now"] = 2] = "now"; // exists now
})(EItemChangeState || (EItemChangeState = {}));
// that's is the user decision on how to handle a situation
var EMergeActionChoice;
(function (EMergeActionChoice) {
    EMergeActionChoice[EMergeActionChoice["noActionNeeded"] = -1] = "noActionNeeded"; // if there's no action needed
    EMergeActionChoice[EMergeActionChoice["undecided"] = 0] = "undecided"; // if there's no default suggested action (this cannot be the final choice though!)
    EMergeActionChoice[EMergeActionChoice["ignore"] = 1] = "ignore"; // don't merge a difference from the branch to the mainline
    EMergeActionChoice[EMergeActionChoice["add_restore"] = 2] = "add_restore"; // add an item from the branch to the mainline. there it might be a deleted (to be restored) or a new item (to be created with) with the same id
    EMergeActionChoice[EMergeActionChoice["replace"] = 3] = "replace"; // update the mainline item to match the branch
    EMergeActionChoice[EMergeActionChoice["delete"] = 4] = "delete"; // delete the mainline item to match the delete in the branch
})(EMergeActionChoice || (EMergeActionChoice = {}));
var EMergeType;
(function (EMergeType) {
    EMergeType[EMergeType["undefined"] = 0] = "undefined";
    EMergeType[EMergeType["merge"] = 1] = "merge";
    EMergeType[EMergeType["push"] = 2] = "push";
})(EMergeType || (EMergeType = {}));
// Helper functions used by UI that expose branching.
class BranchingHelper {
    static addMergeDetail(ul, detail, targetProject, isFromBranch) {
        if (detail.error) {
            if (detail.error.indexOf("doesn't exist") != -1) {
                $("<li>").appendTo(ul).html(`Not updated (strict mode) request was: ${detail.request}`);
            }
            else {
                $("<li>").appendTo(ul).html(`Error ${detail.action}: ${detail.error}`);
            }
            return;
        }
        let fromWhere = isFromBranch ? "branch" : "mainline";
        try {
            switch (detail.action) {
                case "created":
                    ul.append($("<li>").html(`${detail.action} ${BranchingHelper.renderItemLink(detail.mainlineItem, targetProject)} based on ${fromWhere} revision ${_matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Item.parseRef(detail.branchItem).version}`));
                    break;
                case "deleted":
                    ul.append($("<li>").html(`${detail.action} ${BranchingHelper.renderItemLink(detail.mainlineItem, targetProject)} revision ${_matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Item.parseRef(detail.mainlineItem).version}`));
                    break;
                case "moved":
                    ul.append($("<li>").html(`${detail.action} ${BranchingHelper.renderItemLink(detail.mainlineItem, targetProject)} to ${BranchingHelper.renderItemLink(detail.mainlineFolder, targetProject)}`));
                    break;
                case "merge_restore":
                    ul.append($("<li>").html(`restored ${BranchingHelper.renderItemLink(detail.mainlineItem, targetProject)} revision ${_matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Item.parseRef(detail.mainlineItem).version} based on ${fromWhere} revision ${_matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Item.parseRef(detail.branchItem).version}`));
                    break;
                case "merge_update":
                    ul.append($("<li>").html(`updated ${BranchingHelper.renderItemLink(detail.mainlineItem, targetProject)} to revision ${_matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Item.parseRef(detail.mainlineItem).version} based on ${fromWhere} revision ${_matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Item.parseRef(detail.branchItem).version}`));
                    break;
                case "link_added":
                    ul.append($("<li>").html(`added link from ${BranchingHelper.renderItemLink(detail.mainlineItem, targetProject)} to  ${BranchingHelper.renderItemLink(_matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Item.parseRef(detail.mainlineItem2).id, targetProject)}`));
                    break;
                case "link_removed":
                    ul.append($("<li>").html(`removed link from ${BranchingHelper.renderItemLink(detail.mainlineItem, targetProject)} to  ${BranchingHelper.renderItemLink(_matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Item.parseRef(detail.mainlineItem2).id, targetProject)}`));
                    break;
                default:
                    ul.append($("<li>").html(`${detail.action} ${BranchingHelper.renderItemLink(detail.mainlineItem, targetProject)} revision ${_matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Item.parseRef(detail.mainlineItem).version} based on ${fromWhere} revision ${_matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Item.parseRef(detail.branchItem).version}`));
                    break;
            }
        }
        catch (e) {
            console.log("Merge/Push Error");
            console.log(detail);
            $("<li>").appendTo(ul).html(`Request ${detail.request ? detail.request : ""}`);
        }
    }
    static renderItemLink(fullItem, otherProject) {
        // this item is in the project the user is looking at
        if (!otherProject)
            return _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Item.parseRef(fullItem).id;
        // or in the other project
        return "#" + otherProject + "/" + _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.Item.parseRef(fullItem).id + "#";
    }
}


/***/ }),
/* 122 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ItemConfiguration: () => (/* binding */ ItemConfiguration)
/* harmony export */ });
/* harmony import */ var _ProjectSettings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(42);
/* harmony import */ var _FieldDescriptions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(24);



class ItemConfiguration {
    constructor(logger, json) {
        // TODO: it seems that we have category information in configuration and also in variable
        // settings, with SLIGHTLY DIFFERENT FIELDS, WHAT THE HECK?
        // (one has shortLabel, the other doesnt).
        this.configuration = {};
        this.settingsString = {};
        this.settingsJSON = {};
        this.users = []; // server
        this.userList = []; // cleaned up
        this.userGroups = [];
        this.logger = logger;
        this.json = json;
    }
    isConfigured() {
        return this.getCategories() && this.getCategories().length > 0;
    }
    addUsers(userPermission, groupPermission) {
        this.userGroups = groupPermission;
        this.users = userPermission;
        this.userList = [];
        if (userPermission) {
            for (var idx = 0; idx < this.users.length; idx++) {
                var ignore = false;
                if (this.users[idx].permission === 3) {
                    // 3 is an admin without write write access
                    ignore = true;
                }
                for (var ex = 0; !ignore && ex < this.userList.length; ex++) {
                    if (this.userList[ex].login.toLowerCase() === this.users[idx].login.toLowerCase() || this.userList[ex].id === this.users[idx].id) {
                        // somethings wrong here...
                        this.logger.log("warning", "Ignoring duplicate user... login:" + this.userList[ex].id + " ID:" + this.users[idx].login);
                        ignore = true;
                    }
                }
                if (!ignore) {
                    this.userList.push({
                        id: this.users[idx].id,
                        login: this.users[idx].login.toLowerCase(),
                        email: this.users[idx].email,
                        permission: this.users[idx].permission,
                        firstName: this.users[idx].firstName,
                        lastName: this.users[idx].lastName
                    });
                }
            }
        }
    }
    getUserInfo(login) {
        let theUser = null;
        for (let user of this.getUserNames()) {
            if (user.login.toLowerCase() === login.toLowerCase()) {
                theUser = user;
            }
        }
        return theUser;
    }
    getCombinedName(user) {
        let name = (user.firstName ? user.firstName : "") + " " + (user.lastName ? user.lastName : "");
        return user.login + (name == " " ? "" : (" - ") + name);
    }
    getFullName(login) {
        let user = this.getUserInfo(login);
        if (user === null) {
            return login;
        }
        return this.getCombinedName(user);
    }
    groupIdToName(groupId) {
        return `g_${groupId}_g`;
    }
    hasGroupInfo(group) {
        return this.getUserGroups().findIndex((g) => { return this.groupIdToName(g.groupId) === group.toLowerCase(); }) > -1;
    }
    // {login} may have been deleted or doesn't exist.
    hasUserInfo(login) {
        return this.getUserInfo(login) !== null;
    }
    getUserIds() {
        return this.getUserNames().map(function (user) { return user.login; });
    }
    getEmail(user) {
        let email = "";
        for (let otherUser of this.getUserNames()) {
            if (otherUser.login.toLowerCase() === user.toLowerCase()) {
                email = otherUser.email;
            }
        }
        return email;
    }
    activateTimewarp(date) {
        this.timewarpDate = date;
    }
    getTimeWarp() {
        return this.timewarpDate;
    }
    isAfterTimeWarp(date) {
        return this.timewarpDate && new Date(date) > new Date(this.timewarpDate);
    }
    hasWriteAccess(user) {
        if (!user || this.timewarpDate) {
            return false;
        }
        let permission = this.getPermission(user);
        // -1 super admin, 2 read write, 3 admin
        return permission == -1 || permission == 2 || permission == 3;
    }
    getPermission(user) {
        let permission = -1; // (in case the user does not exists, it's a super admin)
        // get permission directly for user
        for (var idx = 0; idx < this.users.length; idx++) {
            if (this.users[idx].login.toLowerCase() === user.toLowerCase()) {
                permission = this.users[idx].permission;
            }
        }
        // now go through all groups, maybe it's better
        for (let ug of this.getUserGroups()) {
            if (ug.membership.map(member => member.login.toLowerCase()).indexOf(user.toLowerCase()) != -1) {
                // user is in this group, let's see if we can bump him up
                if (ug.permission == 3)
                    permission = 3;
                if (ug.permission == 2 && permission != 3)
                    permission = 2;
                if (ug.permission == 1 && permission <= 0)
                    permission = 1;
            }
        }
        return permission;
    }
    getUserNames(sorted) {
        let users = this.json.clone(this.userList);
        // add users from user groups if they are not directly in
        for (let ug of this.getUserGroups()) {
            for (let m of ug.membership) {
                if (users.map(user => user.login).indexOf(m.login) == -1) {
                    users.push({
                        id: -1,
                        login: m.login,
                        email: m.email,
                        permission: -1,
                        firstName: m.firstName,
                        lastName: m.lastName
                    });
                }
            }
        }
        if (sorted) {
            users.sort(function (a, b) { if (a.login < b.login)
                return -1;
            else
                return 1; });
        }
        return users;
    }
    getUserGroups() {
        return this.userGroups;
    }
    /**
     * getValidUserOptions returns an array of option values that describe
     * the users and groups available as values for a user field in the
     * database (fields of type {@link FieldDescriptions.Field_user}).
     *
     * @param showUsers - pass true to include users
     * @param showGroups - pass true to include groups
     * @param preSelectedUsers - if present, the list of users will be limited
     *     to this subset and the full user list will not be consulted to
     *     construct the return value.
     * @param possiblyDeletedUserGroupNames - if present, a comma-separated
     *     list of user and group names. The returned options will include
     *     these values, and mark deleted user and groups as disabled.
     * @returns An array of {@link IDropdownOptions} configured according to
     *     the input parameters and the users and groups of the current project.
     */
    getValidUserOptions(showUsers, showGroups, preSelectedUsers, possiblyDeletedUserGroupNames) {
        let that = this;
        let options = [];
        let users = preSelectedUsers
            ? preSelectedUsers
            : this.getUserNames();
        let groups = this.getUserGroups().sort((a, b) => {
            return a.groupName < b.groupName ? -1 : 1;
        });
        // if {possiblyDeletedUsernames} are not found in {users}, we want to add them.
        const isGroup = /g_([0-9])+_g/;
        let names = possiblyDeletedUserGroupNames ? possiblyDeletedUserGroupNames.split(',') : [];
        names.forEach(name => {
            if (!this.hasUserInfo(name)) {
                if (!isGroup.test(name)) {
                    users.push({
                        id: 0,
                        login: name,
                        email: "unknown",
                        permission: 0,
                        firstName: "",
                        lastName: "",
                        deleted: true
                    });
                }
                else if (!this.hasGroupInfo(name)) {
                    // We know match found a group because isGroup.test(name) returned true.
                    const groupId = parseInt(name.match(isGroup)[1]);
                    groups.push({
                        groupName: name,
                        permission: 0,
                        groupId: groupId,
                        membership: [],
                        deleted: true
                    });
                }
            }
        });
        if (showUsers) {
            // sort users alphabetically
            users = users.sort((a, b) => {
                return a.login < b.login ? -1 : 1;
            });
            // add to user select
            users.forEach((user) => {
                // Deleted users have strikethrough text, and are disabled from selection.
                // We only display their login, not their full name.
                const deletedUser = user.deleted === true;
                const labelText = deletedUser ? user.login : this.getCombinedName(user);
                options.push({
                    id: user.login, label: labelText, class: "users",
                    disabled: deletedUser,
                    strikethrough: deletedUser
                });
            });
        }
        if (showGroups) {
            groups.forEach((group) => {
                const deletedGroup = group.deleted === true;
                let groupName = group.groupName;
                let groupId = deletedGroup ? groupName : that.groupIdToName(group.groupId);
                options.push({
                    id: groupId, label: groupName, class: "groups",
                    disabled: deletedGroup,
                    strikethrough: deletedGroup
                });
            });
        }
        return options;
    }
    // TODO(modules): This is a performance hack. Better if private.
    addGroupMember(gid, user) {
        let gs = this.userGroups.filter(g => g.groupId == gid && g.membership.map(u => u.login).indexOf(user) == -1);
        if (gs.length) {
            gs[0].membership.push({ login: user });
        }
    }
    // TODO(modules): This is a performance hack. Better if private.
    removeGroupMember(gid, user) {
        let gs = this.userGroups.filter(g => g.groupId == gid && g.membership.map(u => u.login).indexOf(user) != -1);
        if (gs.length) {
            gs[0].membership = gs[0].membership.filter(m => m.login != user);
        }
    }
    // TODO(modules): This is a performance hack. Better if private.
    addSettings(s) {
        let that = this;
        this.settings = s;
        this.settingsString = {};
        this.settingsJSON = {};
        if (s.settingList) {
            for (let setting of s.settingList) {
                that.settingsString[setting.key] = setting.value;
                if (setting.value && setting.value.indexOf('{') !== -1 && setting.value.indexOf('<') !== 0) {
                    // assume it a json
                    var val = this.json.fromString(setting.value);
                    if (val.status === "ok") {
                        that.settingsJSON[setting.key] = val.value;
                    }
                }
            }
        }
    }
    getSettings() {
        return this.settings.settingList;
    }
    getSetting(s) {
        return this.settingsString[s];
    }
    getSettingJSON(s, def) {
        return this.settingsJSON[s] ? this.settingsJSON[s] : def;
    }
    getDropDowns(dropdownId) {
        let that = this;
        let dropdowns = [];
        for (let key of Object.keys(this.settingsJSON)) {
            let setting = that.settingsJSON[key];
            if (setting.options && (!dropdownId || dropdownId == key)) {
                dropdowns.push({
                    id: key,
                    label: key,
                    value: setting
                });
            }
        }
        return dropdowns;
    }
    getTasksConfig() {
        return this.getSettingJSON("task_config");
    }
    getDHFConfig() {
        return this.getSettingJSON("dhf_config");
    }
    getExtrasConfig() {
        let extras = this.getSettingJSON("extras");
        return (extras ? extras : {});
    }
    getLabelsConfig() {
        return this.getSettingJSON("labels");
    }
    getIncludeConfig() {
        let conf = this.getSettingJSON("compose");
        return (conf ? conf : {
            copies: {
                importMasters: [],
                lockLabel: ""
            }, includes: {
                importMasters: [],
                lockLabel: ""
            }
        });
    }
    getQMSConfig() {
        // get qms config (as project setting, handle 2.1 and earlier setting in category setting)
        let setting = this.getSettingJSON("qms_config");
        if (!setting) {
            setting = _ProjectSettings__WEBPACK_IMPORTED_MODULE_0__.qmsDefaultConfig; // as in 2.1 and earlier
        }
        for (let p of setting.publications) {
            if (p.publisher == "_") {
                let legacy = this.getCategorySetting(p.toCategory, "publish");
                p.publisher = legacy ? legacy.publisher : "";
            }
        }
        return setting;
    }
    getRiskConfig() {
        return this.getSettingJSON("risk_config");
    }
    getCategoryGroupConfig() {
        return this.getSettingJSON("category_groups");
    }
    getACLConfig() {
        return this.getSettingJSON(_ProjectSettings__WEBPACK_IMPORTED_MODULE_0__.ACL_SETTING);
    }
    getTraceConfig() {
        return this.getSettingJSON("trace_config");
    }
    getNavigationBarConfig() {
        return this.getSettingJSON("nav_config");
    }
    getContextPagesConfig() {
        return this.getSettingJSON("project_help");
    }
    getMailConfig() {
        return this.getSettingJSON(_ProjectSettings__WEBPACK_IMPORTED_MODULE_0__.mailConfigSetting);
    }
    getSearchConfig() {
        return this.getSettingJSON("search_config");
    }
    getLabelLockConfig() {
        return this.getSettingJSON("lockingLabels");
    }
    getTestConfig() {
        return this.getSettingJSON("xtc_config");
    }
    setSettingJSON(key, valueJSON) {
        this.settingsString[key] = JSON.stringify(valueJSON);
        this.settingsJSON[key] = valueJSON;
    }
    getSmartText() {
        return this.getSettingJSON(_ProjectSettings__WEBPACK_IMPORTED_MODULE_0__.smartTextConfigSetting);
    }
    addCategorySetting(categorySetting) {
        if (!this.settings || !this.settings.categorySettingList) {
            return;
        }
        this.settings.categorySettingList.push(categorySetting);
    }
    getCategorySettings(category) {
        if (!this.settings || !this.settings.categorySettingList) {
            return [];
        }
        for (var idx = 0; idx < this.settings.categorySettingList.length; idx++) {
            if (this.settings.categorySettingList[idx].categoryShort === category && this.settings.categorySettingList[idx].settingList) {
                return this.settings.categorySettingList[idx].settingList;
            }
        }
        return [];
    }
    // return the setting for a plugin or null if plugin or setting does not exist
    // TODO(modules): is this ever called?
    getPluginSetting(pluginId, setting) {
        /*
         * pluginSettingsList: [
            {
                pluginId: 101,
                settings: [ {
                    setting: "serverType",
                    value: "medical",
                    encrypted: false
                }, {
                setting: "baseUrl",
                    value: "https://matrixtest.atlassian.net",
                    encrypted: false
                } ]
            }
        ]
         */
        if (!this.settings || !this.settings.pluginSettingsList) {
            return null;
        }
        for (var idx = 0; idx < this.settings.pluginSettingsList.length; idx++) {
            var ps = this.settings.pluginSettingsList[idx];
            if (ps.pluginId == pluginId) {
                for (var jdx = 0; jdx < ps.settings.length; jdx++) {
                    if (ps.settings[jdx].setting === setting) {
                        return ps.settings[jdx].value;
                    }
                }
            }
        }
        return null;
    }
    getPluginSettings() {
        return this.settings.pluginSettingsList;
    }
    // return tuples {category, field} of all categories which use a type
    // used for tisk traceability in DHF
    getFieldsOfType(fieldType, categoryType) {
        var hits = [];
        if (!this.settings) {
            return hits;
        }
        for (var idx = 0; idx < this.settings.categorySettingList.length; idx++) {
            var category = this.settings.categorySettingList[idx].categoryShort;
            if (!categoryType || categoryType === category) {
                var cc = this.getItemConfiguration(category);
                if (cc) {
                    var fields = cc.fieldList;
                    for (var fdx = 0; fdx < fields.length; fdx++) {
                        if (fields[fdx].fieldType === fieldType) {
                            //    var jconfig = this.json.fromString(fields[fdx].parameter);
                            hits.push({ category: category, field: fields[fdx] });
                        }
                    }
                }
            }
        }
        return hits;
    }
    getCategorySetting(category, setting) {
        var catSettings = this.getCategorySettings(category);
        for (var idx = 0; idx < catSettings.length; idx++) {
            if (catSettings[idx].key === setting) {
                var jconfig = this.json.fromString(catSettings[idx].value);
                if (jconfig.status === 'ok') {
                    // apparently parsing went well
                }
                else if (jconfig.status === 'error') {
                    this.logger.log("error", "The category setting '" + catSettings[idx].key + "' has an invalid value. Ignoring it.");
                }
                else {
                    this.logger.log("warning", "The category setting '" + catSettings[idx].key + "' is empty.");
                }
                return jconfig.value;
            }
        }
        return null;
    }
    getCategories(noFolders) {
        let catgories = Object.keys(this.configuration);
        if (noFolders) {
            catgories.splice(catgories.indexOf("FOLDER"), 1);
        }
        return catgories;
    }
    getCategoryLabel(category) {
        if (this.configuration[category]) {
            return this.configuration[category].label;
        }
        return "";
    }
    getCategoryId(category) {
        let cd = this.settings.categoryList.categoryExtended.filter(function (cat) { return cat.category.shortLabel == category; });
        if (cd.length == 1) {
            return "" + cd[0].category.id;
        }
        return "";
    }
    // links for 1.5 and earlier (configured as category setting)
    getDownLinkTypes(category, required) {
        if (required) {
            return this.configuration[category].downLinksRequired;
        }
        return this.configuration[category].downLinksOptional;
    }
    // links for 1.5 and earlier (configured as category setting)
    getUpLinkTypes(category, required) {
        var up = [];
        for (var key in this.configuration) {
            if (key && key != category && this.configuration[key]) {
                if (required && this.configuration[key].downLinksRequired.indexOf(category) != -1) {
                    up.push(key);
                }
                if (!required && this.configuration[key].downLinksOptional.indexOf(category) != -1) {
                    up.push(key);
                }
            }
        }
        return up;
    }
    addCategories(config) {
        for (var idx = 0; config.categoryList.categoryExtended != undefined && idx < config.categoryList.categoryExtended.length; idx++) {
            this.addCategory(config.categoryList.categoryExtended[idx]);
        }
    }
    init(config) {
        this.addCategories(config);
        this.addSettings(config);
        this.addUsers(config.userPermission, config.groupPermission);
    }
    canEdit(category) {
        return this.canDo(category, "edit");
    }
    canEditTitle(category) {
        return this.canDo(category, "rename");
    }
    canMove(category) {
        return this.canDo(category, "move");
    }
    canCreate(category) {
        return this.canDo(category, "create");
    }
    canDelete(category) {
        return this.canDo(category, "delete");
    }
    canModifyLabels(category) {
        return this.canDo(category, "label");
    }
    canSign(category) {
        return this.canDo(category, "sign");
    }
    canReport(category) {
        return this.canDo(category, "report");
    }
    canDo(category, task) {
        if (!this.configuration[category])
            return false;
        if (!this.configuration[category].enable)
            return true; // no limitation specified for this user
        if (this.configuration[category].enable.indexOf(task) != -1)
            return true;
        return false;
    }
    addCategory(config) {
        this.configuration[config.category.shortLabel] = {
            fieldList: [],
            label: config.category.label,
            downLinksRequired: [],
            downLinksOptional: [],
            enable: config.enable
        };
        var fieldList = config.fieldList.field;
        if (!fieldList) {
            fieldList = [];
        }
        for (var idx = 0; idx < fieldList.length; idx++) {
            var jconfig = this.json.fromString(fieldList[idx].parameter);
            if (jconfig.status === 'ok') {
                // apparently parsing went well
            }
            else if (jconfig.status === 'error') {
                this.logger.log("error", "The field with id '" + fieldList[idx].id + "' has an invalid value. Ignoring it.");
            }
            else {
                // quite normal
            }
            fieldList[idx].parameterJson = jconfig.value;
            this.configuration[config.category.shortLabel].fieldList.push(fieldList[idx]);
            if (fieldList[idx].fieldType === _FieldDescriptions__WEBPACK_IMPORTED_MODULE_1__.FieldDescriptions.Field_links) {
                if (fieldList[idx].parameterJson && fieldList[idx].parameterJson.linkTypes) {
                    for (var l = 0; l < fieldList[idx].parameterJson.linkTypes.length; l++) {
                        var dl = fieldList[idx].parameterJson.linkTypes[l];
                        if (this.json.isTrue(dl.required)) {
                            this.configuration[config.category.shortLabel].downLinksRequired.push(dl.type);
                        }
                        else {
                            this.configuration[config.category.shortLabel].downLinksOptional.push(dl.type);
                        }
                    }
                }
            }
        }
    }
    getItemConfiguration(category) {
        return this.configuration[category];
    }
    getFieldId(category, fieldLabel) {
        var cc = this.getItemConfiguration(category);
        if (!cc) {
            return 0;
        }
        var fields = cc.fieldList;
        for (var idx = 0; idx < fields.length; idx++) {
            if (fields[idx].label.toLowerCase() === fieldLabel.toLowerCase()) {
                return fields[idx].id;
            }
        }
        return 0;
    }
    getFields(category) {
        var cc = this.getItemConfiguration(category);
        if (!cc) {
            return null;
        }
        return cc.fieldList;
    }
    getFieldByName(category, name) {
        let fields = this.getFields(category).filter(function (field) { return field.label && field.label.toLowerCase() == name.toLowerCase(); });
        if (fields.length == 1)
            return fields[0];
        return undefined;
    }
    getFieldById(category, fieldId) {
        var cc = this.getItemConfiguration(category);
        if (!cc) {
            return null;
        }
        let fields = cc.fieldList.filter(function (field) { return field.id == fieldId; });
        return fields.length ? fields[0] : null;
    }
    getFieldConfig(fieldId) {
        // The fieldId is unique across categories, therefore this code works properly.
        for (let category of this.getCategories()) {
            let field = this.getFieldById(category, fieldId);
            if (field) {
                return field.parameterJson;
            }
        }
        return null;
    }
    getFieldName(fieldId) {
        for (let category of this.getCategories()) {
            let field = this.getFieldById(category, fieldId);
            if (field) {
                return field.label;
            }
        }
        return "";
    }
    getFieldType(category, fieldId) {
        var cc = this.getItemConfiguration(category);
        if (!cc) {
            return null;
        }
        var fields = cc.fieldList;
        for (var idx = 0; idx < fields.length; idx++) {
            // note this is ==: sometimes it is an int sometimes a string 
            if (fields[idx].id == fieldId) {
                return fields[idx].fieldType;
            }
        }
        return null;
    }
    // gets required or optional up or downlink categories for a given category
    // it uses the project setting for the trace configuration if existing,
    // the category setting (1.5 and earlier) otherwise
    getLinkTypes(category, down, required) {
        var tc = this.getTraceConfig();
        if (!tc) {
            // use 1.5 and before rules
            if (down) {
                return this.getDownLinkTypes(category, required);
            }
            else {
                return this.getUpLinkTypes(category, required);
            }
        }
        // get the up/down rule from project setting
        var updown;
        for (let rule of tc.rules) {
            if (rule.category === category) {
                updown = down ? rule.down_rules : rule.up_rules;
            }
        }
        if (!updown) {
            // no rules.. 
            return [];
        }
        var result = [];
        // rules exist get all required or option links
        for (let updownRule of updown) {
            if (updownRule.rule === "must_have" && updownRule.any_of && required) {
                for (let any of updownRule.any_of) {
                    // add to must have
                    if (result.indexOf(any) === -1) {
                        result.push(any);
                    }
                }
            }
            else if (updownRule.rule === "can_have" && updownRule.any_of && !required) {
                for (let any of updownRule.any_of) {
                    // add to can have
                    if (result.indexOf(any) === -1) {
                        result.push(any);
                    }
                }
            }
        }
        return result;
    }
    // gets required or optional up or downlink categories for a given category
    // including reason why they should / could exist
    // it uses the project setting for the trace configuration if existing,
    // the category setting (1.5 and earlier) otherwise
    getLinkInfo(category, down, required, groupByRule) {
        var tc = this.getTraceConfig();
        if (!tc) {
            var links = [];
            // use 1.5 and before rules
            if (down) {
                links = this.getDownLinkTypes(category, required);
            }
            else {
                links = this.getUpLinkTypes(category, required);
            }
            var result = [];
            for (var idx = 0; idx < links.length; idx++) {
                result.push({ category: links[idx], reason: (required ? "required" : "optional") });
            }
            return result;
        }
        // get the up/down rule from project setting
        var updown;
        for (let rule of tc.rules) {
            if (rule.category === category) {
                updown = down ? rule.down_rules : rule.up_rules;
            }
        }
        if (!updown) {
            // no rules.. 
            return [];
        }
        var linkInfo = [];
        // rules exist get all required or optional links
        for (let updownRule of updown) {
            if (updownRule.rule === "must_have" && updownRule.any_of && required) {
                if (groupByRule) {
                    linkInfo.push({ category: updownRule.any_of, reason: updownRule.name });
                }
                else {
                    for (let anys of updownRule.any_of) {
                        // add to must have
                        linkInfo.push({ category: anys, reason: updownRule.name });
                    }
                }
            }
            else if (updownRule.rule === "can_have" && updownRule.any_of && !required) {
                if (groupByRule) {
                    linkInfo.push({ category: updownRule.any_of, reason: updownRule.name });
                }
                else {
                    for (let anys of updownRule.any_of) {
                        // add to can have
                        linkInfo.push({ category: anys, reason: updownRule.name });
                    }
                }
            }
        }
        return linkInfo;
    }
    getMitigations() {
        let risk_config = this.getRiskConfig();
        // get the mitigations from the project setting
        let global = [];
        if (risk_config && risk_config.mitigationTypes) {
            global = risk_config.mitigationTypes.map(function (mt) { return mt.type; });
        }
        // for each field, check if there's a field setting, if not use the global setting
        let mitCats = {};
        for (let riskFieldInfo of this.getFieldsOfType("risk2")) {
            mitCats[riskFieldInfo.category] = [];
            let fieldConfig = riskFieldInfo.field.parameterJson;
            if (fieldConfig && fieldConfig.riskConfig) {
                mitCats[riskFieldInfo.category] =
                    fieldConfig.riskConfig.mitigationTypes.map(mt => mt.type);
            }
            else {
                mitCats[riskFieldInfo.category] = global;
            }
        }
        return mitCats;
    }
    /** return cleanup rules, if there's a project setting that wins, if there's no rules or it's disabled it returns -1 */
    getCleanupRules() {
        return this.getSettingJSON("htmlCleanup");
    }
}


/***/ }),
/* 123 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MatrixReq: () => (/* binding */ MatrixReq)
/* harmony export */ });
/* harmony import */ var _ItemConfiguration__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(122);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);
/* harmony import */ var _UI_MainTree_MainTree__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(30);
/* harmony import */ var _PluginManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(12);
/* harmony import */ var _PluginManagerDocuments__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(13);
/* harmony import */ var _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(2);
/* harmony import */ var _Tasks__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(119);
/* harmony import */ var _UI_Components__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(16);
/* harmony import */ var _common_businesslogic_ComponentImport__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(35);
/* harmony import */ var _NotificationsBL__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(43);












class MatrixReq {
    constructor(dataSource) {
        this._itemId = ""; //currently selected item id. this should come from URL
        this._needsSave = false; // the current status of the rendered item
        this.lastState = "";
        this.mainApp = true;
        this.itemForm = $("#itemDetails");
        this.printForm = $("#appPrint");
        this.dlgForm = $("#appPopup");
        this.mainTreeLoaded = false;
        this.dbConnection = dataSource;
    }
    // allow to overwrite cache (for JIRA cloud plugin)
    setCache(externalCache) {
        this.dbConnection.setCache(externalCache);
    }
    // store the project of this session
    loadProject(project, item) {
        return new Promise((resolve, reject) => {
            let that = this;
            if (item && item == "null") {
                item = null;
            }
            // reset to avoid ping to non existing item
            this._itemId = "";
            (0,_globals__WEBPACK_IMPORTED_MODULE_1__.setIC)(new _ItemConfiguration__WEBPACK_IMPORTED_MODULE_0__.ItemConfiguration(_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger, _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON));
            // make the database to load the project
            _globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.destroyOldControls();
            _UI_MainTree_MainTree__WEBPACK_IMPORTED_MODULE_3__.NavigationPanel.destroy();
            // this will show the tree and select the item
            // if the user logs in / is logged in
            this.loadTreeAndItem(project, item).done(function (result) {
                let itemToShow = result === null || result === void 0 ? void 0 : result.item;
                // show a logo if there is any
                let logo = _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.matrixBaseUrl + "/static/img/" + _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.matrixProduct + ".png";
                let logoSetting = _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.getSetting("projectLogo");
                if (logoSetting) {
                    if (logoSetting.indexOf("{") !== -1) {
                        var rjs = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.fromString(logoSetting);
                        if (rjs.status === 'ok') {
                            if (rjs.value.fileId) {
                                logo = _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.matrixRestUrl + "/" + project + "/file/" + (rjs.value.fileId);
                            }
                        }
                    }
                    else { // legacy
                        logo = logoSetting;
                    }
                }
                _NotificationsBL__WEBPACK_IMPORTED_MODULE_10__.NotificationsBL.NoticationCache.setNotifications(result.project.todos.filter(function (todo) { return todo.login == _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.getUser(); }));
                $(".brandLogo").attr("src", logo);
                that.updateFavicon(project, false);
                // render the item and the reduced tree
                that.showTree(item, itemToShow);
                // find a place to add a progress
                let loadTreeProgress = $("<div id='treeLoadWait'>").append($("<div>").append(_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.getSpinningWait(" ")));
                $("#projectTree .listContent").after(loadTreeProgress);
                // render the full tree and color some items by executing searches
                window.setTimeout(() => {
                    that.loadTreeWithSearches(item).always(() => {
                        // configure highlighting of links in rich text boxes
                        var cats = _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.getCategories();
                        for (var idx = 0; idx < cats.length; idx++) {
                            addHighlightLink(cats[idx], _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.matrixBaseUrl + "/" + project + "/");
                        }
                        _globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.refreshLinks();
                        loadTreeProgress.remove();
                        resolve();
                    });
                }, 1);
            }).fail(function () {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.hideSuccess();
            });
        });
    }
    loadTree(project) {
        this.dbConnection.setProject(project);
        return this.dbConnection.retrieveTreeAsync();
    }
    // load item and the tree for the item
    loadTreeAndItem(project, item) {
        this.dbConnection.setProject(project);
        return this.dbConnection.retrieveTreeAndItem(item);
    }
    updateFavicon(project, notification) {
        // get the base icon (default or from project setting)
        let iconPath = _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.matrixBaseUrl + "/favicon_medical.ico";
        let logoSetting = _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.getSetting("projectLogo");
        let customPath = MatrixReq.getProjectIcon(logoSetting);
        if (customPath) {
            iconPath = _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.matrixRestUrl + "/" + project + "/file/" + customPath;
        }
        let iconNode = $("link[rel*='icon']");
        iconNode.attr("href", iconPath);
        // if there's neither a notification or a custom path I am done
        if (!notification && customPath) {
            return;
        }
        let canvas = document.createElement('canvas');
        if (canvas.getContext) {
            let img = document.createElement('img');
            img.onload = function () {
                canvas.height = img.height;
                canvas.width = img.width;
                let radius = img.width / 6;
                let boxHeight = img.width / 10;
                let boxIndent = img.width / 10;
                let ctx = canvas.getContext('2d');
                ctx.drawImage(img, 0, 0);
                if (notification) {
                    ctx.fillStyle = _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_6__.UIToolsConstants.CIColors.RedPersimmon.color;
                    ctx.beginPath();
                    ctx.arc(img.width - 2 * radius + 3, radius - 1, radius, 0, 2 * Math.PI);
                    ctx.fill();
                }
                if (!customPath) {
                    // draw a box with project colors
                    let color = _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.getProjectColor(project);
                    ctx.fillStyle = color;
                    ctx.beginPath();
                    ctx.rect(0 + boxIndent, img.height - boxHeight - 1, img.width - 1 - 2 * boxIndent, boxHeight);
                    ctx.fill();
                }
                iconNode.attr("href", canvas.toDataURL('image/png'));
            };
            img.src = iconPath;
        }
    }
    waitForMainTree(callback) {
        if (callback) {
            if (_globals__WEBPACK_IMPORTED_MODULE_1__.app.mainTreeLoaded) {
                callback();
            }
            else {
                document.addEventListener("mainTreeLoaded", () => {
                    callback();
                });
            }
        }
    }
    // load the full tree and colors items with search results if some are defined
    loadTreeWithSearches(item) {
        let that = this;
        const mainTreeLoadedEvent = new Event('mainTreeLoaded');
        let res = $.Deferred();
        that.dbConnection.retrieveTreeAsync().done(function (result) {
            that.colorBySearches(item, 0).done(() => {
                _UI_MainTree_MainTree__WEBPACK_IMPORTED_MODULE_3__.NavigationPanel.render();
                _UI_Components__WEBPACK_IMPORTED_MODULE_8__.NavBar.init();
                _UI_MainTree_MainTree__WEBPACK_IMPORTED_MODULE_3__.NavigationPanel.select(item);
                res.resolve();
                //Raise an event when the tree is loaded
                that.mainTreeLoaded = true;
                document.dispatchEvent(mainTreeLoadedEvent);
                _globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.highlightReferences();
                _NotificationsBL__WEBPACK_IMPORTED_MODULE_10__.NotificationsBL.NoticationCache.setNotifications(result.project.todos.filter(function (todo) { return todo.login == _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.getUser(); }));
            });
        });
        return res;
    }
    colorBySearches(item, idx) {
        let that = this;
        let res = $.Deferred();
        let search = _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.getSearchConfig();
        // Fix failed tests query (MATRIX-3926)
        if (search != undefined && search.searches != undefined) {
            let index = search.searches.findIndex((s => { return s.name == "failed tests" && s.expr == "mrql:'testResult'='error'"; }));
            if (index >= 0) {
                search.searches[index].expr = 'mrql:"test run result"~"error"';
            }
        }
        // no more searches defined: time to return and to render the tree
        if (!search || !search.init || search.init.length <= idx) {
            res.resolve();
            return res;
        }
        // run the next search, color the tree and continue
        _globals__WEBPACK_IMPORTED_MODULE_1__.app.searchAsyncMinimalOutput(search.init[idx].expr).done(function (items) {
            _globals__WEBPACK_IMPORTED_MODULE_1__.app.setStyle(items, search.init[idx].style, search.init[idx].computeFolder);
            that.colorBySearches(item, idx + 1).always(() => {
                res.resolve();
            });
        }).fail(function () {
            res.resolve();
        });
        return res;
    }
    // render the tree
    showTree(item, cached) {
        let that = this;
        // render the selected item, if there is any
        _UI_MainTree_MainTree__WEBPACK_IMPORTED_MODULE_3__.NavigationPanel.render();
        _UI_Components__WEBPACK_IMPORTED_MODULE_8__.NavBar.init();
        if (item) {
            if (this.dbConnection.doesExist(item)) {
                this._itemId = item;
                if (typeof _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.mobileApp !== "undefined") {
                    _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.mobileApp.ShowMobileUI();
                }
                else {
                    _UI_MainTree_MainTree__WEBPACK_IMPORTED_MODULE_3__.NavigationPanel.select(item);
                    this.renderItem(cached);
                }
            }
            else {
                _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.projectStorage.setItem('SessionLastItem', "");
                if (typeof _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.mobileApp !== "undefined") {
                    _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.mobileApp.ShowMobileUI();
                }
                this.getItemAsync(item).done(function (_data) {
                    _globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.renderErrorControl(that.itemForm, "Item " + item + " does not exist anymore", "It was deleted, check the 'CHANGES Dashboard' or 'Deleted Items' if you are interested in when or why it was deleted.");
                }).fail(function () {
                    _globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.renderErrorControl(that.itemForm, "Item " + item + " does not exist", "Incorrect item id.");
                });
            }
        }
    }
    // *********************************************
    // calls from item AND Tree
    // *********************************************
    getTree(subtreeFilter) {
        return this.dbConnection.getTree(subtreeFilter);
    }
    // api get a simple tree structure of item ids
    getSubTree(itemId) {
        let that = this;
        let tree = { itemId: itemId, title: this.getItemTitle(itemId) };
        if (_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.parseRef(itemId).isFolder) {
            tree.children = [];
            $.each(_globals__WEBPACK_IMPORTED_MODULE_1__.app.getChildrenIds(itemId), function (idx, id) {
                tree.children.push(that.getSubTree(id));
            });
            return tree;
        }
        else {
            return tree;
        }
    }
    // *********************************************
    // calls from item
    // *********************************************
    getAuditDetailsAsync(auditId, ignoreErrors) {
        return this.dbConnection.getAuditDetailsAsync(auditId);
    }
    getItemAsync(itemId, version, ignoreErrors, noHistory) {
        let that = this;
        var res = $.Deferred();
        if (typeof version !== 'undefined') {
            this.dbConnection.getVersionAsync(itemId, version, !noHistory).done(function (result) {
                res.resolve(result);
            });
        }
        else {
            this.dbConnection.getItemAsync(itemId, ignoreErrors, !noHistory).done(function (result) {
                that.setHiddenLink(itemId, result.isUnselected);
                res.resolve(result);
            }).fail(function (error) {
                res.reject(error);
            });
        }
        return res;
    }
    /** get the source of an item */
    getImportSource(item) {
        if (!item)
            return null;
        if (!item.crossLinks)
            return null;
        let clones = item.crossLinks.filter(cl => cl.upItem.projectShort == _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.getProject());
        if (clones.length == 0)
            return null;
        if (clones.length != 1) {
            console.log("Warning: more than one import sources");
            console.log(clones);
        }
        // return the clone info
        return clones[0];
    }
    /** return true if item is included */
    isIncluded(item) {
        let source = this.getImportSource(item);
        if (!source) {
            // not from import
            return false;
        }
        return (source.relation == _common_businesslogic_ComponentImport__WEBPACK_IMPORTED_MODULE_9__.EImportMode.Include || source.relation == _common_businesslogic_ComponentImport__WEBPACK_IMPORTED_MODULE_9__.EImportMode.IncludeRoot);
    }
    /** get the source of an item */
    getUsedBy(item) {
        if (!item)
            return null;
        if (!item.crossLinks)
            return null;
        let clones = item.crossLinks.filter(cl => cl.downItem.projectShort == _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.getProject());
        if (clones.length == 0)
            return null;
        // return the clone info
        return clones;
    }
    getNeedlesAsync(searchExpr, up, down, fields, labels, ignoreFilters) {
        return this.dbConnection.getNeedlesAsync(searchExpr, up, down, fields, labels, ignoreFilters);
    }
    getItemProjectAsync(project, itemId, ignoreErrors) {
        let that = this;
        var res = $.Deferred();
        this.dbConnection.getItemProjectAsync(project, itemId, ignoreErrors, true).done(function (result) {
            that.setHiddenLink(itemId, result.isUnselected);
            res.resolve(result);
        }).fail(function (error) {
            res.reject(error);
        });
        return res;
    }
    getProjectItemAsync(project, itemId, version, includeHistory) {
        let that = this;
        var res = $.Deferred();
        if (typeof version !== 'undefined') {
            this.dbConnection.getProjectVersionAsync(project, itemId, version, includeHistory).done(function (result) {
                res.resolve(result);
            });
        }
        else {
            this.dbConnection.getProjectItemAsync(project, itemId, true).done(function (result) {
                res.resolve(result);
            }).fail(function (error) {
                res.reject(error);
            });
        }
        return res;
    }
    getProjectCatFields(project) {
        var res = $.Deferred();
        this.dbConnection.getProjectCat(project).done(function (result) {
            let found = false;
            res.resolve(result.categoryList.categoryExtended);
        }).fail(function (error) {
            res.reject(error);
        });
        return res;
    }
    getItemFromTree(itemId) {
        return this.dbConnection.getItemFromTree(itemId);
    }
    // get children Ids
    getChildrenIds(parentId) {
        return this.dbConnection.getChildrenIds(parentId);
    }
    getChildrenIdsRec(itemId) {
        let that = this;
        if (_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.parseRef(itemId).isFolder) {
            let treeFlat = [];
            $.each(_globals__WEBPACK_IMPORTED_MODULE_1__.app.getChildrenIds(itemId), function (idx, id) {
                treeFlat = treeFlat.concat(that.getChildrenIdsRec(id));
            });
            return treeFlat;
        }
        else {
            return [itemId];
        }
    }
    getParentId(itemId) {
        return this.dbConnection.getParentId(itemId);
    }
    // return a list of item, parent of item, parent of parent of item...
    getCategoryBreadcrumbs(category) {
        return this.dbConnection.getCategoryBreadcrumbs(category);
    }
    // return a list of item, parent of item, parent of parent of item...
    getBreadcrumbs(itemId) {
        return this.dbConnection.getBreadcrumbs(itemId);
    }
    /* set style of item / folder
        computeFolder: 0=look (folder style from lookup)
        computeFolder: 1=all (all children in folder have style: folder has style)
        computeFolder: 2=any (any of the children has style: folder has style) */
    setStyle(itemIds, style, computeFolder) {
        return this.dbConnection.setStyle(itemIds, style, computeFolder);
    }
    getRootOfType(category) {
        return this.dbConnection.getRootOfType(category);
    }
    startReportAsync(itemId, reportOptions) {
        return this.dbConnection.startReportAsync(itemId, reportOptions);
    }
    canLaunchReport() {
        var res = $.Deferred();
        this.dbConnection.canLaunchReport().done(function (result) {
            res.resolve(result.runningJobs <= result.maxRunningJobs);
        }).fail(function () {
            res.resolve(false);
        });
        return res;
    }
    startCreateDocumentAsync(itemId, reportOptions) {
        return this.dbConnection.startCreateDocumentAsync(itemId, reportOptions);
    }
    getReportDetails(jobId) {
        return this.dbConnection.getReportDetails(jobId);
    }
    compareHTML(compareParams) {
        return this.dbConnection.compareHTML(compareParams);
    }
    isFolder(itemId) {
        return this.dbConnection.isFolder(itemId);
    }
    getItemTitle(itemId, display) {
        let title = this.dbConnection.getItemTitle(itemId);
        return display ? _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.lt.forUI(title, 0) : title;
    }
    download(jobId, file, param) {
        this.dbConnection.download(jobId, file, param);
    }
    downloadFromUrl(url, param) {
        this.dbConnection.downloadFromUrl(url, param);
    }
    downloadInMemory(jobId, file, dataType) {
        return this.dbConnection.downloadInMemory(jobId, file, dataType);
    }
    downloadInMemoryFromUrl(url) {
        return this.dbConnection.downloadInMemoryFromUrl(url);
    }
    searchAsync(term, filter, ignoreFilters, fieldList, crossProject, labels, down, up, treeOrder) {
        return this.dbConnection.searchAsync(term, filter, ignoreFilters, fieldList, crossProject, labels, down, up, treeOrder);
    }
    searchAsyncMinimalOutput(term, filter, ignoreFilters, crossProject) {
        return this.dbConnection.searchAsyncMinimalOutput(term, filter, ignoreFilters, crossProject);
    }
    updateItemInDBAsync(itemJson, auditAction, requireVersion) {
        let that = this;
        var res = $.Deferred();
        _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.getCommentAsync().done(function (comment) {
            that.dbConnection.updateItemAsync(itemJson, comment, auditAction, requireVersion).done(function (result) {
                _UI_MainTree_MainTree__WEBPACK_IMPORTED_MODULE_3__.NavigationPanel.update(itemJson);
                res.resolve(result);
            }).fail(function () {
                // MATRIX-3815
                res.reject("saving failed");
            });
        }).fail(function () {
            // rien a fair
            res.reject("user cancelled");
        });
        return res;
    }
    async getItemFromDBAsync(itemId) {
        let type = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.parseRef(itemId).type;
        if (!type || _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.getCategories(true).indexOf(type) == -1) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.error(`This is not possibly an item in this project: "${itemId}"!`);
            return;
        }
        return await this.getItemAsync(itemId);
    }
    async getFieldFromDBAsync(itemId, fieldName) {
        let type = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.parseRef(itemId).type;
        if (!type || _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.getCategories(true).indexOf(type) == -1) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.error(`This is not possibly an item in this project: "${itemId}"!`);
            return;
        }
        let fieldId = _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.getFieldId(type, fieldName);
        if (!fieldId) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.error(`"${fieldName}" is not a field of this item "${itemId}"!`);
            return;
        }
        let item = await this.getItemAsync(itemId);
        return item[fieldId];
    }
    async setFieldInDBAsync(itemId, fieldName, value) {
        return this.setFieldsInDBAsync(itemId, [{ fieldName: fieldName, value: value }]);
    }
    async setFieldsInDBAsync(itemId, data) {
        let res = $.Deferred();
        let update = {
            id: itemId,
            onlyThoseFields: 1,
            onlyThoseLabels: 1
        };
        let type = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.parseRef(itemId).type;
        if (!type) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.error(`This is not possibly an item in this project: "${itemId}"!`);
            res.reject();
            return res;
        }
        for (let s of data) {
            let fieldId = _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.getFieldId(type, s.fieldName);
            if (!fieldId) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.error(`"${s.fieldName}" is not a field of this item "${itemId}"!`);
                res.reject();
                return res;
            }
            update["fx" + fieldId] = s.value;
        }
        return _globals__WEBPACK_IMPORTED_MODULE_1__.app.updateItemInDBAsync(update, "edit");
    }
    createItemOfTypeAsync(category, itemJson, actions, parentId, dontFailOnCleanup) {
        let that = this;
        var res = $.Deferred();
        itemJson.type = category;
        _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.getCommentAsync().done(function (comment) {
            that.dbConnection.createItemAsync(itemJson, comment, actions, parentId, dontFailOnCleanup).done(function (result) {
                // verify if new item needs to be filtered in tree
                if (_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.CreateNewLabelTools().isFiltered(category, itemJson.labels)) {
                    that.dbConnection.setHiddenLink(result.item.id, 1);
                }
                // show it in tree
                that.insertInTree(result);
                res.resolve(result);
            });
        }).fail(function () {
            // rien a fair
            res.reject("user cancelled");
        });
        return res;
    }
    restoreItemAsync(itemId, title, version) {
        let that = this;
        var res = $.Deferred();
        _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.getCommentAsync().done(function (comment) {
            that.dbConnection.restoreItemAsync(itemId, title, version, comment).done(function (result) {
                if (result) {
                    var itemJson = {
                        id: itemId,
                        title: title,
                        type: _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.parseRef(itemId).type
                    };
                    var newItem = {
                        parent: result.response.newParent,
                        position: result.response.newOrder,
                        item: itemJson
                    };
                    if (result.version) {
                        _UI_MainTree_MainTree__WEBPACK_IMPORTED_MODULE_3__.NavigationPanel.update(itemJson);
                        that.renderItem();
                    }
                    else {
                        that.insertInTree(newItem);
                    }
                }
                res.resolve(result);
            });
        }).fail(function () {
            // rien a fair
            res.reject();
        });
        return res;
    }
    deleteItem(itemId) {
        let res = $.Deferred();
        let that = this;
        if (this.dbConnection.hasChildren(itemId)) {
            // MATRIX-920 Allow to delete non-empty folders
            this.verifyNoLockedItems(itemId).done(function () {
                window.setTimeout(function () {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showConfirm(7, { title: "The folder is not empty! <b>Delete anyway?</b>", ok: "Delete" }, function () {
                        _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.getCommentAsync().done(function (comment) {
                            that.dbConnection.deleteItemAsync(itemId, comment, true).done(function (parent) {
                                that.removedFromTree(itemId, parent);
                                res.resolve();
                            }).fail(function () {
                                res.reject();
                            });
                        }).fail(function () {
                            res.reject();
                            // rien a fair
                        });
                    }, function () {
                        res.reject();
                    });
                }, 1000);
            }).fail(function () {
                res.reject();
            });
            return res;
        }
        if (_globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.lastMainItemForm && this._needsSave) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Item was modifed.", "Save item first or cancel changes.");
            res.reject();
            return res;
        }
        _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.getCommentAsync().done(function (comment) {
            that.dbConnection.deleteItemAsync(itemId, comment, false).done(function (parent) {
                that.removedFromTree(itemId, parent);
                res.resolve();
            }).fail(function () {
                res.reject();
            });
        }).fail(function () {
            res.reject();
        });
        return res;
    }
    verifyNoLockedItems(folderId) {
        let res = $.Deferred();
        // check if there are any locks
        let ll = _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.getLabelLockConfig();
        if (!ll || !ll.locks || ll.locks.length == 0) {
            res.resolve();
            return res;
        }
        // create a list of locking labels
        let locks = ll.locks.map(function (lock) { return lock.label; });
        this.getNeedlesAsync("folderm=" + folderId, false, false, "", true, true).done(function (results) {
            let itemsWithLocks = [];
            $.each(results, function (idx, result) {
                if (result.labels.filter(function (label) { return locks.indexOf(label) != -1; }).length > 0) {
                    itemsWithLocks.push(result.id);
                }
            });
            if (itemsWithLocks.length) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Deleted failed", "Some of the items are locked. Please unlock before deleting. Item(s) with locks: " + itemsWithLocks.join(","));
                res.reject();
            }
            else {
                res.resolve();
            }
        }).fail(function () {
            res.reject();
        });
        return res;
    }
    uploadFileProjectAsync(file, progress) {
        return this.dbConnection.uploadFileProjectAsync(file, progress);
    }
    fetchFileAsync(url, progress) {
        return this.dbConnection.fetchFileAsync(url, progress);
    }
    resizeItem(force) {
        if (_globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.lastMainItemForm) {
            _globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.lastMainItemForm.resizeItem(force);
        }
    }
    itemChanged(needsSave) {
        this._needsSave = needsSave;
        this.resizeItem();
        _globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.updateMainUI();
    }
    // this is called after an item has been reloaded and the rendering must be updated
    updateItem(newItem) {
        if (_globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.lastMainItemForm) {
            _globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.lastMainItemForm.updateItem(newItem);
        }
    }
    // sets a value of a field, the field must exist and have a setValue function
    setFieldValue(fieldId, newValue) {
        _globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.lastMainItemForm.setFieldValue(fieldId, newValue);
    }
    // get value from current UI
    async getFieldValueAsync(fieldId) {
        return await _globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.lastMainItemForm.getFieldValue(fieldId);
    }
    async getCurrentTitle() {
        return _globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.lastMainItemForm.getCurrentTitle();
    }
    isConfigApp() {
        return false;
    }
    addDownLinkAsync(fromId, toId) {
        let that = this;
        var res = $.Deferred();
        _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.getCommentAsync().done(function (comment) {
            that.dbConnection.addDownLinkAsync(fromId, toId, comment).done(function () {
                that.refreshUIAsync(fromId, toId);
                res.resolve();
            }).fail(function (jqxhr, textStatus, error) {
                if (jqxhr.responseText.indexOf("This link already exists") > -1) {
                    // not really a failure so ignore
                    res.resolve();
                }
                else {
                    res.reject(jqxhr, textStatus, error);
                }
            });
        }).fail(function () {
            res.reject("user cancelled");
        });
        return res;
    }
    removeDownLinkAsync(fromId, toId) {
        let that = this;
        var res = $.Deferred();
        _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.getCommentAsync().done(function (comment) {
            that.dbConnection.removeDownLinkAsync(fromId, toId, comment).done(function () {
                that.refreshUIAsync(fromId, toId);
                res.resolve();
                /*
                WorkflowEngine.applyCommentAsync(fromId, "removedownlink|" + toId, comment);
                */
            }).fail(function () {
                res.reject();
            });
        }).fail(function () {
            // rien a fair
            res.reject("user cancelled");
        });
        return res;
    }
    setSettingJSON(key, valueJSON) {
        return this.dbConnection.setSettingJSON(key, valueJSON);
    }
    readSettingJSONAsync(key, otherProject, noRetry) {
        return this.dbConnection.readSettingJSONAsync(key, otherProject, noRetry);
    }
    setSettingCustomerJSON(key, valueJSON) {
        return this.dbConnection.setSettingCustomerJSON(key, valueJSON);
    }
    readSettingCustomerJSONAsync(key) {
        return this.dbConnection.readSettingCustomerJSONAsync(key);
    }
    // *********************************************
    // manage references either from up to 1.6 category params
    // or 1.6 and later json setting
    //
    //
    /*  "rules": [
     {"category": "MREQ",
     "down_rules": [
     {
     "rule":"must_have",
     "any_of": [ "FREQ", "TREQ" ]
     },
     {
     "rule":"can_have",
     "any_of": [ "UC" ]
     },
     {
     "rule":"can_have",
     "any_of": [ "TC" ]
     }]
     */
    // *********************************************
    getMissingUpLinks(item) {
        var upMissing = [];
        var ulTypes = _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.getLinkTypes(item.type, false, true);
        for (var ulidx = 0; ulidx < ulTypes.length; ulidx++) {
            var missing = true;
            for (var idx = 0; idx < item.upLinks.length; idx++) {
                if (item.upLinks[idx].to.indexOf(ulTypes[ulidx] + "-") === 0) {
                    missing = false;
                }
            }
            if (missing) {
                upMissing.push(ulTypes[ulidx]);
            }
        }
        return upMissing;
    }
    // check is a required uplink is missing
    isUpLinkMissing(item) {
        var result = this.evaluateTraceRule(item, false);
        if (result) {
            return !result.valid;
        }
        return this.getMissingUpLinks(item).length > 0;
    }
    getMissingDownLinks(item) {
        var result = this.evaluateTraceRule(item, true);
        if (result) {
            return result.missingMustHaveCategories;
        }
        var downMissing = [];
        var dlTypes = _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.getDownLinkTypes(item.type, true);
        for (var dlidx = 0; dlidx < dlTypes.length; dlidx++) {
            var missing = true;
            for (var idx = 0; idx < item.downLinks.length; idx++) {
                if (item.downLinks[idx].to.indexOf(dlTypes[dlidx] + "-") === 0) {
                    missing = false;
                }
            }
            if (missing) {
                downMissing.push(dlTypes[dlidx]);
            }
        }
        return downMissing;
    }
    // return a list of required and optional downlinks
    getLinkCategories(item, ctrlParameter) {
        var result = this.evaluateTraceRule(item, true);
        if (result) {
            var resultLinks = [];
            var links = [];
            $.each(result.mustHaveCategories, function (catIdx, cat) {
                if (links.indexOf(cat) === -1) {
                    links.push(cat);
                    resultLinks.push({
                        name: _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.getCategoryLabel(cat),
                        required: true,
                        type: cat
                    });
                }
            });
            $.each(result.canHaveCategories, function (catIdx, cat) {
                if (links.indexOf(cat) === -1) {
                    links.push(cat);
                    resultLinks.push({
                        name: _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.getCategoryLabel(cat),
                        required: false,
                        type: cat
                    });
                }
            });
            return resultLinks;
        }
        // legacy
        return ctrlParameter.parameter.linkTypes ? ctrlParameter.parameter.linkTypes : [];
    }
    isDownLinkMissing(item) {
        var result = this.evaluateTraceRule(item, true);
        if (result) {
            return !result.valid;
        }
        return this.getMissingDownLinks(item).length > 0;
    }
    // returns true if any down or uplink is outdated
    isAnyLinkOutdated(item) {
        var resultDown = this.evaluateTraceRule(item, true);
        if (resultDown) {
            var resultUp = this.evaluateTraceRule(item, false);
            return resultDown.outdatedReferences.length + resultUp.outdatedReferences.length > 0;
        }
        var itemDate = new Date(item.modDate);
        for (var idx = 0; idx < item.downLinks.length; idx++) {
            var refDate = new Date(item.downLinks[idx].modDate);
            if (itemDate > refDate) {
                return true;
            }
        }
        for (var idx = 0; idx < item.upLinks.length; idx++) {
            var refDate = new Date(item.upLinks[idx].modDate);
            if (itemDate < refDate) {
                return true;
            }
        }
        return false;
    }
    hasLinks(item) {
        var result = this.evaluateTraceRule(item, false);
        if (result) {
            if (result.canHaveCategories.length > 0)
                return true;
            if (result.mustHaveCategories.length > 0)
                return true;
            result = this.evaluateTraceRule(item, true);
            if (result.canHaveCategories.length > 0)
                return true;
            if (result.mustHaveCategories.length > 0)
                return true;
            // todo ... maybe manage in
            if (item.type === "XTC" || (_PluginManagerDocuments__WEBPACK_IMPORTED_MODULE_5__.mDHF && _PluginManagerDocuments__WEBPACK_IMPORTED_MODULE_5__.mDHF.isSignedType(item.type))) {
                // special case
                return true;
            }
            return false;
        }
        if (_globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.getDownLinkTypes(item.type, false).length > 0) {
            return true;
        }
        if (_globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.getDownLinkTypes(item.type, true).length > 0) {
            return true;
        }
        if (_globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.getUpLinkTypes(item.type, false).length > 0) {
            return true;
        }
        if (_globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.getUpLinkTypes(item.type, true).length > 0) {
            return true;
        }
        if (item.type === "XTC" || (_PluginManagerDocuments__WEBPACK_IMPORTED_MODULE_5__.mDHF && _PluginManagerDocuments__WEBPACK_IMPORTED_MODULE_5__.mDHF.isSignedType(item.type))) {
            // special case
            return true;
        }
        return false;
    }
    isHiddenLink(itemId) {
        return this.dbConnection.isHiddenLink(itemId);
    }
    setHiddenLink(itemId, hidden) {
        if (_globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.getTimeWarp())
            return;
        this.dbConnection.setHiddenLink(itemId, hidden);
        _UI_MainTree_MainTree__WEBPACK_IMPORTED_MODULE_3__.NavigationPanel.updateItemIsUnselected(itemId, hidden !== 0);
    }
    // *********************************************
    // calls from outer UI
    // *********************************************
    saveAsync(sendUnEdit) {
        let that = this;
        var res = $.Deferred();
        if (_globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.lastMainItemForm) {
            _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.updateWatchItemVersion(_globals__WEBPACK_IMPORTED_MODULE_1__.app.getCurrentItemId(), -1);
            _globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.lastMainItemForm.saveAsync(null, null).then(function (result) {
                _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.updateWatchItemVersion(result.id, result.maxVersion);
                if (sendUnEdit) {
                    _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.pushMessages.unEditItem();
                }
                that.setHiddenLink(result.id, result.isUnselected);
                // that will send a new watching message after the unEdit above
                that.renderItem(result);
                res.resolve();
            }).catch(function () {
                res.reject();
            });
        }
        else {
            res.resolve();
        }
        return res;
    }
    // this is brutal, it just cancels all edits and set's the item to readonly
    // happens at start of download
    forceReadonly(itemId) {
        if (_globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.lastMainItemForm) {
            this._needsSave = false;
            _globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.forceReadonly(itemId);
        }
    }
    cancel() {
        if (_globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.lastMainItemForm) {
            this.renderItem(null);
        }
    }
    // this is called if two users watches the same item, one edits and saves it...
    someOneElseChanged() {
        let that = this;
        if (this.waitingForEditRights) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.closeConfirmSpinningWait();
        }
        if (_globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.lastMainItemForm) {
            if (this.needsSave()) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showConfirm(-1, { title: "Someone just changed the item.", ok: "Update to latest", nok: "Ignore and merge later" }, () => {
                    // reload the item
                    that.renderItem(null);
                }, () => {
                    // do nothing... user will pay the price later
                });
            }
            else {
                // the item changed, time to reload the new version
                this.renderItem(null);
            }
        }
    }
    someOneIsChangingTheItem() {
        let that = this;
        if (_globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.lastMainItemForm && !this.waitingForEditRights) {
            if (this.needsSave()) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showConfirm(-1, { title: "Someone else is changing this item.", ok: "Update to latest", nok: "Wait and merge" }, () => {
                    // reload the item
                    that.renderItem(null);
                }, () => {
                    that.waitForEditRights();
                });
            }
            else {
                // the item changed, time to reload the new version
                this.renderItem(null);
            }
        }
    }
    waitForEditRights() {
        let that = this;
        this.waitingForEditRights = true;
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showConfirm(-1, { title: _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.getSpinningWait("Waiting for other user to stop editing").html(),
            ok: "Cancel" }, () => {
            // reload the item
            that.waitingForEditRights = false;
            that.renderItem(null);
        }, () => { });
    }
    // someone else started to change
    someOneElseIsChanging(watcherInfo) {
        let that = this;
        if (_globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.lastMainItemForm) {
            if (this.needsSave()) {
                // this should not happen
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showConfirm(-1, { title: watcherInfo.editor.user + " started editing the item", ok: "Cancel my Edit", nok: "Edit and merge later" }, () => {
                    // reload the item
                    that.updateItemDisplay(watcherInfo);
                }, () => {
                    // do nothing... user will pay the price later
                });
            }
            else {
                // someone else started to edit the item, make it readonly for this user to avoid conflicts
                this.updateItemDisplay(watcherInfo);
            }
        }
    }
    someOneElseWasChanging(watcherInfo) {
        let that = this;
        if (_globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.lastMainItemForm) {
            if (this.needsSave()) {
                if (that.freezeDuringSave) {
                    // this is a race condition we can live with
                    return;
                }
                // this should not happen
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showConfirm(-1, { title: " Someone else changed the item in the meantime. You won't be able to save!", ok: "Load updated item", nok: "Do not yet update" }, () => {
                    // reload the item
                    that.cancel();
                }, () => {
                    // do nothing... user will pay the price later
                });
            }
            else {
                // someone else started to edit the item, make it readonly for this user to avoid conflicts
                this.updateItemDisplay(watcherInfo);
            }
        }
    }
    // someone else stopped editing the same item, but apparently canceled the edit, or session timed out
    someOneElseStoppedEditing(watcherInfo, previousWatcherInfo) {
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("info", previousWatcherInfo.editor.user + " stopped editing");
        if (_globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.lastMainItemForm) {
            if (this.needsSave()) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("info", "user was also editing nothing I can do");
                // just let the user do it thing it might cause issues to save later
                // but nothing we can do
            }
            else {
                // reload the latest version of the item, and make sure it writeable (if user has write access)
                // this is not really necessary, since the item should not have changed, so we could also just switch the user from
                // readonly to write (if needed)
                this.updateItemDisplay(watcherInfo);
            }
        }
    }
    // just update the list of items
    updateItemViewers(watcherInfo) {
        if (_globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.lastMainItemForm) {
            this.updateItemDisplay(watcherInfo);
        }
    }
    updateItemDisplay(watcherInfo) {
        _globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.updateControl(watcherInfo, this.itemChanged.bind(this));
    }
    getVersion() {
        return $("meta[name='mx-version']").attr('content');
    }
    getVersionQualifier() {
        return $("meta[name='mx-version-qualifier']").attr('content');
    }
    getNeedsSave() {
        return this._needsSave;
    }
    getType(itemId) {
        return this.dbConnection.getType(itemId);
    }
    getAvailableReportsAsync() {
        return this.dbConnection.getAvailableReportsAsync();
    }
    getDeletedItemsAsync(insertInList, progress, deleteLog, startAt) {
        let that = this;
        var res = $.Deferred();
        if (typeof startAt === 'undefined') {
            startAt = 0;
        }
        if (typeof deleteLog === 'undefined') {
            deleteLog = [];
        }
        var cats = _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.getCategories();
        this.dbConnection.getAuditLogAsync(startAt, 1000, { deleteOnly: "yes" }).done(function (result) {
            progress.apply(that, [(startAt + result.audit.length) * 100 / result.totalResults]);
            if (result) {
                for (var idx = 0; idx < result.audit.length; idx++) {
                    if (result.audit[idx].action === "delete" && result.audit[idx].itemBefore) {
                        var ir = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.parseRef(result.audit[idx].itemBefore.itemOrFolderRef);
                        var itemId = ir.id;
                        var version = ir.version;
                        if (!ir.isFolder && cats.indexOf(ir.type) !== -1) {
                            // verify that the id is not in the current project (as it was undeleted) or already in the list of deleted objects
                            var found = false;
                            for (var di = 0; di < deleteLog.length; di++) {
                                if (deleteLog[di].id == itemId) {
                                    found = true;
                                }
                            }
                            found = found || that.dbConnection.doesExist(itemId);
                            if (!found) {
                                var item = {
                                    action: 'delete',
                                    id: itemId,
                                    title: result.audit[idx].itemBefore.title,
                                    user: result.audit[idx].userLogin,
                                    date: result.audit[idx].dateTime,
                                    dateUserFormat: result.audit[idx].dateTimeUserFormat,
                                    comment: result.audit[idx].reason,
                                    version: version,
                                    fullVersion: result.audit[idx].itemBefore.itemOrFolderRef,
                                    auditId: result.audit[idx].auditId,
                                    tags: result.audit[idx].tags
                                };
                                insertInList.apply(that, [item]);
                                deleteLog.push(item);
                            }
                        }
                    }
                    if (result.audit[idx].action === "merge" && result.audit[idx].itemsDeletedByMerge) {
                        for (let idbm of result.audit[idx].itemsDeletedByMerge) {
                            var ir = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.parseRef(idbm.ref);
                            var itemId = ir.id;
                            var version = ir.version;
                            if (!ir.isFolder && cats.indexOf(ir.type) !== -1) {
                                // verify that the id is not in the current project (as it was undeleted) or already in the list of deleted objects
                                var found = false;
                                for (var di = 0; di < deleteLog.length; di++) {
                                    if (deleteLog[di].id == itemId) {
                                        found = true;
                                    }
                                }
                                found = found || that.dbConnection.doesExist(itemId);
                                if (!found) {
                                    var item = {
                                        action: 'delete',
                                        id: itemId,
                                        title: idbm.title,
                                        user: result.audit[idx].userLogin,
                                        date: result.audit[idx].dateTime,
                                        dateUserFormat: result.audit[idx].dateTimeUserFormat,
                                        comment: result.audit[idx].reason,
                                        version: version,
                                        fullVersion: idbm.ref,
                                        auditId: result.audit[idx].auditId,
                                        tags: result.audit[idx].tags
                                    };
                                    insertInList.apply(that, [item]);
                                    deleteLog.push(item);
                                }
                            }
                        }
                    }
                }
                if (result.totalResults > startAt + result.audit.length) {
                    that.getDeletedItemsAsync(insertInList, progress, deleteLog, startAt + result.audit.length).done(function (recResult) {
                        res.resolve();
                    });
                }
                else {
                    res.resolve();
                }
            }
            else {
                res.resolve();
            }
        });
        return res;
    }
    getActivityAsync(insertInList, startAt, count, auditIdMin, auditIdMax) {
        let that = this;
        var res = $.Deferred();
        var cats = _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.getCategories();
        var param = {};
        if (auditIdMin) {
            param.auditIdMin = auditIdMin;
        }
        if (auditIdMax) {
            param.auditIdMax = auditIdMax;
        }
        param.include = _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.historyFilter;
        this.dbConnection.getAuditLogAsync(startAt, count, param).done(function (result) {
            for (var idx = 0; idx < result.audit.length; idx++) {
                var itemDetails = null;
                var addedLink = null;
                var removedLink = null;
                switch (result.audit[idx].action) {
                    case "delete":
                        if (result.audit[idx].entity === "item_link") {
                            removedLink = result.audit[idx].itemDown.itemOrFolderRef;
                        }
                        else {
                            itemDetails = result.audit[idx].itemBefore;
                        }
                        break;
                    case "add":
                        if (result.audit[idx].entity === "item_link") {
                            if (!result.audit[idx].itemDown) {
                                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("warning", "add item_link but no details");
                                break;
                            }
                            addedLink = result.audit[idx].itemDown.itemOrFolderRef;
                        }
                        else {
                            itemDetails = result.audit[idx].itemAfter;
                        }
                        break;
                    case "undelete":
                    case "edit":
                    case "reviewed": // reviewed is used by review labels
                    case "execute":
                    case "signature":
                    case "touch":
                        itemDetails = result.audit[idx].itemAfter;
                        break;
                    case "report":
                        // we simulate the ItemAfter object for print jobs, that is not generated by the API anymore
                        itemDetails = new Object();
                        itemDetails['job'] = result.audit[idx].reportJobId;
                        itemDetails['itemOrFolderRef'] = result.audit[idx].reportRef + "-v0";
                        itemDetails['title'] = result.audit[idx].reportTitle;
                        break;
                    case "move":
                        // drag and drop of item
                        // I don't get the before / after so I just ignore it
                        break;
                    case "merge":
                        // branch was merged
                        if (result.audit[idx].entity == "begin_merge") {
                            // that's a "fake" change just before the merge
                        }
                        else {
                            let merge = {
                                action: result.audit[idx].action,
                                id: null,
                                title: null,
                                user: result.audit[idx].userLogin,
                                date: result.audit[idx].dateTime,
                                dateUserFormat: result.audit[idx].dateTimeUserFormat,
                                comment: result.audit[idx].reason,
                                version: null,
                                fullVersion: null,
                                job: null,
                                reason: result.audit[idx].reason,
                                tags: result.audit[idx].tags,
                                auditId: result.audit[idx].auditId
                            };
                            insertInList.apply(that, [merge]);
                        }
                        break;
                    case "report udpate":
                        // this is a change to a doc's structure: changed in 1.9 to use just normal edit
                        //we just ignore it
                        break;
                    case "udpate":
                        // this is a change to a project setting
                        //we just ignore it
                        break;
                    default:
                        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("warning", "ACTIVITY: " + result.audit[idx].action);
                }
                if (itemDetails) {
                    let ir = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.parseRef(itemDetails.itemOrFolderRef);
                    if (cats.indexOf(ir.type) !== -1) {
                        let item = {
                            action: result.audit[idx].action,
                            id: ir.id,
                            title: itemDetails.title,
                            user: result.audit[idx].userLogin,
                            date: result.audit[idx].dateTime,
                            dateUserFormat: result.audit[idx].dateTimeUserFormat,
                            comment: result.audit[idx].reason,
                            version: ir.version,
                            fullVersion: itemDetails.itemOrFolderRef,
                            job: itemDetails['job'],
                            reason: result.audit[idx].reason,
                            tags: result.audit[idx].tags,
                            auditId: result.audit[idx].auditId
                        };
                        insertInList.apply(that, [item]);
                    }
                }
                else if (addedLink) {
                    insertInList.apply(that, [null, null, null, {
                            added: true,
                            fromId: result.audit[idx].itemUp.itemOrFolderRef,
                            toId: addedLink,
                            date: result.audit[idx].dateTime,
                            dateUserFormat: result.audit[idx].dateTimeUserFormat,
                            comment: result.audit[idx].reason,
                            user: result.audit[idx].userLogin
                        }]);
                }
                else if (removedLink) {
                    insertInList.apply(that, [null, null, null, {
                            added: false,
                            fromId: result.audit[idx].itemUp.itemOrFolderRef,
                            toId: removedLink,
                            date: result.audit[idx].dateTime,
                            dateUserFormat: result.audit[idx].dateTimeUserFormat,
                            comment: result.audit[idx].reason,
                            user: result.audit[idx].userLogin
                        }]);
                }
            }
            res.resolve(result.totalResults);
        });
        return res;
    }
    ;
    // *********************************************
    // calls from tree
    // *********************************************
    canNavigateAwayAsync() {
        let that = this;
        var res = $.Deferred();
        if (_globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.lastMainItemForm && this._needsSave) {
            // get errors is comment needs ticked id
            var commentNeedsTicket = [];
            commentNeedsTicket = _Tasks__WEBPACK_IMPORTED_MODULE_7__.mTasks ? _Tasks__WEBPACK_IMPORTED_MODULE_7__.mTasks.evaluateTaskIds(_globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.getComment()) : [];
            if (localStorage.getItem('idAutoCommit') === 'true' &&
                !(this.commentRequired() && _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.getComment() == "") && commentNeedsTicket.length === 0) {
                that.freezeDuringSave = true;
                _globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.lastMainItemForm.saveAsync(null, null).then(function (result) {
                    that.setHiddenLink(result.id, result.isUnselected);
                    that._needsSave = false;
                    that.freezeDuringSave = false;
                    res.resolve(); // no problem, changes were saved automatically
                }).catch(function (error) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Save failed!", error);
                    res.reject();
                    that.freezeDuringSave = false;
                });
            }
            else {
                if (localStorage.getItem('idAutoCommit') === 'true') {
                    if (commentNeedsTicket.length > 0) {
                        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("You need to save first! Enter a session comment with a ticket id", commentNeedsTicket.join(" "));
                    }
                    else {
                        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("You need to save first!", "Enter a session comment to use autosave");
                    }
                }
                else {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("You need to save first!", "Tip: enable autosave");
                }
                res.reject();
            }
        }
        else {
            res.resolve(); // no changes -> no problem
        }
        return res;
    }
    ;
    treeSelectionChangeAsync(newItemId) {
        let that = this;
        var res = $.Deferred();
        if (this.freezeDuringSave) {
            // we are saving... just ignore the click
            res.reject();
            return res;
        }
        this.canNavigateAwayAsync().done(function () {
            that._itemId = newItemId;
            that.renderItem();
            that._needsSave = false;
            // select in tree but do not trigger a reload
            _UI_MainTree_MainTree__WEBPACK_IMPORTED_MODULE_3__.NavigationPanel.select(newItemId);
            // Automatically switch to item when mobileLayout
            let mobileLayout = localStorage.getItem("mobileLayout");
            if (mobileLayout && mobileLayout != "" && that._itemId.indexOf("F-") != 0) {
                localStorage.setItem("mobileLayout", "0");
                window.applyResponsiveView();
            }
            res.resolve();
        }).fail(function () {
            // select in tree but do not trigger a reload
            window.setTimeout(function () {
                _UI_MainTree_MainTree__WEBPACK_IMPORTED_MODULE_3__.NavigationPanel.select(that.getCurrentItemId());
            }, 1);
            res.reject();
        });
        return res;
    }
    ;
    moveItemsAsync(itemIds, newFolder, newPosition, useComment) {
        let that = this;
        var res = $.Deferred();
        if (useComment) {
            that.dbConnection.moveItemsAsync(itemIds, newFolder, newPosition, useComment).done(function (result) {
                that.updateMaxVersion(itemIds).always(function () {
                    res.resolve();
                });
            }).fail(function () {
                res.reject();
            });
        }
        else {
            _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.getCommentAsync().done(function (comment) {
                that.dbConnection.moveItemsAsync(itemIds, newFolder, newPosition, comment).done(function (result) {
                    that.updateMaxVersion(itemIds).always(function () {
                        res.resolve();
                    });
                }).fail(function () {
                    res.reject();
                });
            }).fail(function () {
                res.reject();
            });
        }
        return res;
    }
    ;
    // MATRIX-3728 e.g. after an item move, the item's history count might be increased
    // let's update it to avoid merge dialog when editing after
    updateMaxVersion(itemId) {
        let res = $.Deferred();
        if (_globals__WEBPACK_IMPORTED_MODULE_1__.app.getCurrentItemId() != itemId) {
            // nothing to do
            res.reject();
            return res;
        }
        _globals__WEBPACK_IMPORTED_MODULE_1__.app.getItemAsync(itemId, undefined, true, true).done(function (updatedItem) {
            _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.updateWatchItemVersion(itemId, updatedItem.maxVersion);
            res.resolve();
        }).fail(function () {
            // nothing i wan't to do...
            res.reject();
        });
        return res;
    }
    // *********************************************
    // calls from database to update tree or item
    // *********************************************
    removedFromTree(itemId, parentId) {
        // called after an item has been deleted
        // make sure trees get informed (and remove it)
        _UI_MainTree_MainTree__WEBPACK_IMPORTED_MODULE_3__.NavigationPanel.remove(itemId);
        // select the parent
        if (this._itemId === itemId) {
            this._itemId = parentId;
            this.treeSelectionChangeAsync(this._itemId).done(function () {
            }).fail(function () {
            });
        }
    }
    insertInTree(newItem) {
        if (newItem.item.children) {
            // 'inherit' folder icon from parent
            newItem.item.icon = this.dbConnection.getIcon(newItem.parent);
        }
        // make sure trees get informed)
        _UI_MainTree_MainTree__WEBPACK_IMPORTED_MODULE_3__.NavigationPanel.insertInTree(newItem);
    }
    // replaces the target, a child inside the target or creates a new child with source
    copyFrom(target, source) {
        if (this.dbConnection.copyFrom(target, source)) {
            // make sure trees get informed
            _UI_MainTree_MainTree__WEBPACK_IMPORTED_MODULE_3__.NavigationPanel.insertUpdateTreeRec(target, source);
        }
    }
    updateCache(newItem) {
        this.dbConnection.updateCache(newItem);
    }
    // *********************************************
    // helper functions
    // *********************************************
    createItemUrl(itemId, crossProject) {
        return _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.matrixBaseUrl + "/" + (crossProject ? crossProject : _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.getProject()) + (itemId ? ("/" + itemId) : "") + window.location.search;
    }
    renderItem(cachedItem) {
        if (!_globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.duringBrowserNavigation && this.lastState !== this._itemId) {
            this.lastState = this._itemId;
            window.history.pushState(null, null, this.createItemUrl(this._itemId));
        }
        _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.projectStorage.setItem('SessionLastItem', this._itemId);
        var folderType = this.dbConnection.getType(this._itemId);
        _globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.createControl(folderType, this._itemId, this.itemChanged.bind(this), cachedItem);
    }
    print() {
        window.print();
    }
    touchAsync(itemOrFolderId, depth) {
        let that = this;
        var res = $.Deferred();
        _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.getCommentAsync().done(function (comment) {
            that.dbConnection.touchAsync(itemOrFolderId, depth, comment).done(function (result) {
                that.renderItem();
                res.resolve(result);
            }).fail(function (error) {
                res.reject(error);
            });
        }).fail(function (error) {
            res.reject(error);
        });
        return res;
    }
    // saves item, but instead of getting labels from ui, it uses the passed on values
    setLabels(newLabels) {
        let that = this;
        var res = $.Deferred();
        if (_globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.lastMainItemForm) {
            _globals__WEBPACK_IMPORTED_MODULE_1__.matrixApplicationUI.lastMainItemForm.saveAsync(null, "reviewed", newLabels).then(function (result) {
                that.setHiddenLink(result.id, result.isUnselected);
                that.renderItem(result);
                res.resolve();
            }).catch(function () {
                res.reject();
            });
        }
        else {
            res.resolve();
        }
        return res;
    }
    needsSave() {
        return this._needsSave;
    }
    signItemAsync(itemId, password, meaning) {
        let that = this;
        var res = $.Deferred();
        _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.getCommentAsync().done(function (comment) {
            that.dbConnection.signItemAsync(itemId, password, comment, meaning).done(function (result) {
                res.resolve(result);
            }).fail(function (error) {
                res.reject(error);
            });
        }).fail(function (error) {
            res.reject(error);
        });
        return res;
    }
    checkPassword(password) {
        return this.dbConnection.checkPassword(password);
    }
    convertDocAsync(fileNo, targetDocumentFolder, useOriginal) {
        let that = this;
        var res = $.Deferred();
        that.dbConnection.convertDocAsync(fileNo, "import for conversion", targetDocumentFolder, useOriginal).done(function (result) {
            res.resolve(result);
        }).fail(function (error) {
            res.reject(error);
        });
        return res;
    }
    pingCurrentItem() {
        let that = this;
        // do not ping special items like -1,-2,-3 (virtual folders)
        if (this._itemId && this._itemId.indexOf("-") !== 0 && !_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.widgetPluginsContainer.visible) {
            var type = this.dbConnection.getType(this._itemId);
            if (type[0] !== "_") {
                // in case the type is a valid category get this setting (if not it will just return null, which is fine to)
                let concurrentEdit = _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.getCategorySetting(type, "concurrentEdit");
                if (concurrentEdit && concurrentEdit.disabled) {
                    // if concurrent editing is possible (warning the flag is kind of negated) no need to do something
                    return;
                }
                // don't ping special meta folders like _PROJECT
                this.getItemAsync(this._itemId).done(function (item) {
                    that.updateItem(item);
                });
            }
        }
    }
    getCurrentItemId() {
        return this._itemId;
    }
    ;
    /** sessions */
    commitChangeListAsync(changeList) {
        var res = $.Deferred();
        _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.startCommitTransaction();
        this.commitChangeListRec(changeList, 0).done(function () {
            _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.stopCommitTransaction();
            res.resolve();
        }).fail(function (error, stepsDone) {
            _globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.stopCommitTransaction();
            res.reject(error, stepsDone);
        });
        return res;
    }
    /**
     *  product variations
     * */
    isMedical(strict) {
        if (_globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.matrixProduct.toLowerCase() === "medical") {
            return true;
        }
        if (strict) {
            return false;
        }
        return _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.matrixProduct.toLowerCase() === "tachyscp";
    }
    commentRequired() {
        return this.isMedical();
    }
    touchToolAvailable(item) {
        if (item.cloneSource)
            return false;
        return this.canEditItem(item) && this.isMedical();
    }
    auditTrailAvailable() {
        return this.isMedical();
    }
    mailToolAvailable() {
        return this.isMedical();
    }
    postLogin(user) { }
    canDeleteItem(item) {
        if (!_globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.isEditor() || !_globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.canDelete(item.type)) {
            return false;
        }
        if (this.isIncluded(item)) {
            return false;
        }
        return true;
    }
    canViewItem(item) {
        return true;
    }
    canEditItem(item) {
        if (!_globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.isEditor() || !_globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.canEdit(item.type)) {
            return false;
        }
        return true;
    }
    canCreateItemType(category, folder) {
        if (!_globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.isEditor() && !_globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.canCreate(category)) {
            return false;
        }
        return true;
    }
    canDragDrop(category, id) {
        if (!_globals__WEBPACK_IMPORTED_MODULE_1__.matrixSession.isEditor() || !_globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.canMove(category)) {
            return false;
        }
        return true;
    }
    canSeeField(category, field) {
        return true;
    }
    canEditField(category, field) {
        return true;
    }
    refreshUIAsync(fromId, toId) {
        let that = this;
        clearTimeout(this.forceUIRefreshTimer);
        this.forceUIRefreshTimer = window.setTimeout(function () {
            // refresh - but only if an item is still selected...
            if (that._itemId === fromId || (toId && that._itemId === toId)) {
                that.getItemAsync(that._itemId).done(function (result) {
                    that.updateItem(result);
                    _PluginManager__WEBPACK_IMPORTED_MODULE_4__.plugins.updateItem(result);
                });
            }
        }, 1000);
    }
    // return null if there is no project trace_config setting (project before 1.5, not upgraded)
    // if not return an jsob object with all trace information for the item
    evaluateTraceRule(item, checkDownRule) {
        var tc = _globals__WEBPACK_IMPORTED_MODULE_1__.globalMatrix.ItemConfig.getTraceConfig();
        if (!tc) {
            return null;
        }
        var result = {
            valid: true,
            mustHaveCategories: [],
            canHaveCategories: [],
            exstingCategories: [],
            missingMustHaveCategories: [],
            missingCanHaveCategories: [],
            outdatedReferences: []
        };
        if (!item || !item.modDate) {
            // this can happen during item creation... no worries, we cannot create links
            return result;
        }
        var itemDate = new Date(item.modDate);
        // build a list of all existing up or downlink categories
        // and a list of all out dated references
        var existing = checkDownRule ? item.downLinks : item.upLinks;
        if (existing) {
            $.each(existing, function (idx, link) {
                // list of existing categories
                var cat = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.parseRef(link.to).type;
                if (result.exstingCategories.indexOf(cat) === -1) {
                    result.exstingCategories.push(cat);
                }
                // list of outdated links
                var refDate = new Date(link.modDate);
                if ((checkDownRule && itemDate > refDate) || (!checkDownRule && itemDate < refDate)) {
                    result.outdatedReferences.push(link.to);
                }
            });
        }
        // get the up/down rule from project setting
        var updown;
        $.each(tc.rules, function (ruleIdx, rule) {
            if (rule.category === item.type) {
                updown = checkDownRule ? rule.down_rules : rule.up_rules;
            }
        });
        if (!updown) {
            // no rules.. results are complete: no mustHaveCategories, no canHaveCategories, missingCategories
            return result;
        }
        $.each(updown, function (updownIdx, updownRule) {
            if (updownRule.rule === "must_have" && updownRule.any_of) {
                var hasMustHave = false;
                $.each(updownRule.any_of, function (anyIdx, anyOf) {
                    // add to must have
                    if (result.mustHaveCategories.indexOf(anyOf) === -1) {
                        result.mustHaveCategories.push(anyOf);
                    }
                    // check if rule is followed
                    if (result.exstingCategories.indexOf(anyOf) !== -1) {
                        hasMustHave = true;
                    }
                });
                if (!hasMustHave) {
                    // problem: a must have rules is not followed
                    // add categories to missing categoires
                    $.each(updownRule.any_of, function (anyIdx, any) {
                        if (result.missingMustHaveCategories.indexOf(any) === -1) {
                            result.missingMustHaveCategories.push(any);
                        }
                    });
                    result.valid = false;
                }
            }
            if (updownRule.rule === "can_have" && updownRule.any_of) {
                var hasCanHave = false;
                $.each(updownRule.any_of, function (anyIdx, anyOf) {
                    // add to can have
                    if (result.canHaveCategories.indexOf(anyOf) === -1) {
                        result.canHaveCategories.push(anyOf);
                    }
                    // check if rule is followed
                    if (result.exstingCategories.indexOf(anyOf) !== -1) {
                        hasCanHave = true;
                    }
                });
                if (!hasCanHave) {
                    // problem: a must have rules is not followed
                    // add categories to missing categoires
                    $.each(updownRule.any_of, function (anyIdx, anyOf) {
                        if (result.missingCanHaveCategories.indexOf(anyOf) === -1) {
                            result.missingCanHaveCategories.push(anyOf);
                        }
                    });
                }
            }
        });
        return result;
    }
    commitChangeListRec(changeList, todo) {
        let that = this;
        var res = $.Deferred();
        if (todo >= changeList.length) {
            // all done!
            res.resolve(null, todo);
        }
        else {
            if (changeList[todo].action === 'removeLink') {
                this.removeDownLinkAsync(changeList[todo].fromId, changeList[todo].toId).done(function () {
                    that.commitChangeListRec(changeList, todo + 1).done(function () {
                        res.resolve();
                    }).fail(function (error, done) {
                        res.reject(error, done);
                    });
                }).fail(function () {
                    res.reject("Could not remove link from " + changeList[todo].fromId + " to " + changeList[todo].toId, todo);
                });
            }
            else if (changeList[todo].action === 'addLink') {
                this.addDownLinkAsync(changeList[todo].fromId, changeList[todo].toId).done(function () {
                    that.commitChangeListRec(changeList, todo + 1).done(function () {
                        res.resolve();
                    }).fail(function (error, done) {
                        res.reject(error, done);
                    });
                }).fail(function (jqxhr, textStatus, error) {
                    res.reject("Could not add link from " + changeList[todo].fromId + " to " + changeList[todo].toId, todo);
                });
            }
        }
        return res;
    }
    static getProjectIcon(customLogo, alternateValue = "") {
        if (customLogo && customLogo.indexOf("{") !== -1) {
            var rjs = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.fromString(customLogo);
            if (rjs.status === 'ok') {
                return rjs.value.logoId ? rjs.value.logoId : alternateValue;
            }
        }
        return alternateValue;
    }
    static getProjectLogo(customLogo) {
        var rjs = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.fromString(customLogo);
        if (rjs.status === 'ok') {
            return rjs.value.fileId ? rjs.value.fileId : "";
        }
        else {
            return customLogo; // legacy
        }
    }
}


/***/ }),
/* 124 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MatrixSession: () => (/* binding */ MatrixSession)
/* harmony export */ });
/* harmony import */ var _client_ProjectStorage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(125);
/* harmony import */ var _PushMessages__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(126);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);
/* harmony import */ var _UI_MainTree_MainTree__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(30);
/* harmony import */ var _UI_Parts_TokenControl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(127);
/* harmony import */ var _UI_Parts_UserControl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(25);
/* harmony import */ var _ProjectSettings__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(42);
/* harmony import */ var _client_plugins_Notifications__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(41);
/* harmony import */ var _mobile_ProjectStorageMobile__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(128);
/* harmony import */ var _PluginManager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(12);
/* harmony import */ var _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(2);
/* harmony import */ var _Tasks__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(119);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(5);
/* harmony import */ var _TestManager__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(52);
/* harmony import */ var _NotificationsBL__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(43);
















class MatrixSession {
    quiet() {
        return typeof _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.jiraPlugin !== "undefined";
    }
    constructor() {
        this.CurrentUser = "";
        this.customerAdmin = false;
        this.superAdmin = false;
        this.duringBrowserNavigation = false;
        this.lastManualComment = "";
        this.customParams = {};
        console.log("Matrix session constructor");
        let that = this;
        window.addEventListener("message", this.receiveMessage, false);
        this.licensedModules = [];
        _globals__WEBPACK_IMPORTED_MODULE_12__.matrixApplicationUI.updateMainUI(true);
        $.ajaxPrefilter(function (options) {
            if (!options.beforeSend) {
                options.beforeSend = function (xhr) {
                    var csrfToken = that.getCsrfCookie();
                    xhr.setRequestHeader('x-csrf', csrfToken);
                };
            }
        });
        this.tryReconnect().done(function () {
            // a session exists (e.g. F5 was pressed or a new url entered)
            // a list of project from this server is known and stored in ProjectList
            // the comment is the last one shown in the UI, should be reused in other tabs
            that.CurrentComment = localStorage.getItem("CurrentComment");
            that.updateUI(false);
        });
    }
    getCsrfCookie() {
        var csrfToken = ($).cookie("csrf"); // i put that in the call to get the latest cookie with each request (see B below)
        return csrfToken;
    }
    startCommitTransaction() {
        this.CommitTransaction = true;
        this.CommitTransactionComment = "";
        this.CommitTransactionCancelled = false;
    }
    stopCommitTransaction() {
        this.CommitTransaction = false;
        this.CommitTransactionComment = "";
        this.CommitTransactionCancelled = false;
    }
    getUser() {
        return this.CurrentUser;
    }
    setUser(login) {
        this.CurrentUser = login ? login.toLowerCase() : "";
    }
    setDateInfo(di) {
        this.dateInfo = di;
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.DateTime.initDateTimeSettings();
    }
    getDateInfo() {
        return this.dateInfo;
    }
    setCustomerSettings(customerSettings) {
        let that = this;
        this.customerSettingsString = {};
        this.customerSettingsJSON = {};
        if (customerSettings) {
            $.each(customerSettings, function (idx, setting) {
                that.customerSettingsString[setting.key] = setting.value;
                if (setting.key !== "js_plugins" && setting.value && setting.value.indexOf('{') !== -1) {
                    // assume it a json
                    var val = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.fromString(setting.value);
                    if (val.status === "ok") {
                        that.customerSettingsJSON[setting.key] = val.value;
                    }
                }
            });
        }
    }
    setCustomerSettingJSON(s, setting) {
        this.customerSettingsJSON[s] = setting;
    }
    getCustomerSetting(s) {
        return this.customerSettingsString[s];
    }
    getCustomerSettingJSON(s, defaultValue) {
        return this.customerSettingsJSON[s] ? this.customerSettingsJSON[s] : defaultValue;
    }
    getMailSettings() {
        let projectMailConfig = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getMailConfig();
        let serverMailConfig = this.getCustomerSettingJSON(_ProjectSettings__WEBPACK_IMPORTED_MODULE_6__.mailConfigSetting, { canned: {} });
        if (projectMailConfig != undefined && projectMailConfig.canned != undefined) {
            for (let key in projectMailConfig.canned) {
                serverMailConfig.canned[key] = projectMailConfig.canned[key];
            }
        }
        if (projectMailConfig != undefined && projectMailConfig.defaultCC != undefined) {
            serverMailConfig.defaultCC = projectMailConfig.defaultCC;
        }
        return serverMailConfig;
    }
    getUISettings(defaultValues) {
        let ui = _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getCustomerSettingJSON("ui", {});
        if (defaultValues) {
            $.each(defaultValues, function (key, defaultValue) {
                if (ui[key] == undefined) {
                    ui[key] = defaultValue;
                }
            });
        }
        return ui;
    }
    setUISetting(setting, value) {
        let that = this;
        let ui = _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getCustomerSettingJSON("ui", {});
        ui[setting] = value;
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.setSettingCustomerJSON("ui", ui).done(function () {
            console.log("New setting");
            console.log(ui);
            that.customerSettingsJSON[setting] = ui;
        }).fail(function () {
            console.log("Error applying setting");
        });
    }
    showUISettings() {
        let ui = _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getCustomerSettingJSON("ui", {});
        console.log(ui);
    }
    isEditor() {
        return _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.hasWriteAccess(this.getUser());
    }
    isCustomerAdmin() {
        return this.customerAdmin;
    }
    isSuperAdmin() {
        return this.superAdmin;
    }
    // super admin or customer admin
    isAdmin() {
        return this.isCustomerAdmin() || this.isSuperAdmin();
    }
    getProject() {
        return this.CurrentProject;
    }
    setProject(projectId) {
        // this should (only be used by JIRA plugin)
        this.CurrentProject = projectId;
    }
    getCommentAsync() {
        let that = this;
        var res = $.Deferred();
        // get errors is comment needs ticked id
        var commentNeedsTicket = _Tasks__WEBPACK_IMPORTED_MODULE_11__.mTasks ? _Tasks__WEBPACK_IMPORTED_MODULE_11__.mTasks.evaluateTaskIds(_globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getComment()) : [];
        if (this.CurrentComment && commentNeedsTicket.length === 0) {
            res.resolve(this.CurrentComment);
        }
        else if (this.CommitTransaction && this.CommitTransactionComment) {
            res.resolve(this.CommitTransactionComment);
        }
        else if (!_globals__WEBPACK_IMPORTED_MODULE_12__.app.commentRequired()) {
            res.resolve("no comment specified");
        }
        else {
            if (commentNeedsTicket.length > 0) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("You need a comment with a ticket id!", commentNeedsTicket.join(" "));
            }
            let oked = false;
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showDialogDes({
                container: $("#saveDlg"),
                minMaxHeight: -350,
                minMaxWidth: -500,
                buttons: [{
                        text: 'Save',
                        class: 'btnDoIt',
                        click: function () {
                            oked = true;
                            var comment = $("#commentDlgTextSave").val().replace(/</g, "&lt;");
                            // remember for automation
                            that.lastManualComment = comment;
                            commentNeedsTicket = _Tasks__WEBPACK_IMPORTED_MODULE_11__.mTasks ? _Tasks__WEBPACK_IMPORTED_MODULE_11__.mTasks.evaluateTaskIds(comment) : [];
                            if (!comment && _globals__WEBPACK_IMPORTED_MODULE_12__.app.commentRequired()) {
                                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Comment required!", "");
                            }
                            else if (commentNeedsTicket.length > 0) {
                                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("You need a comment with a ticket id!", commentNeedsTicket.join(" "));
                            }
                            else {
                                if ($("#idSessionComment").prop('checked')) {
                                    that.setComment($("#commentDlgTextSave").val().replace(/</g, "&lt;"));
                                }
                                if (that.CommitTransaction) {
                                    that.CommitTransactionComment = $("#commentDlgTextSave").val().replace(/</g, "&lt;");
                                }
                                $("#saveDlg").dialog("close");
                                res.resolve($("#commentDlgTextSave").val().replace(/</g, "&lt;"));
                            }
                        }
                    }, {
                        text: 'Cancel',
                        class: 'btnCancelIt',
                        click: function () {
                            $("#saveDlg").dialog("close");
                        }
                    }],
                title: "Enter a change comment to save",
                onOpen: () => {
                    let dl = $("#saveDlg").closest(".ui-dialog").addClass("saveDlg");
                    dl[0].style.setProperty('z-index', '20000', 'important');
                    $("#commentDlgTextSave").val(that.getComment().replace(/&lt;/g, "<")).focus();
                },
                onClose: () => {
                    if (!oked) {
                        if (that.CommitTransaction) {
                            that.CommitTransactionCancelled = true;
                        }
                        res.reject(that.CommitTransactionCancelled);
                    }
                },
                onResize: () => {
                    $("#saveDlg").css("width", "100%");
                }
            });
        }
        return res;
    }
    getComment() {
        var comment = this.CurrentComment ? this.CurrentComment : "";
        return comment;
    }
    makeTeaser(comment) {
        if (!comment || comment.length < 30) {
            return comment; //.replace(/</g,"&lt;");
        }
        return (comment.substring(0, 30 - 3) + "..."); //.replace(/</g,"&lt;");
    }
    getCommentTeaser() {
        return this.makeTeaser(this.getComment());
    }
    setComment(comment, internal) {
        this.CurrentComment = comment ? comment : "";
        $("#comment").val(this.getComment().replace(/&lt;/g, "<"));
        if (!this.isConfigClient()) {
            localStorage.setItem("CurrentComment", this.CurrentComment);
        }
        if (comment && !internal) {
            var newComments = [];
            newComments.push(comment);
            var lastComments = this.getLastComments();
            for (var idx = 0; idx < lastComments.length && idx < 9; idx++) {
                var exists = false;
                for (var ni = 0; ni < newComments.length; ni++) {
                    exists = exists || (newComments[ni] === lastComments[idx]);
                }
                if (!exists) {
                    newComments.push(lastComments[idx]);
                }
            }
            _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.serverStorage.setItem("lastComments", JSON.stringify(newComments));
        }
        $("#comment").change();
    }
    isGroup() {
        return this.licensedModules.indexOf("qms") != -1 || this.licensedModules.indexOf("acl") != -1 || this.licensedModules.indexOf("groups") != -1;
    }
    isQMS() {
        return this.licensedModules.indexOf("qms") != -1;
    }
    isCompose() {
        return this.licensedModules.indexOf("resync") != -1;
    }
    isUnique() {
        return _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.matrixUniqueSerial == "true";
    }
    isMerge() {
        return this.licensedModules.indexOf("merge") != -1;
    }
    isReview() {
        return this.licensedModules.indexOf("review") != -1;
    }
    isACL() {
        return this.licensedModules.indexOf("acl") != -1;
    }
    isQMSProject(project) {
        if (!project) {
            project = this.getProject();
        }
        for (var idx = 0; idx < this.ProjectList.length; idx++) {
            if (this.ProjectList[idx].shortLabel == project)
                return this.ProjectList[idx].qmsProject;
        }
        return false;
    }
    limitAdmin() {
        return this.licensedModules.indexOf("limitadmin") == -1;
    }
    hasRisks() {
        return this.licensedModules.indexOf("risk") != -1;
    }
    hasVariants() {
        return this.licensedModules.indexOf("labels") != -1;
    }
    hasDocs() {
        return this.licensedModules.indexOf("doc") != -1;
    }
    hasAgileSync() {
        return this.licensedModules.indexOf("agilerocks") != -1;
    }
    setModules(startupInfo) {
        this.licensedModules = startupInfo.license.options;
    }
    getLastComments() {
        var lastComments = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.serverStorage.getItem("lastComments");
        if (!lastComments) {
            return [];
        }
        else {
            return JSON.parse(lastComments);
        }
    }
    tryReconnect() {
        let that = this;
        var res = $.Deferred();
        this.updateSettings().done(function () {
            res.resolve();
        }).fail(function () {
            _PluginManager__WEBPACK_IMPORTED_MODULE_9__.plugins.initServerSettings();
            that.requestLogin(res);
        });
        return res;
    }
    signInAfterTimeout() {
        let that = this;
        var res = $.Deferred();
        this.requestLogin(res);
        return res;
    }
    ;
    triggerLoginWithDialog() {
        let that = this;
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.canNavigateAwayAsync().done(function () {
            let res = $.Deferred();
            res.done(function () {
                if (that.isConfigClient()) {
                    _globals__WEBPACK_IMPORTED_MODULE_12__.app.postLogin(that.getUser());
                }
                else {
                    that.updateUI();
                    that.loadProject(null, location.href);
                }
            });
            that.requestLogin(res);
        }).fail(function () {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("You have unsaved changes.", "Save or cancel before signing out.");
        });
    }
    ;
    changePassword() {
        _UI_Parts_UserControl__WEBPACK_IMPORTED_MODULE_5__.userControls.editUserDetails("useredit", this.getUser(), function () {
        }, function () {
        });
    }
    getProjectList(readOrWriteOnly) {
        return readOrWriteOnly ? this.ProjectList.filter(function (project) { return project.accessType == "write" || project.accessType == "read"; }) : this.ProjectList;
    }
    // return true if a user has access to a given project
    canSeeProject(project) {
        let rw = this.getProjectList(true);
        for (var idx = 0; idx < rw.length; idx++) {
            if (rw[idx].shortLabel === project) {
                return true;
            }
        }
        return false;
    }
    changeToken() {
        let dlg = $("<div>").appendTo($("body"));
        let ui = $("<div style='height:100%;width:100%'>");
        let currentToken = $("<div>").appendTo(ui);
        _UI_Parts_TokenControl__WEBPACK_IMPORTED_MODULE_4__.TokenControl.showUserTokens(currentToken, _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getUser());
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showDialog(dlg, "Access Tokens", ui, $(document).width() * 0.9, _globals__WEBPACK_IMPORTED_MODULE_12__.app.itemForm.height() * 0.9, [{
                text: 'OK',
                class: 'btnDoIt',
                click: function () {
                    dlg.dialog("close");
                }
            }], _matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_10__.UIToolsConstants.Scroll.Vertical, true, true, () => { dlg.remove(); }, () => { }, () => { });
    }
    setProjectColor(projectShort, color) {
        let projectColors = this.getCustomerSettingJSON("projectColors", {});
        projectColors[projectShort] = color;
        this.setCustomerSettingJSON("projectColors", projectColors);
    }
    getProjectColor(projectShort) {
        let projectColors = this.getCustomerSettingJSON("projectColors", {});
        if (projectColors[projectShort] != undefined)
            return projectColors[projectShort];
        else
            return _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.calculateColorFrom(projectShort).color;
    }
    getImgFromProject(pRef, offsetTop = 7) {
        let that = this;
        let color = that.getProjectColor(pRef);
        let img = `<div class="project-icon" style="background:${color};margin-top:${offsetTop}px; "> <div></div></div>`;
        return img;
    }
    createProjectSelectLink(pRef, pName, branchParents, lastParent) {
        let that = this;
        let li = $("<li>");
        let img = that.getImgFromProject(pRef, 2);
        var link = $("<span class='mainmenu'>" + pRef + " - " + pName + "</span>");
        li.click(function (e) {
            $(".navbar-collapse.in").removeClass("in").addClass("collapse"); // for phones, hide menu
            var project = $(e.delegateTarget).data("projectid");
            _globals__WEBPACK_IMPORTED_MODULE_12__.app.canNavigateAwayAsync().done(function () {
                if (_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.widgetPluginsContainer && _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.widgetPluginsContainer.visible)
                    _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.widgetPluginsContainer.exit(_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.matrixBaseUrl + "/" + project);
                that.loadProject(project);
            }).fail(function () {
            });
        }).data("projectid", pRef);
        if (branchParents[pRef]) {
            if (lastParent.length && lastParent[0] == branchParents[pRef]) {
                li.css("padding-left", "58px");
                li.find(".project-icon").css("left", "44px");
                //li.append($(`<span class="fal fa-code-merge">`));
            }
        }
        else {
            lastParent.splice(0, 0, pRef);
        }
        li.append($(img));
        li.append(link);
        return li;
    }
    amIAllowedUser(limitedTo) {
        let all = limitedTo ? limitedTo : [];
        if (all.length == 0) {
            // no limits
            return true;
        }
        if (this.isSuperAdmin()) {
            return true;
        }
        if (all.indexOf(this.getUser()) != -1) {
            // I am a explicitly named user!
            return true;
        }
        let userCanDo = false;
        for (let userGroup of _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.getUserGroups()) {
            if (all.indexOf(_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.SelectUserOrGroup.getGroupId(userGroup)) != -1 &&
                userGroup.membership.map(member => member.login).indexOf(this.getUser()) != -1) {
                userCanDo = true;
            }
        }
        return userCanDo;
    }
    updateUI(afterTimeout) {
        let that = this;
        if (this.quiet()) {
            if (this.getProject()) {
                _PluginManager__WEBPACK_IMPORTED_MODULE_9__.plugins.initProject(this.getProject());
                _TestManager__WEBPACK_IMPORTED_MODULE_13__.mTM.InitializeProject();
            }
            return;
        }
        //  set logged in user
        this.showUserMenu();
        window.applyResponsiveView();
        if (afterTimeout) {
            // we do not want to update the item tree / selected item otherwise
            // we loose the last edits
            if (this.getProject() && _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.ItemConfig.isConfigured()) {
                _PluginManager__WEBPACK_IMPORTED_MODULE_9__.plugins.initProject(this.getProject());
                _TestManager__WEBPACK_IMPORTED_MODULE_13__.mTM.InitializeProject();
            }
            return;
        }
        let height = Math.max(200, $("#main").height());
        // set project list
        $("#idProjectList").html("").css("max-height", height + "px");
        //Show/enable help button
        if ($('#helpBtn').length == 0) {
            that.addHelpButton();
        }
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.setEnabled($(".bottomNavHelp"), true);
        // admin / config client, hand over control
        if (_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.matrixProduct === "Admin" || this.isConfigClient()) {
            _globals__WEBPACK_IMPORTED_MODULE_12__.app.postLogin(this.getUser());
            //By default save save in on the left
            if (_globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getUISettings({ saveLeft: true }).saveLeft) {
                $("#btnCancel").insertAfter($("#btnSave"));
            }
            else {
                $("#btnCancel").insertBefore("#btnSave");
            }
            return;
        }
        // MATRIX-1892 - swap save / cancel button in UI
        if (_globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getUISettings({ saveLeft: true }).saveLeft) {
            //By default save save in on the left
            $("#btnCancel").insertBefore("#btnSave");
        }
        else {
            $("#btnCancel").insertAfter("#btnSave");
        }
        // retrieve and prepare project groups and start render tree
        var project_groups = _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getCustomerSettingJSON("project_groups");
        let branchParents = {};
        for (let branch_info of this.branches ? this.branches : []) {
            branchParents[branch_info.branch] = branch_info.mainline;
        }
        // in the top: add the QMS project or QMS projects group (if there's one)
        let groupCount = that.addLiveQMSProjects();
        // get the define project groups
        let groups = (project_groups && project_groups.groups) ? project_groups.groups : [];
        // build a menu with project groups
        if (groupCount || groups.length) {
            $("#idProjectList").css("overflow-y", "inherit");
            groups.push({ name: "All Projects", projects: [] });
            $.each(groups, function (gird, group) {
                let all = $('<ul class="dropdown-menu dropdown-menu-sub">');
                let count = 0;
                let projects = that.getProjectList(true);
                let lastParent = [];
                for (var idx = 0; idx < projects.length; idx++) {
                    var pRef = projects[idx].shortLabel;
                    var pName = projects[idx].label;
                    if (pRef != "EMPTY" || that.isSuperAdmin()) {
                        if (!group.projects || group.projects.length === 0 || group.projects.indexOf(pRef) !== -1) {
                            all.append(that.createProjectSelectLink(pRef, pName, branchParents, lastParent));
                            count++;
                        }
                    }
                }
                if (count > 0) {
                    $("#idProjectList").append($('<li class="dropdown-submenu">').
                        append('<a href="javascript:void(0)">' + group.name + '</a>').append(all));
                    groupCount++;
                }
                all.css("max-height", $("#main").height() - gird * 26 - 26);
            });
        }
        // there's actually only one group (that means max one qms project)
        // so we want to render a flat list of projects
        if (groupCount < 2) {
            $("#idProjectList").css("overflow-y", "auto").html("");
            that.addLiveQMSProjects();
            let projects = this.getProjectList(true);
            let lastParent = [];
            for (var idx = 0; idx < projects.length; idx++) {
                var pRef = projects[idx].shortLabel;
                var pName = projects[idx].label;
                if (pRef != "EMPTY" || this.isSuperAdmin()) {
                    $("#idProjectList").append(this.createProjectSelectLink(pRef, pName, branchParents, lastParent));
                }
            }
        }
        // Let hooks plugin in there
        let menusFromPlugin = _PluginManager__WEBPACK_IMPORTED_MODULE_9__.plugins.getProjectMenuItems();
        if (menusFromPlugin && menusFromPlugin.length > 0) {
            $("#idProjectList").append($("<li class='divider'></li>"));
            for (let menu of menusFromPlugin) {
                let img = $('<i class="fal fa-external-link class menu-icon"  > </i>');
                if (menu.icon) {
                    img = $("<i class=\"fal " + menu.icon + " class menu-icon\"  > </i>");
                }
                let link = $("<span class='mainmenu'>" + menu.title + "</span>");
                let li = $("<li>");
                li.click(function (e) {
                    menu.action();
                });
                li.append(img);
                li.append(link);
                $("#idProjectList").append(li);
            }
        }
        // default off
        let cbAutoCommit = $("#idAutoCommit");
        let commentTb = $("#comment");
        cbAutoCommit.prop('checked', (localStorage.getItem('idAutoCommit') === 'true')).change(function () {
            localStorage.setItem('idAutoCommit', cbAutoCommit.prop('checked'));
        });
        that.updateCommentCheckboxBoxVisibility();
        commentTb.change((evt) => {
            that.updateCommentCheckboxBoxVisibility();
        });
        if (_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.matrixProduct === "Launch") {
            // nothing to do
        }
        else {
            this.loadProject(null, location.href, false);
        }
    }
    // if there is one QMS project just add a link... if there's multiple add a menu and 'increase' the sub menu counter by one
    addLiveQMSProjects() {
        let projects = _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getProjectList(false).filter(project => { return project.qmsProject; });
        if (projects.length > 1) {
            let all = $('<ul class="dropdown-menu dropdown-menu-sub"> </ul>');
            projects.forEach((project) => {
                let that = this;
                let color = that.getProjectColor(project.shortLabel);
                let img = $('<i class="fal fa-external-link class menu-icon" style="color:' + color + '" > </i>');
                let link = $("<span class='mainmenu'>" + project.shortLabel + " - " + project.label + "</span>");
                let li = $("<li>");
                li.click(function (e) {
                    $(".navbar-collapse.in").removeClass("in").addClass("collapse"); // for phones, hide menu
                    window.open(_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.matrixBaseUrl + "/pub/" + project.shortLabel);
                });
                li.append(img);
                li.append(link);
                all.append(li);
            });
            $("#idProjectList").append($('<li class="dropdown-submenu"></li>').append($('<a href="javascript:void(0)">' + "My QMS " + ' <i class="fal fa-external-link my-qms-icon" style="" "></i></a> ')).append(all));
            return 1;
        }
        else if (projects.length == 1) {
            let color = this.getProjectColor(projects[0].shortLabel);
            let img = $('<i class="fal fa-external-link menu-icon" style="font-size:13px; float:right; margin-left:5px;margin-top:4px;color:' + color + '" > </i>');
            let link = $("<span style='padding-left: 8px;' class='mainmenu'>" + projects[0].shortLabel + " - " + projects[0].label + "</span>");
            let li = $("<li>").append(link.append(img));
            li.click(function (e) {
                $(".navbar-collapse.in").removeClass("in").addClass("collapse"); // for phones, hide menu
                window.open(_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.matrixBaseUrl + "/pub/" + projects[0].shortLabel);
            });
            $("#idProjectList").append(li);
            return 0;
        }
        return 0;
    }
    updateCommentCheckboxBoxVisibility() {
        let commentTb = $("#comment");
        let cbAutoCommit = $(".autoSave");
        if (commentTb.val() === "") {
            cbAutoCommit.hide();
        }
        else {
            cbAutoCommit.show();
        }
    }
    loadProject(projectId, projectURL, setAsProjectUrl) {
        // if called from menu the projectURL is null
        // if called after page load, the projectID is null
        // if called after Sign in menu , the projectID is null
        if (projectURL == null)
            $("#filterDialog").remove();
        _globals__WEBPACK_IMPORTED_MODULE_12__.matrixApplicationUI.updateMainUI(true);
        //Add browser notification support
        let notificationConfig = _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getCustomerSettingJSON(_ProjectSettings__WEBPACK_IMPORTED_MODULE_6__.notificationSetting, _ProjectSettings__WEBPACK_IMPORTED_MODULE_6__.defaultNotificationConfig);
        if (notificationConfig.browserNotificationDisabled == undefined || notificationConfig.browserNotificationDisabled == false) {
            if (window.Notification && window.Notification.permission !== 'granted')
                window.Notification.requestPermission();
        }
        let parsedUrl = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.URL.parseUrl(location.href);
        if (parsedUrl.project == "") {
            if (parsedUrl.params["dashboard"] != null) {
                let d = parsedUrl.params["dashboard"];
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.widgetPluginsContainer.render(d);
                return;
            }
        }
        // currently no link types are known for automatic highlighting
        resetHighlightLinks();
        this.CurrentProject = projectId;
        // in case projectURL is known, it or the local storage should be used
        if (projectURL) {
            this.CurrentProject = this.getProjectFromUrlOrStorage(projectURL);
        }
        if (this.CurrentProject) {
            // make sure it still exists
            var stillOK = false;
            let projects = this.getProjectList(true);
            for (var idx = 0; idx < projects.length; idx++) {
                if (this.CurrentProject === projects[idx].shortLabel) {
                    stillOK = true;
                    $("#sidebar").show();
                    $("#main").show();
                    $("#explainOuter").hide();
                }
            }
            if (!stillOK) {
                this.showProjectSelectMessage();
                $("#idProject").html('<div class="btn btn-xs" style="padding-top:6px"><span>Select project </span><span class="caret"></span></div>');
                _globals__WEBPACK_IMPORTED_MODULE_12__.matrixApplicationUI.destroyOldControls();
                _UI_MainTree_MainTree__WEBPACK_IMPORTED_MODULE_3__.NavigationPanel.destroy();
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Project does not exist!", "The project '" + this.CurrentProject + "' either does not exist or you have no read/write access to it.");
                setTimeout(function () {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showSuccess("Select a another project");
                }, 3000);
                return;
            }
        }
        else {
            this.showProjectSelectMessage();
            $("#idProject").html('<div class="btn btn-xs" style="padding-top:6px"><span>Select project </span><span class="caret"></span></div>');
            _globals__WEBPACK_IMPORTED_MODULE_12__.matrixApplicationUI.destroyOldControls();
            _UI_MainTree_MainTree__WEBPACK_IMPORTED_MODULE_3__.NavigationPanel.destroy();
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showSuccess("select a project");
            return;
        }
        if (!projectURL) {
            projectURL = _globals__WEBPACK_IMPORTED_MODULE_12__.app.createItemUrl();
            history.pushState(null, null, projectURL);
        }
        else if (setAsProjectUrl) {
            history.pushState(null, null, _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.matrixBaseUrl + "/" + projectURL);
        }
        let projectName = _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getProject();
        let foundProjects = _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getProjectList(false).filter(o => { o.shortLabel == projectName; });
        let logoSetting = foundProjects != undefined && foundProjects.length > 0 ? foundProjects[0].projectLogo : "";
        var img = this.getImgFromProject(projectName, 0);
        let projectNameTitleCtrl = `<div id="projectNameTitleContainer" class="btn btn-xs" >
                   <div id="projectNameTitle">
                       ${img}
                       <span> ${projectName}</span>
                       <span class="caret"/>
                   </div>
               </div>`;
        let color = _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getProjectColor(projectName);
        if (!_globals__WEBPACK_IMPORTED_MODULE_12__.app.isConfigApp()) {
            $("header").css("border-top", "solid 5px " + color);
        }
        $("#tooltip_panel").css("border", "solid 5px " + color);
        $("#scrollBarStyle").remove();
        $("#idProject").html(projectNameTitleCtrl); //://"<i class='fas fa-book'></i>");
        _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.serverStorage.setItem('SessionLastProject', this.CurrentProject);
        if (typeof _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.mobileApp !== "undefined") {
            _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.projectStorage = new _mobile_ProjectStorageMobile__WEBPACK_IMPORTED_MODULE_8__.ProjectStorageMobile(this.CurrentProject);
        }
        else {
            _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.projectStorage = new _client_ProjectStorage__WEBPACK_IMPORTED_MODULE_0__.ProjectStorage(this.CurrentProject, _globals__WEBPACK_IMPORTED_MODULE_12__.app.getVersion(), _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.matrixBaseUrl, DOMPurify);
        }
        // if url specifies it use the item if not use last item from storage for project
        var item = this.getItemFromUrlOrStorage(projectURL);
        _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.projectStorage.setItem('SessionLastItem', item);
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.loadProject(this.CurrentProject, item);
        // auto run search
        function runSearch() {
            $("#projectTree input[name=search]").val(search);
            $("#projectTree .btn-sssearch>i").trigger("click");
        }
        let search = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.URL.parseUrl(projectURL).params.search;
        if (search) {
            _globals__WEBPACK_IMPORTED_MODULE_12__.app.waitForMainTree(runSearch);
        }
        // Store params for later use
        this.customParams = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.URL.parseUrl(projectURL).params;
        // Automatically switch to item when mobileLayout
        let mobileLayout = localStorage.getItem("mobileLayout");
        if (mobileLayout && mobileLayout != "") {
            localStorage.setItem("mobileLayout", "1");
            window.applyResponsiveView();
        }
    }
    ;
    oAuthOnly() {
        return _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.mxOauth == "mandatory";
    }
    showProjectSelectMessage(forceIntro) {
        $("#sidebar").hide();
        $("#main").hide();
        $("#contextframe").addClass("hidden");
        $("#contextframesizer").addClass("hidden");
        $("#explainOuter").show();
        $("#explain").html("");
        function showimg(img) {
            $(".explainimg").html("<img src='" + _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.matrixBaseUrl + "/img/" + img + "'/>");
            $("#imgModal").modal();
        }
        $("#explain").height($("#explainOuter").height());
        let projectsRW = this.getProjectList(true);
        if (!projectsRW || projectsRW.length === 0) {
            $("#explain").append("<div class='explainh1'>Welcome to Matrix Requirements</div>");
            // Get qms viewer only
            var projectListQms = _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getProjectList(false).filter(item => item.accessType == "qmsviewer");
            if (projectListQms.length > 0) {
                var ul = $("<ul class='explainMore'/>");
                $("#explain").append("<div class='explainh2'>You can access  to these projects as a QMS viewer</div>");
                $("#explain").append(ul);
                projectListQms.forEach((item) => {
                    ul.append("<li class='explainmore'><a href='" + _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.matrixBaseUrl + "/pub/" + item.shortLabel + "'>" + item.shortLabel + " </a> - " + item.label + "</li>");
                });
            }
            else {
                $("#explain").append("<div class='explainh2'>You do not have access to any projects. Please contact your Matrix Requirements administrator.</div>");
            }
        }
        else if (_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.matrixExpress || forceIntro) {
            let projects = projectsRW.map(function (ple) { return ple.shortLabel; });
            $("#explain").append("<div class='explainh1'>Welcome to Matrix Requirements</div>");
            $("#explain").append("<div class='explainh2'>Below are a few examples for project configurations. They have different item categories and traceability rules. Your actual project structure will most likely be different - Ask us, we help you to set it up quickly!</div>");
            //$("#explain").append( "<div class='explainh3'>The item categories define what kind of items you can store in the database. The traceability rules define which up and downstream links between the categories can or must exist. This can be changed in the admin client, but before getting into that ask us </div>" );
            $("#explain").append("<div class='explainh1'>MatrixALM - Design History Files and more</div>");
            if (projects.indexOf("SIMPLEST") == -1 && projects.indexOf("DEFAULT") == -1 && projects.indexOf("MREQPROJ") == -1) {
                $("#explain").append("<div class='explainh2'>The ALM module is not enabled - let us know if you want to get it!</div>");
            }
            else {
                var ul = $("<ul>");
                $("#explain").append($("<div class='explainh2'>").append(ul));
                if (projects.indexOf("SIMPLEST") != -1)
                    ul.append($("<li class='explainmore'>SIMPLEST: covers requirements, specification, tests (<span class='explainImg' data-src='simplest.png' >show</span> - <span class='explainProject' data-src='SIMPLEST' >open project</span>)</li>"));
                if (projects.indexOf("DEFAULT") != -1)
                    ul.append($("<li class='explainmore'>DEFAULT: covers risks, requirements, specification, tests and use cases (<span class='explainImg' data-src='default.png' >show</span> - <span class='explainProject' data-src='DEFAULT' >open project</span>)</li>"));
                if (projects.indexOf("MREQPROJ") != -1)
                    ul.append($("<li class='explainmore'>MREQPROJ: covers risks, user and system requirements, specification, tests and use cases (<span class='explainImg' data-src='mreq.png' >show</span> - <span class='explainProject' data-src='MREQPROJ' >open project</span>)</li>"));
                $("#explain").append("<div class='explainh3'>If you need more projects, different types of categories, input fields, traceability rules or risk formulas please do not hesitate to contact us.</div>");
            }
            $("#explain").append("<div class='explainh1'>MatrixQMS - Quality System, CAPAs and more</div>");
            if (projects.indexOf("QMS") == -1 && projects.indexOf("CAPA") == -1 && projects.indexOf("QMS_FILE") == -1 && projects.indexOf("HR_FILE") == -1) {
                $("#explain").append("<div class='explainh2'>The QMS module is not enabled - let us know if you want to get it!</div>");
            }
            else {
                var ul = $("<ul>");
                $("#explain").append($("<div class='explainh2'>").append(ul));
                if (projects.indexOf("QMS") != -1)
                    ul.append($("<li class='explainmore'>QMS: all your standards, procedures, work instructions, procedural risks, etc ... (<span class='explainProject' data-src='QMS' >open project</span>)</li>"));
                if (projects.indexOf("CAPA") != -1)
                    ul.append($("<li class='explainmore'>CAPA: Corrective and preventive action forms (<span class='explainProject' data-src='CAPA' >open project</span>)</li>"));
                if (projects.indexOf("QMS_FILE") != -1)
                    ul.append($("<li class='explainmore'>QMS_FILE: the place for QMS records (<span class='explainProject' data-src='QMS_FILE' >open project</span>)</li>"));
                if (projects.indexOf("HR_FILE") != -1)
                    ul.append($("<li class='explainmore'>HR_FILE: human resource records (<span class='explainProject' data-src='HR_FILE' >open project</span>)</li>"));
            }
            let modal = `
                <div class="modal fade  modal-lg" id="imgModal" tabindex="-1" role="dialog">
                    <div class="modal-dialog   explain-modal" role="document">´
                <div class="modal-content  explain-modal">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="myModalLabel">Configuration Preview</h4>
                </div>
                <div class="modal-body">
                    <div class='explainimg'></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
                </div>
            </div>
            </div>`;
            $("#explain").append(modal);
            $(".explainImg").click(function (event) { showimg($(event.delegateTarget).data("src")); });
            $(".explainProject").click(function (event) { window.open(_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.matrixBaseUrl + "/" + $(event.delegateTarget).data("src"), "_blank"); });
        }
        else {
            $("#explain").append("<div class='explainh1'>Welcome to Matrix Requirements</div>");
            $("#explain").append("<div class='explainh2' style='text-align: center;'>Please select a project from the project menu in the top.</div>");
            $("#comment").prop('disabled', false);
        }
    }
    filterProjects(projectList) {
        let dp = _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getCustomerSettingJSON("deleted_projects");
        if (!dp) {
            return projectList;
        }
        // filter project by deleted ones
        return projectList.filter(function (pli) { return dp.deleted.indexOf(pli.shortLabel) == -1; });
    }
    getItemFromUrlOrStorage(projectURL) {
        if (!projectURL) {
            return null;
        }
        let parsedUrl = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.URL.parseUrl(projectURL);
        if (parsedUrl.item) {
            return parsedUrl.item;
        }
        return _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.projectStorage.getItem('SessionLastItem');
    }
    getProjectFromUrlOrStorage(projectURL) {
        let project = null;
        let parsedUrl = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.URL.parseUrl(projectURL);
        if (parsedUrl.project) {
            project = parsedUrl.project;
        }
        else {
            project = _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.serverStorage.getItem('SessionLastProject');
        }
        if (project == "#") {
            project = null;
            window.history.pushState(null, null, window.location.href.replace("#", ""));
        }
        return project;
    }
    browserNavigation() {
        var item = this.getItemFromUrlOrStorage(location.href);
        var project = this.getProjectFromUrlOrStorage(location.href);
        if (this.CurrentProject !== project) {
            this.loadProject(null, location.href);
            return;
        }
        this.duringBrowserNavigation = true;
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.treeSelectionChangeAsync(item);
        this.duringBrowserNavigation = false;
    }
    signOut(requestAdminRights) {
        let that = this;
        _globals__WEBPACK_IMPORTED_MODULE_12__.app.canNavigateAwayAsync().done(function () {
            $("#idProject").html("");
            _globals__WEBPACK_IMPORTED_MODULE_12__.matrixApplicationUI.destroyOldControls();
            $("#user").html("");
            $("#mainUserMenu").html("");
            _UI_MainTree_MainTree__WEBPACK_IMPORTED_MODULE_3__.NavigationPanel.destroy();
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.setEnabled($(".bottomNavHelp"), false);
            _globals__WEBPACK_IMPORTED_MODULE_12__.restConnection.postServer("user/" + that.getUser() + "/logout").done(function () {
                var res = $.Deferred();
                that.signOutCleanUp();
                res.done(function () {
                    that.updateUI();
                });
                that.requestLogin(res, requestAdminRights);
            });
        }).fail(function () {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("You have unsaved changes.", "Save or cancel before signing out.");
        });
    }
    editComment() {
        let that = this;
        var lastCommentsSession = this.getLastComments();
        // dropdown select last comment
        $("#recentCommentChange").find("li").remove();
        for (var idx = 0; idx < lastCommentsSession.length; idx++) {
            var option = $('<li><a data-target="#">' + this.makeTeaser(lastCommentsSession[idx]) + '</a></li>')
                .click(function (e) {
                $("#commentDlgText").val($(e.delegateTarget).data("full").replace(/&lt;/g, "<"));
            })
                .data("full", lastCommentsSession[idx]);
            $("#recentCommentChange").append(option);
        }
        $("#commentDlgText").val(this.getComment().replace(/&lt;/g, "<"));
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showDialogDes({
            container: $("#commentDlg"),
            minMaxHeight: -400,
            minMaxWidth: -550,
            buttons: [{
                    text: 'Save',
                    class: 'btnDoIt',
                    click: function () {
                        that.setComment($("#commentDlgText").val().replace(/</g, "&lt;"));
                        $("#commentDlg").dialog("close");
                    }
                }, {
                    text: 'Cancel',
                    class: 'btnCancelIt',
                    click: function () {
                        $("#commentDlg").dialog("close");
                    }
                }],
            title: "Enter comment used when saving",
            onOpen: () => {
                window.setTimeout(function () { $("#commentDlgText").select(); }, 100);
            },
            onClose: () => {
            },
            onResize: () => {
                $("#commentDlg").css("width", "100%");
            }
        });
    }
    showLoginWindow() {
        if (_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.widgetPluginsContainer && _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.widgetPluginsContainer.visible) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.widgetPluginsContainer.exit("");
        }
        const loginFrame = $("#loginFrame");
        const loginBox = loginFrame.contents().find(".login-full-box");
        if (loginBox.length === 0) {
            // Not loaded yet
            console.info("LOGIN: Not ready yet, try again");
            window.setTimeout(() => this.showLoginWindow(), 100);
            return;
        }
        if (loginFrame.is(":visible") && loginBox.is(":visible")) {
            // nothing to do
            console.info("LOGIN: Already visible, nothing to do");
            return;
        }
        loginFrame.show();
        loginBox.show();
    }
    hideLoginWindow() {
        const loginFrame = $("#loginFrame");
        const loginBox = loginFrame.contents().find(".login-full-box");
        if (loginBox.length === 0) {
            // Not loaded yet
            console.info("LOGIN: Not ready yet, try again");
            window.setTimeout(() => this.hideLoginWindow(), 100);
            return;
        }
        if (loginFrame.is(":hidden") && loginBox.is(":hidden")) {
            // nothing to do
            console.info("LOGIN: Already hidden, nothing to do");
            return;
        }
        loginFrame.hide();
        loginBox.hide();
    }
    requestLogin(res, requestAdminRights) {
        let that = this;
        const loginFrame = $("#loginFrame");
        if (!loginFrame.length)
            return; // for unit tests
        this.showLoginWindow();
        that.postConnect = res;
        loginFrame[0].contentWindow.postMessage("activateUser", window.location.origin);
        if (requestAdminRights) {
            window.setTimeout(function () {
                // give the frame some time to load...
                loginFrame[0].contentWindow.postMessage("admin", window.location.origin);
            }, 1000);
        }
    }
    receiveMessage(event) {
        let that = this;
        if (event.origin == window.location.origin && event.data == "login") {
            // login successful
            $("#loginFrame").hide();
            // prepare next login ()
            $("#loginFrame")[0].contentWindow.location.reload();
            _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.setComment(localStorage.getItem(_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.matrixBaseUrl + "_useComment"));
            // if there is a specific point to continue.. go for it
            _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.updateSettings().done(function () {
                _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.showUserMenu();
                // retrieved some settings, go back to start
                if (_globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.postConnect) {
                    _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.postConnect.resolve();
                }
            }).fail(function () {
                // this should not really happen (since we just logged in...)
                _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.requestLogin(_globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.postConnect);
            });
        }
        else if (event.origin == window.location.origin && event.data == "login-failed") {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("SSO Login failed", "Unable to login via external authentication system.");
        }
        else if (event.origin == window.location.origin && event.data == "loginDetails") {
            // test if something should be announced
            if (Number(localStorage.getItem("badLogins")) > 0) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showSuccess("Before this successful login " + localStorage.getItem("badLogins") + " unsuccessful login attempts have been done.", 4000);
            }
            let expire = Number(localStorage.getItem("expiration"));
            if (expire > -1) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Password will expire soon!", "Your password will expire in " + expire + " days.", 4000);
            }
        }
    }
    addHelpButton() {
        var dropDownHtml = '<div class="btn-group dropup navbarCtrl mainHelp" style="float:right">' +
            '    <button type="button" class="bottomNavHelp btn  btn-warning dropdown-toggle" data-toggle="dropdown">' +
            '        <span id="helpBtn">Help</span> <span class="caret"></span>' +
            '    </button>' +
            this.getHelpButton() +
            '</div>';
        $('.navbar-fixed-bottom .navbar-right:has(#btnSave)').prepend(dropDownHtml);
    }
    getHelpButton() {
        return '    <ul id="mainHelpBtnMenu" class="dropdown-menu dropdown-menu-main usermenu" role="menu" id="helpUL">' +
            '    <li><a id="" href="https://urlshort.matrixreq.com/d23/faq" target="_blank">FAQ</a></li>' +
            '    <li><a id="" href="https://urlshort.matrixreq.com/d23/manual" target="_blank">User guide</a></li>' +
            '    <li><a id="" href="https://urlshort.matrixreq.com/d23/admin" target="_blank">Administrative guide</a></li>' +
            '    <li class="divider"></li>' +
            '    <li><a id="" href="https://urlshort.matrixreq.com/contact" target="_blank">Contact us</a></li>' +
            '    <li><a id="" href="https://urlshort.matrixreq.com/helpdesk" target="_blank">Service desk</a></li>' +
            '    </ul>';
    }
    showUserMenu() {
        let that = this;
        var info = that.getUser();
        // display current user name
        $("#user").html("");
        $("#user").append(_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.getAvatar(info, 32));
        // fill user menu
        $("#mainUserMenu").html("");
        // add sign out
        $('<li id="signoutcommand"><span class="">Sign out <i class="fal fa-sign-out-alt" style="float: right;font-size: 17px;"></i> </span></li>').appendTo($("#mainUserMenu")).click(function () {
            that.signOut(false);
        });
        if (!that.isConfigClient()) {
            $('<li class="divider" style=""></li>').appendTo($("#mainUserMenu"));
            // add change user profile
            if (_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.matrixBaseUrl.indexOf('demo.matrixreq.com') === -1 || that.getUser() != "demo") {
                $('<li class="changepasswordmenu"><span id="myprofile" class="">My Profile<i class="fal fa-user" style="float: right;font-size: 17px;"></i></span></li>').appendTo($("#mainUserMenu")).click(function () {
                    that.changePassword();
                });
            }
            let settingsToken = this.getCustomerSettingJSON("settingsToken");
            if (settingsToken && settingsToken.enabled && (settingsToken.users.length == 0 || settingsToken.users.indexOf(_globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getUser()) != -1)) {
                $('<li class="changetoke"><span id="mytoken" class="">My Tokens<i class="fal fa-key" style="float: right;font-size: 17px;"></i></span></li>').appendTo($("#mainUserMenu")).click(function () {
                    that.changeToken();
                });
            }
            if (_globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getUISettings().widgetDashboardOption) {
                $('<li class="divider" style=""></li>').appendTo($("#mainUserMenu"));
                let dashboardList = _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getCustomerSettingJSON("dashboardSettings");
                if (dashboardList != null && dashboardList.dashboards != null) {
                    for (let d in dashboardList.dashboards) {
                        let icon = '<i class="fal fa-columns" style="float: right;font-size: 17px;"></i>';
                        if (dashboardList.dashboards[d].icon != undefined) {
                            icon = '<i class="' + dashboardList.dashboards[d].icon + '" style="float: right;font-size: 17px;"></i>';
                        }
                        let msg = "<span class=''>" + dashboardList.dashboards[d].displayString + icon + "</span> ";
                        $('<li style="position: relative;">' + msg + '</li>').appendTo($("#mainUserMenu")).click(function (event) {
                            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.widgetPluginsContainer.render(d);
                        });
                    }
                }
            }
            let userMenuItems = _PluginManager__WEBPACK_IMPORTED_MODULE_9__.plugins.getUserMenuItems();
            if (userMenuItems.length > 0) {
                $('<li class="divider" style=""></li>').appendTo($("#mainUserMenu"));
                for (let menu of userMenuItems) {
                    let icon = '<i class="fal fa-columns" style="float: right;font-size: 17px;"></i>';
                    if (menu.icon != undefined) {
                        icon = '<i class="' + menu.icon + '" style="float: right;font-size: 17px;"></i>';
                    }
                    let msg = "<span class=''>" + menu.title + icon + "</span> ";
                    $('<li style="position: relative;">' + msg + '</li>').appendTo($("#mainUserMenu")).click(function (event) {
                        menu.action();
                    });
                }
            }
            // add admin client
            if (this.isCustomerAdmin() || this.isSuperAdmin()) {
                $('<li class="divider" style=""></li>').appendTo($("#mainUserMenu"));
                $('<li class="adminsettings"><a id="serveradmin" href="' + _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.matrixBaseUrl + '/adminConfig' + '" target="_blank">Server Administration <i class="fal fa-cog" style="float: right;font-size: 17px;"></i></a></li>').appendTo($("#mainUserMenu"));
                $("#serveradmin").click((evt) => {
                    if (_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.globalShiftDown && _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getProject()) {
                        window.open(_globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.matrixBaseUrl + "/adminConfig/" + _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getProject(), "_blank");
                        evt.preventDefault();
                        return false;
                    }
                });
            }
        }
        else {
            let userMenuItems = _PluginManager__WEBPACK_IMPORTED_MODULE_9__.plugins.getConfigUserMenuItems();
            if (userMenuItems.length > 0) {
                $('<li class="divider" style=""></li>').appendTo($("#mainUserMenu"));
                for (let menu of userMenuItems) {
                    let icon = '<i class="fal fa-columns" style="float: right;font-size: 17px;"></i>';
                    if (menu.icon != undefined) {
                        icon = '<i class="' + menu.icon + '" style="float: right;font-size: 17px;"></i>';
                    }
                    let msg = "<span class=''>" + menu.title + icon + "</span> ";
                    $('<li style="position: relative;">' + msg + '</li>').appendTo($("#mainUserMenu")).click(function (event) {
                        menu.action();
                    });
                }
            }
        }
    }
    initPushMessaging() {
        let that = this;
        let res = $.Deferred();
        if (this.pushMessages) {
            res.resolve();
            this.pushMessages.newConnection();
            return res;
        }
        this.pushMessages = new _PushMessages__WEBPACK_IMPORTED_MODULE_1__.PushMessages();
        this.pushMessages.newConnection().always(function () {
            res.resolve();
            // handle todos
            that.pushMessages.onTodoChanged(async function () {
                let projects = _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getProjectList(true).map(function (p) {
                    return p.shortLabel;
                });
                let result = await _NotificationsBL__WEBPACK_IMPORTED_MODULE_14__.NotificationsBL.NoticationCache.update(projects);
                _client_plugins_Notifications__WEBPACK_IMPORTED_MODULE_7__.NotificationList.updateUI(result);
            });
            // handle item changes
            that.pushMessages.onItemUpdated(function (changed) {
                // also update the tree, rename the item if needed
                if (_globals__WEBPACK_IMPORTED_MODULE_12__.app.getItemTitle(changed.item)) {
                    _UI_MainTree_MainTree__WEBPACK_IMPORTED_MODULE_3__.NavigationPanel.update({ id: changed.item, title: changed.title });
                    that.updateWatchItemVersion(changed.item, changed.version);
                }
            });
            // handle new items
            that.pushMessages.onItemCreated(function (changed) {
                let itemJson = {
                    id: changed.item,
                    title: changed.title,
                    type: _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.parseRef(changed.item).type
                };
                if (_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Item.parseRef(changed.item).isFolder) {
                    itemJson["children"] = [];
                }
                let newItem = {
                    parent: changed.parent,
                    position: 10000,
                    item: itemJson
                };
                window.setTimeout(function () {
                    // wait a bit more than a typical round trip to server before the update
                    // maybe the item was already created by some other action (e.g. it's a XTC execution the user did himself)
                    if (!_globals__WEBPACK_IMPORTED_MODULE_12__.app.getItemTitle(changed.item)) {
                        _globals__WEBPACK_IMPORTED_MODULE_12__.app.insertInTree(newItem);
                        _globals__WEBPACK_IMPORTED_MODULE_12__.app.updateCache(newItem);
                    }
                }, 500);
            });
            // handle deleting items
            that.pushMessages.onItemDeleted(function (changed) {
                // we need to wait a bit, cause if I deleted it, it will go away by itself
                window.setTimeout(function () {
                    if (_globals__WEBPACK_IMPORTED_MODULE_12__.app.getItemTitle(changed.item)) {
                        // otherwise I deleted it...
                        _UI_MainTree_MainTree__WEBPACK_IMPORTED_MODULE_3__.NavigationPanel.remove(changed.item);
                        if (_globals__WEBPACK_IMPORTED_MODULE_12__.app.getCurrentItemId() == changed.item) {
                            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showAck(-1, "Someone just deleted the item you are looking at: " + changed.item);
                        }
                    }
                }, 1000);
            });
            // show people watching items
            that.pushMessages.onItemWatched(function (watchInfo) {
                if (watchInfo.item == _globals__WEBPACK_IMPORTED_MODULE_12__.app.getCurrentItemId()) {
                    if (watchInfo.editor && !watchInfo.editor.thisSocket) {
                        // apparently someone else is editing the item...
                        // make it readonly, maybe update it, indicate editor
                        _globals__WEBPACK_IMPORTED_MODULE_12__.app.someOneElseIsChanging(watchInfo);
                    }
                    else if (watchInfo.editor && watchInfo.editor.thisSocket) {
                        // i got notified that I am editing an item, I don't care
                        // unless someone else modified the item in the mean time
                        if (that.lastWatchInfo && // I watch something (not very first item load)
                            that.lastWatchInfo.item == _globals__WEBPACK_IMPORTED_MODULE_12__.app.getCurrentItemId() && // and what I watch is displayed (should always be the case)
                            watchInfo.item == that.lastWatchInfo.item && // and the news is still for that item
                            watchInfo.version != that.lastWatchInfo.version && // but the news is that the version is not what I displayed
                            that.lastWatchInfo.version > 0 // this means it's not currently saving
                        ) {
                            // I got disconnected while editing (and someone else made a change before I logged on again)
                            _globals__WEBPACK_IMPORTED_MODULE_12__.app.someOneElseWasChanging(watchInfo);
                        }
                        else {
                            // all good  make sure list with editors / viewers is up-to-date
                            _globals__WEBPACK_IMPORTED_MODULE_12__.app.updateItemViewers(watchInfo);
                        }
                    }
                    else {
                        // no (more) editor
                        if (that.lastWatchInfo && that.lastWatchInfo.editor) {
                            // someone was editing before
                            if (that.lastWatchInfo.item == _globals__WEBPACK_IMPORTED_MODULE_12__.app.getCurrentItemId()) {
                                // someone (else) stopped editing (e.g. by cancelling)
                                if (that.lastWatchInfo.editor.thisSocket) {
                                    // I stopped editing
                                    if (_globals__WEBPACK_IMPORTED_MODULE_12__.app.needsSave()) {
                                        // not actually true MATRIX-3211 - we just ignore this message
                                        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("warning", "received message as if I stopped editing, but not true, so I ignore it!");
                                    }
                                    // in any case update viewers
                                    _globals__WEBPACK_IMPORTED_MODULE_12__.app.updateItemViewers(watchInfo);
                                }
                                else {
                                    _globals__WEBPACK_IMPORTED_MODULE_12__.app.someOneElseStoppedEditing(watchInfo, that.lastWatchInfo);
                                }
                            }
                            else {
                                // someone else stopped editing another item (e.g. by cancelling)
                                // so we don't care about stopping something but we want to show the editors of this item
                                _globals__WEBPACK_IMPORTED_MODULE_12__.app.updateItemViewers(watchInfo);
                            }
                        }
                        else {
                            // nobody edits and edited before
                            _globals__WEBPACK_IMPORTED_MODULE_12__.app.updateItemViewers(watchInfo);
                        }
                    }
                    // remember last watchers
                    if (!(that.lastWatchInfo && that.lastWatchInfo.item == watchInfo.item && Math.abs(that.lastWatchInfo.version) == watchInfo.version)) {
                        // handle race conditions: keep negative version from saving
                        that.lastWatchInfo = watchInfo;
                    }
                }
            });
        }).fail(function () {
            res.reject();
        });
        return res;
    }
    updateWatchItemVersion(itemId, newVersion) {
        if (this.lastWatchInfo && this.lastWatchInfo.item == itemId) {
            if (newVersion == -1) {
                newVersion = -Math.abs(this.lastWatchInfo.version);
            }
            this.lastWatchInfo.version = newVersion;
        }
    }
    isConfigClient() {
        return _globals__WEBPACK_IMPORTED_MODULE_12__.globalMatrix.matrixProduct == "Configuration Client";
    }
    updateSettings() {
        let that = this;
        var res = $.Deferred();
        _globals__WEBPACK_IMPORTED_MODULE_12__.restConnection.getServer("?exclude=allUsers,allTodos", true).done(function (result) {
            if (result.license.maxReadWrite < result.readWriteUsers.length) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("License Issue", "There are not enough write licenses.");
            }
            that.setModules(result);
            that.serverConfig = result;
            _PluginManager__WEBPACK_IMPORTED_MODULE_9__.plugins.initServerSettings(result);
            that.setUser(result.currentUser);
            that.setDateInfo(result.dateInfo);
            that.setCustomerSettings(result.customerSettings);
            let projects = result.project.map(function (pi) { return pi.shortLabel; });
            _NotificationsBL__WEBPACK_IMPORTED_MODULE_14__.NotificationsBL.NoticationCache.setNotificationCounts(result.todoCounts.filter(function (todoCount) { return projects.indexOf(todoCount.projectShort) != -1; }));
            // a session is still active
            that.ProjectList = that.filterProjects(result.project);
            that.customerAdmin = result.customerAdmin === 1;
            that.superAdmin = result.superAdmin === 1;
            if (that.isConfigClient() && !that.isAdmin() && !that.isSuperAdmin()) {
                that.signOut(true);
            }
            else if (that.isConfigClient()) {
                res.resolve();
            }
            else {
                that.initPushMessaging().always(function () {
                    // in any case, software will run without websockets
                    res.resolve();
                });
            }
            that.branches = result.branches;
            if (_globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getUISettings().widgetDashboardOption) {
                $("img.brandLogo").css("cursor", "pointer");
                $("img.brandLogo").off("click.toggleWidget");
                $("img.brandLogo").on("click.toggleWidget", () => { _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.widgetPluginsContainer.toggle(); });
            }
        }).fail(function (jqxhr, textStatus, error) {
            res.reject();
        });
        return res;
    }
    getBranches(mainline, branch) {
        if (!this.branches)
            return [];
        return this.branches.filter(info => (!mainline || mainline == info.mainline) && (!branch || branch == info.branch));
    }
    signOutCleanUp() {
        this.customerAdmin = false;
        this.superAdmin = false;
        this.CurrentUser = "";
    }
    getCustomParams() {
        return this.customParams;
    }
    getDashboardConfig() {
        try {
            let config = _globals__WEBPACK_IMPORTED_MODULE_12__.matrixSession.getCustomerSettingJSON("dashboardSettings");
            if (config && config)
                return config;
        }
        catch (error) {
        }
        return { dashboards: { default: { displayString: "home" } } };
    }
}


/***/ }),
/* 125 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ProjectStorage: () => (/* binding */ ProjectStorage)
/* harmony export */ });

class ProjectStorage {
    constructor(project, appVersion, matrixBaseUrl, dompurifylib) {
        this.DOMPurify = dompurifylib;
        var vs = appVersion.split(".");
        var vo = vs[0] + "." + vs[1] + ".";
        if (!localStorage.getItem(vo + "cleanup")) {
            for (var x in localStorage) {
                if (x.indexOf("remember_selection") > 0 && localStorage[x] === "") {
                    localStorage.removeItem(x);
                }
                if (x.indexOf(matrixBaseUrl) === 0) {
                    var y = x.replace(matrixBaseUrl, "1.8.");
                    localStorage.setItem(y, localStorage.getItem(x));
                    localStorage.removeItem(x);
                }
            }
            localStorage.setItem(vo + "cleanup", "done");
        }
        this.Project = vo + "_" + project + "_";
    }
    setItem(itemKey, itemVal, dontSanitize) {
        localStorage.setItem(this.Project + itemKey, dontSanitize ? itemVal : (this.DOMPurify.sanitize(itemVal) + ''));
    }
    getItem(itemKey, dontSanitize) {
        let val = localStorage.getItem(this.Project + itemKey);
        return dontSanitize ? val : (this.DOMPurify.sanitize(val) + '');
    }
    getItemDefault(itemKey, defaultValue) {
        let val = localStorage.getItem(this.Project + itemKey);
        if (!val) {
            val = defaultValue;
        }
        return this.DOMPurify.sanitize(val) + '';
    }
}


/***/ }),
/* 126 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PushMessages: () => (/* binding */ PushMessages)
/* harmony export */ });
/* harmony import */ var _MatrixRequirementsAPI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);




class PushMessages {
    constructor() {
        this.itemWatched = new _MatrixRequirementsAPI__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher();
        this.itemUpdated = new _MatrixRequirementsAPI__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher();
        this.itemCreated = new _MatrixRequirementsAPI__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher();
        this.itemDeleted = new _MatrixRequirementsAPI__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher();
        this.todoChanged = new _MatrixRequirementsAPI__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher();
    }
    newConnection() {
        // make sure there's nothing left of an old connection
        if (this.webSocket && this.webSocket.readyState != WebSocket.CLOSED) {
            this.webSocket.onclose = null;
            this.webSocket.onerror = null;
            this.webSocket.onmessage = null;
            this.webSocket.close();
        }
        this.webSocket = null;
        // create a new one
        return this.connect();
    }
    connect() {
        let that = this;
        let res = $.Deferred();
        _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Logger.log("info", "Connecting to websocket");
        if (this.webSocket) {
            // something is in the bush, it tries to (re)connect 
            if (this.webSocket.readyState == WebSocket.CONNECTING) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Logger.log("warning", "WebSocket is in connecting state.");
                res.resolve(WebSocket.CONNECTING);
                return res;
            }
            else if (this.webSocket.readyState == WebSocket.CLOSING) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Logger.log("warning", "WebSocket is in closing state.");
                res.resolve(WebSocket.CLOSING);
                return res;
            }
            else if (this.webSocket.readyState == WebSocket.OPEN) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Logger.log("warning", "WebSocket is already opened.");
                res.resolve(WebSocket.OPEN);
                return res;
            }
        }
        this.webSocket = new WebSocket(_globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.matrixBaseUrl.replace("https:", "wss:").replace("http:", "ws:") + "/websocket?");
        /**
         * Binds functions to the listeners for the websocket.
         */
        this.webSocket.onerror = function (event) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Logger.log("info", "Error from websocket");
            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Logger.log("info", event.data);
            res.reject();
        };
        this.webSocket.onmessage = function (event) {
            if (event.data) {
                let message = JSON.parse(event.data);
                console.log(message);
                if (message && message.error == "Cannot set you as editor") {
                    // indicate at least that we are watching
                    let itemId = _globals__WEBPACK_IMPORTED_MODULE_2__.app.getCurrentItemId();
                    if (itemId && _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(itemId).number) {
                        if (that.preventConcurrentEdit()) {
                            _globals__WEBPACK_IMPORTED_MODULE_2__.app.someOneIsChangingTheItem();
                            that.watchItem(itemId);
                        }
                    }
                }
                else {
                    that.trigger(message);
                }
            }
        };
        this.webSocket.onclose = function (event) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Logger.log("info", "Stop listening to news from server: " + event.code);
            // check if I need to reconnect
            that.reconnectAfterCloseMessage(10);
        };
        this.webSocket.onopen = function (event) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Logger.log("info", "Listening to news from server");
            // say hello to the server
            that.send({ verb: "openedSocket" }, 0);
            // we got (re)connected, so the server won't know in which editing states we are 
            that.sendCurrentEditingStatus();
            res.resolve(WebSocket.OPEN);
        };
        return res;
    }
    // verify if there's a category setting allowing concurrent of items of this type
    preventConcurrentEdit() {
        let itemId = _globals__WEBPACK_IMPORTED_MODULE_2__.app.getCurrentItemId();
        if (!itemId)
            return true;
        let category = _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(itemId).type;
        if (!category)
            return true;
        let concurrentEditSetting = _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.ItemConfig.getCategorySetting(_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(itemId).type, "concurrentEdit");
        if (concurrentEditSetting && concurrentEditSetting.disabled) {
            return false;
        }
        return true;
    }
    reconnectAfterCloseMessage(waitForServerRestartSeconds) {
        let that = this;
        _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Logger.log("Info", "Waiting for new connection for " + waitForServerRestartSeconds);
        // get something from server, if connection is not ok, do not try to reconnect
        //Matrix-5036: no need to get everything from /rest/1. Server version is enough.
        _globals__WEBPACK_IMPORTED_MODULE_2__.restConnection.getServer("?output=serverVersion", true).done(function () {
            // connection is still ok -> re'init the web sockets and send information about current view/edit state of an item
            that.connect().done(function (result) {
                if (result != WebSocket.OPEN) {
                    // not normal
                    window.setTimeout(function () {
                        that.reconnectAfterCloseMessage(waitForServerRestartSeconds);
                    }, 1000);
                }
            }).fail(function () {
                // that's not normal...
                window.setTimeout(function () {
                    that.reconnectAfterCloseMessage(waitForServerRestartSeconds);
                }, 1000);
            });
        }).fail(function () {
            if (waitForServerRestartSeconds == 0) {
                // apparently server got really disconnected
                console.log("Server also disconnected");
                _globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession.tryReconnect().done(() => {
                    // if itemDetails is empty.. this is 10 seconds after a log out, so we need a full refresh
                    _globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession.updateUI($("#itemDetails").html() != "");
                });
            }
            else {
                // maybe user logs on as other user
                window.setTimeout(function () {
                    that.reconnectAfterCloseMessage(waitForServerRestartSeconds - 1);
                }, 1000);
            }
        });
    }
    trigger(message) {
        if (message.subject != "todo" && message.project != _globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession.getProject()) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Logger.log("info", "Message for previous project");
            return;
        }
        switch (message.subject) {
            case "todo":
                this.todoChanged.dispatch({});
                break;
            case "itemChanged":
                if (this.preventConcurrentEdit()) {
                    // the user does not edit the item
                    this.itemUpdated.dispatch(message);
                }
                break;
            case "itemMoved":
                _globals__WEBPACK_IMPORTED_MODULE_2__.matrixApplicationUI.lastMainItemForm.addMove(message.item, message.version);
                break;
            case "itemDeleted":
                this.itemDeleted.dispatch(message);
                break;
            case "itemCreated":
                this.itemCreated.dispatch(message);
                break;
            case "folderCreated":
                this.itemCreated.dispatch(message);
                break;
            case "watching":
                if (this.preventConcurrentEdit()) {
                    this.itemWatched.dispatch(message);
                    if (message.item == _globals__WEBPACK_IMPORTED_MODULE_2__.app.getCurrentItemId() && _globals__WEBPACK_IMPORTED_MODULE_2__.app.needsSave() && !message.editor) {
                        // workaround MATRIX-4428 workaround: user edits an item and has another tab open with same item, user closes other tab
                        this.editItem(_globals__WEBPACK_IMPORTED_MODULE_2__.app.getCurrentItemId());
                    }
                }
                break;
            case "folderCreated":
                this.itemCreated.dispatch(message);
                break;
        }
    }
    // if the user is watching or editing something, let the server know
    sendCurrentEditingStatus() {
        let itemId = _globals__WEBPACK_IMPORTED_MODULE_2__.app.getCurrentItemId();
        if (itemId && _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(itemId).number) {
            if (_globals__WEBPACK_IMPORTED_MODULE_2__.app.needsSave()) {
                this.editItem(itemId);
            }
            else {
                this.watchItem(itemId);
            }
        }
    }
    send(message, retryCount) {
        let that = this;
        message["socketId"] = "" + PushMessages.socketId;
        // make sure no old messages will be send after this
        window.clearTimeout(this.retryTimer);
        // make sure there's a good connection
        if (!this.webSocket || this.webSocket.readyState != WebSocket.OPEN) {
            // no good connection    
            if (retryCount < 10) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Logger.log("info", "Websocket disconnected try to reconnect");
                this.connect().done(function (status) {
                    if (status == WebSocket.OPEN) {
                        // got a new socket! send
                        _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Logger.log("info", "Send (after reconnect) to watcher: " + message.verb);
                        try {
                            that.webSocket.send(JSON.stringify(message));
                        }
                        catch (ex) {
                            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Logger.log("error", "Failing to send");
                        }
                    }
                    else {
                        that.retryTimer = window.setTimeout(function () {
                            that.send(message, retryCount + 1);
                        }, 1000);
                    }
                }).fail(function () {
                });
            }
            else {
                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Logger.log("info", "Websocket disconnected - giving up, trying to send");
            }
            return;
        }
        _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Logger.log("info", "Send to watcher: " + message.verb);
        try {
            this.webSocket.send(JSON.stringify(message));
        }
        catch (ex) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Logger.log("error", "Failing to send");
        }
    }
    // start watching for item viewers
    watchItem(itemId) {
        this.send({
            verb: "watchItem",
            project: _globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession.getProject(),
            item: itemId
        }, 0);
    }
    // start watching for item viewers
    unWatchItem() {
        this.send({
            verb: "unwatchItem"
        }, 0);
    }
    // start edit item (user can save)
    editItem(itemId) {
        this.send({
            verb: "editItem",
            project: _globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession.getProject(),
            item: itemId
        }, 0);
    }
    // stop edit item (user dose not need to save anymore)
    unEditItem() {
        this.send({
            verb: "uneditItem"
        }, 0);
    }
    // event listeners
    onTodoChanged(fn) {
        this.todoChanged.subscribe(this, fn);
    }
    onItemUpdated(fn) {
        this.itemUpdated.subscribe(this, fn);
    }
    onItemCreated(fn) {
        this.itemCreated.subscribe(this, fn);
    }
    onItemDeleted(fn) {
        this.itemDeleted.subscribe(this, fn);
    }
    onItemWatched(fn) {
        this.itemWatched.subscribe(this, fn);
    }
}
PushMessages.socketId = new Date().getTime();


/***/ }),
/* 127 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TokenControl: () => (/* binding */ TokenControl)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);



class TokenControl {
    static showUserTokens(container, login) {
        let table = $("<table class='table'><thead><tr><th>Purpose</th><th>Token</th><th>Valid Until</th><th>Description</th><th></th></tr></thead></table>").appendTo(container);
        let body = $("<tbody>").appendTo(table);
        _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.getServer("user/" + login).done(function (user) {
            TokenControl.showTokenList(body, user.login, null, user.tokenList);
            TokenControl.showTokenAdd(body, user.login, null, () => {
                container.html("");
                TokenControl.showUserTokens(container, login);
            });
        });
    }
    static showTokenList(body, createUser, displayUser, tokenList) {
        if (tokenList) {
            $.each(tokenList, function (tidx, token) {
                let row = $("<tr>").appendTo(body);
                if (displayUser)
                    row.append("<td>" + displayUser + "</td>");
                row.append("<td>" + token.purpose + "</td>");
                row.append("<td>" + token.value + "</td>");
                row.append("<td>" + token.validToUserFormat + "</td>");
                row.append("<td>" + (token.reason ? token.reason : "") + "</td>");
                let deleteToken = $("<i style='cursor:pointer' class='deleteToken fal fa-trash-alt' data-user='" + (displayUser ? displayUser : createUser) + "'data-token='" + token.value + "'>");
                row.append($("<td>").append(deleteToken));
                deleteToken.click(function (event) {
                    let tokenDel = $(event.delegateTarget);
                    _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.deleteServerAsync("user/" + tokenDel.data("user") + "/token", { value: tokenDel.data("token") }).done(function () {
                        tokenDel.closest("tr").remove();
                    });
                });
            });
        }
    }
    static showTokenAdd(body, user, allUsers, onAdded) {
        let row = $("<tr>").appendTo(body);
        let userSelect;
        if (!user) {
            let options = allUsers.map(function (user) { return { id: user.login, label: user.login }; });
            userSelect = $("<div id='tokenUser'>").mxDropdown({
                controlState: _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.FormEdit,
                canEdit: true,
                help: " ",
                fieldValue: "",
                valueChanged: function () {
                    if (userSelect) {
                        TokenControl.updateCreate(user, userSelect);
                    }
                },
                parameter: {
                    placeholder: 'select user',
                    maxItems: 1,
                    options: options,
                    groups: [],
                    create: false,
                    sort: true,
                    splitHuman: false
                }
            });
            row.append($("<td id='to_user'>").append(userSelect));
        }
        row.append("<td id='to_purpose'></td>");
        row.append("<td id='to_token'></td>");
        let endDate = $("<input id='endTimePicker' type='text' class='form-control'>");
        endDate.datetimepicker({ format: _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.DateTime.getSimpleDateTimeFormatMoment() });
        row.append($("<td id='to_date'>").append(endDate));
        endDate.on("dp.change", function (e) {
            TokenControl.updateCreate(user, userSelect);
        });
        let reason = $("<input id='tokenReason' type='text' class='form-control'>");
        reason.on("change keyup paste", function (event) {
            TokenControl.updateCreate(user, userSelect);
        });
        row.append($("<td id='to_reason'>").append(reason));
        row.append("<td><button class='btn btn-normal' id='tokenCreate' disabled>create</button></td>");
        $("#tokenCreate").click(function () {
            TokenControl.createToken(onAdded);
        });
    }
    // change status of create button
    static async updateCreate(defaultUser, userSelect) {
        let date = $("#endTimePicker").data("DateTimePicker").date();
        let user = defaultUser ? defaultUser : await userSelect.getController().getValueAsync();
        let reason = $("#tokenReason").val();
        let f = new Date(date);
        let n = new Date();
        $("#tokenCreate").data("date", date).data("user", user).data("reason", reason);
        _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.setEnabled($("#tokenCreate"), !!reason && date && !!user && Math.ceil((f.getTime() - n.getTime()) / 3600000) > 0);
    }
    // create token
    static createToken(onAdded) {
        let date = $("#tokenCreate").data("date");
        let user = $("#tokenCreate").data("user");
        let reason = $("#tokenCreate").data("reason");
        let future = new Date(date);
        let now = new Date();
        let delta = Math.ceil((future.getTime() - now.getTime()) / 3600000);
        _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.postServer("user/" + user.toLowerCase() + "/token", {
            purpose: "oauth",
            validity: delta,
            reason: reason
        }).done(function (token) {
            onAdded();
        });
    }
}


/***/ }),
/* 128 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ProjectStorageMobile: () => (/* binding */ ProjectStorageMobile)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);


class ProjectStorageMobile {
    constructor(project) {
        this.Project = _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.matrixBaseUrl + "_" + project + "_";
    }
    setItem(itemKey, itemVal) {
        localStorage.setItem(this.Project + itemKey, itemVal);
    }
    getItem(itemKey) {
        return localStorage.getItem(this.Project + itemKey);
    }
    getItemDefault(itemKey, defaultValue) {
        let v = localStorage.getItem(this.Project + itemKey);
        return v ? v : defaultValue;
    }
}


/***/ }),
/* 129 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RestConnector: () => (/* binding */ RestConnector)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _UI_Tools_ItemHistoryView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(29);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);




class RestConnector {
    constructor(config) {
        this.timer = { start: 0, end: 0, command: "", type: "" };
        this.restServer = config.server;
    }
    setProject(projectName) {
        this.restServerProject = this.restServer + "/" + projectName;
    }
    ;
    getProject(cmd, ignoreErrors, ignoreFilters) {
        var labelFilter = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.LabelTools.getFilter();
        if (!ignoreFilters && labelFilter && labelFilter.length > 0) {
            var filter = "?";
            if (cmd.indexOf("?") !== -1) {
                // there is already at least one parameter: so just add another
                filter = "&";
            }
            filter += "filter=" + labelFilter;
            cmd += filter;
        }
        if (_globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getTimeWarp()) {
            var timewarp = "?";
            if (cmd.indexOf("?") !== -1) {
                // there is already at least one parameter: so just add another
                timewarp = "&";
            }
            timewarp += "atDate=" + _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getTimeWarp();
            cmd += timewarp;
        }
        return this.get(this.restServerProject + "/" + cmd, ignoreErrors);
    }
    getServer(cmd, noRetry) {
        return this.get(this.restServer + "/" + cmd, noRetry);
    }
    postServer(cmd, param, payload) {
        return this.post(this.restServer + "/" + cmd, param, payload);
    }
    postProject(cmd, param, payload) {
        return this.post(this.restServerProject + "/" + cmd, param, payload);
    }
    postProjectJson(cmd, data) {
        return this.postJson(this.restServerProject + "/" + cmd, data);
    }
    putServer(cmd, param, asPayload) {
        return this.put(this.restServer + "/" + cmd, param, asPayload);
    }
    putProject(cmd, param, itemId) {
        var labelFilter = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.LabelTools.getFilter();
        if (labelFilter && labelFilter.length > 0) {
            param["filter"] = labelFilter;
        }
        return this.put(this.restServerProject + "/" + cmd, param, null, itemId);
    }
    deleteProjectAsync(cmd, param, asString) {
        return this.deleteRestAsync(this.restServerProject + "/" + cmd, param, asString);
    }
    deleteServerAsync(cmd, param, asString) {
        return this.deleteRestAsync(this.restServer + "/" + cmd, param, asString);
    }
    // file up and download
    download(cmd, params) {
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("info", "Downloading: " + this.restServerProject + "/" + cmd);
        var iframe = $('<iframe width=1 height=1 frameborder=0 style="display:none">');
        iframe.appendTo('body');
        var form = $('<form action="' + this.restServerProject + "/" + cmd + '" method="get"></form>');
        if (params) {
            $.each(params, function (index, value) {
                form.append($("<input name='" + index + "'>").val(value));
            });
        }
        iframe.contents().find("body").append(form);
        form.submit();
    }
    getFile(cmd, dataType) {
        let that = this;
        var res = $.Deferred();
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("info", "GET FILE: " + this.restServerProject + "/" + cmd);
        $.ajaxSetup({ cache: false }); // avoid IE to cache rest calls
        $.ajax({ type: 'get',
            url: that.restServerProject + "/" + cmd,
            dataType: dataType
        }).done(function (data) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("debug", "RESPONSE: " + "retrieved file from restServer...");
            res.resolve(data);
        }).fail(function (jqxhr, textStatus, error) {
            that.handleError(jqxhr, textStatus, error, "GET FILE: " + that.restServerProject + "/" + cmd).done(function () {
                // user signed in again
                $.ajax({ type: 'get',
                    url: that.restServerProject + "/" + cmd
                }).done(function (data) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("debug", "RESPONSE: " + JSON.stringify(data));
                    res.resolve(data);
                }).fail(function (jqxhr, textStatus, error) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Could not get file!", _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.getDisplayError(jqxhr, textStatus, error));
                });
            }).fail(function () {
                res.reject();
            });
        });
        $.ajaxSetup({ cache: true });
        return res;
    }
    uploadFileProjectAsync(file, progress) {
        return this.uploadFileServerAsync(file, progress, this.restServerProject, null, "/file");
    }
    fetchFileAsync(url, progress) {
        return this.uploadFileServerAsync(null, progress, this.restServerProject, { url: url }, "/file");
    }
    uploadFileCustomerAsync(file, progress) {
        return this.uploadFileServerAsync(file, progress, this.restServer + "/all", null, "/file");
    }
    importProjectAsync(file, progress, params) {
        return this.uploadFileServerAsync(file, progress, this.restServer + "/", params, "");
    }
    uploadFileServerAsync(file, progress, target, params, urlSuffix) {
        let that = this;
        var formData = new FormData();
        if (file) {
            formData.append("file", file);
        }
        if (params) {
            $.each(params, function (parName, parVal) {
                formData.append(parName, parVal);
            });
        }
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("info", file ? `upload FILE: ${file.name}` : `fetch ${JSON.stringify(params)}`);
        var res = $.Deferred();
        let url = target ? target + urlSuffix : _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.matrixRestUrl + "/all" + urlSuffix;
        $.ajax({
            url: url,
            type: 'POST',
            xhr: function () {
                var myXhr = $.ajaxSettings.xhr();
                if (myXhr.upload) { // Check if upload property exists
                    myXhr.upload.addEventListener('progress', progress, false);
                }
                return myXhr;
            },
            success: function (data, textStatus, jqXHR) {
                res.resolve(data);
            },
            error: function (jqxhr, textStatus, error) {
                if (that.isTimeout(jqxhr)) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("info", "Trying to reconnect...");
                    _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.signInAfterTimeout().done(function () {
                        that.uploadFileServerAsync(file, progress, target, params, urlSuffix).done(function (result) {
                            res.resolve(result);
                        });
                    }).fail(function () {
                        let details = (jqxhr && jqxhr.responseJSON && jqxhr.responseJSON.detailsList && jqxhr.responseJSON.detailsList.length > 0 && jqxhr.responseJSON.detailsList[0]) ? (" Details " + jqxhr.responseJSON.detailsList[0]) : "";
                        res.reject("Failed to reconnect. Status:" + textStatus + ". Error was:" + error + details);
                    });
                }
                else {
                    let details = (jqxhr && jqxhr.responseJSON && jqxhr.responseJSON.detailsList && jqxhr.responseJSON.detailsList.length > 0 && jqxhr.responseJSON.detailsList[0]) ? (" Details " + jqxhr.responseJSON.detailsList[0]) : "";
                    res.reject("Upload failed. Status:" + textStatus + ". Error was:" + error + details);
                }
            },
            complete: function (response) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("info", response.responseText);
            },
            // Form data
            data: formData,
            dataType: 'json',
            //Options to tell jQuery not to process data or worry about content-type.
            cache: false,
            contentType: false,
            processData: false
        });
        return res;
    }
    convertExcelProjectAsync(file, progress) {
        return this.convertExcelServerAsync(file, progress);
    }
    convertExcelServerAsync(file, progress) {
        var formData = new FormData();
        if (file) {
            formData.append("file", file);
        }
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("info", `convert FILE: ${file.name}`);
        var res = $.Deferred();
        let url = this.restServerProject + "/excelxml";
        $.ajax({
            url: url,
            type: 'POST',
            xhr: function () {
                var myXhr = $.ajaxSettings.xhr();
                if (myXhr.upload) { // Check if upload property exists
                    myXhr.upload.addEventListener('progress', progress, false);
                }
                return myXhr;
            },
            success: function (data, textStatus, jqXHR) {
                res.resolve(data);
            },
            error: function (jqxhr, textStatus, error) {
                let details = (jqxhr && jqxhr.responseJSON && jqxhr.responseJSON.detailsList && jqxhr.responseJSON.detailsList.length > 0 && jqxhr.responseJSON.detailsList[0]) ? (" Details " + jqxhr.responseJSON.detailsList[0]) : "";
                res.reject("Upload failed. Status:" + textStatus + ". Error was:" + error + details);
            },
            complete: function (response) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("info", "completed conversion of excel");
            },
            // Form data
            data: formData,
            dataType: 'text',
            //Options to tell jQuery not to process data or worry about content-type.
            cache: false,
            contentType: false,
            processData: false
        });
        return res;
    }
    isTimeout(jqxhr) {
        if (jqxhr.status !== 403) {
            return false;
        }
        if (!jqxhr.responseText) {
            return false;
        }
        if (jqxhr.responseJSON && jqxhr.responseJSON.displayError == "Unauthorized PUT without authentication for change") {
            // CSFR token missing
            return true;
        }
        if (jqxhr.responseJSON && jqxhr.responseJSON.displayError && jqxhr.responseJSON.displayError.indexOf("session is null") == 0) {
            // CSFR token missing
            return true;
        }
        if (jqxhr.responseText.indexOf("session is null, exception in authorization decoding session is null, no authorization header") !== -1) {
            // session expired
            return true;
        }
        if (jqxhr.responseText.indexOf("session is null, exception in authorization decoding session is null, no authorization header") !== -1) {
            // google auth expired
            return true;
        }
        return false;
    }
    isGatewayTimeout(jqxhr) {
        if (jqxhr.status !== 504) {
            return false;
        }
        if (!jqxhr.responseText) {
            return false;
        }
        if (jqxhr.responseText.indexOf("Gateway Time-out") !== -1) {
            return true;
        }
        return false;
    }
    // error handling with automatic reconnect
    handleError(jqxhr, textStatus, error, cmd, param, itemId) {
        let that = this;
        var res = $.Deferred();
        // sometimes error does not arrive as json but only as text
        if (jqxhr.responseText && !jqxhr.responseJSON) {
            try {
                jqxhr.responseJSON = JSON.parse(jqxhr.responseText);
            }
            catch (ex) {
                // well this is no JSON
            }
        }
        if (jqxhr && jqxhr.status == 422 && jqxhr.responseJSON && jqxhr.responseJSON.fields) {
            let errors = [];
            for (let errorField of jqxhr.responseJSON.fields) {
                console.log(JSON.stringify(errorField));
                let fieldName = _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getFieldName(errorField.fieldId);
                errors.push(fieldName ? fieldName : ('' + errorField.fieldId));
            }
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Some field(s) have invalid html tags", "Fields with bad content: " + errors.join(","));
            res.reject();
            return res;
        }
        else if (jqxhr && jqxhr.status == 500 && jqxhr.responseJSON && jqxhr.responseJSON.category) {
            if (jqxhr.responseJSON.displayError == "This item has been modified") {
                if (itemId && _globals__WEBPACK_IMPORTED_MODULE_0__.app.getCurrentItemId() == itemId) {
                    let ht = new _UI_Tools_ItemHistoryView__WEBPACK_IMPORTED_MODULE_1__.HistoryTools();
                    ht.diffAgainstLatest(param);
                }
                else {
                    // user double clicked in project and hell broke loose
                    // (we just ignore)
                }
                res.reject();
                return res;
            }
            else if (jqxhr.responseJSON.displayError == "Last operation would overflow number of licenses (error in compute)") {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Licensing Error", "You cannot change the access. There are not enough write licenses");
                res.reject();
                return res;
            }
            if (jqxhr.displayError) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError(jqxhr.responseJSON.category, jqxhr.displayError);
                res.reject();
                return res;
            }
            if (jqxhr.responseJSON.category == "Permission violation") {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError(jqxhr.responseJSON.category, jqxhr.responseJSON.detailsList && jqxhr.responseJSON.detailsList.length > 3 ? jqxhr.responseJSON.detailsList[2] : "");
                res.reject();
                return res;
            }
            else if (jqxhr.responseJSON.displayError && jqxhr.responseJSON.displayError.indexOf("has no sufficient permission for this action on project") != -1) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Permission Violation", "You do not have access to this project");
                res.reject();
            }
            else {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError(jqxhr.responseJSON.category, jqxhr.responseJSON.detailsList && jqxhr.responseJSON.detailsList.length > 0 ? jqxhr.responseJSON.detailsList[0] : "");
                res.reject();
                return res;
            }
        }
        if (this.isTimeout(jqxhr)) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("info", "Trying to reconnect...");
            // assume this ws a sign in problem.sign in quietly if possible and do it again
            _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.signInAfterTimeout().done(function () {
                res.resolve();
            }).fail(function () {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Not signed in!", _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.getDisplayError(jqxhr, textStatus, error));
                res.reject();
            });
        }
        else if (this.isGatewayTimeout(jqxhr)) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("info", "gateway timeout...");
            // assume this ws a sign in problem.sign in quietly if possible and do it again
            res.reject("gatewayTimeout");
        }
        else {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("error", cmd);
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Server error.", _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.getDisplayError(jqxhr, textStatus, error));
            res.reject();
        }
        return res;
    }
    get(url, noRetry) {
        let that = this;
        var res = $.Deferred();
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("info", "GET: " + url);
        $.ajaxSetup({ cache: false }); // avoid IE to cache rest calls
        var lastTimer = ((url.indexOf("?") !== -1) ? "&" : "?") + "td=" + (this.timer.end - this.timer.start);
        let adminUI = (_globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.matrixProduct == "Configuration Client") ? "&adminUI=1" : "";
        this.timer = {
            start: (new Date()).getTime(),
            command: encodeURIComponent(url),
            type: "get"
        };
        $.getJSON(url + lastTimer + adminUI).done(function (data) {
            that.timer.end = (new Date()).getTime();
            that.timer.status = 200;
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("debug", "RESPONSE: " + JSON.stringify(data));
            res.resolve(data);
        }).fail(function (jqxhr, textStatus, error) {
            that.timer.end = (new Date()).getTime();
            that.timer.status = jqxhr.status;
            if (noRetry) {
                res.reject(jqxhr, textStatus, error);
            }
            else {
                that.handleError(jqxhr, textStatus, error, "GET: " + url).done(function () {
                    $.getJSON(url).done(function (data) {
                        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("debug", "RESPONSE: " + JSON.stringify(data));
                        res.resolve(data);
                    }).fail(function (jqxhr, textStatus, error) {
                        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Failed to get item!", _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.getDisplayError(jqxhr, textStatus, error));
                    });
                }).fail(function () {
                    res.reject(jqxhr, textStatus, error);
                });
            }
        });
        $.ajaxSetup({ cache: true });
        return res;
    }
    post(url, param, asPayload) {
        let that = this;
        var res = $.Deferred();
        if (typeof param !== 'undefined') {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("info", "POST: " + url);
            param.td = (this.timer.end - this.timer.start);
            this.timer = {
                start: (new Date()).getTime(),
                command: encodeURIComponent(url),
                type: "post"
            };
            //Content-type should be application/json for payload.
            $.post({
                url: url,
                data: asPayload ? JSON.stringify(param) : param,
                dataType: asPayload ? "json" : "",
                contentType: asPayload ? "application/json" : ""
            }).done(function (data) {
                that.timer.end = (new Date()).getTime();
                that.timer.status = 200;
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("debug", "RESPONSE: " + JSON.stringify(data));
                res.resolve(data);
            }).fail(function (jqxhr, textStatus, error) {
                that.timer.end = (new Date()).getTime();
                that.timer.status = jqxhr.status;
                that.handleError(jqxhr, textStatus, error, "POST: " + url + "?" + jQuery.param(param, true)).done(function () {
                    $.post(url, param).done(function (data) {
                        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("debug", "RESPONSE: " + JSON.stringify(data));
                        res.resolve(data);
                    }).fail(function (jqxhr, textStatus, error) {
                        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Failed to post to server!", _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.getDisplayError(jqxhr, textStatus, error));
                    });
                }).fail(function () {
                    res.reject(jqxhr, textStatus, error);
                });
            });
        }
        else {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("debug", "POST: " + url);
            var lasttimer = { td: (this.timer.end - this.timer.start) };
            this.timer = {
                start: (new Date()).getTime(),
                command: encodeURIComponent(url)
            };
            $.post(url, lasttimer).done(function (data) {
                that.timer.end = (new Date()).getTime();
                that.timer.status = 200;
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("debug", "RESPONSE: " + JSON.stringify(data));
                res.resolve(data);
            }).fail(function (jqxhr, textStatus, error) {
                that.timer.end = (new Date()).getTime();
                that.timer.status = jqxhr.status;
                if (url.indexOf("/logout") == url.length - 7) {
                    // attempt of logout when there's no more session, that's fine
                    res.resolve();
                }
                else {
                    that.handleError(jqxhr, textStatus, error, "POST: " + url).done(function () {
                        $.post(url).done(function (data) {
                            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("debug", "RESPONSE: " + JSON.stringify(data));
                            res.resolve(data);
                        }).fail(function (jqxhr, textStatus, error) {
                            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Failed to post to server!", _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.getDisplayError(jqxhr, textStatus, error));
                        });
                    }).fail(function () {
                        res.reject(jqxhr, textStatus, error);
                    });
                }
            });
        }
        return res;
    }
    postJson(url, data) {
        var res = $.Deferred();
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("info", "POST: " + url);
        this.timer = {
            start: (new Date()).getTime(),
            command: encodeURIComponent(url),
            type: "post"
        };
        $.ajax(url, {
            type: "post",
            contentType: "application/json",
            data: JSON.stringify(data)
        }).done((result) => {
            this.timer.end = (new Date()).getTime();
            this.timer.status = 200;
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("debug", "RESPONSE: " + JSON.stringify(data));
            res.resolve(result);
        }).fail((jqxhr, textStatus, error) => {
            this.timer.end = (new Date()).getTime();
            this.timer.status = jqxhr.status;
            res.reject(jqxhr, textStatus, error);
        });
        return res;
    }
    postSpecialServer(cmd, param) {
        return this.postSpecial(this.restServer + "/" + cmd, param);
    }
    postSpecial(url, param) {
        let that = this;
        var res = $.Deferred();
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("info", "POST: " + url);
        param.td = (this.timer.end - this.timer.start);
        this.timer = {
            start: (new Date()).getTime(),
            command: encodeURIComponent(url),
            type: "post"
        };
        //  post(url: string, data?: Object|string, success?: (data: any, textStatus: string, jqXHR: JQueryXHR) => any, dataType?: string): JQueryXHR;
        $.ajax({ url: url, type: "POST", data: JSON.stringify(param), contentType: "application/json;charset=UTF-8", dataType: "json" })
            .done(function (data) {
            that.timer.end = (new Date()).getTime();
            that.timer.status = 200;
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("debug", "RESPONSE: " + JSON.stringify(data));
            res.resolve(data);
        }).fail(function (jqxhr, textStatus, error) {
            that.timer.end = (new Date()).getTime();
            that.timer.status = jqxhr.status;
            that.handleError(jqxhr, textStatus, error, "POST: " + url + "?" + jQuery.param(param, true)).done(function () {
                // try again after timeout
                $.ajax({ url: url, type: "POST", data: JSON.stringify(param), contentType: "application/json;charset=UTF-8", dataType: "json" }).done(function (data) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("debug", "RESPONSE: " + JSON.stringify(data));
                    res.resolve(data);
                }).fail(function (jqxhr, textStatus, error) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Failed to post to server!", _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.getDisplayError(jqxhr, textStatus, error));
                });
            }).fail(function () {
                res.reject(jqxhr, textStatus, error);
            });
        });
        return res;
    }
    put(url, param, asPayload, itemId) {
        let that = this;
        var res = $.Deferred();
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("info", "PUT: " + url);
        param.td = (this.timer.end - this.timer.start);
        this.timer = {
            start: (new Date()).getTime(),
            command: encodeURIComponent(url),
            type: "put"
        };
        $.ajax({ type: 'put',
            url: url,
            processData: false,
            data: asPayload ? JSON.stringify(param) : jQuery.param(param, true),
            contentType: asPayload ? 'application/json; charset=UTF-8' : 'application/x-www-form-urlencoded; charset=UTF-8',
            dataType: 'json'
        }).done(function (data) {
            that.timer.end = (new Date()).getTime();
            that.timer.status = 200;
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("debug", "RESPONSE: " + JSON.stringify(data));
            res.resolve(data);
        }).fail(function (jqxhr, textStatus, error) {
            that.timer.end = (new Date()).getTime();
            that.timer.status = jqxhr.status;
            that.handleError(jqxhr, textStatus, error, "PUT: " + url + "?" + jQuery.param(param, true), param, itemId).done(function () {
                $.ajax({ type: 'put',
                    url: url,
                    processData: false,
                    data: jQuery.param(param, true),
                    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                    dataType: 'json'
                }).done(function (data) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("debug", "RESPONSE: " + JSON.stringify(data));
                    res.resolve(data);
                }).fail(function (jqxhr, textStatus, error) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Failed to modify item!", _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.getDisplayError(jqxhr, textStatus, error));
                });
            }).fail(function (msg) {
                res.reject(msg);
            });
        });
        return res;
    }
    deleteRestAsync(url, param, asString) {
        let that = this;
        var res = $.Deferred();
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("info", "DELETE: " + url + "?" + jQuery.param(param, true));
        param.td = (this.timer.end - this.timer.start);
        this.timer = {
            start: (new Date()).getTime(),
            command: encodeURIComponent(url),
            type: "delete"
        };
        $.ajax({ type: 'delete',
            url: url,
            processData: false,
            data: asString ? JSON.stringify(param) : jQuery.param(param, true),
            contentType: 'application/text',
            dataType: 'text'
        }).done(function (data) {
            that.timer.end = (new Date()).getTime();
            that.timer.status = 200;
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("debug", "RESPONSE: " + JSON.stringify(data));
            res.resolve(data);
        }).fail(function (jqxhr, textStatus, error) {
            that.timer.end = (new Date()).getTime();
            that.timer.status = jqxhr.status;
            that.handleError(jqxhr, textStatus, error, "DELETE: " + url + "?" + jQuery.param(param, true)).done(function () {
                $.ajax({ type: 'delete',
                    url: url,
                    processData: false,
                    data: jQuery.param(param, true),
                    contentType: 'application/text',
                    dataType: 'text'
                }).done(function (data) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("debug", "RESPONSE: " + JSON.stringify(data));
                    res.resolve(data);
                }).fail(function () {
                    res.reject();
                });
            }).fail(function () {
                res.reject();
            });
        });
        return res;
    }
}


/***/ }),
/* 130 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FileTools: () => (/* binding */ FileTools)
/* harmony export */ });
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);



class FileTools {
    uploadFilesAsync(files, idx) {
        let that = this;
        var res = $.Deferred();
        if (!files || files.length <= idx) {
            res.resolve(this.uploadInfo);
            return res;
        }
        _globals__WEBPACK_IMPORTED_MODULE_1__.restConnection.uploadFileProjectAsync(files[idx], function (p) {
            var done = p.position || p.loaded;
            var total = p.totalSize || p.total;
            _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.UI.BlockingProgress.SetProgress(idx, 99 * done / total);
        }).done(function (result) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.UI.BlockingProgress.SetProgress(idx, 100);
            that.uploadInfo.push({
                fileName: files[idx].name,
                fileId: result.fileId + "?key=" + result.key,
                uploaded: true
            });
            that.uploadFilesAsync(files, idx + 1).done(function (fini) {
                res.resolve(fini);
            }).fail(function (fini) {
                res.reject(fini);
            });
            _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.UI.BlockingProgress.SetProgress(idx, 100);
        }).fail(function (error) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.UI.BlockingProgress.SetProgressError(idx, "Failed to upload file!");
            that.uploadInfo.push({
                fileName: files[idx].name,
                fileId: error,
                uploaded: false
            });
            res.reject(that.uploadInfo);
        });
        return res;
    }
    UploadFilesAsync(files) {
        var tasks = [];
        $.each(files, function (idx, file) {
            tasks.push({ name: file.name });
        });
        _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.UI.BlockingProgress.Init(tasks);
        this.uploadInfo = [];
        return this.uploadFilesAsync(files, 0);
    }
    ;
    UploadFileAsync(file) {
        var tasks = [];
        tasks.push({ name: file.name });
        _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.UI.BlockingProgress.Init(tasks);
        this.uploadInfo = [];
        return this.uploadFilesAsync([file], 0);
    }
    ;
    convertXLSXAsync(file) {
        let that = this;
        var res = $.Deferred();
        var tasks = [];
        tasks.push({ name: "converting excel ..." });
        _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.UI.BlockingProgress.Init(tasks);
        _globals__WEBPACK_IMPORTED_MODULE_1__.restConnection.convertExcelProjectAsync(file, function (p) {
            var done = p.position || p.loaded;
            var total = p.totalSize || p.total;
            _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.UI.BlockingProgress.SetProgress(0, 99 * done / total);
        }).done(function (result) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.UI.BlockingProgress.SetProgress(0, 100);
            res.resolve(result);
        }).fail(function (error) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_0__.ml.UI.BlockingProgress.SetProgressError(0, "Failed to upload file!");
            res.reject("");
        });
        return res;
    }
}


/***/ }),
/* 131 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HTMLCleaner: () => (/* binding */ HTMLCleaner)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);


class HTMLCleaner {
    constructor(htmlCode, autoEscape) {
        this.cleanConfig = {
            blackLists: {
                removeTags: ["HEAD", "FOOT", "STYLE", "SCRIPT", "IFRAME", 'applet', 'embed', 'noframes', 'noscript', 'meta', 'link', 'template'
                ],
                keepOnlyInside: ['font', 'a:not([href])',
                    // u: word..
                    'u'],
                removeEmpty: ['p', 'a'],
            }, whiteLists: {
                styles: [{ tagName: "SPAN", allowed: [
                            "font-weight:bold",
                            "font-style:italic",
                            "text-decoration:underline",
                            "text-align:right",
                            "text-align:left",
                            "text-align:center",
                            "margin-left:25px",
                            "margin-left:50px",
                            "margin-left:75px",
                            "margin-left:100px",
                            "margin-left:125px",
                            "line-height:1",
                            "line-height:1.2",
                            "line-height:1.4",
                            "line-height:1.6",
                            "line-height:1.8",
                            "line-height:2",
                            "line-height:3"
                        ]
                    }],
                classes: [
                    { tagName: "SPAN", allowed: [
                            "captionDetails", "captionFix", "captionPre", "captionFig", "captionPost", "captionText", "referenceDetails", "referenceFix", "referencePre", "referenceFig", "referencePost", "referenceText"
                        ] },
                    { tagName: "P", allowed: ["h1", "h2", "h3", "h4", "caption"] }
                ],
                properties: [
                    { tagName: "IMG", allowed: ["src"] },
                    { tagName: "A", allowed: ["href", "target"] },
                    { tagName: "SPAN", allowed: ["contenteditable"] },
                    { tagName: "TD", allowed: ["colspan", "rowspan"] },
                    { tagName: "TH", allowed: ["colspan", "rowspan"] }
                ],
                data: [
                    { tagName: "SPAN", allowed: ["mid"] }
                ]
            },
            tagReplacements: [
                { what: "H1", with: "<p class='h1'>" },
                { what: "H2", with: "<p class='h2'>" },
                { what: "H3", with: "<p class='h3'>" },
                { what: "H4", with: "<p class='h4'>" },
                { what: "H5", with: "<p class='h5'>" },
                { what: "H6", with: "<p class='h6'>" },
                { what: "H7", with: "<p style='font-weight:bold'>" },
                { what: "H8", with: "<p style='font-weight:bold'>" },
                { what: "I", with: "<span style='font-style:italic'>" },
                { what: "EM", with: "<span style='font-style:italic'>" },
                { what: "B", with: "<span style='font-weight:bold'>" },
                { what: "STRONG", with: "<span style='font-weight:bold'>" }
            ],
            tagReplacementsDoc: [
                { what: "H6", with: "<p style='font-weight:bold'>" },
                { what: "H7", with: "<p style='font-weight:bold'>" },
                { what: "H8", with: "<p style='font-weight:bold'>" },
                { what: "H5", with: "<h6>" },
                { what: "H4", with: "<h5>" },
                { what: "H3", with: "<h4>" },
                { what: "H2", with: "<h3>" },
                { what: "H1", with: "<h2>" },
                { what: "I", with: "<span style='font-style:italic'>" },
                { what: "EM", with: "<span style='font-style:italic'>" },
                { what: "B", with: "<span style='font-weight:bold'>" },
                { what: "STRONG", with: "<span style='font-weight:bold'>" }
            ]
        };
        this.autoEscape = autoEscape;
        this.text = htmlCode;
    }
    getClean(cleaningLevel, keepMatrix) {
        if (cleaningLevel == HTMLCleaner.CleanLevel.Server) {
            // use the server whitelists
            this.applyServerCleaning();
            return this.text;
        }
        // remove dangerous stuff (MATRIX-936 weird characters kill xml / doc generation) copy paste word
        if (keepMatrix) {
            // keep /n for table formatting...
            this.text = this.text.replace(/[\u0001-\u0009]/g, ' ');
            this.text = this.text.replace(/[\u000B-\u001F]/g, ' ');
        }
        else {
            this.text = this.text.replace(/[\u0001-\u001F]/g, ' ');
        }
        // remove some stuff which should definitely not be in like a <head>
        if (cleaningLevel == HTMLCleaner.CleanLevel.BasicSafety) {
            // meta and head need to stay to link word docs
            this.cleanConfig.blackLists.removeTags = this.cleanConfig.blackLists.removeTags.filter(function (tag) { tag.toLowerCase() != "head" && tag.toLowerCase() != "meta"; });
        }
        if (cleaningLevel != HTMLCleaner.CleanLevel.PurifyOnly) {
            this.removeTags();
        }
        if (cleaningLevel == HTMLCleaner.CleanLevel.Basic || cleaningLevel == HTMLCleaner.CleanLevel.BasicSafety) {
            return this.text;
        }
        // always sanitize
        this.text = DOMPurify.sanitize(this.text);
        if (cleaningLevel == HTMLCleaner.CleanLevel.PurifyOnly) {
            return this.text;
        }
        /*********** most code maintenance ***************/
        this.replaceNoCount("	", "");
        this.replaceNoCount("  ", " ");
        this.replaceNoCount(" \n", "\n");
        this.replaceNoCount("	\n", "\n");
        this.replaceNoCount("\n\n", "\n");
        this.replaceNoCount("  ", " ");
        // remove word specifc noise
        var tagStripper = new RegExp('<(/)*(v:|\\?xml:|st1:|o:)(.*?)>', 'gi');
        this.text = this.text.replace(tagStripper, '');
        this.replaceNoCount("<>", " ");
        if (cleaningLevel != HTMLCleaner.CleanLevel.Soft) {
            // handle word lists (needs to happen before unknown classes and comment are removed
            this.handleWordLists();
            // remove remaining comments
            this.text = this.text.replace(/<!--[^>]*-->/g, "");
            /*********** this might change the formatting ***************/
            // some things might not be in but we want to keep the inside <font>
            this.removeInsideTags();
            // clean inline stlye, classes, properties etc. according to some white lists
            if (!keepMatrix) {
                this.cleanInlineStyle();
                this.cleanClasses();
                this.cleanProperties();
            }
        }
        if (!keepMatrix) {
            this.setMaxImageSize();
            this.cleanData();
        }
        this.replaceNoCount("&nbsp;&nbsp;", " ");
        this.replaceNoCount("&nbsp; ", " "),
            this.replaceNoCount(" &nbsp;", " ");
        if (cleaningLevel != HTMLCleaner.CleanLevel.Soft && !keepMatrix) {
            this.replaceTags(cleaningLevel);
        }
        this.replaceNoCount("> &nbsp;<", ">&nbsp;<");
        this.replaceNoCount(">&nbsp; <", ">&nbsp;<");
        // not good this will actually remove sometimes needed spaces ... this.replaceNoCount("> <", "><");
        this.replaceNoCount("> \n", ">\n");
        let e = 0;
        do {
            e = 0;
            e += this.replaceCount("  ", " ");
            e += this.replaceCount(" >", ">");
            e += this.replaceCount("	", "");
            e += this.replaceCount("  ", " ");
            e += this.replaceCount("&nbsp;\n", "\n");
            e += this.replaceCount(" \n", "\n");
            e += this.replaceCount("\n\n", "\n");
            e += this.replaceCount("</li></ul><ul><li>", "</li><li>"); // make real lists
        } while (e > 0);
        this.removeUseLessStuff();
        return this.text;
    }
    replaceWiki() {
        if (localStorage.getItem("wiki") != "on") {
            return this.text;
        }
        this.applyWiki();
        return this.text;
    }
    getCleanupSettings() {
        let cleanup = _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getCleanupRules();
        if (!cleanup) {
            cleanup = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getCustomerSettingJSON("htmlCleanup");
        }
        if (!cleanup) {
            return null;
        }
        else if (!cleanup.cleanup) {
            return null;
        }
        return cleanup;
    }
    // returns a list of problems
    checkServerCleaning() {
        let cleaning = this.getCleanupSettings();
        if (!cleaning) {
            // the server does not care
            return [];
        }
        let results = [];
        let code = $("<div>").html(this.text);
        $("*", code).each(function (idx, node) {
            let name = node.nodeName.toLowerCase();
            if (cleaning.tags.indexOf(name) == -1) {
                results.push(`<b>${name}</b> is not a supported tag`);
            }
            else {
                let attrs = node.getAttributeNames();
                // check attributes
                for (let attIdx = 0; attIdx < attrs.length; attIdx++) {
                    let attr = attrs[attIdx].toLowerCase();
                    if ((cleaning.attributes[":all"] && cleaning.attributes[":all"].indexOf(attr) != -1) ||
                        (cleaning.attributes[name] && cleaning.attributes[name].indexOf(attr) != -1) ||
                        (cleaning.enforcedAttributes[name] && cleaning.enforcedAttributes[name].indexOf(attr) != -1)) {
                        if (cleaning.protocolAttributes) {
                            for (let protocolAttribute of cleaning.protocolAttributes.filter(p => p.element == name && p.attribute == attr)) {
                                let supportedProtocols = protocolAttribute.protocols;
                                let actualValue = node.getAttribute(attr);
                                let actualProtocol = actualValue ? actualValue.split(":")[0] : "unspecified";
                                if (supportedProtocols.indexOf(actualProtocol) == -1) {
                                    results.push(`<b>${attr}</b> of <b>${name}</b> uses an unsupported protocol: <b>${actualProtocol}</b> `);
                                }
                            }
                        }
                    }
                    else {
                        results.push(`<b>${attr}</b> is not a supported attribute of <b>${name}</b>`);
                    }
                }
            }
        });
        return results;
    }
    applyServerCleaning() {
        let that = this;
        let cleaning = this.getCleanupSettings();
        if (!cleaning) {
            // the server does not care
            return this.text;
        }
        this.text = DOMPurify.sanitize(this.text, { ALLOWED_TAGS: cleaning.tags });
        let code = $("<div>").html(this.text);
        $.each(this.cleanConfig.blackLists.removeTags, function (csidx, tag) {
            $(tag, code).each(function (idx, cb) { $(cb).remove(); });
        });
        this.text = code.html();
        $("*", code).each(function (idx, node) {
            let name = node.nodeName.toLowerCase();
            let attrs = node.getAttributeNames();
            // check attributes
            for (let attIdx = 0; attIdx < attrs.length; attIdx++) {
                let attr = attrs[attIdx].toLowerCase();
                if ((cleaning.attributes[":all"] && cleaning.attributes[":all"].indexOf(attr) != -1) ||
                    (cleaning.attributes[name] && cleaning.attributes[name].indexOf(attr) != -1) ||
                    (cleaning.enforcedAttributes[name] && cleaning.enforcedAttributes[name].indexOf(attr) != -1)) {
                    if (cleaning.protocolAttributes) {
                        for (let protocolAttribute of cleaning.protocolAttributes.filter(p => p.element == name && p.attribute == attr)) {
                            let supportedProtocols = protocolAttribute.protocols;
                            let actualValue = node.getAttribute(attr);
                            let actualProtocol = actualValue ? actualValue.split(":")[0] : "unspecified";
                            if (supportedProtocols.indexOf(actualProtocol) == -1) {
                                node.removeAttribute(attr);
                            }
                        }
                    }
                }
                else {
                    node.removeAttribute(attr);
                }
            }
        });
        this.text = code.html();
    }
    applyWiki() {
        let that = this;
        this.replaceCode();
        this.replaceList("*", "<ul>", "</ul>");
        this.replaceList("#", "<ol>", "</ol>");
        this.replaceList("?", "<ol type='A'>", "</ol>");
        this.replaceTable();
    }
    replaceCode() {
        let that = this;
        let content = $("<div>").html(this.text);
        let listLevel = 0;
        let newHTML = "";
        let inCode = false;
        let firstCodeLine = false;
        $.each(content[0].childNodes, function (childIdx, child) {
            let html = child.outerHTML ? child.outerHTML : child.textContent;
            let text = child.textContent;
            if (!inCode && text.indexOf("{{{") == 0) {
                newHTML += "<pre>";
                inCode = true;
                firstCodeLine = true;
            }
            else if (inCode && text.indexOf("}}}") == 0) {
                newHTML += "</pre>";
                inCode = false;
            }
            else if (inCode) {
                if (!firstCodeLine) {
                    newHTML += "\n";
                }
                else {
                    firstCodeLine = false;
                }
                newHTML += text;
            }
            else {
                newHTML += html;
            }
        });
        // in case table did not end in text
        if (inCode) {
            newHTML += "</pre>";
        }
        this.text = newHTML;
    }
    replaceTable() {
        let that = this;
        let content = $("<div>").html(this.text);
        let listLevel = 0;
        let newHTML = "";
        let inTable = false;
        $.each(content[0].childNodes, function (childIdx, child) {
            let html = child.outerHTML ? child.outerHTML : child.textContent;
            let text = child.textContent;
            let isTableLine = text.indexOf("|") == 0 && text.split("|").length > 2; // at least 2 | one of them in first pos
            let isTableLineHeader = text.indexOf("||") == 0 && text.split("||").length > 2; // at least 2 | one of them in first pos
            if (child.nodeName == "PRE") {
                isTableLine = false;
                isTableLineHeader = false;
            }
            else if (inTable && !isTableLine) {
                newHTML += "</table>";
                newHTML += html;
                inTable = false;
            }
            else if (!inTable && isTableLine) {
                newHTML += "<table class='table table-bordered'>";
                inTable = true;
            }
            if (isTableLineHeader) {
                newHTML += "<tr>";
                $.each(text.split("||"), function (idx, part) {
                    if (idx != 0 && (idx != text.split("||").length - 1 || part != "")) {
                        newHTML += "<td><b>" + part + "</b></td>";
                    }
                });
                newHTML += "</tr>";
            }
            else if (isTableLine) {
                newHTML += "<tr>";
                $.each(text.split("|"), function (idx, part) {
                    if (idx != 0 && (idx != text.split("|").length - 1 || part != "")) {
                        newHTML += "<td>" + part + "</td>";
                    }
                });
                newHTML += "</tr>";
            }
            else {
                newHTML += html;
            }
        });
        // in case table did not end in text
        if (inTable) {
            newHTML += "</table>";
            inTable = false;
        }
        this.text = newHTML;
    }
    replaceList(bullet, ul, eul) {
        let that = this;
        let content = $("<div>").html(this.text);
        let listLevel = 0;
        let newHTML = "";
        $.each(content[0].childNodes, function (childIdx, child) {
            let html = child.outerHTML ? child.outerHTML : child.textContent;
            let text = child.textContent;
            let inner = child.innerHTML ? child.innerHTML : child.textContent;
            let lineListLevel = that.getListLevel(text, bullet);
            if (child.nodeName == "PRE") {
                newHTML += html;
                lineListLevel = 0;
            }
            else if (lineListLevel > 0) {
                // insert ul's
                for (var ill = 0; ill < lineListLevel - listLevel; ill++) {
                    newHTML += ul;
                }
                // or close
                for (var ill = 0; ill < listLevel - lineListLevel; ill++) {
                    newHTML += eul;
                }
                // ignore the <p> and remove first lineListLevel *s
                for (let llidx = 0; llidx < lineListLevel; llidx++) {
                    inner = inner.replace(bullet, "");
                }
                newHTML += "<li>" + inner + "</li>";
            }
            else {
                // insert end ul's
                for (var ill = 0; ill < listLevel - lineListLevel; ill++) {
                    newHTML += eul;
                }
                newHTML += html;
            }
            // store current list level
            listLevel = lineListLevel;
        });
        // in case list did not end in text
        for (var ill = 0; ill < listLevel; ill++) {
            newHTML += eul;
        }
        this.text = newHTML;
    }
    getListLevel(text, bullet) {
        if (!text)
            return 0;
        let idx = 0;
        while (text.length > idx && text[idx] == bullet) {
            idx++;
        }
        return idx;
    }
    getText() {
        return this.text;
    }
    setMaxImageSize() {
        let code = $("<div>").html(this.text);
        $("img", code).each(function (idx, img) {
            $(img).css("max-width", "604px"); // 16 cm
            $(img).css("max-height", "800px"); // 22 cm            
        });
        this.text = code.html();
    }
    replaceCount(what, wth) {
        let replaced = this.text.indexOf(what) != -1;
        this.replaceNoCount(what, wth);
        return replaced ? 1 : 0;
    }
    replaceNoCount(what, wth) {
        this.text = this.text.replace(new RegExp(what, 'g'), wth);
    }
    replaceTags(cleaningLevel) {
        let code = $("<div>").html(this.text);
        let count = 0;
        $.each((cleaningLevel == HTMLCleaner.CleanLevel.StrictDoc) ? this.cleanConfig.tagReplacementsDoc : this.cleanConfig.tagReplacements, function (tgidx, tr) {
            let replaced = false;
            do {
                replaced = false;
                $(tr.what, code).each(function (idx, x) {
                    let y = $(tr.with).html($(x).html());
                    $(x).replaceWith(y);
                    replaced = true;
                    count++;
                });
            } while (replaced);
        });
        this.text = code.html();
        return count;
    }
    removeTags() {
        let code = this.autoEscape ? $("<div>").text(this.text) : $("<div>").html(this.text); // text escapes < 
        $.each(this.cleanConfig.blackLists.removeTags, function (csidx, tag) {
            $(tag, code).each(function (idx, cb) { $(cb).remove(); });
        });
        this.text = code.html();
    }
    removeInsideTags() {
        let that = this;
        let code = $("<div>").html(this.text);
        $.each(this.cleanConfig.blackLists.keepOnlyInside, function (csidx, tag) {
            $(tag, code).contents().unwrap();
        });
        this.text = code.html();
    }
    // clean inline style: allow only stuff which can be created with the editor
    cleanInlineStyle() {
        let that = this;
        let code = $("<div>").html(this.text);
        $("*", code).each(function (idx, node) {
            let newStyle = [];
            let style = $(node).attr("style");
            if (style) {
                let sns = style.replace(/ /g, ""); // note this could cause problems with font names with spaces, but these are removed anyway
                $.each(that.cleanConfig.whiteLists.styles, function (csidx, conf) {
                    if (conf.tagName === "*" || conf.tagName === $(node).prop("tagName")) {
                        $.each(conf.allowed, function (id, ks) {
                            if (sns.indexOf(ks) !== -1) {
                                newStyle.push(ks);
                            }
                        });
                    }
                });
                let padded = ";" + sns + ";";
                // background and foreground colors
                if ($(node).prop("tagName") === "SPAN") {
                    let bc = padded.match(/;background-color[^;]+/);
                    if (bc && bc.length > 0) {
                        newStyle.push(bc[bc.length - 1].substr(1));
                    }
                    let fc = padded.match(/;color[^;]+/);
                    if (fc && fc.length > 0) {
                        newStyle.push(fc[fc.length - 1].substr(1));
                    }
                }
                // width and height of images
                if ($(node).prop("tagName") === "IMG") {
                    let iw = padded.match(/;width[^;]+/);
                    if (iw && iw.length > 0) {
                        newStyle.push(iw[iw.length - 1].substr(1));
                    }
                    let ih = padded.match(/;height[^;]+/);
                    if (ih && ih.length > 0) {
                        newStyle.push(ih[ih.length - 1].substr(1));
                    }
                }
                if (newStyle.length > 0) {
                    $(node).attr("style", newStyle.join(";"));
                }
                else {
                    $(node).removeAttr("style");
                }
            }
        });
        this.text = code.html();
    }
    // clean classes: only some classes are meaningful
    cleanClasses() {
        let that = this;
        let code = $("<div>").html(this.text);
        $("*", code).each(function (idx, node) {
            let newClasses = [];
            let cs = $(node).attr("class");
            if (cs) {
                let classes = cs.split(" ");
                $.each(that.cleanConfig.whiteLists.classes, function (csidx, conf) {
                    if (conf.tagName === "*" || conf.tagName === $(node).prop("tagName")) {
                        $.each(conf.allowed, function (id, ks) {
                            if (classes.indexOf(ks) !== -1) {
                                newClasses.push(ks);
                            }
                        });
                    }
                });
            }
            // always make nice bordered tables with full width
            if ($(node).prop("tagName") === "TABLE") {
                newClasses.push("table");
                newClasses.push("table-bordered");
            }
            $(node).removeAttr("class");
            if (newClasses.length > 0) {
                $(node).attr("class", newClasses.join(" "));
            }
        });
        this.text = code.html();
    }
    // clean properties: only some properites can exist
    removeProps(node, whiteList) {
        let attributes = node[0].attributes;
        let i = attributes.length;
        while (i--) {
            var attr = attributes[i];
            if (whiteList.indexOf(attr.name) == -1 && attr.name.indexOf("data-") !== 0 && attr.name != "class" && attr.name != "style") {
                node.removeAttr(attr.name);
            }
        }
    }
    cleanProperties() {
        let that = this;
        let code = $("<div>").html(this.text);
        $("*", code).each(function (idx, node) {
            let hasRule = false;
            $.each(that.cleanConfig.whiteLists.properties, function (csidx, conf) {
                if (conf.tagName === $(node).prop("tagName")) {
                    hasRule = true;
                    that.removeProps($(node), conf.allowed);
                }
            });
            if (!hasRule) {
                that.removeProps($(node), []);
            }
            ;
        });
        this.text = code.html();
    }
    cleanData() {
        let that = this;
        let code = $("<div>").html(this.text);
        $("*", code).each(function (idx, node) {
            // node jquery getAttr(does not work for stuff like data-vr-xxxx, it will return the attribute name vrXxxx instead of vr-xxxx
            let toRemove = [];
            $.each(node.attributes, function (key, attr) {
                if (attr.name.indexOf("data-") === 0) {
                    let attrName = attr.name.replace("data-", "");
                    let isWhiteListed = false;
                    $.each(that.cleanConfig.whiteLists.data, function (csidx, conf) {
                        if (conf.tagName === $(node).prop("tagName") && conf.allowed.indexOf(attrName) !== -1) {
                            isWhiteListed = true;
                        }
                    });
                    if (!isWhiteListed) {
                        toRemove.push(attrName);
                    }
                }
            });
            $.each(toRemove, function (ridx, remove) {
                node.removeAttribute("data-" + remove);
            });
        });
        this.text = code.html();
    }
    removeUseLessStuff() {
        let keepGoing = true;
        while (keepGoing) {
            let code = $("<div>").html(this.text);
            keepGoing = this.removeSpansWithoutStyle(code);
            keepGoing = keepGoing || this.removeEmpty(code);
            keepGoing = keepGoing || this.unwrapEmptyStuff(code, "div", "DIV");
            keepGoing = keepGoing || this.unwrapEmptyStuff(code, "div", "P");
            // removing the fiv with a span inside is bad, the div make a paragraph
            // keepGoing = keepGoing || this.unwrapEmptyStuff( code, "div","SPAN");
            keepGoing = keepGoing || this.unwrapEmptyStuff(code, "div", "UL");
            this.text = code.html();
            keepGoing = keepGoing || this.removeDivDiv();
        }
    }
    handleWordLists() {
        let that = this;
        /*
         *
         * <p class="MsoListParagraphCxSpFirst" style="....">
         * <!--[if !supportLists]--><span style="..;">...</span><!--[endif]-->      QMS: this is the core of the quality management system, it will contain all your SOPs, quality work instructions, forms and templates, etc.<o:p></o:p></p>
         *
         * <ul><li>QMS...</li>
  <p class="MsoListParagraphCxSpMiddle" style="text-indent:-.25in;mso-list:l0 level1 lfo1"><!--[if !supportLists]--><span style="font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family: Symbol">·<span style="font-variant-numeric: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &quot;Times New Roman&quot;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><!--[endif]-->sadasdada<o:p></o:p></p>
  <p class="MsoListParagraphCxSpMiddle" style="text-indent:-.25in;mso-list:l0 level1 lfo1"><!--[if !supportLists]--><span style="font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family: Symbol">·<span style="font-variant-numeric: normal; font-stretch: normal; font-size: 7pt; line-height: normal; font-family: &quot;Times New Roman&quot;;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><!--[endif]-->QMS-FILE: this project will contain the plans, reports and records of your application of the quality system, e.g. audit plans and reports, management review minutes, etc.<o:p></o:p></p>
  <p class="MsoListParagraphCxSpLast" style="text-indent:-.25in;mso-list:l0 level1 lfo1"><!--[if !supportLists]--><span style="font-famil
         *
         *
         */
        // replace the funny points
        this.text = this.text.replace(/<!--\[if !supportLists]-->.*?<!--\[endif]-->/g, "");
        let code = $("<div>").html(this.text);
        $.each($("[class$='CxSpFirst']", code), function (idx, li) {
            let next = $(li).next();
            let lstart = $("<ul>").append($("<li>").append(($(li).html())));
            $(li).replaceWith(lstart);
            let level = 0;
            let levelStack = [lstart];
            while (next && next.length > 0) {
                let x = next.next();
                if (next.is("[class$='CxSpMiddle']") || next.is("[class$='CxSpLast']")) {
                    let nextLevel = level;
                    let nextStyle = next.attr("style");
                    if (!nextStyle || nextStyle.indexOf("level1") != -1)
                        nextLevel = 0;
                    else if (nextStyle.indexOf("level2") != -1)
                        nextLevel = 1;
                    else if (nextStyle.indexOf("level3") != -1)
                        nextLevel = 2;
                    else if (nextStyle.indexOf("level4") != -1)
                        nextLevel = 3;
                    else if (nextStyle.indexOf("level5") != -1)
                        nextLevel = 4;
                    else if (nextStyle.indexOf("level6") != -1)
                        nextLevel = 5;
                    if (nextLevel === level) {
                        lstart.append($("<li>").append($(next).html()));
                    }
                    else if (nextLevel > level) {
                        // indent
                        let newStart = $("<ul>").append($("<li>").append(($(next).html())));
                        levelStack.push(newStart);
                        lstart.append(newStart);
                        lstart = newStart;
                    }
                    else {
                        // outdent
                        if (nextLevel < levelStack.length) {
                            lstart = levelStack[nextLevel]; // go back to good level and remove other lists
                            levelStack.splice(nextLevel + 1, 100);
                        }
                        else {
                            // doesn't make sense really
                            lstart = $("<ul>").append($("<li>").append(($(li).html())));
                            levelStack.push(lstart);
                        }
                        lstart.append($("<li>").append($(next).html()));
                    }
                    level = nextLevel;
                    $(next).remove();
                }
                next = x;
            }
        });
        this.text = code.html();
    }
    // <span>a<span> -> a
    // <span>a<span>b</span><span> -> b
    // <span>a<span style='c'>b</span><span> -> <span style='c'>b</span>
    removeSpansWithoutStyle(node) {
        let replaced = false;
        $.each($("span", node), function (idx, span) {
            let hasMeta = $(span).attr("style") || $(span).attr("class") || $(span).attr("data");
            if (!hasMeta) {
                replaced = true;
                $(span).replaceWith($(span).html());
            }
        });
        return replaced;
    }
    removeEmpty(node) {
        let replaced = false;
        $.each(this.cleanConfig.blackLists.removeEmpty, function (idx, re) {
            $.each($(re, node), function (idx, p) {
                if ($(p).html() === "") {
                    replaced = true;
                    $(p).remove();
                }
            });
        });
        return replaced;
    }
    unwrapEmptyStuff(node, outer, inner) {
        let unwraped = false;
        $(outer, node).each(function (idx, out) {
            let hasMeta = $(out).attr("style") || $(out).attr("class") || $(out).attr("data");
            if (!hasMeta && out.children.length == 1 && out.children[0].tagName === inner && out.innerHTML == out.children[0].outerHTML) {
                //console.log( out.tagName + ": " + out.innerHTML )
                unwraped = true;
                $(out).contents().unwrap();
            }
        });
        return unwraped;
    }
    removeDivDiv() {
        let replaced = this.text;
        this.text = this.text.replace(/<div><\/div><div>/g, "<div>");
        //if(replaced != this.text) console.log( "removed <div></div><div></div>");
        return replaced != this.text;
    }
}
(function (HTMLCleaner) {
    let CleanLevel;
    (function (CleanLevel) {
        CleanLevel[CleanLevel["PurifyOnly"] = 0] = "PurifyOnly";
        CleanLevel[CleanLevel["Basic"] = 1] = "Basic";
        CleanLevel[CleanLevel["Soft"] = 2] = "Soft";
        CleanLevel[CleanLevel["Strict"] = 3] = "Strict";
        CleanLevel[CleanLevel["BasicSafety"] = 4] = "BasicSafety";
        CleanLevel[CleanLevel["StrictDoc"] = 5] = "StrictDoc";
        CleanLevel[CleanLevel["Server"] = 6] = "Server"; // server like cleaning -> remove all but a whitelist
    })(CleanLevel = HTMLCleaner.CleanLevel || (HTMLCleaner.CleanLevel = {}));
})(HTMLCleaner || (HTMLCleaner = {}));
;
/*

known tags
----------
HR, A, SPAN, BR, TABLE, IMG, P, DIV, TR,TD, UL, OL, LI, blockquote, PRE


data
----
SPAN  data-mid="1489062317559"

*/ 


/***/ }),
/* 132 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   JSONTools: () => (/* binding */ JSONTools)
/* harmony export */ });
/* harmony import */ var _businesslogic_BasicFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(74);
/* harmony import */ var _JQueryExtendReplacement__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(97);
// To keep dependencies to a minimum, BasicFunctions is directly imported so
// we don't have all of the business logic libs.



class JSONTools {
    constructor(logger) {
        this.logger = logger;
    }
    cloner2(src) {
        return (0,_JQueryExtendReplacement__WEBPACK_IMPORTED_MODULE_1__.extend)(true, {}, { x: src }).x;
    }
    mergeOptions(defaultOptions, options) {
        let newOptions = this.clone(defaultOptions);
        // make sure there is a parameter object
        if (!newOptions.parameter) {
            newOptions['parameter'] = {};
        }
        // copy parameters one by one
        if (options.parameter) {
            for (var name in options.parameter) {
                newOptions.parameter[name] = options.parameter[name];
            }
        }
        // copy other values
        for (var name in options) {
            if (name != 'parameter') {
                newOptions[name] = options[name];
            }
        }
        // use parameters to overwrite some default values
        if (this.isTrue(newOptions.parameter.readonly)) {
            newOptions.canEdit = false;
        }
        return newOptions;
    }
    // overwrite default options
    setOptions(newOptions, options) {
        // make sure there is a parameter object
        if (!newOptions.parameter) {
            newOptions['parameter'] = {};
        }
        // copy parameters one by one
        if (options.parameter) {
            for (var name in options.parameter) {
                newOptions.parameter[name] = options.parameter[name];
            }
        }
        // copy other values
        for (var name in options) {
            if (name != 'parameter') {
                newOptions[name] = options[name];
            }
        }
        // use parameters to overwrite some default values
        if (this.isTrue(newOptions.parameter.readonly)) {
            newOptions.canEdit = false;
        }
        // handle readonly for ACLs
        if (this.isTrue(newOptions.parameter.readonlyACL)) {
            newOptions.canEdit = false;
        }
        return newOptions;
    }
    isTrue(obj) {
        return _businesslogic_BasicFunctions__WEBPACK_IMPORTED_MODULE_0__.BasicFunctions.isTrue(obj);
    }
    isFalse(obj) {
        return _businesslogic_BasicFunctions__WEBPACK_IMPORTED_MODULE_0__.BasicFunctions.isFalse(obj);
    }
    fromString(str) {
        var result = { status: 'empty', value: {} };
        if (str && str !== "") {
            // first replace all single quotes outside of double quotes with "
            var strp = str.replace(/(')(?=(?:[^"]|"[^"]*")*$)/g, '"').replace(/(\r\n|\n|\r)/gm, "");
            try {
                result.value = JSON.parse(strp);
                result.status = 'ok';
            }
            catch (err) {
                try {
                    result.value = JSON.parse(str);
                    result.status = 'ok';
                }
                catch (err) {
                    this.logger.log("error", "Error trying to parse configuration parameter: " + str);
                    this.logger.log("error", "Error was:" + err);
                    result.status = 'error';
                }
            }
        }
        return result;
    }
    clone(src) {
        var b = this.cloner2(src);
        return b;
    }
    /** json lint and JSON.parse( ) don't handle backslashes ( "a":"\s" )*/
    escapeJson(code) {
        return code.replace(/\\/g, "\\\\");
    }
    /** json lint and JSON.parse( ) don't handle backslashes ( "a":"\s" )*/
    unEscapeJson(code) {
        return code.replace(/\\\\/g, "\\");
    }
}
;


/***/ }),
/* 133 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LoggerTools: () => (/* binding */ LoggerTools),
/* harmony export */   SERVER_LOG_LEVEL: () => (/* binding */ SERVER_LOG_LEVEL)
/* harmony export */ });

var SERVER_LOG_LEVEL;
(function (SERVER_LOG_LEVEL) {
    SERVER_LOG_LEVEL["WEIRD_STATE"] = "WEIRD_STATE";
    SERVER_LOG_LEVEL["BROKEN_STATE"] = "BROKEN_STATE";
})(SERVER_LOG_LEVEL || (SERVER_LOG_LEVEL = {}));
class LoggerTools {
    constructor(functionRenderHumanDate, sanitize) {
        this.verbose = false;
        this.lastLogMsg = "none";
        this.logData = [];
        this.logIdx = 0;
        this.logSize = 50;
        this.functionRenderHumanDate = functionRenderHumanDate;
        this.functionSanitize = (sanitize) ? sanitize : (d) => { return DOMPurify.sanitize(d); };
    }
    log(id, msg) {
        if (!this.verbose && id === "debug") {
            return;
        }
        msg = this.functionSanitize(msg) + '';
        if (!msg) {
            return;
        }
        console.log(id + ":" + msg);
        if (this.lastLogMsg === msg) {
            this.logData[this.logIdx] = this.logData[this.logIdx] + ".";
        }
        else {
            this.logIdx++;
            if (this.logIdx === this.logSize) {
                this.logIdx = 0;
            }
            // this.logData[this.logIdx] = ml.UI.DateTime.renderHumanDate(new Date()) + " [" + id + "]: " + msg;
            this.logData[this.logIdx] = this.functionRenderHumanDate(new Date()) + " [" + id + "]: " + msg;
            this.lastLogMsg = msg;
        }
    }
    debug(message) {
        this.log("debug", message);
    }
    info(message) {
        this.log("info", message);
    }
    warning(message) {
        this.log("warning", message);
    }
    error(message) {
        this.log("error", message);
    }
    getLog() {
        var msg = "";
        for (var idx = this.logIdx + 1; idx < this.logIdx + this.logSize + 1; idx++) {
            if (this.logData[idx % this.logSize]) {
                msg += this.logData[idx % this.logSize] + "\n";
            }
        }
        return msg;
    }
}


/***/ }),
/* 134 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MailTools: () => (/* binding */ MailTools)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);



class MailTools {
    sendMail(to, cc, bcc, subject, body, systemMail, noSuccess, noReply) {
        let that = this;
        var res = $.Deferred();
        var text = $("<div class='controlContainer'>").html(body);
        $("br", text).replaceWith("\n");
        var tol = to ? to.split(",") : [];
        var ccl = cc ? cc.split(",") : [];
        var bccl = bcc ? bcc.split(",") : [];
        let sendMailParm = {
            to: tol,
            cc: ccl,
            bcc: bccl,
            subject: subject,
            htmlbody: body,
            textbody: text.text(),
            system: systemMail,
            noreply: noReply
        };
        let queryString = "?" + (systemMail != undefined ? "system=" + systemMail + "&" : "") + (noReply != undefined ? "noreply=" + noReply : "");
        _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.postSpecialServer("all/sendmail" + queryString, sendMailParm).done(function () {
            if (!systemMail && !noSuccess) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showSuccess("Mail sent successfully.");
            }
            res.resolve();
        }).fail(function (jqxhr, textStatus, error) {
            if (!systemMail) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Error sending mail!", "Status:" + textStatus + "<br/>Error was:" + error);
            }
            res.reject();
        });
        return res;
    }
    sendMailDlg(sendTo, preSelectedUsers, subject, body, sendCc) {
        let that = this;
        async function updateSend() {
            var sendButton = $(".ui-dialog-buttonpane button:contains('Send')", _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.parent());
            var enabled = sendTo.length && subj && await subj.getController().getValueAsync() !== "";
            sendButton.prop("disabled", !enabled);
            if (enabled) {
                sendButton.removeClass("ui-state-disabled");
            }
            else {
                sendButton.addClass("ui-state-disabled");
            }
        }
        var cc = sendCc ? sendCc.split(",") : [];
        let mailConf = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getMailSettings();
        if (mailConf && mailConf.defaultCC && mailConf.defaultCC.length) {
            cc = cc.concat(mailConf.defaultCC.filter(function (userOrGroup) { return _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.SelectUserOrGroup.exists(userOrGroup); }));
        }
        if (sendTo.split(",").indexOf(_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser()) === -1 && _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser() !== "matrixadmin") {
            // the user himself is always on cc - by default
            cc.push(_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser());
        }
        // get distinct names
        cc = cc.filter(function (elem, pos, arr) { return arr.indexOf(elem) == pos; });
        let usel = $("<div class='controlContainer'>");
        let ccl = $("<div class='controlContainer'>");
        if (preSelectedUsers && preSelectedUsers.length) {
            // take user list from parameter (no groups possible)
            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.SelectUserOrGroup.showMultiUserSelect(usel, "To", (sendTo ? sendTo.split(",") : []), "Select To Users", "", "", true, false, (selection) => {
                sendTo = selection.join(",");
                updateSend();
            }, preSelectedUsers);
            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.SelectUserOrGroup.showMultiUserSelect(ccl, "Cc", cc, "Select Cc Users", "", "", true, false, (selection) => {
                cc = _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.JSON.clone(selection);
                updateSend();
            }, preSelectedUsers);
        }
        else {
            // take users from current project
            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.SelectUserOrGroup.showMultiUserSelect(usel, "To", (sendTo ? sendTo.split(",") : []), "Select To Users / Groups", "", "", true, true, (selection) => {
                sendTo = selection.join(",");
                updateSend();
            });
            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.SelectUserOrGroup.showMultiUserSelect(ccl, "Cc", cc, "Select Cc Users / Groups", "", "", true, true, (selection) => {
                cc = _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.JSON.clone(selection);
                updateSend();
            });
        }
        var subj = $("<div class='controlContainer'>").plainText({
            controlState: _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.FormEdit,
            canEdit: true,
            help: "Subject",
            fieldValue: subject,
            valueChanged: function () {
                updateSend();
            },
            parameter: {
                rows: 1,
                allowResize: false
            }
        });
        var cont = $("<div class='controlContainer'>");
        cont.richText({ controlState: _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.FormEdit, canEdit: true, help: "Message", fieldValue: body, valueChanged: function () { }, parameter: { tiny: true } });
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.hide();
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.html("");
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.append(usel);
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.append(ccl);
        // workaround for MATRIX-995 cannot edit links in sendmail
        // somehow that thing gets a focus event out of nowhere
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.append(subj);
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.append(cont);
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.addClass("dlg-no-scroll");
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.removeClass("dlg-v-scroll");
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog({
            autoOpen: true,
            title: "Send Mail",
            width: 730,
            height: 720,
            modal: true,
            resizeStop: function () { },
            open: function () {
                window.setTimeout(function () {
                    $("input", subj).focus();
                }, 1);
                updateSend();
            },
            buttons: [{
                    text: 'Send',
                    class: 'btnDoIt',
                    click: async function () {
                        that.sendMail(sendTo, cc.join(","), "", await subj.getController().getValueAsync(), await cont.getController().getValueAsync());
                        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog("close");
                    }
                }, {
                    text: 'Cancel',
                    class: 'btnCancelIt',
                    click: function () {
                        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog("close");
                    }
                }]
        });
    }
    replacePlaceholders(template, itemId, rejectComment, reviewers, readers, trainers, trainees) {
        let msg = _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Mail.getCannedMessage("", "", itemId, template);
        msg = msg.replace(new RegExp("_reject_", 'g'), rejectComment ? rejectComment : "");
        msg = msg.replace(new RegExp("_reviewers_", 'g'), reviewers ? reviewers.join() : "");
        msg = msg.replace(new RegExp("_readers_", 'g'), readers ? readers.join() : "");
        msg = msg.replace(new RegExp("_trainers_", 'g'), trainers ? trainers.join() : "");
        msg = msg.replace(new RegExp("_trainees_", 'g'), trainees ? trainees.join() : "");
        return msg;
    }
    getCannedMessage(messageId, to, itemId, custom, body = "") {
        var message = custom;
        let mailConf = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getMailSettings();
        if (!custom && mailConf && mailConf.canned && (mailConf.canned)[messageId]) {
            message = (mailConf.canned)[messageId];
        }
        else if (messageId === "link") {
            message = "Hello<br/><br/>please have a look at <b>_link_ _title_</b>.<br/><br/>_me.firstName_";
        }
        else if (messageId === "please_sign") {
            message = "Hello,<br/><br/>please review and sign the following document <b>_link_ _title_</b><br/><br/>_me.firstName_";
        }
        else if (messageId === "new_user") {
            message = "Hello _to.firstName_,<br/><br/>Here is your access to Matrix.<br/><br/>_userinfo_<br/><br/>You have access to these projects:<br/><br/>_projectlist_<br/>_me.firstName_";
        }
        else if (messageId === "reset_pwd") {
            message = "Hello _to.firstName_,<br/><br/>Please change your password.<br/><br/>_userinfo_<br/>";
        }
        else if (messageId === "release_note") {
            message = "Hello,<br/><br/>the document <b>_link_ _title_</b> has been released!<br/><br/>_me.firstName_";
        }
        else if (messageId === "approve_note") {
            message = "Hello ,<br/><br/>the template <b>_link_ _title_</b> waits for approval!<br/><br/>_me.firstName_";
        }
        else if (messageId === "training_reminder") {
            message = "Hello _to.firstName_,<br/><br/> You need to do the following training:<br/>_body_<br/>_me.firstName_";
        }
        else if (messageId === "review_reminder") {
            message = "Hello _to.firstName_,<br/><br/> You need to review the following :<br/>_body_<br/>_me.firstName_";
        }
        else if (messageId === "qms_published") {
            message = "Hello,<br/>_body_<br/>_me.firstName_";
        }
        else if (messageId === "gate_passed") {
            message = `Hello _to.firstName_,<br/><br/>_me.firstName_ passed the gate _body_ for <b>_link_ _title_</b>.<br/><br/>`;
        }
        else if (messageId === "empty_message") {
            message = ``;
        }
        if (body != undefined)
            message = message.replace("_body_", body);
        // address the user eg by firstName: a) get the correct user info
        var users = _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getUserNames();
        var user;
        var me;
        let toUsers = to.split(",");
        let toFirst = [];
        let toLast = [];
        let toLogin = [];
        $.each(users, function (uidx, u) {
            if (u.login === to) {
                user = u;
            }
            if (toUsers.indexOf(u.login) != -1) {
                toFirst.push(u.firstName);
                toLast.push(u.lastName);
                toLogin.push(u.login);
            }
            if (u.login === _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser()) {
                me = u;
            }
        });
        // address the user eg by firstName: b) replace all existing keys for to
        if (user) {
            $.each(Object.keys(user), function (kidx, key) {
                message = message.replace(new RegExp("_to." + key + "_", 'g'), user[key]);
            });
        }
        else {
            message = message.replace(new RegExp("_to_", 'g'), to);
        }
        message = message.replace(new RegExp("_to.firstName_", 'g'), toFirst.join(","));
        message = message.replace(new RegExp("_to.lastName_", 'g'), toLast.join(","));
        message = message.replace(new RegExp("_to.login_", 'g'), toLogin.join(","));
        // address the user eg by firstName: c) replace all existing keys for sender
        if (me) {
            $.each(Object.keys(me), function (kidx, key) {
                message = message.replace(new RegExp("_me." + key + "_", 'g'), me[key]);
            });
        }
        else {
            message = message.replace(/_me.*_/g, "");
        }
        // replace other stuff
        if (itemId) {
            message = message.replace(new RegExp("_id_", 'g'), itemId);
            message = message.replace(new RegExp("_project_", 'g'), _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getProject());
            message = message.replace(new RegExp("_url_", 'g'), _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(itemId).url);
            message = message.replace(new RegExp("_link_", 'g'), _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(itemId).link);
            message = message.replace(new RegExp("_linkv_", 'g'), _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(itemId).linkv);
            var title = _globals__WEBPACK_IMPORTED_MODULE_0__.app.getItemTitle(itemId);
            message = message.replace(new RegExp("_title_", 'g'), title);
        }
        return message;
    }
    sendMails(sendTos, subject, messages) {
        if (sendTos.length > 2) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.Progress.Init("sending mails");
        }
        let mailConf = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getMailSettings();
        let cc = "";
        if (mailConf && mailConf.defaultCC && mailConf.defaultCC.length) {
            cc = mailConf.defaultCC.filter(function (userOrGroup) { return _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.SelectUserOrGroup.exists(userOrGroup); }).join(",");
        }
        this.sendMailsRec(sendTos, cc, subject, messages, 0);
    }
    sendMailsRec(sendTos, cc, subject, messages, idx) {
        let that = this;
        if (sendTos.length > 2) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.Progress.Update(idx * 100 / sendTos.length);
        }
        if (idx >= sendTos.length) {
            if (sendTos.length > 2) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.Progress.SuccessHide("Done sending mails", 1000);
            }
            else {
                _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showSuccess("Done sending mails", 1000);
            }
            return;
        }
        this.sendMail(sendTos[idx], cc, "", subject, messages[idx], 0, true).done(function () {
            that.sendMailsRec(sendTos, cc, subject, messages, idx + 1);
        });
    }
}


/***/ }),
/* 135 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ReportGeneratorTools: () => (/* binding */ ReportGeneratorTools)
/* harmony export */ });
/* harmony import */ var _UI_Components_ProjectViewDefines__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(18);
/* harmony import */ var _UI_Tools_ItemSelectionView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(48);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _businesslogic_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(11);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(1);






class ReportGeneratorTools {
    constructor() {
        this.reportJoblist = { allGood: true, tasks: [], doneBatch: 0 };
        this.lastReportXMLs = [];
    }
    SaveAndCreate(itemId, reportOptions, progressInfo, postCreateCallback, postFailCallback, postProgressCallback) {
        let that = this;
        if (_globals__WEBPACK_IMPORTED_MODULE_2__.app.getNeedsSave()) {
            _globals__WEBPACK_IMPORTED_MODULE_2__.app.saveAsync(false).done(function () {
                window.setTimeout(function () {
                    that.StartReportEngine(itemId, reportOptions, progressInfo, postCreateCallback, postFailCallback, postProgressCallback);
                }, 1000);
            });
        }
        else {
            this.StartReportEngine(itemId, reportOptions, progressInfo, postCreateCallback, postFailCallback, postProgressCallback);
        }
    }
    StartReportEngine(reportId, reportOptions, progressInfo, postCreateCallback, postFailCallback, postProgressCallback) {
        let that = this;
        _globals__WEBPACK_IMPORTED_MODULE_2__.app.canLaunchReport().done(function (canLaunch) {
            if (canLaunch) {
                that.StartReportEngineLaunch(reportId, reportOptions, progressInfo, postCreateCallback, postFailCallback, postProgressCallback);
            }
            else {
                _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.UI.showConfirm(1, { title: "Report engine busy. Please wait a while and try again...", ok: "Try Again" }, function () {
                    window.setTimeout(function () {
                        that.StartReportEngine(reportId, reportOptions, progressInfo, postCreateCallback, postFailCallback, postProgressCallback);
                    }, 400);
                }, function () {
                });
            }
        });
    }
    StartReportEngineLaunch(reportId, reportOptions, progressInfo, postCreateCallback, postFailCallback, postProgressCallback) {
        let that = this;
        _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.Logger.log('debug', "starting report: " + progressInfo);
        _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.Logger.log('lastReportJobId', "");
        _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.Logger.log('lastReportFileId', "");
        _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.Logger.log('lastReportJobXML', "");
        _globals__WEBPACK_IMPORTED_MODULE_2__.app.startReportAsync(reportId, reportOptions).done(function (jobId) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.Logger.log('lastReportJobId', jobId.jobId.toString());
            that.reportJoblist.tasks.push({ jobId: jobId.jobId,
                progress: 0,
                reportId: reportId,
                reportOptions: reportOptions,
                postCreateCallback: postCreateCallback,
                postFailCallback: postFailCallback,
                postProgressCallback: postProgressCallback
            });
            let labels = reportOptions.filter ? (" (" + reportOptions.filter + ")") : "";
            if (that.reportJoblist.tasks.length === 1) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.UI.Progress.Init(progressInfo + labels, !!reportOptions.filter);
                that.reportJoblist.allGood = true;
                that.reportJoblist.doneBatch = 0;
                clearTimeout(that.reportProc);
                that.reportProc = window.setTimeout(function () {
                    that.waitForReports(0);
                }, 500);
            }
        });
    }
    waitForReports(rid) {
        let that = this;
        if (this.reportJoblist.tasks.length <= rid) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.UI.Progress.ErrorHide("Error retrieving report status", 2000);
            return;
        }
        _globals__WEBPACK_IMPORTED_MODULE_2__.app.getReportDetails(this.reportJoblist.tasks[rid].jobId).done(function (progress) {
            let status = that.getProgressStatus(progress.status);
            if (status === "Error" || progress.progress > 100) {
                let details = (status && status != "Error") ? that.getError(status) : "";
                _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.UI.showError("Error", "Failed to create " + that.reportJoblist.tasks[rid].reportId + (details ? ("<br>Error was: " + details) : ""));
                if (that.reportJoblist.tasks[rid].postFailCallback) {
                    that.reportJoblist.tasks[rid].postFailCallback("Failed to create " + that.reportJoblist.tasks[rid].reportId + (details ? ("<br>Error was: " + details) : ""));
                }
                that.reportJoblist.tasks.splice(rid, 1);
                that.reportJoblist.allGood = false;
                that.reportJoblist.doneBatch++;
                rid -= 1;
            }
            else if (progress.progress < 100) {
                if (status && status.itemsProgress) {
                    console.log(JSON.stringify(status.itemsProgress, null, 2));
                }
                if (that.reportJoblist.tasks[rid].postProgressCallback) {
                    that.reportJoblist.tasks[rid].postProgressCallback(progress.progress);
                }
                that.reportJoblist.tasks[rid].progress = progress.progress;
                var progressTotal = 100 * that.reportJoblist.doneBatch;
                for (var idx = 0; idx < that.reportJoblist.tasks.length; idx++) {
                    progressTotal += that.reportJoblist.tasks[idx].progress;
                }
                _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.UI.Progress.Update(progressTotal / (that.reportJoblist.tasks.length + that.reportJoblist.doneBatch));
            }
            else { // done with at least one
                var lastCreatedObject = progress.jobFile[progress.jobFile.length - 1];
                _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.Logger.log('lastReportFileId', lastCreatedObject.jobFileId.toString());
                that.lastReportXMLs.push("/job/" + that.reportJoblist.tasks[rid].jobId + "/" + progress.jobFile[0].jobFileId);
                _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.Logger.log('lastReportJobXML', _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.matrixRestUrl + "/" + _globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession.getProject() + "/job/" + that.reportJoblist.tasks[rid].jobId + "/" + progress.jobFile[0].jobFileId);
                if (that.reportJoblist.tasks[rid].postCreateCallback) {
                    that.reportJoblist.tasks[rid].postCreateCallback(lastCreatedObject, _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.matrixRestUrl + "/" + _globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession.getProject() + "/job/" + that.reportJoblist.tasks[rid].jobId + "/" + lastCreatedObject.jobFileId);
                }
                else {
                    _globals__WEBPACK_IMPORTED_MODULE_2__.app.download(that.reportJoblist.tasks[rid].jobId, lastCreatedObject.jobFileId);
                    that.updateAfterCreatingCache(that.reportJoblist.tasks[rid].reportId);
                }
                that.reportJoblist.doneBatch++;
                that.reportJoblist.tasks.splice(rid, 1);
                rid -= 1;
            }
            if (that.reportJoblist.tasks.length > 0) {
                that.reportProc = window.setTimeout(function () {
                    that.waitForReports((rid + 1) % that.reportJoblist.tasks.length);
                }, 500);
                return;
            }
            else if (that.reportJoblist.allGood) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.UI.Progress.SuccessHide("Finished creating report/document", 2000);
            }
            else {
                _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.UI.Progress.ErrorHide("Error creating report/document", 2000);
            }
        }).fail(function () {
            _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.UI.Progress.ErrorHide("Error retrieving report status", 2000);
        });
    }
    // this method checks if a signCache has been created during download of an item if so it updates it (without asking questions...)
    updateAfterCreatingCache(itemId) {
        // MATRIX-3721 if a signed has been downloaded, a cache has been created
        // if the same SIGN is being displayed, we need to load and display the new item, we do this as a second protection by cancelling the edits
        if (itemId && _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.Item.parseRef(itemId).type == "SIGN" && _globals__WEBPACK_IMPORTED_MODULE_2__.matrixApplicationUI.lastMainItemForm && _globals__WEBPACK_IMPORTED_MODULE_2__.app.getCurrentItemId() == itemId) {
            _globals__WEBPACK_IMPORTED_MODULE_2__.app.cancel();
            // and we force a get the latest
            _globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession.pushMessages.watchItem(itemId);
        }
    }
    getProgressStatus(text) {
        if (!text || text[0] != "{") {
            return text;
        }
        let isJson = _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.JSON.fromString(text);
        if (isJson.status == "ok") {
            return isJson.value;
        }
        return "";
    }
    getError(error) {
        if (!error.itemsProgress || error.itemsProgress.length == 0) {
            return error.errorMessage ? error.errorMessage : "";
        }
        for (let idx = 0; idx < error.itemsProgress.length; idx++) {
            if (error.itemsProgress[idx].progress == 200) {
                // that's an error
                return error.itemsProgress[idx].documentRef + ": " + error.itemsProgress[idx].message;
            }
        }
        return "unknown error";
    }
    CreateSignedDoc(docId, signatures, signedDocumentsControl, labelFilter, signName, transferFields, defaultLabels, docUpdateCb) {
        let that = this;
        if (_globals__WEBPACK_IMPORTED_MODULE_2__.app.getNeedsSave()) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.UI.showError("You must save document", "Save document before archiving it!");
            return;
        }
        let useDefaultFolder = _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.globalShiftDown;
        _globals__WEBPACK_IMPORTED_MODULE_2__.matrixSession.getCommentAsync().done(function (comment) {
            // get the last used folders
            let signTarget = _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.projectStorage.getItem("SignTarget") ? _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.projectStorage.getItem("SignTarget") : "F-SIGN-1";
            // shift pressed - use default folder
            if (useDefaultFolder) {
                that.createSIGN(signTarget, comment, docId, signatures, signedDocumentsControl, labelFilter, signName, transferFields, defaultLabels, docUpdateCb);
            }
            else {
                var st = new _UI_Tools_ItemSelectionView__WEBPACK_IMPORTED_MODULE_1__.ItemSelectionTools();
                st.showDialog({
                    selectMode: _UI_Components_ProjectViewDefines__WEBPACK_IMPORTED_MODULE_0__.SelectMode.singleFolder,
                    linkTypes: [{ type: "SIGN" }],
                    selectionChange: function (newSelection) {
                        if (!newSelection.length) {
                            newSelection = [{ to: "F-SIGN-1", title: "" }];
                        }
                        signTarget = newSelection[0].to;
                        _globals__WEBPACK_IMPORTED_MODULE_2__.globalMatrix.projectStorage.setItem("SignTarget", signTarget);
                        // finally
                        that.createSIGN(signTarget, comment, docId, signatures, signedDocumentsControl, labelFilter, signName, transferFields, defaultLabels, docUpdateCb);
                    },
                    getSelectedItems: async function () {
                        return [{ to: signTarget, title: "" }];
                    },
                    dialogTitle: "Select target folder",
                    focusOn: signTarget
                });
            }
        });
    }
    createSIGN(target, comment, docId, signatures, signedDocumentsControl, labelFilter, signName, transferFields, defaultLabels, docUpdateCb) {
        let that = this;
        var reportOptions = { reason: comment };
        if (labelFilter && labelFilter.length > 0) {
            reportOptions.filter = labelFilter;
        }
        if (!signatures || signatures.length === 0) {
            reportOptions["isSignedReport"] = true;
            reportOptions["includeSignatures"] = "";
        }
        else {
            reportOptions["isSignedReport"] = true;
            reportOptions["includeSignatures"] = signatures.join(',');
        }
        reportOptions["newTitle"] = signName;
        if (transferFields) {
            var trv = "";
            $.each(transferFields, function (tfIdx, tfv) {
                if (trv !== "") {
                    trv += ";";
                }
                trv += "(" + tfv.fromId + "," + tfv.toId + ")";
            });
            if (trv !== "") {
                reportOptions["copyFields"] = trv;
            }
        }
        that.StartReportEngine(docId, reportOptions, "Creating SIGNed Document", function (lastCreatedObject) {
            var newId = lastCreatedObject.visibleName;
            docUpdateCb(newId);
            // the new SIGN item id (newId) was created on the server, create the link and udpate the client
            _globals__WEBPACK_IMPORTED_MODULE_2__.app.getItemAsync(newId).done(function (itemdetails) {
                _businesslogic_index__WEBPACK_IMPORTED_MODULE_3__.MR1.triggerAfterCreateSign(itemdetails);
                if (defaultLabels.length > 0) {
                    _globals__WEBPACK_IMPORTED_MODULE_2__.app.updateItemInDBAsync({ id: itemdetails.id, onlyThoseFields: 1, onlyThoseLabels: 1, labels: defaultLabels.join(",") }, "edit").done(function (updatedItem) {
                        that.addSignToTree(target, comment, updatedItem, signedDocumentsControl);
                    });
                }
                else {
                    that.addSignToTree(target, comment, itemdetails, signedDocumentsControl);
                }
            }).fail(function () {
                _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.UI.showError("Could not create SIGN document!", "");
            });
        });
    }
    async addSignToTree(target, comment, itemdetails, signedDocumentsControl) {
        if (target != "F-SIGN-1") {
            // move it to target on server
            _globals__WEBPACK_IMPORTED_MODULE_2__.app.moveItemsAsync(itemdetails.id, target, 10000, comment);
        }
        // in the meantime update the tree
        var itemJson = {
            id: itemdetails.id,
            title: itemdetails.title,
            type: itemdetails.type
        };
        var newItem = {
            parent: target,
            position: 100000,
            item: itemJson
        };
        _globals__WEBPACK_IMPORTED_MODULE_2__.app.insertInTree(newItem);
        _globals__WEBPACK_IMPORTED_MODULE_2__.app.updateCache(newItem);
        // and add it to the list of downlinks
        if (signedDocumentsControl) {
            var refs = await signedDocumentsControl.getController().getValueAsync();
            if (!refs) {
                refs = [];
            }
            refs.push({
                to: itemdetails.id,
                title: itemdetails.title
            });
            signedDocumentsControl.getController().setValue(refs);
            _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.UI.showSuccess("Signed document " + itemdetails.id + " was created");
        }
    }
    CreateDoc(docId, format, labelFilter) {
        var reportOptions = format ? format : {};
        if (labelFilter && labelFilter.length > 0) {
            reportOptions.filter = labelFilter;
        }
        this.SaveAndCreate(docId, reportOptions, "Downloading Document", null);
    }
    CreateReport(reportId, format, inputItems, requiredItems) {
        var reportOptions = format ? format : {};
        var labelFilter = _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.LabelTools.getFilter();
        if (labelFilter && labelFilter.length > 0) {
            reportOptions.filter = labelFilter;
        }
        // only use the selected / required input
        var list = [];
        if (inputItems) {
            for (var idx = 0; idx < inputItems.length; idx++) {
                list.push(inputItems[idx].to);
            }
        }
        if (requiredItems) {
            for (var idx = 0; idx < requiredItems.length; idx++) {
                list.push(requiredItems[idx].to);
            }
        }
        if (list.length > 0) {
            reportOptions["itemList"] = list.join(",");
        }
        this.SaveAndCreate(reportId, reportOptions, "Downloading Report", null);
    }
    DownloadSignedDoc(signedId, format) {
        let that = this;
        _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.Logger.log('debug', "starting signed report");
        _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.Logger.log('lastReportJobId', "");
        _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.Logger.log('lastReportFileId', "");
        _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.Logger.log('lastReportJobXML', "");
        _globals__WEBPACK_IMPORTED_MODULE_2__.app.startCreateDocumentAsync(signedId, format).done(function (jobId) {
            var reportOptions = format ? format : {};
            _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.Logger.log('lastReportJobId', jobId.jobId.toString());
            that.reportJoblist.tasks.push({
                jobId: jobId.jobId,
                progress: 0,
                reportId: signedId,
                reportOptions: reportOptions,
                postCreateCallback: null
            });
            if (that.reportJoblist.tasks.length === 1) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_4__.ml.UI.Progress.Init("Downloading Document");
                that.reportJoblist.allGood = true;
                that.reportJoblist.doneBatch = 0;
                clearTimeout(that.reportProc);
                that.reportProc = window.setTimeout(function () {
                    that.waitForReports(0);
                }, 500);
            }
        });
    }
}


/***/ }),
/* 136 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SmartTextTools: () => (/* binding */ SmartTextTools)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _ProjectSettings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(42);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);




class SmartTextTools {
    constructor() {
        this.figureDef = { preNo: "Figure ", postNo: ": ", captionDetails: "captionDetailsFig", captionClass: "captionFig", referenceClassNo: "referenceFig" };
        this.tableDef = { preNo: "Table ", postNo: ": ", captionDetails: "captionDetailsTab", captionClass: "captionTab", referenceClassNo: "referenceTab" };
    }
    //****************************************
    // LEGACY summernote functions
    //***************************************
    /* summernote create menu to enter edit macros
    * docMode is true if editor/menu is a document -> in that case we support table and figure captions
    * tableMode is true if editor/menu is for a table cell  -> in that case we do not support smart text
    */
    createMenu(docMode, tableMode) {
        var hasTags = false;
        var list = '';
        var config = this.getCurrentConfig();
        let dhf_config = _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getDHFConfig();
        // (set (default texts)
        if (dhf_config && dhf_config.captions) {
            if (dhf_config.captions.figure) {
                this.figureDef.preNo = dhf_config.captions.figure.preNo ? dhf_config.captions.figure.preNo : this.figureDef.preNo;
                this.figureDef.postNo = dhf_config.captions.figure.postNo ? dhf_config.captions.figure.postNo : this.figureDef.postNo;
            }
            if (dhf_config.captions.table) {
                this.tableDef.preNo = dhf_config.captions.table.preNo ? dhf_config.captions.table.preNo : this.tableDef.preNo;
                this.tableDef.postNo = dhf_config.captions.table.postNo ? dhf_config.captions.table.postNo : this.tableDef.postNo;
            }
        }
        var isInDialog = $(".smarttaglist").closest(".dialog-body").length > 0;
        // group them by tag type
        var groups = [];
        var gc = 0;
        $.each(config.replacements, function (optIdx, opt) {
            var tt = opt.tagType ? opt.tagType : (opt.plain ? 1 : 2);
            if (!groups[tt]) {
                gc++;
                groups[tt] = [];
            }
            groups[tt].push(opt);
        });
        // insert smart references
        list += '<li class="selectSmartTextGroup dropdown-submenu"><a tabindex="-1" href="javascript:void(0)">' +
            'Insert References to</a><ul style="min-width:150px;" class="dropdown-menu">';
        list += '<li class="">' +
            '<a class="selectSmartText smarttextblock" data-event="selectSmartLink" href="#" ' +
            '" data-toggle="tooltip"><span style="margin:0 80px 0 0">Item(s) in this project</span></a>' + '</li>';
        list += '<li class="">' +
            '<a class="selectSmartText smarttextblock" data-event="selectCrossLink" href="#" ' +
            '" data-toggle="tooltip"><span style="margin:0 80px 0 0">Item(s) in another project</span></a>' + '</li>';
        list += '</ul></li>';
        // insert smart text blocks
        for (var gidx = 0; !tableMode && gidx < groups.length; gidx++) {
            var group = groups[gidx];
            if (group) {
                list += `
                <li class="selectSmartTextGroup dropdown-submenu">
                    <a tabindex="-1" href="javascript:void(0)">Insert ${this.getTooltipType(group[0])}</a>
                    <ul style="min-width:150px;" class="stsm dropdown-menu">
                        <li class="filterListList"><input autocomplete="off" placeholder="filter list" class="filterList" type="text"></li>`;
                $.each(group, function (optIdx, opt) {
                    list += `
                    <li class="">
                        <a class="selectSmartText smarttextblock" data-event="selectSmartText" href="#" name="${opt.what}" data-value="${opt.what}" data-toggle="tooltip">
                           <span style="margin:0 80px 0 0">${opt.what}</span>
                           <i class="deleteSmartText fal fa-trash-alt"></i>
                           <i class="editSmartText fal fa-edit"></i>
                        </a>
                    </li>`;
                    hasTags = true;
                });
                list += '</ul></li>';
            }
        }
        // insert figures / tables
        if (!tableMode && dhf_config && dhf_config.captions) {
            if ($("#itemDetails ." + this.figureDef.captionDetails).length > 0) {
                list += '<li class="selectSmartTextGroup dropdown-submenu"><a tabindex="-1" href="javascript:void(0)">' +
                    'Insert Figure Reference</a><ul style="min-width:400px;max-width:450px;" class="dropdown-menu">';
                $.each($("#itemDetails ." + this.figureDef.captionDetails), function (captIdx, caption) {
                    list += '<li class="">' +
                        '<a class="selectSmartText smarttextblock" data-event="insertFigReference" href="#" name="' + "figure" +
                        '" data-value="' + $(caption).data("mid") +
                        '" data-toggle="tooltip"><span style="white-space:normal;margin:0 80px 0 0">' + $(caption).text();
                    list += '</a>' + '</li>';
                    hasTags = true;
                });
                list += '</ul></li>';
            }
            if ($("#itemDetails ." + this.tableDef.captionDetails).length > 0) {
                list += '<li class="selectSmartTextGroup dropdown-submenu"><a tabindex="-1" href="javascript:void(0)">' +
                    'Insert Table Reference</a><ul style="min-width:400px;max-width:450px;" class="dropdown-menu">';
                $.each($("#itemDetails ." + this.tableDef.captionDetails), function (captIdx, caption) {
                    list += '<li class="">' +
                        '<a class="selectSmartText smarttextblock" data-event="insertTabReference" href="#" name="' + "table" +
                        '" data-value="' + $(caption).data("mid") +
                        '" data-toggle="tooltip"><span style="white-space:normal;margin:0 80px 0 0">' + $(caption).text();
                    list += '</a>' + '</li>';
                    hasTags = true;
                });
                list += '</ul></li>';
            }
        }
        if (_globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.serverStorage.getItem("copyBuffer")) {
            list += '<li><a title="paste copy buffer" data-event="pasteBuffer" href="#" data-value="">Paste ' + '</a></li>';
        }
        if (!tableMode) {
            // add menu to create new tags
            if (!hasTags) {
                list += '<li><a href="https://urlshort.matrixreq.com/d23/manual/macros" target="_blank" class="documentationLink" >Smart Text Help</a></li>';
            }
            list += '<li><hr style="margin:0px" /></li>';
            list += '<li><a title="can only be used in rich text fields" data-event="createSmartText" href="#" data-value="">Define rich text tag ' + '</a></li>';
            list += '<li><a title="can be used in rich text fields and document properties" data-event="createPlainText" href="#" data-value="">Define plain text tag ' + '</a></li>';
            list += '<li><a title="can be used to build a dictionary of terms" data-event="createTermText" href="#" data-value="">Define term ' + '</a></li>';
            list += '<li><a title="can be used to build a dictionary of abbreviation" data-event="createAbbreviationText" href="#" data-value="">Define abbreviation ' + '</a></li>';
            if (dhf_config && dhf_config.captions) {
                list += '<li><a title="can be used to insert a caption for a figure" data-event="createFigureCaption" href="#" data-value="">Define figure caption ' + '</a></li>';
                list += '<li><a title="can be used to insert a caption for a table" data-event="createTableCaption" href="#" data-value="">Define table caption ' + '</a></li>';
            }
        }
        // add menu
        $(".smarttaglist").html(list);
        window.setTimeout(function () {
            // one rendered
            // avoid flickering of sub menus (at bottom of screen)
            $.each($(".smarttaglist .stsm"), function (idx, stsm) {
                $(stsm).css("max-height", ($(stsm).parent().parent().height() - $(stsm).parent().position().top) + "px");
            });
        }, 200);
        // implement filter
        $(".filterList").click(function (event) {
            event.preventDefault();
            event.stopPropagation();
            return false;
        });
        $(".filterList").keyup(function (event) {
            let filterInput = $(event.delegateTarget);
            let filterText = $(event.delegateTarget).val().toLowerCase();
            $.each($("a", filterInput.closest("ul")), function (idx, st) {
                if (!filterText) {
                    $(st).show();
                }
                else {
                    let key = $(st).data("value") + "";
                    let reps = config.replacements.filter(function (rep) { return rep.what == key; });
                    let rwith = $("<div>").html(reps[0].with).text().toLowerCase();
                    if (reps.length == 1 && key.toLowerCase().indexOf(filterText) == -1 && rwith.indexOf(filterText) == -1) {
                        $(st).hide();
                    }
                    else {
                        $(st).show();
                    }
                }
            });
            return false;
        });
        // add tooltips
        $.each(config.replacements, function (optIdx, opt) {
            var replace = opt.with;
            if (opt.tagType === 3 || opt.tagType === 4) {
                replace += "<hr style='margin:0px'><div class='smarttext-menu-tt'>" + opt.description + "</div>";
            }
            $("a[name=" + opt.what + "]", $(".smarttaglist")).tooltip({
                html: true,
                title: replace,
                placement: "right",
                container: 'body',
                template: '<div class="tooltip smarttext-tooltip" role="tooltip"><div class="tooltip-arrow smarttext-tooltip-arrow"></div><div class="tooltip-inner smarttext-tooltip-inner"></div></div>'
            });
        });
    }
    // summernote create menu to get rid of a macro
    deleteTag(what) {
        let that = this;
        function deleteIt() {
            var config = _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getSmartText();
            if (!config || !config.replacements) {
                config = { "replacements": [] };
            }
            var replacements = [];
            $.each(config.replacements, function (optIdx, opt) {
                if (opt.what + "" !== what + "") {
                    replacements.push(opt);
                }
            });
            $('[data-value="' + what + '"]').parent().remove();
            config.replacements = replacements;
            _globals__WEBPACK_IMPORTED_MODULE_0__.app.setSettingJSON("rtf", config);
        }
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.searchAsync("_" + what + "_").done(function (results) {
            if (results.length > 0) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showConfirm(5, { title: "The smart text tag <b>" + what + "</b> is currently used " + results.length + " or more times. Delete anyway?", ok: "Delete" }, function () {
                    deleteIt();
                }, function () {
                });
            }
            else {
                deleteIt();
            }
        });
    }
    ;
    // summernote insert a figure reference
    insertFigReference(reference, editor, editable) {
        let ref = $(`#itemDetails .${this.figureDef.captionDetails}[data-mid='${reference}']`); /// Figure X: Explain
        this.insertReference(ref, this.figureDef, editor, editable);
    }
    // summernote insert a table of reference
    insertTabReference(reference, editor, editable) {
        let ref = $(`#itemDetails .${this.tableDef.captionDetails}[data-mid='${reference}']`); /// Table X: Explain
        this.insertReference(ref, this.tableDef, editor, editable);
    }
    //  summernote menu to paste from internal buffer
    pasteBuffer(editor, editable) {
        let html = $(_globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.serverStorage.getItem("copyBuffer"));
        editor.insertNode(editable, $(html)[0], true);
    }
    insertReference(source, def, editor, editable) {
        let id = source.data("mid");
        let text = $(".captionText", source).html();
        let reference = `<span class="referenceDetails" data-mid="${id}">
                <span class="referenceFix" contenteditable="false">
                    <span class="referencePre">${def.preNo}</span>
                    <span  class="${def.referenceClassNo}" data-mid="${id}"></span>
                    <span class="referencePost">${def.postNo}</span>
                </span>
                <span class="referenceText">${text}</span>
            </span> `;
        editor.insertNode(editable, $(reference)[0], true);
        editor.insertNode(editable, $("<span>&nbsp;</span>")[0], true);
        // put in current number
        this.updateCaptionsAndReferences();
    }
    // insert a caption for table or image
    createCaption(isTable, editor, editable) {
        let nowms = new Date().getTime();
        let def = isTable ? this.tableDef : this.figureDef;
        let caption = `<p class="caption">
            <span class="${def.captionDetails}" data-mid="${nowms}">
                <span class="captionFix" contenteditable="false">
                    <span class="captionPre">${def.preNo}</span>
                    <span  class="${def.captionClass}" data-mid="${nowms}"></span>
                    <span class="captionPost">${def.postNo}</span>
                </span>
                <span class="captionText">${isTable ? "Table Caption" : "Figure Caption"}</span>
            </span></p>`;
        editor.insertNode(editable, $(caption)[0], true);
        this.updateCaptionsAndReferences();
    }
    //  summernote update numbers for tables and figure references
    updateCaptionsAndReferences() {
        $.each($("#itemDetails .captionFig"), function (idx, obj) {
            $(obj).html("");
            let mid = $(obj).data("mid");
            if (mid) {
                $(obj).html(idx + 1);
                $(`#itemDetails .referenceFig[data-mid='${mid}']`).html(idx + 1);
            }
        });
        $.each($("#itemDetails .captionTab"), function (idx, obj) {
            $(obj).html("");
            let mid = $(obj).data("mid");
            if (mid) {
                $(obj).html(idx + 1);
                $(`#itemDetails .referenceTab[data-mid='${mid}']`).html(idx + 1);
            }
        });
    }
    //  summernote function to create or modify tags
    createEditTag(tagType, what, data, saveFct, forceTiny) {
        // tagType:
        // 0 edit existing tag
        // 1 new plain text tag
        // 2 new rich text tag
        // 3 new term tag
        // 4 abbreviation tag
        // what is either the macro id or the item to be edited, the later is the case if a saveFct is passed
        // saveFct: optional function to save creation / changes, if not saved in project settings
        let that = this;
        let dlg = $("#smartTextDlg");
        dlg.hide();
        dlg.html("");
        dlg.removeClass("dlg-no-scroll");
        dlg.addClass("dlg-v-scroll");
        var body = `<div class="form-group row-fluid">
                <div class="smarttext-tag-name controlContainer" ></div>
                <div class="smartEditor controlContainer" ></div>
                <div class="tagDescription controlContainer" ></div>
            </div>
            <div class="checkbox">
                <label><input type="checkbox">Show me current value before creating signed documents</label>
            </div>`;
        dlg.append(body);
        var smartEditor = $('.smartEditor', dlg);
        var tagDescription = $('.tagDescription', dlg);
        var warnCheckbox = $('[type=checkbox]', dlg);
        let newTagName = $(".smarttext-tag-name", dlg);
        var content = "";
        var description = "";
        var warn = false;
        var dlgTitle = "Edit ";
        let isCreate = false;
        // define default content: get it from selection of rich text editor
        if ((tagType === 1 || tagType === 2 || tagType === 4) && window.getSelection().rangeCount) {
            dlgTitle = "Create ";
            isCreate = true;
            var range = window.getSelection().getRangeAt(0);
            try {
                var fragment = range.cloneContents();
                var div = document.createElement('div');
                div.appendChild(fragment.cloneNode(true));
                content = (tagType === 1) ? div.innerText : div.innerHTML;
            }
            catch (ex) {
                // nothing selected
            }
        }
        else if (tagType === 0 && what) {
            // it is an edit... replace it with the actual tag type which is stored in the database
            var opt = data ? data : this.getReplacement(what);
            tagType = opt.tagType ? opt.tagType : (opt.plain ? 1 : 2);
            description = opt.description ? opt.description : "";
            content = opt.with ? opt.with : "";
            warn = opt.warn ? opt.warn : false;
            what = opt.what;
        }
        if (tagType === 1) {
            dlgTitle += "Plain Text";
        }
        else if (tagType === 4) {
            dlgTitle += "Abbreviation";
        }
        else if (tagType === 2) {
            dlgTitle += "Smart Text";
        }
        else if (tagType === 3) {
            dlgTitle += "Term";
        }
        dlg.dialog({
            autoOpen: true,
            title: dlgTitle,
            width: 716,
            height: 680,
            resizeStop: function () { },
            modal: true,
            open: function () {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.pushDialog(dlg);
                // enable or set tag name input field
                warnCheckbox.prop("checked", warn);
                // set editor to plain text or html
                smartEditor.html("");
                if (tagType === 1) {
                    smartEditor.plainText({ fieldValue: content, canEdit: true, help: "Plain Text", valueChanged: () => { that.calculateButtonEnable(newTagName, smartEditor, tagDescription); } });
                }
                else if (tagType === 2) {
                    smartEditor.richText({ controlState: _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.DialogEdit, fieldValue: content, canEdit: true, help: "Rich Text", parameter: { noConvertTiny: !forceTiny, autoEdit: isCreate }, valueChanged: () => { that.calculateButtonEnable(newTagName, smartEditor, tagDescription); } });
                }
                else if (tagType === 3) {
                    smartEditor.plainText({ controlState: _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.DialogEdit, fieldValue: content, canEdit: true, help: "Term", parameter: { rows: 1, allowResize: false }, valueChanged: () => { that.calculateButtonEnable(newTagName, smartEditor, tagDescription); } });
                    tagDescription.richText({ fieldValue: description, canEdit: true, help: "Explanation", parameter: { height: 200, noConvertTiny: !forceTiny, autoEdit: isCreate }, valueChanged: () => { that.calculateButtonEnable(newTagName, smartEditor, tagDescription); } });
                }
                else if (tagType === 4) {
                    smartEditor.plainText({ fieldValue: content, canEdit: true, help: "Short Name", parameter: { rows: 1, allowResize: false }, valueChanged: () => { that.calculateButtonEnable(newTagName, smartEditor, tagDescription); } });
                    tagDescription.plainText({ fieldValue: description, canEdit: true, help: "Full Name", parameter: { rows: 1, allowResize: false, autoEdit: isCreate }, valueChanged: () => { that.calculateButtonEnable(newTagName, smartEditor, tagDescription); } });
                }
                that.addEnter(newTagName, smartEditor, tagDescription, what);
                if (what) {
                    // edit existing tag
                    newTagName.getController().setValue(what);
                }
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.setEnabled($(".btnDoIt", $("#smartTextDlg").parent()), false);
            },
            close: function () { _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.popDialog(dlg); },
            buttons: [{
                    text: 'Save',
                    class: 'btnDoIt',
                    click: async function () {
                        var html = await smartEditor.getController().getValueAsync();
                        var description = (tagType === 3 || tagType === 4) ? await tagDescription.getController().getValueAsync() : "";
                        var tag = await newTagName.getController().getValueAsync();
                        var warn = warnCheckbox.prop("checked");
                        var newRTF = {
                            "what": tag,
                            "with": html,
                            "warn": warn,
                            tagType: tagType,
                            description: description,
                            when: (new Date()).toISOString()
                        };
                        if (saveFct) {
                            if (saveFct(newRTF)) {
                                dlg.dialog("close");
                            }
                        }
                        else {
                            that.saveTag(newRTF);
                            dlg.dialog("close");
                        }
                    }
                }, {
                    text: 'Cancel',
                    class: 'btnCancelIt',
                    click: function () {
                        dlg.dialog("close");
                    }
                }]
        });
    }
    //****************************************
    // tiny rich text functions
    // *************************************** /
    // tiny: dialog to manipulate tags
    selectEditCreateTag(mode, tagType, tagSelected) {
        // mode:
        // 0 insert
        // 1 add
        // 2 edit
        // tagType:
        // 1 new plain text tag
        // 2 new rich text tag
        // 3 new term tag
        // 4 abbreviation tag
        // saveFct: function returning the selected macro
        let that = this;
        // get existing options
        let existing = [];
        let allTagIds = [];
        var config = that.getCurrentConfig();
        $.each(config.replacements, function (optIdx, opt) {
            allTagIds.push(opt.what);
            let tt = opt.tagType ? opt.tagType : (opt.plain ? 1 : 2);
            if (tt == tagType) {
                existing.push(opt);
            }
        });
        let previous = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.clone(existing);
        // prepare dialog
        let dlg = $("#smartTextDlg");
        dlg.hide();
        dlg.html("");
        dlg.removeClass("dlg-no-scroll");
        dlg.addClass("dlg-v-scroll");
        var body = `<div class="form-group row-fluid">
            <div class="smartSelect" ></div>
            <div class="smartEditor" ></div>
            <div class="tagDescription" ></div>
        </div>
        <div class="checkbox">
            <label><input type="checkbox">Show me current value before creating signed documents</label>
        </div>`;
        dlg.append(body);
        var smartSelect = $('.smartSelect', dlg);
        var smartEditor = $('.smartEditor', dlg);
        var tagDescription = $('.tagDescription', dlg);
        var warnCheckbox = $('[type=checkbox]', dlg);
        var content = "";
        var description = "";
        var warn = false;
        var dlgTitle = "";
        if (tagType === 1) {
            dlgTitle += "Plain Text";
        }
        else if (tagType === 4) {
            dlgTitle += "Abbreviation";
        }
        else if (tagType === 2) {
            dlgTitle += "Smart Text";
        }
        else if (tagType === 3) {
            dlgTitle += "Term";
        }
        let dialogOptions = {
            autoOpen: true,
            title: dlgTitle,
            width: 716,
            height: 680,
            resizeStop: function () { },
            modal: true,
            open: function () {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.pushDialog(dlg);
                // enable or set tag name input field
                warnCheckbox.prop("checked", warn);
                // set editor to plain text or html
                smartEditor.html("");
                if (tagType === 1) {
                    smartEditor.plainText({ fieldValue: content, canEdit: (mode > 0), help: "Plain Text", valueChanged: () => { that.calculateButtonEnable(smartSelect, smartEditor, tagDescription); } });
                    tagDescription.hidden({});
                }
                else if (tagType === 2) {
                    smartEditor.richText({ controlState: _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.DialogEdit, fieldValue: content, canEdit: (mode > 0), help: "Rich Text", parameter: { tableMode: true, tiny: true, autoEdit: mode == 1 }, valueChanged: () => { that.calculateButtonEnable(smartSelect, smartEditor, tagDescription); } });
                    tagDescription.hidden({});
                }
                else if (tagType === 3) {
                    smartEditor.plainText({ fieldValue: content, canEdit: (mode > 0), help: "Term", parameter: { rows: 1, allowResize: false }, valueChanged: () => { that.calculateButtonEnable(smartSelect, smartEditor, tagDescription); } });
                    tagDescription.richText({ controlState: _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.DialogEdit, fieldValue: description, canEdit: (mode > 0), help: "Explanation", parameter: { height: 120, tiny: true, autoEdit: mode == 1 }, valueChanged: () => { that.calculateButtonEnable(smartSelect, smartEditor, tagDescription); } });
                }
                else if (tagType === 4) {
                    smartEditor.plainText({ fieldValue: content, canEdit: (mode > 0), help: "Short Name", parameter: { rows: 1, allowResize: false }, valueChanged: () => { that.calculateButtonEnable(smartSelect, smartEditor, tagDescription); } });
                    tagDescription.plainText({ fieldValue: description, canEdit: (mode > 0), help: "Full Name", parameter: { rows: 1, allowResize: false }, valueChanged: () => { that.calculateButtonEnable(smartSelect, smartEditor, tagDescription); } });
                }
                if (mode == 0 /* insert */ || mode == 2 /* add */) {
                    that.addSelect(smartSelect, existing, tagType, smartEditor, tagDescription, warnCheckbox);
                }
                else {
                    that.addEnter(smartSelect, smartEditor, tagDescription, "");
                }
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.setEnabled($(".btnDoIt", $("#smartTextDlg").parent()), false);
            },
            close: function () { _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.popDialog(dlg); },
            buttons: [{
                    text: 'Close',
                    class: 'btnCancelIt',
                    click: function () {
                        dlg.dialog("close");
                    }
                }]
        };
        if (mode == 0 /* insert */) {
            dialogOptions.buttons.splice(0, 0, {
                text: 'Insert',
                class: 'btnDoIt',
                click: async function () {
                    let html = await that.removeOuterParagraph(await smartEditor.getController().getValueAsync());
                    var description = (tagType === 3 || tagType === 4) ? await tagDescription.getController().getValueAsync() : "";
                    var tag = await smartSelect.getController().getValueAsync();
                    var warn = warnCheckbox.prop("checked");
                    // update the current if there's one
                    let exists = existing.filter(function (repl) {
                        return repl.what == tag;
                    });
                    if (exists.length) {
                        exists[0].description = description;
                        exists[0].with = html;
                        exists[0].warn = warn;
                    }
                    if (exists.length) {
                        tagSelected(exists[0]);
                    }
                    that.updateTags(tagType, previous, existing);
                    dlg.dialog("close");
                }
            });
        }
        else if (mode == 1 /* edit */ || mode == 2 /* add */) {
            dialogOptions.buttons.splice(0, 0, {
                text: 'Save',
                class: 'btnDoIt',
                click: async function () {
                    let html = that.removeOuterParagraph(await smartEditor.getController().getValueAsync());
                    var description = (tagType === 3 || tagType === 4) ? await tagDescription.getController().getValueAsync() : "";
                    var tag = await smartSelect.getController().getValueAsync();
                    var warn = warnCheckbox.prop("checked");
                    // update the current if there's one
                    let existsAsAnyType = allTagIds.indexOf(tag) != -1;
                    let exists = existing.filter(function (repl) {
                        return repl.what == tag;
                    });
                    if (mode == 1 && existsAsAnyType) { // create
                        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Tag id exists already", "There is already a tag with id '" + tag + "'");
                        return false;
                    }
                    else if (mode == 2 && exists.length == 0 && existsAsAnyType) { // edit dialog, trying to add something which exists as other type
                        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showError("Tag id exists already", "There is already another tag with id '" + tag + "'");
                        return false;
                    }
                    else if (exists.length) { // the tag already exist as same type
                        exists[0].description = description;
                        exists[0].with = html;
                        exists[0].warn = warn;
                    }
                    else {
                        // create new
                        existing.push({
                            tagType: tagType,
                            what: tag,
                            description: description,
                            with: html,
                            warn: warn,
                            when: (new Date()).toISOString()
                        });
                    }
                    that.updateTags(tagType, previous, existing);
                    dlg.dialog("close");
                    return true;
                }
            });
        }
        dlg.dialog(dialogOptions);
    }
    // tiny: figure out if tag can be inserted
    calculateButtonEnableInsert(option) {
        let btnEnabled = !!option;
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.setEnabled($(".btnDoIt", $("#smartTextDlg").parent()), btnEnabled);
    }
    // tiny: figure out if tag can be created
    async calculateButtonEnable(tagName, smartEditor, tagDescription) {
        let btnEnabled = true;
        if (await smartEditor.getController().getValueAsync() == "") {
            btnEnabled = false;
        }
        if ($("input", tagDescription).is(":visible") && await tagDescription.getController().getValueAsync() == "") {
            btnEnabled = false;
        }
        if (tagName.getController && await tagName.getController().getValueAsync() == "") {
            btnEnabled = false;
        }
        if (!tagName.getController && tagName.val() == "") {
            btnEnabled = false;
        }
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.setEnabled($(".btnDoIt", $("#smartTextDlg").parent()), btnEnabled);
    }
    // tiny: get rid of <p>tag around rich text (if there are not 2 paragraphs)
    removeOuterParagraph(edit) {
        if (edit.length < 8)
            return edit; // no <p>something</p>
        if (edit.substr(0, 3) != "<p>")
            return edit; // no <p>something</p>
        if (edit.substr(edit.length - 4, 4) != "</p>")
            return edit; // no <p>something</p>
        if (edit.indexOf("<p", 1) != -1)
            return edit; // <p>something</p><p> xxx</p>
        return edit.substr(3, edit.length - 7);
    }
    // tiny: create dropdown with existing tags
    addSelect(container, existing, tagType, replace, description, warn) {
        let that = this;
        let options = existing.map(function (st, idx) { return { id: st.what, label: (st.projectSetting ? st.what : (st.what + " (server)")) }; });
        let last = "";
        let dd = container.mxDropdown({
            help: "Macro Name",
            canEdit: true,
            parameter: {
                placeholder: "select macro",
                create: true,
                options: options,
                maxItems: 1,
                sort: true
            }, valueChanged: async function () {
                let val = await dd.getController().getValueAsync();
                var before = existing.filter(function (sm) {
                    return sm.what == last;
                });
                if (before.length) {
                    // update the previously selected
                    before[0].with = await replace.getController().getValueAsync();
                    before[0].description = that.removeOuterParagraph(await description.getController().getValueAsync());
                    before[0].warn = warn.prop("checked");
                }
                var after = existing.filter(function (sm) {
                    return sm.what == val;
                });
                if (after.length) {
                    // load the new one
                    replace.getController().setValue(after[0].with);
                    description.getController().setValue(after[0].description);
                    warn.prop("checked", after[0].warn);
                }
                last = val;
                that.calculateButtonEnableInsert(val);
            },
            fieldValue: ""
        });
        return dd;
    }
    // tiny: field to enter tag name
    addEnter(container, replace, description, text) {
        let that = this;
        let last = "";
        let dd = container.plainText({
            id: "",
            help: "New Macro Name:",
            parameter: { rows: 1, allowResize: false },
            controlState: _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.DialogCreate,
            valueChanged: async () => {
                let val = await dd.getController().getValueAsync();
                let clean = val ? val.replace(/[^a-zA-Z0-9]/g, '') : "";
                if (clean && last != clean) {
                    last = clean;
                    dd.getController().setValue(clean);
                }
                that.calculateButtonEnable(container, replace, description);
            },
            canEdit: text ? false : true,
            validate: false, noAutoActivation: true,
            fieldValue: text ? text : ""
        });
        return dd;
    }
    //****************************************
    // both editors (sumernote+tiny) functions
    // *************************************** /
    replaceTextFragments(text, showTooltips, encoded) {
        let that = this;
        var textFragments = this.getCurrentConfig();
        if (textFragments && textFragments.replacements) {
            $.each(textFragments.replacements, function (replacementIdx, replacement) {
                let resolved = that.resolveRec(replacement.with, textFragments.replacements, 5);
                let rwith = "<span class='macro' data-macro='_" + replacement.what + "_'>" + resolved + "<span class='" +
                    (showTooltips ? 'smart-replace' : '') +
                    "' data-toggle='tooltip'  data-what='" + replacement.what + "' data-placement='auto top' >" +
                    (showTooltips ? '*' : '') + "</span></span>";
                if (encoded) {
                    rwith = JSON.stringify(rwith);
                    rwith = rwith.substr(1, rwith.length - 2);
                }
                text = text.replace(new RegExp("_" + replacement.what + "_", 'g'), rwith);
            });
        }
        return text;
    }
    resolveRec(text, replace, levels) {
        if (!levels) {
            // no more replacements
            return text;
        }
        let org = text;
        for (let rep of replace) {
            text = text.replace(new RegExp("_" + rep.what + "_", 'g'), rep.with);
        }
        // if something was replaced go on
        return org == text ? org : this.resolveRec(text, replace, levels - 1);
    }
    showTooltips(node, noContainer) {
        let that = this;
        $.each($(".smart-replace", node), function (tti, tt) {
            const what = $(tt).data("what");
            const rwith = that.getReplacement(what);
            if (rwith) {
                const tagType = rwith.tagType ? rwith.tagType : (rwith.plain ? 1 : 2);
                let tooltip = "<div class='smarttext_what'>_" + what + "_ (" + that.getTooltipType(rwith) + ")</div>";
                if (tagType === 3 || tagType === 4) {
                    tooltip += "<div class='smarttext_description'>" + rwith.description + "</div>";
                }
                $(tt).tooltip({
                    html: true,
                    title: tooltip,
                    container: noContainer ? false : "body",
                    template: '<div class="tooltip smarttext-tooltip" role="tooltip"><div class="tooltip-arrow smarttext-tooltip-arrow"></div><div class="tooltip-inner smarttext-tooltip-inner"></div></div>'
                });
            }
        });
    }
    ;
    prepareForReadReadRender(itemDetails) {
        const shadowRoots = {};
        // replace all form fields with static html to so that they can be easily copied
        $("select", itemDetails).each(function (idx, select) { $(select).replaceWith("<div>" + _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.lt.forDB($("option:selected", $(select)).text(), 0) + "</div>"); });
        $("textarea", itemDetails).each(function (idx, select) { $(select).replaceWith("<div>" + _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.lt.forDB($(select).val(), 0).replace(/\n/g, "<br>") + "</div>"); });
        // line input fields
        $("input[type!=checkbox]", itemDetails).each(function (idx, select) { $(select).replaceWith("<div>" + _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.lt.forDB($(select).val(), 0) + "</div>"); });
        // checkboxes
        $("input[type=checkbox]:not(.showHideAdmin)", itemDetails).each(function (idx, select) { $(select).replaceWith("<span class='" + ($(select).is(':checked') ? "	fal fa-check-square" : "fal fa-square") + "'> </span>"); });
        // Shadow Doms for text boxes
        itemDetails[0].querySelectorAll(".shadow-root").forEach(element => {
            const shadow = element.shadowRoot;
            const id = element.id;
            if (shadow == null) {
                console.error("Shadow node does not contain a shadow root");
            }
            else if (id == null || id == "") {
                console.error("Shadow node does not have an ID, history view won't work!");
            }
            else {
                if (shadowRoots.hasOwnProperty(id)) {
                    console.error("Shadow node without unique ID, this will cause issues!");
                }
                else {
                    shadowRoots[id] = shadow.innerHTML;
                }
            }
        });
        // cache html
        itemDetails.parent().data("originalHTML", itemDetails.html());
        // cache shadow roots
        itemDetails.parent().data("shadowRoots", JSON.stringify(shadowRoots));
    }
    getTooltipType(repl) {
        var tagType = repl.tagType ? repl.tagType : (repl.plain ? 1 : 2);
        switch (tagType) {
            case 1:
                return "Plain Text Replacement";
            case 2:
                return "Rich Text Replacement";
            case 3:
                return "Term Definition";
            case 4:
                return "Abbreviation";
        }
        return "";
    }
    getCurrentConfig() {
        var config = { replacements: [] };
        if (_globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig == undefined)
            return config;
        var sconfig = _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getSmartText();
        if (sconfig && sconfig.replacements && sconfig.replacements.length > 0) {
            // mark the project wide settings
            config = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.clone(sconfig);
            $.each(config.replacements, function (optIdx, opt) {
                opt.projectSetting = true;
            });
        }
        // check if there are server/customer settings and merge them in (project have precedence)
        var sc = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getCustomerSettingJSON("rtf");
        if (sc && sc.replacements) {
            $.each(sc.replacements, function (csidx, cs) {
                var found = false;
                $.each(config.replacements, function (optIdx, opt) {
                    if (opt.what + "" === cs.what + "") { // make sure both are strings
                        found = true;
                    }
                });
                if (!found) {
                    config.replacements.push(cs);
                }
            });
        }
        // sort
        config.replacements = config.replacements.sort(function (a, b) {
            return (a.what > b.what) ? 1 : ((a.what < b.what) ? -1 : 0);
        });
        return config;
    }
    // update and add new tags
    updateTags(tagType, previous, updated) {
        _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.getProject("setting").done(function (result) {
            _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.addSettings(result);
            var config = _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getSmartText();
            if (!config || !config.replacements || config.replacements.length === 0) {
                config = { replacements: [] };
            }
            let changed = false;
            $.each(updated, function (eIdx, update) {
                let found = false;
                let previously = previous.filter(function (prev) { return prev.what == update.what; });
                let unChanged = (previously.length && previously[0].with == update.with && previously[0].description == update.description && previously[0].warn == update.warn);
                if (!unChanged) {
                    // either replace the old from the project setting ...
                    $.each(config.replacements, function (optIdx, current) {
                        if (current.what == update.what) {
                            if (current.with != update.with || current.description != update.description || current.warn != update.warn) {
                                // update the project setting
                                found = true;
                                changed = true;
                                current.with = update.with;
                                current.description = update.description;
                                current.warn = update.warn;
                                current.when = (new Date()).toISOString();
                            }
                        }
                    });
                    // ... or create a new one
                    if (!found) {
                        // we need to create a new project setting
                        changed = true;
                        config.replacements.push({ what: update.what, with: update.with, warn: update.warn, tagType: tagType, description: update.description, when: (new Date()).toISOString() });
                    }
                }
            });
            if (changed) {
                _globals__WEBPACK_IMPORTED_MODULE_0__.app.setSettingJSON(_ProjectSettings__WEBPACK_IMPORTED_MODULE_1__.smartTextConfigSetting, config);
            }
        });
    }
    saveTag(tag) {
        // reload the settings to be sure nobody changed it inbetween
        _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.getProject("setting").done(function (result) {
            _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.addSettings(result);
            var config = _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig.getSmartText();
            if (!config || !config.replacements || config.replacements.length === 0) {
                config = { replacements: [tag] };
            }
            else {
                // check if it is an update or new
                var found = false;
                $.each(config.replacements, function (optIdx, opt) {
                    if (opt.what + "" === tag.what + "") {
                        config.replacements[optIdx] = tag;
                        found = true;
                    }
                });
                if (!found) {
                    config.replacements.push(tag);
                }
            }
            _globals__WEBPACK_IMPORTED_MODULE_0__.app.setSettingJSON("rtf", config);
        });
    }
    getReplacement(what) {
        let config = this.getCurrentConfig();
        let hit;
        $.each(config.replacements, function (optIdx, opt) {
            if (opt.what + "" === what + "") { // make sure both are strings
                hit = opt;
            }
        });
        return hit;
    }
}


/***/ }),
/* 137 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BlockingProgressUI: () => (/* binding */ BlockingProgressUI),
/* harmony export */   LT: () => (/* binding */ LT),
/* harmony export */   ProgressUI: () => (/* binding */ ProgressUI),
/* harmony export */   SelectUserOrGroupUI: () => (/* binding */ SelectUserOrGroupUI),
/* harmony export */   UIToolsEnum: () => (/* binding */ UIToolsEnum)
/* harmony export */ });
/* harmony import */ var _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);
/* harmony import */ var _UI_Components_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);
/* harmony import */ var _UI_Tools_ThemeSelector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(138);
/* harmony import */ var _WidgetDashboard_WidgetPluginsContainer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(139);
/* harmony import */ var _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(2);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(5);
/* harmony import */ var _DateTimeUI__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(147);
/// <reference types="matrixrequirements-type-declarations" />









// TODO(modules): the export of UIToolsEnum is very strange...merging of a module + class?


class UIToolsEnum {
    fixC3ForCopy(copied) {
        $(".c3-legend-background", copied).remove();
        $("svg path", copied).css("cursor", "unset");
        $("svg text", copied).css("opacity", "1");
        $(".c3-legend-item ", copied).css("cursor", "unset");
        $(".c3-axis path.domain", copied).attr("stroke", "black");
        $(".c3-axis .tick line", copied).attr("stroke", "black");
        $(".c3-axis path.domain", copied).attr("fill", "none");
    }
    constructor() {
        this.tooltip_cache = {};
        this.removeTimer = {};
        this.toolIcons = ["ad", "address-book", "address-card", "adjust", "air-freshener", "align-center", "align-justify", "align-left", "align-right", "allergies", "ambulance", "american-sign-language-interpreting", "anchor", "angle-double-down", "angle-double-left", "angle-double-right", "angle-double-up", "angle-down", "angle-left", "angle-right", "angle-up", "angry", "ankh", "apple-alt", "archive", "archway", "arrow-alt-circle-down", "arrow-alt-circle-left", "arrow-alt-circle-right", "arrow-alt-circle-up", "arrow-circle-down", "arrow-circle-left", "arrow-circle-right", "arrow-circle-up", "arrow-down", "arrow-left", "arrow-right", "arrow-up", "arrows-alt", "arrows-alt-h", "arrows-alt-v", "assistive-listening-systems", "asterisk", "at", "atlas", "atom", "audio-description", "award", "baby", "baby-carriage", "backspace", "backward", "bacon", "balance-scale", "balance-scale-left", "balance-scale-right", "ban", "band-aid", "barcode", "bars", "baseball-ball", "basketball-ball", "bath", "battery-empty", "battery-full", "battery-half", "battery-quarter", "battery-three-quarters", "bed", "beer", "bell", "bell-slash", "bezier-curve", "bible", "bicycle", "biking", "binoculars", "biohazard", "birthday-cake", "blender", "blender-phone", "blind", "blog", "bold", "bolt", "bomb", "bone", "bong", "book", "book-dead", "book-medical", "book-open", "book-reader", "bookmark", "border-all", "border-none", "border-style", "bowling-ball", "box", "box-open", "boxes", "braille", "brain", "bread-slice", "briefcase", "briefcase-medical", "broadcast-tower", "broom", "brush", "bug", "building", "bullhorn", "bullseye", "burn", "bus", "bus-alt", "business-time", "calculator", "calendar", "calendar-alt", "calendar-check", "calendar-day", "calendar-minus", "calendar-plus", "calendar-times", "calendar-week", "camera", "camera-retro", "campground", "candy-cane", "cannabis", "capsules", "car", "car-alt", "car-battery", "car-crash", "car-side", "caret-down", "caret-left", "caret-right", "caret-square-down", "caret-square-left", "caret-square-right", "caret-square-up", "caret-up", "carrot", "cart-arrow-down", "cart-plus", "cash-register", "cat", "certificate", "chair", "chalkboard", "chalkboard-teacher", "charging-station", "chart-area", "chart-bar", "chart-line", "chart-pie", "check", "check-circle", "check-double", "check-square", "cheese", "chess", "chess-bishop", "chess-board", "chess-king", "chess-knight", "chess-pawn", "chess-queen", "chess-rook", "chevron-circle-down", "chevron-circle-left", "chevron-circle-right", "chevron-circle-up", "chevron-down", "chevron-left", "chevron-right", "chevron-up", "child", "church", "circle", "circle-notch", "city", "clinic-medical", "clipboard", "clipboard-check", "clipboard-list", "clock", "clone", "closed-captioning", "cloud", "cloud-download-alt", "cloud-meatball", "cloud-moon", "cloud-moon-rain", "cloud-rain", "cloud-showers-heavy", "cloud-sun", "cloud-sun-rain", "cloud-upload-alt", "cocktail", "code", "code-branch", "coffee", "cog", "cogs", "coins", "columns", "comment", "comment-alt", "comment-dollar", "comment-dots", "comment-medical", "comment-slash", "comments", "comments-dollar", "compact-disc", "compass", "compress", "compress-arrows-alt", "concierge-bell", "cookie", "cookie-bite", "copy", "copyright", "couch", "credit-card", "crop", "crop-alt", "cross", "crosshairs", "crow", "crown", "crutch", "cube", "cubes", "cut", "database", "deaf", "democrat", "desktop", "dharmachakra", "diagnoses", "dice", "dice-d20", "dice-d6", "dice-five", "dice-four", "dice-one", "dice-six", "dice-three", "dice-two", "digital-tachograph", "directions", "divide", "dizzy", "dna", "dog", "dollar-sign", "dolly", "dolly-flatbed", "donate", "door-closed", "door-open", "dot-circle", "dove", "download", "drafting-compass", "dragon", "draw-polygon", "drum", "drum-steelpan", "drumstick-bite", "dumbbell", "dumpster", "dumpster-fire", "dungeon", "edit", "egg", "eject", "ellipsis-h", "ellipsis-v", "envelope", "envelope-open", "envelope-open-text", "envelope-square", "equals", "eraser", "ethernet", "euro-sign", "exchange-alt", "exclamation", "exclamation-circle", "exclamation-triangle", "expand", "expand-arrows-alt", "external-link-alt", "external-link-square-alt", "eye", "eye-dropper", "eye-slash", "fan", "fast-backward", "fast-forward", "fax", "feather", "feather-alt", "female", "fighter-jet", "file", "file-alt", "file-archive", "file-audio", "file-code", "file-contract", "file-csv", "file-download", "file-excel", "file-", "file-image", "file-import", "file-invoice", "file-invoice-dollar", "file-medical", "file-medical-alt", "file-pdf", "file-powerpoint", "file-prescription", "file-signature", "file-upload", "file-video", "file-word", "fill", "fill-drip", "film", "filter", "fingerprint", "fire", "fire-alt", "fire-extinguisher", "first-aid", "fish", "fist-raised", "flag", "flag-checkered", "flag-usa", "flask", "flushed", "folder", "folder-minus", "folder-open", "folder-plus", "font", "football-ball", "forward", "frog", "frown", "frown-open", "funnel-dollar", "futbol", "gamepad", "gas-pump", "gavel", "gem", "genderless", "ghost", "gift", "gifts", "glass-cheers", "glass-martini", "glass-martini-alt", "glass-whiskey", "glasses", "globe", "globe-africa", "globe-americas", "globe-asia", "globe-europe", "golf-ball", "gopuram", "graduation-cap", "greater-than", "greater-than-equal", "grimace", "grin", "grin-alt", "grin-beam", "grin-beam-sweat", "grin-hearts", "grin-squint", "grin-squint-tears", "grin-stars", "grin-tears", "grin-tongue", "grin-tongue-squint", "grin-tongue-wink", "grin-wink", "grip-horizontal", "grip-lines", "grip-lines-vertical", "grip-vertical", "guitar", "h-square", "hamburger", "hammer", "hamsa", "hand-holding", "hand-holding-heart", "hand-holding-usd", "hand-lizard", "hand-middle-finger", "hand-paper", "hand-peace", "hand-point-down", "hand-point-left", "hand-point-right", "hand-point-up", "hand-pointer", "hand-rock", "hand-scissors", "hand-spock", "hands", "hands-helping", "handshake", "hanukiah", "hard-hat", "hashtag", "hat-cowboy", "hat-cowboy-side", "hat-wizard", "haykal", "hdd", "heading", "headphones", "headphones-alt", "headset", "heart", "heart-broken", "heartbeat", "helicopter", "highlighter", "hiking", "hippo", "history", "hockey-puck", "holly-berry", "home", "horse", "horse-head", "hospital", "hospital-alt", "hospital-symbol", "hot-tub", "hotdog", "hotel", "hourglass", "hourglass-end", "hourglass-half", "hourglass-start", "house-damage", "hryvnia", "i-cursor", "ice-cream", "icicles", "icons", "id-badge", "id-card", "id-card-alt", "igloo", "image", "images", "inbox", "indent", "industry", "infinity", "info", "info-circle", "italic", "jedi", "joint", "journal-whills", "kaaba", "key", "keyboard", "khanda", "kiss", "kiss-beam", "kiss-wink-heart", "kiwi-bird", "landmark", "language", "laptop", "laptop-code", "laptop-medical", "laugh", "laugh-beam", "laugh-squint", "laugh-wink", "layer-group", "leaf", "lemon", "less-than", "less-than-equal", "level-down-alt", "level-up-alt", "life-ring", "lightbulb", "link", "lira-sign", "list", "list-alt", "list-ol", "list-ul", "location-arrow", "lock", "lock-open", "long-arrow-alt-down", "long-arrow-alt-left", "long-arrow-alt-right", "long-arrow-alt-up", "low-vision", "luggage-cart", "magic", "magnet", "mail-bulk", "male", "map", "map-marked", "map-marked-alt", "map-marker", "map-marker-alt", "map-pin", "map-signs", "marker", "mars", "mars-double", "mars-stroke", "mars-stroke-h", "mars-stroke-v", "mask", "medal", "medkit", "meh", "meh-blank", "meh-rolling-eyes", "memory", "menorah", "mercury", "meteor", "microchip", "microphone", "microphone-alt", "microphone-alt-slash", "microphone-slash", "microscope", "minus", "minus-circle", "minus-square", "mitten", "mobile", "mobile-alt", "money-bill", "money-bill-alt", "money-bill-wave", "money-bill-wave-alt", "money-check", "money-check-alt", "monument", "moon", "mortar-pestle", "mosque", "motorcycle", "mountain", "mouse", "mouse-pointer", "mug-hot", "music", "network-wired", "neuter", "newspaper", "not-equal", "notes-medical", "object-group", "object-ungroup", "oil-can", "om", "otter", "outdent", "pager", "paint-brush", "paint-roller", "palette", "pallet", "paper-plane", "paperclip", "parachute-box", "paragraph", "parking", "passport", "pastafarianism", "paste", "pause", "pause-circle", "paw", "peace", "pen", "pen-alt", "pen-fancy", "pen-nib", "pen-square", "pencil-alt", "pencil-ruler", "people-carry", "pepper-hot", "percent", "percentage", "person-booth", "phone", "phone-alt", "phone-slash", "phone-square", "phone-square-alt", "phone-volume", "photo-video", "piggy-bank", "pills", "pizza-slice", "place-of-worship", "plane", "plane-arrival", "plane-departure", "play", "play-circle", "plug", "plus", "plus-circle", "plus-square", "podcast", "poll", "poll-h", "poo", "poo-storm", "poop", "portrait", "pound-sign", "power-off", "pray", "praying-hands", "prescription", "prescription-bottle", "prescription-bottle-alt", "print", "procedures", "project-diagram", "puzzle-piece", "qrcode", "question", "question-circle", "quidditch", "quote-left", "quote-right", "quran", "radiation", "radiation-alt", "rainbow", "random", "receipt", "record-vinyl", "recycle", "redo", "redo-alt", "registered", "remove-format", "reply", "reply-all", "republican", "restroom", "retweet", "ribbon", "ring", "road", "robot", "rocket", "route", "rss", "rss-square", "ruble-sign", "ruler", "ruler-combined", "ruler-horizontal", "ruler-vertical", "running", "rupee-sign", "sad-cry", "sad-tear", "satellite", "satellite-dish", "save", "school", "screwdriver", "scroll", "sd-card", "search", "search-dollar", "search-location", "search-minus", "search-plus", "seedling", "server", "shapes", "share", "share-alt", "share-alt-square", "share-square", "shekel-sign", "shield-alt", "ship", "shipping-fast", "shoe-prints", "shopping-bag", "shopping-basket", "shopping-cart", "shower", "shuttle-van", "sign", "sign-in-alt", "sign-language", "sign-out-alt", "signal", "signature", "sim-card", "sitemap", "skating", "skiing", "skiing-nordic", "skull", "skull-crossbones", "slash", "sleigh", "sliders-h", "smile", "smile-beam", "smile-wink", "smog", "smoking", "smoking-ban", "sms", "snowboarding", "snowflake", "snowman", "snowplow", "socks", "solar-panel", "sort", "sort-alpha-down", "sort-alpha-down-alt", "sort-alpha-up", "sort-alpha-up-alt", "sort-amount-down", "sort-amount-down-alt", "sort-amount-up", "sort-amount-up-alt", "sort-down", "sort-numeric-down", "sort-numeric-down-alt", "sort-numeric-up", "sort-numeric-up-alt", "sort-up", "spa", "space-shuttle", "spell-check", "spider", "spinner", "splotch", "spray-can", "square", "square-full", "square-root-alt", "stamp", "star", "star-and-crescent", "star-half", "star-half-alt", "star-of-david", "star-of-life", "step-backward", "step-forward", "stethoscope", "sticky-note", "stop", "stop-circle", "stopwatch", "store", "store-alt", "stream", "street-view", "strikethrough", "stroopwafel", "subscript", "subway", "suitcase", "suitcase-rolling", "sun", "superscript", "surprise", "swatchbook", "swimmer", "swimming-pool", "synagogue", "sync", "sync-alt", "syringe", "table", "table-tennis", "tablet", "tablet-alt", "tablets", "tachometer-alt", "tag", "tags", "tape", "tasks", "taxi", "teeth", "teeth-open", "temperature-high", "temperature-low", "tenge", "terminal", "text-height", "text-width", "th", "th-large", "th-list", "theater-masks", "thermometer", "thermometer-empty", "thermometer-full", "thermometer-half", "thermometer-quarter", "thermometer-three-quarters", "thumbs-down", "thumbs-up", "thumbtack", "ticket-alt", "times", "times-circle", "tint", "tint-slash", "tired", "toggle-off", "toggle-on", "toilet", "toilet-paper", "toolbox", "tools", "tooth", "torah", "torii-gate", "tractor", "trademark", "traffic-light", "train", "tram", "transgender", "transgender-alt", "trash", "trash-alt", "trash-restore", "trash-restore-alt", "tree", "trophy", "truck", "truck-loading", "truck-monster", "truck-moving", "truck-pickup", "tshirt", "tty", "tv", "umbrella", "umbrella-beach", "underline", "undo", "undo-alt", "universal-access", "university", "unlink", "unlock", "unlock-alt", "upload", "user", "user-alt", "user-alt-slash", "user-astronaut", "user-check", "user-circle", "user-clock", "user-cog", "user-edit", "user-friends", "user-graduate", "user-injured", "user-lock", "user-md", "user-minus", "user-ninja", "user-nurse", "user-plus", "user-secret", "user-shield", "user-slash", "user-tag", "user-tie", "user-times", "users", "users-cog", "utensil-spoon", "utensils", "vector-square", "venus", "venus-double", "venus-mars", "vial", "vials", "video", "video-slash", "vihara", "voicemail", "volleyball-ball", "volume-down", "volume-mute", "volume-off", "volume-up", "vote-yea", "vr-cardboard", "walking", "wallet", "warehouse", "water", "wave-square", "weight", "weight-hanging", "wheelchair", "wifi", "wind", "window-close", "window-maximize", "window-minimize", "window-restore", "wine-bottle", "wine-glass", "wine-glass-alt", "won-sign", "wrench", "x-ray", "yen-sign", "yin-yang"];
        //private colorScheme:string[] =  ["#1abc9c", "#2ecc71", "#3498db", "#9b59b6", "#34495e", "#16a085", "#27ae60", "#2980b9", "#8e44ad", "#2c3e50", "#f1c40f", "#e67e22", "#e74c3c", "#95a5a6", "#f39c12", "#d35400", "#c0392b", "#bdc3c7", "#7f8c8d"];
        this.colorScheme = [
            _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.CIColors.Black,
            _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.CIColors.BlueDoger,
            _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.CIColors.BlueEastBay,
            _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.CIColors.BlueLagoon,
            _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.CIColors.BlueZiggurat,
            _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.CIColors.BrownCoffeeRoyal,
            _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.CIColors.BrownDiSerria,
            _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.CIColors.BrownTiaMaria,
            _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.CIColors.GreenSushi,
            _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.CIColors.GreenYellow,
            _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.CIColors.GreyDark,
            _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.CIColors.OrangeYellow,
            _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.CIColors.PinkHot,
            _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.CIColors.RedPersimmon,
            _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.CIColors.VioletElectric,
            _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.CIColors.VioletMauve,
            _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.CIColors.YellowBrightSun
        ];
        this.widgetPluginsContainer = new _WidgetDashboard_WidgetPluginsContainer__WEBPACK_IMPORTED_MODULE_4__.WidgetPluginsContainer();
        this.DateTime = new _DateTimeUI__WEBPACK_IMPORTED_MODULE_7__.DateTimeUI();
        this.BlockingProgress = new BlockingProgressUI();
        this.SelectUserOrGroup = new SelectUserOrGroupUI();
        this.lt = new LT();
        this.Progress = new ProgressUI();
        this.ThemeSelector = new _UI_Tools_ThemeSelector__WEBPACK_IMPORTED_MODULE_3__.ThemeSelector();
    }
    // helper to show a drop down / drop up button allowing to click on one of several options
    createDropDownButton(defaultText, options, isUp, buttonId, disableDefaultButtonClick) {
        var id = buttonId ? ('id="' + buttonId + '"') : "";
        if (options.length === 1) {
            var bootLook = "btn btn-default";
            // render as simple button
            var button = $('<span ' + id + ' type="button" class="' + bootLook + '">');
            var btnText = $('<span class="ui-button-text">');
            btnText.append($('<span>').html(defaultText));
            button.append(btnText).click(function (event) {
                if (!button.prop('disabled')) {
                    // do the click and disable button for a while
                    options[0].click();
                    button.prop('disabled', true);
                    button.addClass('disabled');
                    setTimeout(function () {
                        button.prop('disabled', false);
                        button.removeClass('disabled');
                    }, 1000);
                }
                if (event.preventDefault)
                    event.preventDefault();
                return false;
            });
            return $('<div class="btn-group">').append(button);
        }
        var bootLook = "btn btn-default dropdown-toggle";
        var button = $('<span type="button" class="' + bootLook + '" data-toggle="dropdown" aria-expanded="false">');
        var btnText = $('<span class="ui-button-text">');
        button.append(btnText);
        let ddcaret = $('<span class="caret ddmenubtndrop">');
        btnText.append($('<span ' + id + ' >').html(defaultText).click(function (event) {
            if (disableDefaultButtonClick) {
                ddcaret.trigger("click");
            }
            else if (!button.prop('disabled')) {
                // do the click and disable button for a while
                options[0].click();
                button.prop('disabled', true);
                button.addClass('disabled');
                setTimeout(function () {
                    button.prop('disabled', false);
                    button.removeClass('disabled');
                }, 1000);
            }
            if (event.preventDefault)
                event.preventDefault();
            return false;
        }));
        btnText.append(ddcaret);
        var ddOptions = $('<ul class="dropdown-menu" role="menu">');
        $.each(options, function (idx, opt) {
            ddOptions.append($('<li>').append($('<a>').attr('href', 'javascript:void(0)').addClass(opt.class).html(opt.name)).click(function (event) {
                opt.click();
                button.closest(".dropdown").removeClass("open");
                if (event.preventDefault)
                    event.preventDefault();
                return false;
            }));
        });
        return $('<div class="btn-group ' + (isUp ? 'dropup' : 'dropdown') + '">').append(button).append(ddOptions);
    }
    // get optimal size of a dialog window dependent on available screen
    getNiceDialogSize(minWidth, minHeight) {
        return {
            width: minWidth < 0 ? Math.abs(minWidth) : Math.max(minWidth, _globals__WEBPACK_IMPORTED_MODULE_6__.app.itemForm.width() / 2),
            height: minHeight < 0 ? Math.abs(minHeight) : Math.max(minHeight, _globals__WEBPACK_IMPORTED_MODULE_6__.app.itemForm.height() / 4)
        };
    }
    ;
    // show success message
    // hideAfter =0 or undefined: 2000 ms, -1 do not hide
    showSuccess(messageTitle, hideAfter) {
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("success", messageTitle);
        $('#message_success').html("<span class='msgHeader'>" + messageTitle + "</span>");
        this.showSlide('#message_success', hideAfter ? (hideAfter < 0 ? 0 : hideAfter) : 2000);
    }
    hideSuccess() {
        this.hideSlide($('#message_success'));
    }
    hideError() {
        this.hideSlide($('#message_error'));
    }
    // show error message
    showError(messageTitle, messageBody, showForMS) {
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("error", messageTitle + ": " + messageBody);
        $('#message_error').html("<span class='msgHeader'>" + messageTitle + "</span>" +
            "<hr/>" +
            "<p class='msgBody'>" + messageBody + "</p>");
        var duration = 5000;
        if (showForMS) {
            duration = showForMS;
        }
        this.showSlide('#message_error', duration);
    }
    ;
    // show acknowledge message
    /**
     * show acknowledge dialog
     * @param ackId: a (unique) value > 0 can be used as unique id to have acknowledge boxes which are shown only one
     * @param messageTitle
     * @param dlgTitle
     */
    showAck(ackId, messageTitle, dlgTitle) {
        if (_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.serverStorage.getItem("ackMessage_" + ackId)) {
            // user clicked on ack -> on this computer
            // or it was manually set
            return;
        }
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("ack", messageTitle);
        $('#message_ack_title').html(dlgTitle ? dlgTitle : "Acknowledge");
        $('#message_ack_ok').off("click");
        $('#message_ack_ok').one("click", function () {
            if (ackId > 0) {
                // allow to click away
                _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.serverStorage.setItem("ackMessage_" + ackId, (new Date()).toString());
            }
        });
        $('#message_ack_content').html(messageTitle);
        $('#message_ack').modal({ backdrop: 'static' });
    }
    // ask for confirmation
    showConfirm(confId, messageInfo, confFunction, noConfFunction, thirdFunction) {
        let that = this;
        if (_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.serverStorage.getItem("confMessage_" + confId)) {
            // user clicked on conf -> on this computer
            // or it was manually set
            return;
        }
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log("conf", messageInfo.title);
        $('#message_conf_ok').off("click");
        $('#message_conf_nok').off("click");
        $('#message_conf_third').off("click").hide();
        $('#message_conf').off('hidden.bs.modal');
        $('#message_conf_ok').one("click", function () {
            if (confFunction) {
                $('#message_conf').one('hidden.bs.modal', () => {
                    confFunction();
                });
            }
        });
        $('#message_conf_nok').one("click", function () {
            if (noConfFunction) {
                $('#message_conf').one('hidden.bs.modal', () => {
                    noConfFunction();
                });
            }
        });
        $('#message_conf_third').one("click", function () {
            if (thirdFunction) {
                $('#message_conf').one('hidden.bs.modal', () => {
                    thirdFunction();
                });
            }
        });
        $('#message_conf_content').html(messageInfo.title);
        $('#message_conf_ok').html(messageInfo.ok ? messageInfo.ok : "OK");
        $('#message_conf_nok').html(messageInfo.nok ? messageInfo.nok : "Cancel");
        if (messageInfo.third) {
            $('#message_conf_third').html(messageInfo.third);
            $('#message_conf_third').show();
        }
        $('#message_conf').modal({ backdrop: 'static' });
        $("#message_conf_content").closest(".modal").css("z-index", "20000");
    }
    confirmSpinningWait(message) {
        $('#message_conf_content').html("").append(this.getSpinningWait(message));
        this.setEnabled($('#message_conf_ok'), false);
        this.setEnabled($('#message_conf_nok'), false);
        $('#message_conf').modal({ backdrop: 'static' });
    }
    closeConfirmSpinningWait() {
        this.setEnabled($('#message_conf_ok'), true);
        this.setEnabled($('#message_conf_nok'), true);
        $('#message_conf').modal('hide');
    }
    // show item as tool tip
    showTooltip(itemId, target, event, crossProject) {
        let that = this;
        clearTimeout(this.lastTooltipHide);
        clearTimeout(this.lastTooltipRequest);
        this.lastTooltipHide = null;
        this.lastTooltipRequest = window.setTimeout(function () {
            that.showTooltip_Delayed(itemId, target, crossProject);
        }, _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.globalShiftDown ? 10 : 500);
    }
    showTaskAsTooltip(id, title, url, htmlContent, target) {
        let that = this;
        clearTimeout(this.lastTooltipHide);
        clearTimeout(this.lastTooltipRequest);
        this.lastTooltipHide = null;
        this.lastTooltipRequest = window.setTimeout(function () {
            that.showTaskAsTooltip_Delayed(id, title, url, htmlContent, target);
        }, _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.globalShiftDown ? 10 : 500);
    }
    // hide item tool tip
    hideTooltip(now) {
        let that = this;
        clearTimeout(this.lastTooltipHide);
        clearTimeout(this.lastTooltipRequest);
        this.lastTooltipHide = null;
        this.lastTooltipRequest = null;
        if (now) {
            var height = Math.max(300, this.getSlideHeight($("#tooltip_panel"), true));
            $("#tooltip_panel").css('margin-top', '-' + height + 'px');
        }
        else {
            this.lastTooltipHide = window.setTimeout(function () {
                that.hideCurrentToolTip();
            }, 2000);
        }
    }
    // refresh tool tip (does not yet work...)
    updateTooltip() {
        if (this.hidden_tooltip_itemId) {
            this.showTooltip_Delayed(this.hidden_tooltip_itemId, $("#tooltip_panel"));
        }
    }
    // show message that user name or password has spaces
    spaceMessage(userHasSpaces, passwordHasSpaces) {
        if (userHasSpaces && passwordHasSpaces) {
            return "user name and password cannot have spaces";
        }
        else if (userHasSpaces) {
            return "user name cannot have spaces";
        }
        else if (passwordHasSpaces) {
            return "password cannot have spaces";
        }
        else {
            return "";
        }
    }
    ;
    // return span with spinning wait icon and text
    getSpinningWait(message) {
        var span = $("<span class='spinningWait hideCopy'>");
        span.append($('<span class="fal fa-sync-alt refresh-animate"></span>"'))
            .append($('<span class="waitscreenmessage">' + (message ? message : "please wait....") + '</span>"'));
        return span;
    }
    ;
    setEnabled(button, enabled) {
        if (enabled) {
            button.prop("disabled", false).removeClass("ui-state-disabled");
        }
        else {
            button.prop("disabled", true).addClass("ui-state-disabled");
        }
    }
    getDisplayError(jqxhr, textStatus, error) {
        if (jqxhr && jqxhr.responseJSON && jqxhr.responseJSON.displayError) {
            return jqxhr.responseJSON.displayError;
        }
        if (textStatus == "parsererror")
            return "unknown error";
        return "Status: " + textStatus + "<br/>Error was:" + error;
    }
    showDialog(dlg, title, content, minMaxWidth, minMaxHeight, buttons, // DialogButtonOptions
    scrolling, autoResize, maximizeButton, close, open, resize, noCloseOnEscape) {
        let that = this;
        let isMax = false;
        // get best size (depending on available screen size, and given max values)
        let niceSize = this.getNiceDialogSize(minMaxWidth, minMaxHeight);
        let nicePos = { top: 0, left: 0 };
        // content
        if (content) {
            dlg.html("");
            dlg.append(content);
        }
        dlg.removeClass("dlg-auto-scroll");
        dlg.removeClass("dlg-no-scroll");
        dlg.removeClass("dlg-v-scroll");
        switch (scrolling) {
            case _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.Scroll.Vertical:
                dlg.addClass("dlg-v-scroll");
                break;
            case _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.Scroll.None:
                dlg.addClass("dlg-no-scroll");
                break;
            case _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.Scroll.Auto:
                dlg.addClass("dlg-scroll");
                break;
        }
        dlg.dialog({
            autoOpen: true,
            title: title,
            height: niceSize.height,
            width: niceSize.width,
            modal: true,
            closeOnEscape: !noCloseOnEscape,
            close: function () {
                // prepare for next opening...
                $(".maxbutton").remove();
                dlg.removeClass("dlg-auto-scroll");
                dlg.removeClass("dlg-no-scroll");
                dlg.removeClass("dlg-v-scroll");
                that.popDialog(dlg);
                if (close)
                    close();
            },
            open: function () {
                if (maximizeButton) {
                    let maxButton = $('<button title="Maximize" class="maxbutton ui-button ui-corner-all ui-widget ui-button-icon-only ui-dialog-titlebar-max" type="button"><span class="ui-icon ui-icon-arrow-4-diag">maximize</span>Maximize</button>');
                    let ui = $(dlg).closest(".ui-dialog");
                    let close = $(".ui-dialog-titlebar-close", ui);
                    let content = $(".ui-dialog-content", ui);
                    close.parent().prepend(maxButton);
                    maxButton.click(function () {
                        if (isMax) {
                            isMax = false;
                            ui.width(niceSize.width);
                            ui.height(niceSize.height);
                            ui.css("left", nicePos.left + "px");
                            ui.css("top", nicePos.top + "px");
                        }
                        else {
                            isMax = true;
                            nicePos = ui.position();
                            niceSize = { width: ui.width(), height: ui.height() };
                            ui.width($(window).width() - 20);
                            ui.height($(window).height() - 20);
                            ui.css("left", "10px");
                            ui.css("top", "10px");
                        }
                        $(content).width(ui.width() - 28);
                        $(content).height(ui.height() - 112);
                        if (autoResize)
                            dlg.resizeDlgContent([content]);
                        if (resize)
                            resize();
                    });
                }
                if (open)
                    open();
                that.pushDialog(dlg);
            },
            resizeStop: function (event, ui) {
                if (autoResize)
                    dlg.resizeDlgContent([content]);
                if (resize)
                    resize();
            },
            buttons: buttons
        });
        if (autoResize) {
            dlg.resizeDlgContent([content], false);
        }
    }
    showDialogDes({ 
    // optional parameters with defaults
    maximizeButton = false, noXButton = false, autoResize = false, onClose = null, onOpen = null, onResize = null, noCloseOnEscape = false, minMaxWidth = $(document).width() * 0.9, minMaxHeight = _globals__WEBPACK_IMPORTED_MODULE_6__.app.itemForm.height() * 0.9, scrolling = _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.Scroll.None, content = null, 
    // required parameters
    container, title, buttons }) {
        let that = this;
        let isMax = false;
        // get best size (depending on available screen size, and given max values)
        let niceSize = this.getNiceDialogSize(minMaxWidth, minMaxHeight);
        let nicePos = { top: 0, left: 0 };
        // content
        if (content) {
            container.html("");
            container.append(content);
        }
        container.removeClass("dlg-auto-scroll");
        container.removeClass("dlg-no-scroll");
        container.removeClass("dlg-v-scroll");
        switch (scrolling) {
            case _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.Scroll.Vertical:
                container.addClass("dlg-v-scroll");
                break;
            case _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.Scroll.None:
                container.addClass("dlg-no-scroll");
                break;
            case _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.Scroll.Auto:
                container.addClass("dlg-scroll");
                break;
        }
        container.dialog({
            autoOpen: true,
            title: title,
            height: niceSize.height,
            width: niceSize.width,
            modal: true,
            closeOnEscape: !noCloseOnEscape,
            close: function () {
                // prepare for next opening...
                $(".maxbutton").remove();
                container.removeClass("dlg-auto-scroll");
                container.removeClass("dlg-no-scroll");
                container.removeClass("dlg-v-scroll");
                that.popDialog(container);
                if (onClose)
                    onClose();
            },
            open: function () {
                let ui = $(container).closest(".ui-dialog");
                let close = $(".ui-dialog-titlebar-close", ui);
                if (maximizeButton) {
                    let maxCss = noXButton ? "maxNoX" : "";
                    let maxButton = $('<button title="Maximize" class="' + maxCss + ' maxbutton ui-button ui-corner-all ui-widget ui-button-icon-only ui-dialog-titlebar-max" type="button"><span class="ui-icon ui-icon-arrow-4-diag">maximize</span>Maximize</button>');
                    let content = $(".ui-dialog-content", ui);
                    close.parent().prepend(maxButton);
                    maxButton.click(function () {
                        if (isMax) {
                            isMax = false;
                            ui.width(niceSize.width);
                            ui.height(niceSize.height);
                            ui.css("left", nicePos.left + "px");
                            ui.css("top", nicePos.top + "px");
                        }
                        else {
                            isMax = true;
                            nicePos = ui.position();
                            niceSize = { width: ui.width(), height: ui.height() };
                            ui.width($(window).width() - 20);
                            ui.height($(window).height() - 20);
                            ui.css("left", "10px");
                            ui.css("top", "10px");
                        }
                        $(content).width(ui.width() - 28);
                        $(content).height(ui.height() - 112);
                        if (autoResize)
                            container.resizeDlgContent([content]);
                        if (onResize)
                            onResize();
                    });
                }
                if (noXButton) {
                    close.remove();
                }
                if (onOpen) {
                    onOpen();
                }
                that.pushDialog(container);
            },
            resizeStop: function (event, ui) {
                if (autoResize) {
                    container.resizeDlgContent([content]);
                }
                if (onResize) {
                    onResize();
                }
            },
            buttons: buttons
        });
        if (autoResize) {
            container.resizeDlgContent([content], false);
        }
    }
    pushDialog(thisDialog) {
        let depth = 0;
        for (var idx = 0; idx < 4; idx++) {
            if (this.countVisibleDialogs(idx)) {
                depth = idx + 1;
            }
        }
        if (depth === 0) {
            return;
        }
        let dlg = thisDialog.closest(".ui-dialog");
        dlg.removeClass("ui-front");
        dlg.addClass("ui-front" + depth);
        $(".ui-widget-overlay,.ui-widget-overlay1,.ui-widget-overlay2,.ui-widget-overlay3,.ui-widget-overlay4").each(function (idx, over) {
            $(over).removeClass("ui-widget-overlay");
            for (var idx = 1; idx < depth; idx++) {
                $(over).removeClass("ui-widget-overlay" + idx);
            }
            $(over).addClass("ui-widget-overlay" + depth);
        });
    }
    popDialog(thisDialog) {
        let dlg = thisDialog.closest(".ui-dialog");
        // normalize stack for next time it's displayed
        dlg.addClass("ui-front");
        for (var idx = 0; idx < 4; idx++) {
            dlg.removeClass("ui-front" + (idx + 1));
        }
        $(".ui-widget-overlay1").each(function (idx, over) {
            $(over).removeClass("ui-widget-overlay1");
            $(over).addClass("ui-widget-overlay");
        });
        $(".ui-widget-overlay2").each(function (idx, over) {
            $(over).removeClass("ui-widget-overlay2");
            $(over).addClass("ui-widget-overlay1");
        });
        $(".ui-widget-overlay3").each(function (idx, over) {
            $(over).removeClass("ui-widget-overlay3");
            $(over).addClass("ui-widget-overlay2");
        });
        $(".ui-widget-overlay4").each(function (idx, over) {
            $(over).removeClass("ui-widget-overlay4");
            $(over).addClass("ui-widget-overlay3");
        });
    }
    serverHtmlCleanupBlob(content) {
        let htmlContent = content.html();
        let def = $.Deferred();
        _globals__WEBPACK_IMPORTED_MODULE_6__.restConnection.postProjectJson("htmlCleanupBlob", { htmlToClean: htmlContent })
            .done((result) => {
            def.resolve(result.cleanedHtml);
        });
        return def;
    }
    /*  anchor: where to add a button
        tooltip: to inform user about what is copied
        content: from where to copy
        catchKey: ??
        onProcessCopy: for post processing of copied text
        btnText: // to add some text to copy button
    */
    copyBuffer(anchor, tooltip, content, catchKey, onProcessCopy, btnText, beforeCopy, afterCopy) {
        let that = this;
        $('<i class="fal fa-copy hideCopy" aria-hidden="true" style="padding:0 5px 0 12px;cursor:pointer" data-original-title="' + tooltip + '" ></i><span>' + (btnText ? btnText : "") + '</span> ').appendTo(anchor).click(function () {
            if (beforeCopy != undefined) {
                beforeCopy();
            }
            that.doCopy(content, onProcessCopy);
            if (afterCopy != undefined) {
                afterCopy();
            }
        }).tooltip({ container: "body", placement: "auto" });
        /*
        if (catchKey) {
            let ctrlDown = false,
            ctrlKey = 17,
            cmdKey = 91,
            vKey = 86,
            cKey = 67;

            $(catchKey).keydown(function(e) {
                if (e.keyCode == ctrlKey || e.keyCode == cmdKey) {
                    ctrlDown = true;
                }
                if (ctrlDown &&  e.keyCode == cKey) {
                    that.doCopy( content, onProcessCopy );
                    return false;
                }
                return true;
            }).keyup(function(e) {
                if (e.keyCode == ctrlKey || e.keyCode == cmdKey) {
                    ctrlDown = false;
                }
            });
        }*/
    }
    getIconOptions() {
        return this.toolIcons.map(function (ti) { return { id: "fal fa-" + ti, label: "fal fa-" + ti }; });
    }
    calculateColorFrom(input) {
        let colorIndex = 0;
        for (var i = 0; i < input.length; i++) {
            colorIndex += input.charCodeAt(i);
        }
        return this.colorScheme[colorIndex % this.colorScheme.length];
    }
    getAvatar(info, size) {
        let avatarDiv = $("<div class='avatar noselect' title='" + info + "'/>");
        var settings = {
            border: {
                color: _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.CIColors.GreyLightAlto.color,
                width: 3
            },
            colors: this.colorScheme.filter(function (color) { return color.color != _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.CIColors.GreyLightAlto.color; }),
            text: _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.CIColors.Black.color,
            size: size,
            middlename: true,
            uppercase: true
        };
        var elementText = info;
        var initialLetters = info.length < 2 ? [info[0]] : [info[0], info[1]];
        var initials = initialLetters.join('');
        let color = this.calculateColorFrom(info);
        avatarDiv.text(initials);
        avatarDiv.css({
            'color': color.alternateColor,
            'background-color': color.color,
            'display': 'inline-block',
            'font-family': 'Arial, \'Helvetica Neue\', Helvetica, sans-serif',
            'font-size': settings.size * 0.4,
            'border-radius': settings.size + 'px',
            'width': settings.size + 'px',
            'height': settings.size + 'px',
            'line-height': (settings.size) + 'px',
            'text-align': 'center',
            'text-transform': settings.uppercase ? 'uppercase' : ''
        });
        return avatarDiv;
    }
    doCopy(content, onProcessCopy) {
        let that = this;
        let copyBufferHTML = $("<div class='copyBuffer'>").appendTo("body");
        copyBufferHTML.append(content.clone(true));
        $(".hideCopy", copyBufferHTML).remove();
        $(".hideCopyAlways", copyBufferHTML).remove();
        $(".tooltip", copyBufferHTML).remove();
        $(".tooltip-inner", copyBufferHTML).remove();
        $(".hideScreen", copyBufferHTML).removeClass("hideScreen");
        // copy content of data into html
        $.each($(".replaceCopy", copyBufferHTML), function (ridx, replace) {
            $(replace).html($(replace).data("with"));
        });
        if (onProcessCopy)
            onProcessCopy(copyBufferHTML);
        this.serverHtmlCleanupBlob(copyBufferHTML).done((cleanHtml) => {
            _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.serverStorage.setItem("copyBuffer", cleanHtml);
            copyBufferHTML.remove();
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showAck(-3, `To paste the copied information, use the <b>"Paste Dashboard" menu entry </b> in the Matrix menu (for the TinyMCE editor) or the <b>"Paste" menu entry</b> in the paste menu button <br/> (for the legacy editor).<br> <br> Please refer to <a href='https://urlshort.matrixreq.com/d23/faq/pastedashboard' target='_blank'> the FAQ </a>for more details`, "Copy completed");
        });
    }
    countVisibleDialogs(idx) {
        let count = 0;
        let cls = idx ? (".ui-dialog.ui-front" + idx) : ".ui-dialog.ui-front";
        $(cls).each(function (dlgidx, dlg) {
            if ($(dlg).css("display") !== "none") {
                count++;
            }
        });
        // return count BUT substract 1 from level 0 (the dialog itself which is pushed )
        return idx ? count : count - 1;
    }
    addChevronSection(container, text, help, open) {
        let isOpen = open ? true : false;
        let details = $(`<div class='chevronInner' style='display:${isOpen ? "block" : "none"};'>`);
        let helpLine = $(`<div class='chevronHelp'>${help}</div>`);
        let toggle = $(`<div class='chevronHeading'><span class="fa ${isOpen ? "fa-chevron-down" : "fa-chevron-right"}"></span> <span class='chevronText'>${text}</span></div>`)
            .appendTo(container)
            .click(function () {
            if (isOpen) {
                isOpen = false;
                details.hide();
                $(".fa", toggle).removeClass("fa-chevron-down").addClass("fa-chevron-right");
            }
            else {
                isOpen = true;
                details.show();
                $(".fa", toggle).removeClass("fa-chevron-right").addClass("fa-chevron-down");
            }
        });
        if (help) {
            helpLine.appendTo(container);
        }
        details.appendTo(container);
        return details;
    }
    getSlideHeight(slide, padded) {
        var height = 0;
        slide.children().each(function (idx, child) {
            height += $(child).height();
        });
        var padding = slide.outerHeight() - slide.height(); // padding of outer div + border
        if (height + padding < 50) {
            height = 50 - padding;
        }
        if (height > 300) {
            height = 300;
        }
        let screenHeight = $("#itemDetails").height() ? $("#itemDetails").height() : 400;
        if (!padded) {
            return Math.min(screenHeight, Math.max(height, slide.height()));
        }
        return Math.min(screenHeight, Math.max(height + padding, slide.outerHeight()));
    }
    showSlide(slideId, outAgain) {
        let slide = $(slideId);
        // calc height of box
        slide.height('auto');
        var height = this.getSlideHeight(slide, false);
        var heightPadded = this.getSlideHeight(slide, true);
        // set height of box
        slide.height(height + "px");
        if (slide.css("margin-top") !== "0px") {
            // slide is not visible
            // move box out of top of screen, so that bottom is just above top of screen
            slide.css("margin-top", '-' + heightPadded + 'px');
        }
        // scroll it in
        slide.clearQueue().animate({ 'margin-top': '0px' });
        // after s sec out again
        if (outAgain) {
            window.clearTimeout(this.removeTimer[slideId]);
            this.removeTimer[slideId] = window.setTimeout(function () {
                slide.clearQueue().animate({ 'margin-top': '-' + (heightPadded + 14) + 'px' });
            }, outAgain);
        }
    }
    hideSlide(slide) {
        // calc height of box
        let that = this;
        slide.promise().done(function () {
            var heightPadded = that.getSlideHeight(slide, true);
            slide.css("margin-top", '-' + (heightPadded + 4) + 'px');
        });
    }
    getItemHtmlFromCacheOrServerAsync(itemId, crossProject) {
        let that = this;
        let res = $.Deferred();
        let now = new Date();
        this.hidden_tooltip_itemId = null;
        var last_cached = crossProject ? null : this.tooltip_cache[itemId];
        if (crossProject) {
            _globals__WEBPACK_IMPORTED_MODULE_6__.app.getItemProjectAsync(crossProject, itemId, true).done(function (item) {
                that.renderCrossItem(item, crossProject).always(() => {
                    res.resolve();
                });
            }).fail(function (error) {
                res.reject(error);
            });
        }
        else if (last_cached && (now.getTime() - last_cached.date.getTime()) < 10000) {
            that.renderItem(last_cached.item).then(() => { res.resolve(); });
        }
        else {
            _globals__WEBPACK_IMPORTED_MODULE_6__.app.getItemAsync(itemId, undefined, true).done(async function (item) {
                await that.renderItem(item);
                last_cached = { date: new Date(), item: item };
                that.tooltip_cache[itemId] = last_cached;
                res.resolve();
            }).fail(function (error) {
                if (!error || !error.responseJSON || error.responseJSON.code != "AuthenticationFailed") {
                    _globals__WEBPACK_IMPORTED_MODULE_6__.matrixApplicationUI.renderErrorControl($("#tooltip_panel"), "The item " + itemId + " does not exist.", "And it never did ....", true);
                }
                res.resolve();
            });
        }
        return res;
    }
    async renderItem(item) {
        let that = this;
        $("#tooltip_panel").html("");
        $("<div class='tooltip_panel_close'>x</div>").appendTo($("#tooltip_panel")).click(function () {
            that.hideCurrentToolTip();
        });
        if (item.title === undefined) {
            _globals__WEBPACK_IMPORTED_MODULE_6__.matrixApplicationUI.renderErrorControl($("#tooltip_panel"), "The item " + item.id + " was deleted", "Ýou can find it in the deleted item log.", true);
        }
        else if (_globals__WEBPACK_IMPORTED_MODULE_6__.app.canViewItem(item)) {
            var ctrl = new _UI_Components_index__WEBPACK_IMPORTED_MODULE_1__.ItemControl({
                control: $("#tooltip_panel"),
                controlState: _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.Tooltip,
                item: item,
                isItem: (typeof item.children === 'undefined')
            });
            await ctrl.load();
            let bcs = _globals__WEBPACK_IMPORTED_MODULE_6__.app.getBreadcrumbs(item.id).filter(function (bc) {
                return bc != item.id;
            });
            let breadcrumb = bcs.reverse().map(function (bid) {
                return bid + " " + _globals__WEBPACK_IMPORTED_MODULE_6__.app.getItemTitle(bid);
            }).join(" > ");
            let title = $("#tooltip_panel .itemTitle").addClass("tooltipItem").removeClass("pull-left").removeClass("itemTitle");
            title.closest(".itemTitleBarNoToolsNoEdit").removeClass("itemTitleBarNoToolsNoEdit");
            $("<hr style='border-top-color: #aaa;margin-top: 10px;width: 100%;margin-bottom: 10px;'/>").insertAfter(title);
            $('<div style="font-size: smaller;">').append($("<span class='inlineHelp'>").html(breadcrumb)).insertAfter(title);
        }
        else {
            _globals__WEBPACK_IMPORTED_MODULE_6__.matrixApplicationUI.renderErrorControl($("#tooltip_panel"), "You have no rights to view " + item.id + "", "Talk to the project administrator.", true);
        }
    }
    renderCrossItem(item, project) {
        let that = this;
        var res = $.Deferred();
        $("#tooltip_panel").html("");
        $("<div class='tooltip_panel_close'>x</div>").appendTo($("#tooltip_panel")).click(function () {
            that.hideCurrentToolTip();
        });
        if (item.isDeleted) {
            $("#tooltip_panel").html(item.id + " in project " + project + " was deleted");
            res.resolve();
            return res;
        }
        let originalIC = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.clone(_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig);
        let newIC = new _businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.ItemConfiguration(_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger, _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON);
        _globals__WEBPACK_IMPORTED_MODULE_6__.restConnection.getServer(project + "/cat").done(function (catDetails) {
            newIC.addCategories(catDetails);
            _globals__WEBPACK_IMPORTED_MODULE_6__.restConnection.getServer(project + "/setting").done(async function (settings) {
                newIC.addSettings(settings);
                (0,_globals__WEBPACK_IMPORTED_MODULE_6__.setIC)(newIC);
                let itemForm = new _UI_Components_index__WEBPACK_IMPORTED_MODULE_1__.ItemControl({
                    control: $("#tooltip_panel"),
                    controlState: _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.Tooltip,
                    item: item,
                    isItem: (typeof item.children === 'undefined')
                });
                await itemForm.load();
                let projectInfo = "Project: " + project;
                let title = $("#tooltip_panel .itemTitle").addClass("tooltipItem").removeClass("pull-left").removeClass("itemTitle");
                title.closest(".itemTitleBarNoToolsNoEdit").removeClass("itemTitleBarNoToolsNoEdit");
                $("<hr style='border-top-color: #aaa;margin-top: 10px;width: 100%;margin-bottom: 10px;'/>").insertAfter(title);
                $('<div style="font-size: smaller;">').append($("<span class='inlineHelp'>").html(projectInfo)).insertAfter(title);
                (0,_globals__WEBPACK_IMPORTED_MODULE_6__.setIC)(originalIC);
                res.resolve();
            }).fail(function () {
                (0,_globals__WEBPACK_IMPORTED_MODULE_6__.setIC)(originalIC);
                res.resolve();
            });
        }).fail(function () {
            (0,_globals__WEBPACK_IMPORTED_MODULE_6__.setIC)(originalIC);
            res.resolve();
        });
        return res;
    }
    hideCurrentToolTip() {
        this.hidden_tooltip_itemId = null;
        clearTimeout(this.lastTooltipHide);
        this.lastTooltipHide = null;
        var height = Math.max(300, this.getSlideHeight($("#tooltip_panel"), true));
        $("#tooltip_panel").css('margin-top', '-' + (height + 30) + 'px');
    }
    showTaskAsTooltip_Delayed(id, title, url, htmlContent, target) {
        let that = this;
        $("#tooltip_panel").html("");
        $("<div class='tooltip_panel_close'>x</div>").appendTo($("#tooltip_panel")).click(function () {
            that.hideCurrentToolTip();
        });
        if (title === undefined) {
            _globals__WEBPACK_IMPORTED_MODULE_6__.matrixApplicationUI.renderErrorControl($("#tooltip_panel"), "The item " + " was deleted", "", true);
        }
        else {
            $("#tooltip_panel").append(`<div class="tooltipItem"><a href="${url}" target="_blank"><span class="">${id}</span></a><span class="refTitle">${title}</span></div>`);
            $("#tooltip_panel").append(`<hr style="border-top-color: #aaa;margin-top: 10px;width: 100%;margin-bottom: 10px;">`);
            $("#tooltip_panel").append(`<div class="dialog-body">${htmlContent} </div>`);
        }
        that.showSlide("#tooltip_panel");
        $("#tooltip_panel").on('mouseover', function () {
            clearTimeout(that.lastTooltipHide);
            that.lastTooltipHide = null;
        });
        $("#tooltip_panel").on('mouseleave', function () {
            if (!_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.globalShiftDown) {
                that.hideCurrentToolTip();
            }
        });
    }
    showTooltip_Delayed(itemId, target, crossProject) {
        let that = this;
        if (itemId.indexOf("-") === 0 || _globals__WEBPACK_IMPORTED_MODULE_6__.app.getType(itemId)[0] === "_" || _globals__WEBPACK_IMPORTED_MODULE_6__.app.isFolder(itemId) || _globals__WEBPACK_IMPORTED_MODULE_6__.app.getCurrentItemId() === itemId) {
            this.hideCurrentToolTip();
            return;
        }
        if (_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.Tasks.isTaskId(itemId)) {
            this.hideCurrentToolTip();
            return;
        }
        this.getItemHtmlFromCacheOrServerAsync(itemId, crossProject).done(function () {
            if (!_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.globalShiftDown || _globals__WEBPACK_IMPORTED_MODULE_6__.app.getCurrentItemId() === itemId) {
                that.hideCurrentToolTip();
                return;
            }
            that.showSlide("#tooltip_panel");
            $("#tooltip_panel").on('mouseover', function () {
                clearTimeout(that.lastTooltipHide);
                that.lastTooltipHide = null;
            });
            $("#tooltip_panel").on('mouseleave', function () {
                if (!_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.globalShiftDown) {
                    that.hideCurrentToolTip();
                }
            });
        });
    }
    // config client helper
    enableIf(cb, state, ctrls) {
        let that = this;
        $("input", cb).change(function () {
            $.each(ctrls, function (idx, ctrl) {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.setEnabled(ctrl, $("input", cb).is(':checked') == state);
            });
        });
        $.each(ctrls, function (idx, ctrl) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.setEnabled(ctrl, $("input", cb).is(':checked') == state);
        });
    }
    addCheckboxD(ui, text, fieldParams, propertyName, onChange, defaultValue) {
        let that = this;
        let dataCY = propertyName !== null && propertyName !== void 0 ? propertyName : text.replace(/\s/g, "-");
        let cb = $(`<div data-cy="${dataCY}">`).appendTo(ui).checkBox({
            canEdit: true,
            help: text,
            valueChanged: async function () {
                let newValue = await cb.getController().getValueAsync();
                if (newValue !== fieldParams[propertyName]) {
                    fieldParams[propertyName] = newValue;
                    if (onChange)
                        onChange();
                }
            },
            parameter: {},
            fieldValue: defaultValue
        });
        cb.getController().getValueAsync().then((value) => { fieldParams[propertyName] = value; });
        return cb;
    }
    addCheckbox(ui, text, fieldParams, propertyName, onChange) {
        return this.addCheckboxD(ui, text, fieldParams, propertyName, onChange, fieldParams[propertyName] ? "1" : "0");
    }
    /** checkbox will only be checked if explicitly be set to true*/
    addCheckboxIsTrue(ui, text, fieldParams, propertyName, onChange) {
        return this.addCheckboxD(ui, text, fieldParams, propertyName, onChange, _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.isTrue(fieldParams[propertyName]) ? "1" : "0");
    }
    /** checkbox will only checked if NOT explicitly be set to false (so unchanged=default=checked) */
    addCheckboxIsFalse(ui, text, fieldParams, propertyName, onChange) {
        return this.addCheckboxD(ui, text, fieldParams, propertyName, onChange, _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.isFalse(fieldParams[propertyName]) ? "0" : "1");
    }
    addPassInput(ui, text, fieldParams, propertyName, onChange, onUnFocus) {
        return this.addTextInput(ui, text, fieldParams, propertyName, onChange, onUnFocus, true);
    }
    addTextInput(ui, text, fieldParams, propertyName, onChange, onFocusOut, isPass, help, readonly, rows = 1, allowResize = false) {
        let that = this;
        let dataCY = propertyName !== null && propertyName !== void 0 ? propertyName : text.replace(/\s/g, "-");
        let pt = $(`<div data-cy="${dataCY}" class="controlContainer">`).appendTo(ui).plainText({
            canEdit: true,
            help: text,
            valueChanged: async function () {
                let newValue = await pt.getController().getValueAsync();
                if (fieldParams[propertyName] || newValue) {
                    // avoid creating a empty "" field instead of non existing which would trigger a save
                    if (isPass) {
                        // unescaping the password using TextArea.
                        newValue = $("<textarea/>").html(newValue).text();
                    }
                    fieldParams[propertyName] = newValue;
                }
                if (onChange)
                    onChange();
            },
            parameter: { rows: rows, allowResize: allowResize, password: isPass ? true : false, inlineHelp: help, readonly: readonly },
            fieldValue: fieldParams[propertyName]
        });
        if (isPass) {
            $("input", pt).attr("readonly", "readonly").on("focus", () => {
                $("input", pt).removeAttr("readonly");
            });
        }
        if (onFocusOut) {
            pt.focusout(function () { onFocusOut(); });
        }
        return pt;
    }
    addRichTextInput(ui, params, text, fieldParams, propertyName, onChange, onFocusOut) {
        let that = this;
        let dataCY = propertyName !== null && propertyName !== void 0 ? propertyName : text.replace(/\s/g, "-");
        let pt = $(`<div data-cy="${dataCY}"  class="controlContainer">`).appendTo(ui).richText({
            canEdit: true,
            help: text,
            valueChanged: async function () {
                let newValue = await pt.getController().getValueAsync();
                if (fieldParams[propertyName] || newValue) {
                    // avoid creating a empty "" field instead of non existing which would trigger a save
                    fieldParams[propertyName] = newValue;
                }
                if (onChange)
                    onChange();
            },
            parameter: params,
            fieldValue: fieldParams[propertyName]
        });
        if (onFocusOut) {
            pt.focusout(function () { onFocusOut(); });
        }
        return pt;
    }
    addDateSelect(ui, text, fieldParams, propertyName, onChange, help, readonly) {
        let dataCY = propertyName !== null && propertyName !== void 0 ? propertyName : text.replace(/\s/g, "-");
        let pt = $(`<div data-cy="${dataCY}"  class="controlContainer">`).appendTo(ui).dateselect({
            controlState: _globals__WEBPACK_IMPORTED_MODULE_6__.ControlState.FormEdit,
            canEdit: true,
            help: text,
            fieldValue: fieldParams[propertyName] ? fieldParams[propertyName] : "",
            valueChanged: async function () {
                fieldParams[propertyName] = await pt.getController().getValueAsync();
                onChange();
            },
            parameter: {
                allowClear: true,
                inlineHelp: help,
                readonly: readonly
            }
        });
        return pt;
    }
    addIconInput(ui, text, fieldParams, propertyName, onChange, onFocusOut, isPass) {
        return this.addDropdownToValue(ui, text, fieldParams, propertyName, this.getIconOptions(), true, true, onChange, "");
    }
    addDropdownToArray(ui, text, fieldParams, propertyName, options, grouping, maxItems, create, sort, onChange, placeholder) {
        let that = this;
        let dataCY = propertyName !== null && propertyName !== void 0 ? propertyName : text.replace(/\s/g, "-");
        let dd = $(`<div data-cy="${dataCY}"  class="controlContainer">`).appendTo(ui).mxDropdown({
            help: text,
            canEdit: true,
            parameter: {
                placeholder: placeholder ? placeholder : "please select",
                create: create,
                options: options,
                maxItems: maxItems,
                groups: grouping,
                sort: sort
            }, valueChanged: async function () {
                if (dd) {
                    let changed = await dd.getController().getValueAsync();
                    fieldParams[propertyName] = changed ? changed.split(",") : [];
                    if (onChange)
                        onChange();
                }
            },
            fieldValue: fieldParams[propertyName] ? fieldParams[propertyName].join(",") : ""
        });
        return dd;
    }
    addDropdownNumber(ui, text, fieldParams, propertyName, first, last, onChange, placeholder, paramsBase) {
        const current = { val: fieldParams[propertyName] ? ("" + fieldParams[propertyName]) : "0" };
        const options = Array.from({ length: 1 + last - first }, (_, n) => { return n + first; }).map((n) => { return { id: "" + n, label: "" + n }; });
        this.addDropdownToValue(ui, text, current, "val", options, false, false, () => {
            fieldParams[propertyName] = Number(current.val);
            if (onChange)
                onChange();
        }, placeholder, paramsBase);
    }
    addDropdownToValue(ui, text, fieldParams, propertyName, options, create, sort, onChange, placeholder, paramsBase) {
        let defaultParams = paramsBase ? paramsBase : {};
        let params = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.clone(Object.assign(Object.assign({}, defaultParams), {
            placeholder: placeholder ? placeholder : "please select",
            create: create,
            options: options,
            maxItems: 1,
            sort: sort
        }));
        let dataCY = propertyName !== null && propertyName !== void 0 ? propertyName : text.replace(/\s/g, "-");
        let dd = $(`<div data-cy="${dataCY}" class="controlContainer">`).appendTo(ui).mxDropdown({
            help: text,
            canEdit: true,
            parameter: params,
            valueChanged: async function () {
                if (dd) {
                    let changed = await dd.getController().getValueAsync();
                    fieldParams[propertyName] = changed;
                    if (onChange)
                        onChange();
                }
            },
            fieldValue: fieldParams[propertyName] ? fieldParams[propertyName] : ""
        });
        return dd;
    }
    getPageTitle(title, getPanel, resize) {
        let that = this;
        let div = $(`<div class="panel-heading itemTitleBar addedTitle">
            <div class="itemTitle pull-left">
                <span data-cy='title' class="refTitle">${title}</span>
            </div>

         </div>`);
        let toolBar = $("<div class=' hidden-print toolsBarButtonsContainer'><div class='btn-group toolbarButtons'></div></div>");
        div.append(toolBar);
        if (getPanel != undefined) {
            let bResize = $("<div  class='btn-group btn-dashboard-fullscreen' ><button title data-original-title='Fullscreen' tabindex='-1' class='btn btn-item btn-fullscreen'> <span class='fal fa-expand-arrows-alt'></span></button></div>").click(function () {
                let panel = getPanel();
                let panelParent = panel.parent();
                let toolbarParent = toolBar.parent();
                let dlg = $("<div>").appendTo($("body"));
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showDialog(dlg, title, panel, window.innerWidth, window.innerHeight, [{
                        text: 'Ok',
                        class: 'btnDoIt',
                        click: function () {
                            dlg.dialog("close");
                            panelParent.append(panel);
                            toolBar.appendTo(toolbarParent);
                            dlg.remove();
                            resize();
                        }
                    }], _MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_5__.UIToolsConstants.Scroll.None, false, false, () => {
                    dlg.dialog("close");
                    panelParent.append(panel);
                    toolBar.appendTo(toolbarParent);
                    dlg.remove();
                    resize();
                }, () => {
                    $(".ui-dialog-titlebar").append(toolBar);
                    resize();
                }, () => { });
            });
            $(".toolbarButtons", toolBar).append(bResize);
        }
        return div;
    }
    /* ***************************************************
       list of items with up / down / edit delete buttons
       *************************************************** */
    // add a line which can be moved up or down
    createConfigLine(lineId, linePrefix, lineName, lineArray, idProp, onChangedOrder, onEdit, needsEdit, onDelete) {
        let that = this;
        let li = $("<li>");
        $("<span>").html(`<b>${linePrefix}</b>`).appendTo(li);
        $("<span>").html(`<b>${lineName}</b>`).appendTo(li);
        $("<span class='moveUp btn-link' data-original-title='Move up' >").data("lineId", lineId).append('<i style="cursor:pointer" class="taglist fal fa-arrow-up" >').click(function (event) {
            let liToMove = $(event.delegateTarget).data("lineId");
            let liBefore = that.moveUp($(event.delegateTarget));
            let labelToMoveIdx = that.getIndex(lineArray, idProp, liToMove);
            let labelBeforeIdx = that.getIndex(lineArray, idProp, liBefore);
            let toMove = lineArray.splice(labelToMoveIdx, 1);
            lineArray.splice(labelBeforeIdx, 0, toMove[0]);
            onChangedOrder();
        }).appendTo(li);
        $("<span class='moveDown btn-link'>  data-original-title='Move down'").data("lineId", lineId).append('<i style="cursor:pointer" class="taglist fal fa-arrow-down" >').click(function (event) {
            let liToMove = $(event.delegateTarget).data("lineId");
            let liAfter = that.moveDown($(event.delegateTarget));
            let labelToMoveIdx = that.getIndex(lineArray, idProp, liToMove);
            let labelAfterIdx = that.getIndex(lineArray, idProp, liAfter);
            let toMove = lineArray.splice(labelToMoveIdx, 1);
            lineArray.splice(labelAfterIdx + 1, 0, toMove[0]);
            onChangedOrder();
        }).appendTo(li);
        // edit button
        if (onEdit) {
            $(`<span style='${needsEdit ? "color:red" : ""}' class=' btn-link  data-original-title='Edit'>)`).html("<i class='fal fa-pencil'/>")
                .data("lineId", lineId)
                .click(function (event) {
                onEdit($(event.delegateTarget).data("lineId"));
            }).appendTo(li);
        }
        // delete button
        $("<span class=' btn-link'  data-original-title='Delete' >").html("<i class='fal fa-trash-alt'/>").data("lineId", lineId).click(function (event) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.showConfirm(-1, { title: "Delete " + lineId, ok: "Delete", nok: "Cancel" }, () => {
                let dl = $(event.delegateTarget).data("lineId");
                onDelete(dl);
            }, () => { });
        }).appendTo(li);
        return li;
    }
    // remove first up / last down icon button
    fixArrows(ul) {
        let count = ul.data("count");
        $.each($("li", ul), function (idx, li) {
            (idx == 0 || count < 2) ? $(".moveUp", li).hide() : $(".moveUp", li).show();
            (idx + 1 == count || count < 2) ? $(".moveDown", li).hide() : $(".moveDown", li).show();
        });
    }
    // line to add a new element
    createConfigAddLine(action, onAdd) {
        let li = $("<li>");
        $("<span class='editLinkButtonLeft'>").html(action).click(function (event) {
            onAdd();
        }).appendTo(li);
        return li;
    }
    standardizeColor(fieldValue, alpha = 20) {
        var ctx = document.createElement('canvas').getContext("2d");
        ctx.fillStyle = fieldValue;
        return ctx.fillStyle + (alpha > 0 ? alpha.toString() : "");
    }
    // MATRIX-6169: disallow filter selection when item is not saved
    /**
     * Enable or disable the global filter selection
     * @param isEnabled
     */
    changeGlobalFilterSelectionEnabled(isEnabled) {
        if (isEnabled) {
            $("#sidebar .searchBoxFilter").removeAttr('disabled');
            $("#sidebar .searchBoxFilter").removeAttr('title');
            $("#sidebar #clearSelectedFilter").removeAttr('disabled');
            $("#sidebar .chip a").show();
        }
        else {
            $("#sidebar .searchBoxFilter").attr('disabled', "disabled");
            $("#sidebar .searchBoxFilter").attr("title", "Filter selection is disabled until item is saved");
            $("#sidebar #clearSelectedFilter").attr('disabled', "disabled");
            $("#sidebar .chip a").hide();
        }
    }
    toggleFilters(filterOn) {
        if (filterOn) {
            $("#globalProjectFilter >> button").removeAttr("disabled");
            $("#sidebar .searchBoxFilter").show();
            $(".itemFilterTool").show();
            if ($(".itemFilterTool .chip:visible").length == 0) {
                $(".itemFilterTool").hide();
            }
        }
        else {
            $("#globalProjectFilter >> button").attr("disabled", "disabled");
            $("#sidebar .searchBoxFilter").hide();
            $(".itemFilterTool").hide();
        }
    }
    /* ***************************************************
      handle < in html to prevent dangerous stuff
      *************************************************** */
    getIndex(lineArray, idProp, lineId) {
        for (var idx = 0; idx < lineArray.length; idx++) {
            if (lineArray[idx][idProp] == lineId) {
                return idx;
            }
        }
        return -1;
    }
    moveUp(moveBtn) {
        let li1 = moveBtn.closest("li");
        let li2 = li1.prev("li");
        li2.before(li1);
        this.fixArrows(moveBtn.closest("ul"));
        return $(".moveDown", li2).data("lineId");
    }
    moveDown(moveBtn) {
        let li1 = moveBtn.closest("li");
        let li2 = li1.next("li");
        li2.after(li1);
        this.fixArrows(moveBtn.closest("ul"));
        return $(".moveUp", li2).data("lineId");
    }
}
class BlockingProgressUI {
    closeIfDone() {
        var allDone = true;
        $.each(this.taskList, function (idx, task) {
            if (task.progress < 100) {
                allDone = false;
            }
        });
        if (allDone) {
            clearTimeout(this.progressLauncher);
            $("#message_progress").hide();
        }
    }
    Init(tasks, animate) {
        let that = this;
        this.taskList = _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.JSON.clone(tasks);
        clearTimeout(this.progressLauncher);
        clearTimeout(this.animation);
        var table = $("<table style='width:100%'>");
        var tbody = $("<tbody>");
        table.append(tbody);
        $("#message_progress_text")
            .addClass("alert-success")
            .removeClass("alert-danger")
            .css("width", "600px")
            .html("").append(table);
        $.each(this.taskList, function (idx, task) {
            task.progress = 0;
            var tr = $("<tr>");
            var tdp = $('<div class="progress-bar progress-bar-success progress-bar-striped active progressCtrl2 pci' + idx +
                '" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width:0%"></div>');
            tdp.data("valuenow", 1).width(1 + "%");
            var name = task.name;
            if (name && name.length > 40) {
                name = name.substring(0, 37) + "...";
            }
            tbody.append(tr.append($("<td id='progressN" + idx + "' style='text-align:left'>").html(name)).append($("<td style='width:66%;  padding-right: 10px;'>").append(tdp)));
        });
        this.progressLauncher = window.setTimeout(function () {
            $("#message_progress").show();
            if (animate) {
                $(".pci0", $("#message_progress_text")).width("30px");
                that.taskList[0].progress = 0;
                that.animation = window.setInterval(function () { that.tick(); }, 50);
            }
        }, 10);
    }
    SetProgress(taskIdx, percent, newText) {
        clearTimeout(this.animation);
        $(".pci0", $("#message_progress_text")).css("margin-left", "");
        percent = (percent <= 100) ? percent : 100;
        this.taskList[taskIdx].progress = percent;
        $(".pci" + taskIdx, $("#message_progress_text")).data("valuenow", percent).width(percent + "%");
        if (newText) {
            $("#progressN" + taskIdx).html(newText);
        }
        this.closeIfDone();
    }
    SetProgressError(taskIdx, problem) {
        clearTimeout(this.animation);
        this.taskList[taskIdx].progress = 100;
        $(".pci0", $("#message_progress_text")).css("margin-left", "");
        $(".pci" + taskIdx, $("#message_progress_text")).html(problem).css("background-color", "red").width("100%");
        $("#message_progress_text")
            .removeClass("alert-success")
            .addClass("alert-danger");
        this.closeIfDone();
    }
    tick() {
        let percent = this.taskList[0].progress + 1;
        this.taskList[0].progress = percent < 90 ? percent : 0;
        let bar = $(".pci0", $("#message_progress_text"));
        bar.prop("style", "width:30px; margin-left:" + percent + "% !important");
    }
}
class ProgressUI {
    Init(message, warning) {
        $("#progressCtrlContainer").removeClass("hide");
        $("#progressCtrlText").text(message);
        $("#progressCtrl").data("valuenow", 1).width(1 + "%").removeClass("progressWarning");
        if (warning)
            $("#progressCtrl").addClass("progressWarning");
    }
    Update(progress) {
        $("#progressCtrl").data("valuenow", progress).width(progress + "%");
    }
    SuccessHide(message, ms) {
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log('success', message);
        $("#progressCtrlText").text(message);
        $("#progressCtrl").data("valuenow", 100).width(100 + "%");
        clearTimeout(this.ProgressCtrlTimer);
        this.ProgressCtrlTimer = window.setTimeout(function () {
            $("#progressCtrlContainer").addClass("hide");
            $("#progressCtrlText").text("");
            $("#progressCtrl").data("valuenow", 0).width(0 + "%");
        }, ms);
    }
    ErrorHide(message, ms) {
        _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.Logger.log('error', message);
        $("#progressCtrlContainer").css("background-color", "red");
        $("#progressCtrlText").text(message);
        $("#progressCtrl").data("valuenow", 0).width(0 + "%");
        clearTimeout(this.ProgressCtrlTimer);
        this.ProgressCtrlTimer = window.setTimeout(function () {
            $("#progressCtrlContainer").addClass("hide");
            $("#progressCtrlContainer").css("background-color", "white");
            $("#progressCtrlText").text("");
            $("#progressCtrl").data("valuenow", 0).width(0 + "%");
        }, ms);
    }
}
class SelectUserOrGroupUI {
    showMultiUserSelect(container, help, selected, title, selectFrom, selectTo, showUsers, showGroups, onSelect, preSelectedUsers) {
        let that = this;
        $('<span class="baseControlHelp">' + help + '</span>').appendTo(container);
        let ctrl = $("<div class='baseControl'>").appendTo(container);
        let input = $("<div class='form-control userSelect'>").appendTo(ctrl);
        input.html(selected ? selected.map(function (userOrGroup) { return that.getGroupDisplayNameFromId(userOrGroup); }).join(", ") : "");
        ctrl.click(function (event) {
            that.showSelectDialog(selected, title, selectFrom, selectTo, showUsers, showGroups, (selection) => {
                let selectedUI = selection.map(function (userOrGroup) { return that.getGroupDisplayNameFromId(userOrGroup); });
                input.html(selectedUI.join(", "));
                onSelect(selection);
                selected = selection;
            }, preSelectedUsers);
            return false;
        });
    }
    getUsersInSelection(selection) {
        let that = this;
        let users = selection.filter(function (userOrRole) { return !that.isGroup(userOrRole); });
        // add users from groups
        let groups = _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getUserGroups();
        if (groups) {
            $.each(groups, function (aclIdx, group) {
                if (selection.indexOf(that.getGroupId(group)) != -1) {
                    $.each(group.membership, function (mIdx, member) {
                        if (users.indexOf(member.login) == -1) {
                            users.push(member.login);
                        }
                    });
                }
            });
        }
        return users;
    }
    getGroupId(group) {
        return _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.groupIdToName(group.groupId);
    }
    // convert a group id used in mail to italic group name
    getGroupDisplayNameFromId(groupOrUserId) {
        if (!groupOrUserId) {
            groupOrUserId = "";
        }
        if (groupOrUserId.indexOf("g_") != 0 || groupOrUserId.indexOf("_g") != (groupOrUserId.length - 2)) {
            return groupOrUserId; // Not a group let's return the current value.
        }
        let groups = _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getUserGroups().sort(function (a, b) { if (a.groupName < b.groupName)
            return -1;
        else
            return 1; });
        for (var idx = 0; idx < groups.length; idx++) {
            if (this.getGroupId(groups[idx]) == groupOrUserId) {
                return "<span class='groupFlag'>group&nbsp;</span>" + groups[idx].groupName;
            }
        }
        if (!_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.hasGroupInfo(groupOrUserId)) {
            return `<span class='groupFlag'>group&nbsp;</span><s>${groupOrUserId}</s>`;
        }
        return groupOrUserId;
    }
    // return if the id is a group
    isGroup(groupOrUserId) {
        let groups = _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getUserGroups();
        for (var idx = 0; idx < groups.length; idx++) {
            if (this.getGroupId(groups[idx]) == groupOrUserId) {
                return true;
            }
        }
        return false;
    }
    exists(groupOrUserId) {
        if (this.isGroup(groupOrUserId))
            return true;
        if (_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getUserIds().indexOf(groupOrUserId) != -1)
            return true;
        return false;
    }
    showSelectDialog(selected, title, selectFrom, selectTo, showUsers, showGroups, onSelect, preSelectedUsers) {
        let that = this;
        that.dlg = $(`<div data-cy='${title.replace(/\s/g, "-")}'>`).appendTo("body");
        let select = $("<select multiple>").appendTo(that.dlg);
        selected = selected ? selected : [];
        select.append("<option style='display:none' value='' data-search=''>");
        let users = preSelectedUsers ? preSelectedUsers : _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getUserNames();
        let groups = _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getUserGroups().sort(function (a, b) { if (a.groupName < b.groupName)
            return -1;
        else
            return 1; });
        let userSelect = select;
        let groupSelect = select;
        if (showGroups && showUsers) {
            userSelect = $("<optgroup label='Users'>").appendTo(select);
            groupSelect = $("<optgroup label='User Groups'>").appendTo(select);
        }
        if (showUsers) {
            // sort users alphabetically
            users = users.sort(function (a, b) { if (a.login < b.login)
                return -1;
            else
                return 1; });
            // add to user select
            $.each(users, function (userIdx, user) {
                let name = _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getCombinedName(user);
                let email = (user.email ? user.email : "");
                let searchVal = email + " " + name;
                let sel = (selected.indexOf(user.login) != -1) ? " selected" : "";
                userSelect.append($(`
                    <option data-search='${searchVal.toLowerCase()}' data-cy='${user.login}' data-user='${user.login}'
                        title='${email}' value='${user.login}' ${sel}>
                        ${name}
                    </option>`));
            });
        }
        if (showGroups) {
            $.each(groups, function (groupIdx, group) {
                let groupName = group.groupName;
                let groupId = that.getGroupId(group);
                let sel = (selected.indexOf(groupId) != -1) ? " selected" : "";
                let tooltip = "Press shift to select individual users instead of groups: " +
                    group.membership.map(function (member) { return member.login; }).join(", ");
                if (group.membership.length == 0) {
                    tooltip = "group has no members";
                }
                groupSelect.append($(`<option title='${tooltip}'  data-group='group' data-search='group ${groupName.toLowerCase()}' value='${groupId}' ${sel} >${groupName}</option>`));
            });
        }
        that.dlg.dialog({
            autoOpen: true,
            title: title ? title : "Select",
            width: 716,
            height: 580,
            resizeStop: function () { that.resize(); },
            modal: true,
            open: function () {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.pushDialog(that.dlg);
                select.multiSelect({
                    selectableHeader: "<div class='custom-header'>" + selectFrom + "</div><input type='text' class='form-control ms-search' autocomplete='off' placeholder='filter'>",
                    selectionHeader: "<div class='custom-header'>" + selectTo + "</div><input type='text' class='form-control ms-search' autocomplete='off' placeholder='filter'>",
                    afterInit: function () {
                        let that = this, $selectableSearch = that.$selectableUl.prev(), $selectionSearch = that.$selectionUl.prev(), selectableSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selectable:not(.ms-selected)', selectionSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selection.ms-selected';
                        $("li", that.dlg).each(function (idx, opt) {
                            if ($(opt).data("group"))
                                $(opt).prepend("<span class='groupFlag'>group</span>");
                            if ($(opt).data("user"))
                                $(opt).prepend(_matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.getAvatar($(opt).data("user"), 25));
                        });
                        $selectableSearch.on('keyup', function (e) {
                            if (e.which === 40) {
                                that.$selectableUl.focus();
                                return false;
                            }
                            else {
                                let searchExpr = $selectableSearch.val().toLowerCase();
                                $.each($(selectableSearchString), function (lidx, li) {
                                    (!searchExpr || $(li).data("search").indexOf(searchExpr) != -1) ? $(li).show() : $(li).hide();
                                });
                                return true;
                            }
                        }).focus();
                        $selectionSearch.on('keyup', function (e) {
                            if (e.which == 40) {
                                that.$selectionUl.focus();
                                return false;
                            }
                            else {
                                let searchExpr = $selectionSearch.val().toLowerCase();
                                $.each($(selectionSearchString), function (lidx, li) {
                                    (!searchExpr || $(li).data("search").indexOf(searchExpr) != -1) ? $(li).show() : $(li).hide();
                                });
                                return true;
                            }
                        });
                    },
                    afterSelect: function (sel) {
                        let groupAddedAsUsers = false;
                        if (_globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.globalShiftDown && showGroups) {
                            $.each(groups, function (groupIdx, group) {
                                let groupId = that.getGroupId(group);
                                if (groupId == sel[0]) {
                                    groupAddedAsUsers = true;
                                    let newMembers = group.membership.map(function (member) { return member.login; }).filter(function (login) { return selected.indexOf(login) == -1; });
                                    // update UI
                                    $.each(newMembers, function (nmIdx, newMember) {
                                        select.multiSelect('select', [newMember]);
                                    });
                                    // update internal selection
                                    // selected = selected.concat( newMembers );
                                }
                            });
                        }
                        if (!groupAddedAsUsers) {
                            selected.push(sel[0]);
                        }
                    },
                    afterDeselect: function (sel) {
                        selected = selected.filter(function (s) { return s != sel[0]; });
                    }
                });
                that.resize();
            },
            close: function () { _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.popDialog(that.dlg); that.dlg.remove(); },
            buttons: [{
                    text: 'Ok',
                    class: 'btnDoIt',
                    click: function () {
                        onSelect(selected);
                        that.dlg.dialog("close");
                    }
                }, {
                    text: 'Cancel',
                    class: 'btnCancelIt',
                    click: function () {
                        that.dlg.dialog("close");
                    }
                }]
        });
    }
    getUserDropDownOptions(showUsers, showGroups, preSelectedUsers, possiblyDeletedUserGroupNames) {
        return _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getValidUserOptions(showUsers, showGroups, preSelectedUsers, possiblyDeletedUserGroupNames);
    }
    showSingleSelect(control, showUsers, showGroups, onSelect, preSelectedUsers, possiblyDeletedUsername) {
        let that = this;
        let options = this.getUserDropDownOptions(showUsers, showGroups, preSelectedUsers, possiblyDeletedUsername);
        control.selectize({
            persist: false,
            maxItems: 1,
            valueField: 'id',
            labelField: 'label',
            searchField: ['label'],
            options: options,
            onChange: function (args) {
                onSelect(args);
            },
            render: {
                option: function (item, escape) {
                    // This is to avoid escaped strings showing in the UI
                    let labelText = item.label;
                    if (item.strikethrough) {
                        labelText = `<s>${labelText}</s>`;
                    }
                    return `<div class='option'>${labelText}</div>`;
                },
                item: function (item, escape) {
                    let labelText = item.label;
                    if (item.strikethrough) {
                        labelText = `<s>${labelText}</s>`;
                    }
                    return `<div class='item'>${labelText}</div>`;
                }
            }
        });
    }
    // store all the current groups and users in page
    getAllUsersAndGroups() {
        let that = this;
        let res = $.Deferred();
        let dropdownOptions = [];
        _globals__WEBPACK_IMPORTED_MODULE_6__.restConnection.getServer("user").done(function (allUsersResult) {
            let users = allUsersResult.user.filter(function (user) {
                return user.userStatus != "deleted" && user.userStatus != "blocked" && !user.superAdmin;
            }).sort(function (a, b) { if (a.login < b.login)
                return -1;
            else
                return 1; });
            // add to user select
            $.each(users, function (userIdx, user) {
                let name = (user.firstName ? user.firstName : "") + " " + (user.lastName ? user.lastName : "");
                name = user.login + (name == " " ? "" : (" - ") + name);
                let opt = { id: user.login, label: name, class: "users" };
                dropdownOptions.push(opt);
            });
            _globals__WEBPACK_IMPORTED_MODULE_6__.restConnection.getServer("group").done(function (allGroupsResult) {
                let groups = allGroupsResult.groups.sort(function (a, b) { if (a.groupName < b.groupName)
                    return -1;
                else
                    return 1; });
                // add groups
                $.each(groups, function (groupIdx, group) {
                    let groupName = group.groupName;
                    let groupId = that.getGroupId(group);
                    let opt = { id: groupId, label: groupName, class: "groups" };
                    dropdownOptions.push(opt);
                });
                res.resolve(dropdownOptions);
            });
        });
        return res;
    }
    showSingleSelectDialog(selected, title, help, showUsers, showGroups, onSelect, preSelectedUsers) {
        let that = this;
        that.dlg = $("<div>").appendTo("body");
        $('<span class="baseControlHelp">' + help + '</span>').appendTo(that.dlg);
        let ctrl = $("<div class='baseControl'>").appendTo(that.dlg);
        let input = $("<div class='form-control'>").appendTo(ctrl);
        this.showSingleSelect(input, showUsers, showGroups, (newSelection) => {
            selected = newSelection;
        }, preSelectedUsers, selected);
        that.dlg.dialog({
            autoOpen: true,
            title: title ? title : "Select",
            width: 716,
            height: 380,
            resizeStop: function () { that.resize(); },
            modal: true,
            open: function () {
                _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.pushDialog(that.dlg);
            },
            close: function () { _matrixlib__WEBPACK_IMPORTED_MODULE_2__.ml.UI.popDialog(that.dlg); that.dlg.remove(); },
            buttons: [{
                    text: 'Ok',
                    class: 'btnDoIt',
                    click: function () {
                        onSelect(selected);
                        that.dlg.dialog("close");
                    }
                }, {
                    text: 'Cancel',
                    class: 'btnCancelIt',
                    click: function () {
                        that.dlg.dialog("close");
                    }
                }]
        });
    }
    resize() {
        let height = this.dlg.height();
        let top = $(".ms-list", this.dlg).position().top;
        $(".ms-list", this.dlg).height(height - top);
    }
}
// TODO(modules): I don't think LT needs to be implemented in this file, it's a lower-level library.
/** helper to escape < into non-dangerous &lt; */
class LT {
    /** prepares the text for storage in db and readonly display
     * @param code is the text
     * @param fieldId (or 0/null) is the field which can have this turned off
    */
    forDB(code, fieldId) {
        let config = _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig ? _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getFieldConfig(fieldId) : null;
        if (config && config.unsafeHtml)
            return code;
        return (code && !_globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.isConfigClient()) ? code.replace(/&/g, "&amp;").replace(/</g, "&lt;") : code;
    }
    /** prepares the text for editing in UI
     * @param code is the text
     * @param fieldId (or 0/null) is the field which can have this turned off
    */
    forUI(code, fieldId) {
        let config = (fieldId && _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig) ? _globals__WEBPACK_IMPORTED_MODULE_6__.globalMatrix.ItemConfig.getFieldConfig(fieldId) : null;
        if (config && config.unsafeHtml) {
            return code;
        }
        if (code && !_globals__WEBPACK_IMPORTED_MODULE_6__.matrixSession.isConfigClient()) {
            return code.replace(/&lt;/g, "<").replace(/&amp;/g, "&").replace(/&gt;/g, ">");
        }
        else {
            return code;
        }
    }
}


/***/ }),
/* 138 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ThemeSelector: () => (/* binding */ ThemeSelector)
/* harmony export */ });

class ThemeSelector {
    constructor() {
        this.currentCSS = "";
        this.themes = {
            dark: `
            .navbar-inverse{
                background:black !important;
            }
            #idProject
            {
                color:white!important;
            }
            #projectNameTitleContainer:hover
            {
                color:lightgrey!important;
            }
           
            .navbar-inverse .btn-success:hover
            {
                box-shadow: 2px 2px 2px 1px #ffffff80;

            }
                      `,
            light: ``,
        };
        let that = this;
        this.currentCSS = "";
        if (localStorage.getItem("currentCSS") == undefined) {
            localStorage.setItem("currentCSS", "light");
        }
        let inter = setInterval(() => {
            if (!that.themeSelectorAdded) {
                that.themeSelectorAdded = true;
                this.currentCSS = localStorage.getItem("currentCSS");
                that.loadTheme(this.currentCSS);
            }
            else {
                if (this.themeSelectorAdded) {
                    clearInterval(inter);
                }
            }
        }, 200);
    }
    injectCSS(cssFile) {
        var t = $("#themeCSS");
        let that = this;
        if (cssFile != "") {
            console.log("Injecting the CSS ");
            //Load external file
            that.loadTheme(cssFile);
        }
        else {
            t.remove();
        }
        that.currentCSS = cssFile;
        localStorage.setItem("currentCSS", cssFile);
    }
    reloadCurrentCSS() {
        this.injectCSS(this.currentCSS);
    }
    loadTheme(themeName) {
        $("#extraTheme").remove();
        let theme = $("<style id='extraTheme'>");
        theme.html(this.themes[themeName]);
        $('body').append(theme);
    }
    init() {
    }
    renderThemeSelectorControl(help, table) {
        //This is saved in localstorage.
        let tableBody = $("tbody", table);
        tableBody.append($('<tr class="theme showInAdmin" ><td colspan="2" class="baseControlHelp">Colors</td></tr'));
        var tr = $("<tr  class='theme showInAdmin' >");
        tableBody.append(tr);
        tr.append($("<td class='admin_utdl'>").append($("<label class='control-label'>").html("Theme")));
        let that = this;
        /*$(document).keydown(function(key){ if (key.ctrlKey && key.altKey && key.key == 'q' )
        {
            that.reloadCurrentCSS();
        }})*/
        tr.append($("<td>").append(`<select  style="width: 100%;height: 34px;" class="form-control" id="themeSelectorCombo">   
                <option value="light">Light</option>
                <option value="dark">Dark</option> 
           </select>`));
        $("#themeSelectorCombo").change((o) => {
            var value = $("#themeSelectorCombo option:selected").val();
            this.injectCSS(value);
        });
        $("#themeSelectorCombo").val(this.currentCSS);
        tr.append($("<td>").append(""));
    }
}


/***/ }),
/* 139 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WidgetPluginsConstants: () => (/* binding */ WidgetPluginsConstants),
/* harmony export */   WidgetPluginsContainer: () => (/* binding */ WidgetPluginsContainer)
/* harmony export */ });
/* harmony import */ var _js_vendor_gridstack_3_2_0_dist_gridstack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(140);
/* harmony import */ var _js_vendor_gridstack_3_2_0_dist_gridstack__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_js_vendor_gridstack_3_2_0_dist_gridstack__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _common_UI_ILineEditor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(144);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(145);
/* harmony import */ var _WidgetSettingsManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(146);
/// <reference types="bootstrap" />








class WidgetPluginsConstants {
}
WidgetPluginsConstants.defaultDashboardId = "default";
WidgetPluginsConstants.defaultDashboard = { displayString: "home" };
class WidgetPluginsContainer {
    toggle() {
        if (!this.visible) {
            this.render(this.currentDashboard);
        }
        else {
            this.exit(this.previousUrl);
        }
    }
    constructor() {
        this.currentDashboard = WidgetPluginsConstants.defaultDashboardId;
    }
    addNewWidget() {
        var _a;
        let that = this;
        let editor = new _common_UI_ILineEditor__WEBPACK_IMPORTED_MODULE_2__.LineEditorExt();
        let lst = [];
        for (let key in _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_4__.widgetPluginManager.pluginList) {
            let widget = _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_4__.widgetPluginManager.pluginList[key];
            if (widget.defaultParameters().canBeAddedOrDeletedBy == _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_4__.IWidgetScope.superAdmin && !_globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.isSuperAdmin()) {
                continue;
            }
            if (widget.defaultParameters().canBeAddedOrDeletedBy == _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_4__.IWidgetScope.admin && !_globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.isAdmin()) {
                continue;
            }
            let display = ((_a = widget.help) !== null && _a !== void 0 ? _a : "") + "   [" + key + "]";
            lst.push({ id: key, label: display });
        }
        let defaultVal = lst.length > 0 ? lst[0].id : "";
        let lines = [
            { help: 'Type', type: _common_UI_ILineEditor__WEBPACK_IMPORTED_MODULE_2__.LineType.select, required: true, value: defaultVal, options: lst },
        ];
        let editorTitle = "Add a widget";
        if (_globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.isAdmin() && _globals__WEBPACK_IMPORTED_MODULE_3__.globalMatrix.globalShiftDown) {
            editorTitle = "Add a widget for specific users";
            lines.push({ help: 'Add for other user?', type: _common_UI_ILineEditor__WEBPACK_IMPORTED_MODULE_2__.LineType.boolean, required: false, value: "false" });
        }
        let selectedPlugin;
        let newWidget;
        editor.showDialog(editorTitle, 400, lines, (updated) => {
            selectedPlugin = Object.create(window[updated[0].value].prototype);
            selectedPlugin.constructor.apply();
            let params = selectedPlugin.defaultParameters();
            let selectedPluginIndex = updated[0].options.findIndex((i) => { return i.id == updated[0].value; });
            ;
            params.options.title = updated[0].options[selectedPluginIndex].label;
            params.position.w = 2;
            params.position.h = 2;
            params.position.dashboard = this.currentDashboard;
            newWidget = { id: `widget_${updated[0].value}_${new Date().getTime().toString()}`, pluginName: updated[0].value, parameters: params, createdBy: _globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getUser() };
            if (updated.length == 2 && updated[1].value != undefined && updated[1].value != "") {
                newWidget.parameters.users = ["*"];
                newWidget.parameters.options.canBeHidden = updated[1].value.toString() == "true";
            }
            _WidgetSettingsManager__WEBPACK_IMPORTED_MODULE_5__.WidgetSettingsManager.setSettings(newWidget);
            let widget = that.grid.addWidget({ w: Math.max(params.position.w, 1), h: Math.max(params.position.h, 1), });
            selectedPlugin.render($(".grid-stack-item-content", widget), newWidget, _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_4__.renderMode.placeholder);
            _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_4__.widgetPluginManager.addLoadedWidget(newWidget.id, selectedPlugin);
            return true;
        }).done(() => {
            selectedPlugin.showWidgetSettingEditor(newWidget);
        });
    }
    render(dashboardId = WidgetPluginsConstants.defaultDashboardId) {
        let conf = _globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getDashboardConfig();
        if (conf.dashboards[dashboardId] == null) {
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Dashboard not found", "");
        }
        let dashboard = conf.dashboards[dashboardId];
        _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_4__.widgetPluginManager.unLoadAllWidgets();
        $("#widgetDashboard").remove();
        $("#addWidget").remove();
        $(".dashboardTitle").remove();
        $("#showHiddenWidgetButton").remove();
        this.previousUrl = window.location.href;
        history.pushState(null, null, _globals__WEBPACK_IMPORTED_MODULE_3__.globalMatrix.matrixBaseUrl + "/?dashboard=" + dashboardId);
        this.currentDashboard = dashboardId;
        this.visible = true;
        let that = this;
        $('#highlightContext').hide();
        $("#contextframe").hide();
        $("#contextframesizer").hide();
        $("body").append(`<div id='addWidget'><span class="fa-stack ">
                            <i class="fal fa-sticky-note fa-stack-2x"></i>
                            <i class="fa fa-plus fa-stack" style=""></i>
                        </span> </div> `);
        this._root = $("<div id='widgetDashboard'> <div class='grid-stack'> </div></div>");
        this._root.insertAfter("header");
        $("#widgetDashboard").prepend(_common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.getPageTitle(dashboard.displayString));
        var bClose = $("<div  class='btn-group btn-dashboard-close' ><button title data-original-title='Close' style='margin-right: -12px;' class='btn btn-item btn-fullscreen'> <span class='fal fa-times-circle'></span></button></div>").click(function () {
            that.exit(that.previousUrl);
        });
        $("#widgetDashboard .toolbarButtons").append(bClose);
        _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_4__.widgetPluginManager.unLoadAllWidgets();
        this.grid = _js_vendor_gridstack_3_2_0_dist_gridstack__WEBPACK_IMPORTED_MODULE_0__.GridStack.init();
        let layout = 'none';
        let width = document.body.clientWidth;
        if (width < 800) {
            that.grid.column(1, layout);
        }
        else {
            that.grid.column(12, layout);
        }
        let i = 0;
        _globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.serverConfig.currentUserSettings.forEach((userSetting) => {
            if (userSetting.key.indexOf("widget_") == 0) {
                let w = JSON.parse(userSetting.value);
                let plugin = _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_4__.widgetPluginManager.pluginList[w.pluginName];
                if (plugin && w.parameters.position.dashboard == this.currentDashboard) {
                    let clonedPlugin = Object.create(window[w.pluginName].prototype);
                    clonedPlugin.constructor.apply();
                    w.parameters = plugin.mergeOptions(w.parameters);
                    _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_4__.widgetPluginManager.addLoadedWidget(userSetting.key, clonedPlugin);
                    let gridWidget = this.grid.addWidget({ w: w.parameters.position.w, h: w.parameters.position.h, x: w.parameters.position.x, y: w.parameters.position.y });
                    clonedPlugin.render($(".grid-stack-item-content", gridWidget), w, _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_4__.renderMode.placeholder);
                }
                else {
                    console.log("Unknown plugin");
                }
            }
        });
        that.loadServerSettingWidgets();
        let hiddenWidget = _WidgetSettingsManager__WEBPACK_IMPORTED_MODULE_5__.WidgetSettingsManager.getHiddenWidgets();
        hiddenWidget.forEach((w) => {
            let p = _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_4__.widgetPluginManager.loadedWidgets[w];
            if (p != undefined) {
                p.hide(false);
            }
        });
        $("#addWidget").click(() => {
            that.addNewWidget();
        });
        $("#addWidget").hover(() => {
            $("#addWidget").tooltip({
                title: _globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.isAdmin() ? "Add a widget (use shift to add it for somebody else)" : "Add a widget",
                placement: "auto",
                container: "body"
            });
        });
        this.showUpdateShowHiddenButton();
        this.grid.on('change', function (event, items) {
            setTimeout(() => {
                if (window.innerWidth > 700) {
                    items.forEach(function (item) {
                        let id = $(".mWidget", item.el).prop("id");
                        let widget = _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_4__.widgetPluginManager.loadedWidgets[id];
                        if (widget != undefined) {
                            widget.updatePosition(item.w, item.h, item.x, item.y);
                        }
                    });
                }
            }, 100);
        });
        this._root.prop("style", "");
    }
    loadServerSettingWidgets(loadAllUser = false) {
        _globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.serverConfig.customerSettings.forEach((setting) => {
            if (setting.key.indexOf("widget_") == 0 && _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_4__.widgetPluginManager.loadedWidgets[setting.key] == undefined) {
                let w = JSON.parse(setting.value);
                let plugin = _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_4__.widgetPluginManager.pluginList[w.pluginName];
                if (plugin && w.parameters.users != undefined &&
                    ((w.parameters.users.indexOf("*") != -1 || w.parameters.users.indexOf(_globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getUser()) != -1)
                        || (loadAllUser && _globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.isAdmin()))) {
                    // Check for position override
                    let pos = localStorage.getItem(w.id);
                    if (pos != undefined && pos != "") {
                        let position = JSON.parse(pos);
                        w.parameters.position = position;
                    }
                    let clonedPlugin = Object.create(window[w.pluginName].prototype);
                    clonedPlugin.constructor.apply();
                    w.parameters = plugin.mergeOptions(w.parameters);
                    if (w.parameters.position.dashboard == this.currentDashboard) {
                        _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_4__.widgetPluginManager.addLoadedWidget(setting.key, clonedPlugin);
                        let gridWidget = this.grid.addWidget({ w: w.parameters.position.w, h: w.parameters.position.h, x: w.parameters.position.x, y: w.parameters.position.y, noMove: !_globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.isAdmin(), noResize: !_globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.isAdmin() });
                        clonedPlugin.render($(".grid-stack-item-content", gridWidget), w, _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_4__.renderMode.placeholder);
                        if (_globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.isAdmin() && w.parameters.users && (w.parameters.users.indexOf("*") == -1 && w.parameters.users.indexOf(_globals__WEBPACK_IMPORTED_MODULE_3__.matrixSession.getUser()) == -1)) {
                            $(".grid-stack-item-content", gridWidget).css("opacity", 0.4);
                        }
                        $(".grid-stack-item-content", gridWidget).addClass("widgetAddedByAdmin");
                    }
                }
                else {
                    console.log("Unknown plugin");
                }
            }
        });
    }
    exit(destination) {
        this.visible = false;
        if (destination == null || destination.indexOf(_globals__WEBPACK_IMPORTED_MODULE_3__.globalMatrix.matrixBaseUrl + "/?dashboard=") == 0) {
            if (localStorage.getItem("SessionLastProject") != null)
                window.location.href = _globals__WEBPACK_IMPORTED_MODULE_3__.globalMatrix.matrixBaseUrl + localStorage.getItem("SessionLastProject");
            else
                window.location.href = _globals__WEBPACK_IMPORTED_MODULE_3__.globalMatrix.matrixBaseUrl;
        }
        else {
            history.pushState(null, null, destination);
            $('#highlightContext').show();
            $("#contextframe").show();
            $("#contextframesizer").show();
            _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_4__.widgetPluginManager.unLoadAllWidgets();
            $("#widgetDashboard").remove();
            $("#addWidget").remove();
            $("#showHiddenWidgetButton").remove();
            $(".dashboardTitle").remove();
        }
    }
    hideWidget(id) {
        $(".grid-stack-item:has(#" + id + ")").hide();
        this.showUpdateShowHiddenButton();
    }
    unhide(id) {
        $(".grid-stack-item:has(#" + id + ")").show();
        this.showUpdateShowHiddenButton();
    }
    deleteWidget(displayedWidget) {
        _WidgetSettingsManager__WEBPACK_IMPORTED_MODULE_5__.WidgetSettingsManager.unhide(displayedWidget);
        $(".grid-stack-item:has(#" + displayedWidget.id + ")").remove();
        this.showUpdateShowHiddenButton();
    }
    showUpdateShowHiddenButton() {
        let that = this;
        if (_WidgetSettingsManager__WEBPACK_IMPORTED_MODULE_5__.WidgetSettingsManager.getHiddenWidgets().length > 0) {
            if ($('#showHiddenWidgetButton').length == 0) {
                $("body").append(`<div id='showHiddenWidgetButton'><span class="fa-stack ">
                <i class="fal fa-eye-slash fa-stack-2x"></i>
                <i class="fal fa-toggle-on" style=""></i>
                    </span> </div> `);
                $("#showHiddenWidgetButton").hover(() => {
                    $("#showHiddenWidgetButton").tooltip({
                        title: "Toggle hidden widget",
                        placement: "top",
                        container: "body"
                    });
                });
                $("#showHiddenWidgetButton").click(() => {
                    if (_globals__WEBPACK_IMPORTED_MODULE_3__.globalMatrix.globalShiftDown) {
                        that.loadServerSettingWidgets(true);
                    }
                    _WidgetSettingsManager__WEBPACK_IMPORTED_MODULE_5__.WidgetSettingsManager.getHiddenWidgets().forEach((widget) => {
                        $(".grid-stack-item:has(#" + widget + ")").toggle();
                    });
                });
            }
        }
        else {
            $('#showHiddenWidgetButton').remove();
        }
    }
}


/***/ }),
/* 140 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// gridstack.ts 3.2.0 @preserve
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * https://gridstackjs.com/
 * (c) 2014-2020 Alain Dumesny, Dylan Weiss, Pavel Reznikov
 * gridstack.js may be freely distributed under the MIT license.
*/
const gridstack_engine_1 = __webpack_require__(141);
const utils_1 = __webpack_require__(142);
const gridstack_ddi_1 = __webpack_require__(143);
__export(__webpack_require__(142));
__export(__webpack_require__(141));
__export(__webpack_require__(143));
// default values for grid options - used during init and when saving out
const GridDefaults = {
    column: 12,
    minRow: 0,
    maxRow: 0,
    itemClass: 'grid-stack-item',
    placeholderClass: 'grid-stack-placeholder',
    placeholderText: '',
    handle: '.grid-stack-item-content',
    handleClass: null,
    styleInHead: false,
    cellHeight: 'auto',
    margin: 10,
    auto: true,
    minWidth: 768,
    float: false,
    staticGrid: false,
    animate: true,
    alwaysShowResizeHandle: false,
    resizable: {
        autoHide: true,
        handles: 'se'
    },
    draggable: {
        handle: '.grid-stack-item-content',
        scroll: false,
        appendTo: 'body'
    },
    dragIn: undefined,
    dragInOptions: {
        revert: 'invalid',
        handle: '.grid-stack-item-content',
        scroll: false,
        appendTo: 'body'
    },
    disableDrag: false,
    disableResize: false,
    rtl: 'auto',
    removable: false,
    removableOptions: {
        accept: '.grid-stack-item'
    },
    removeTimeout: 2000,
    marginUnit: 'px',
    cellHeightUnit: 'px',
    disableOneColumnMode: false,
    oneColumnModeDomSort: false
};
/**
 * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.
 * Note: your grid elements MUST have the following classes for the CSS layout to work:
 * @example
 * <div class="grid-stack">
 *   <div class="grid-stack-item">
 *     <div class="grid-stack-item-content">Item 1</div>
 *   </div>
 * </div>
 */
class GridStack {
    /**
     * Construct a grid item from the given element and options
     * @param el
     * @param opts
     */
    constructor(el, opts = {}) {
        /** @internal */
        this._gsEventHandler = {};
        this.el = el; // exposed HTML element to the user
        opts = opts || {}; // handles null/undefined/0
        utils_1.obsoleteOpts(opts, 'verticalMargin', 'margin', 'v2.0');
        utils_1.obsoleteAttr(this.el, 'data-gs-current-height', 'gs-current-row', 'v1.0.0');
        // if row property exists, replace minRow and maxRow instead
        if (opts.row) {
            opts.minRow = opts.maxRow = opts.row;
            delete opts.row;
        }
        let rowAttr = utils_1.Utils.toNumber(el.getAttribute('gs-row'));
        // elements attributes override any passed options (like CSS style) - merge the two together
        let defaults = Object.assign(Object.assign({}, GridDefaults), { column: utils_1.Utils.toNumber(el.getAttribute('gs-column')) || 12, minRow: rowAttr ? rowAttr : utils_1.Utils.toNumber(el.getAttribute('gs-min-row')) || 0, maxRow: rowAttr ? rowAttr : utils_1.Utils.toNumber(el.getAttribute('gs-max-row')) || 0, staticGrid: utils_1.Utils.toBool(el.getAttribute('gs-static')) || false, _styleSheetClass: 'grid-stack-instance-' + (Math.random() * 10000).toFixed(0), alwaysShowResizeHandle: opts.alwaysShowResizeHandle || false, resizable: {
                autoHide: !(opts.alwaysShowResizeHandle || false),
                handles: 'se'
            }, draggable: {
                handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || '.grid-stack-item-content',
                scroll: false,
                appendTo: 'body'
            }, removableOptions: {
                accept: '.' + (opts.itemClass || 'grid-stack-item')
            } });
        if (el.getAttribute('gs-animate')) { // default to true, but if set to false use that instead
            defaults.animate = utils_1.Utils.toBool(el.getAttribute('gs-animate'));
        }
        this.opts = utils_1.Utils.defaults(opts, defaults);
        opts = null; // make sure we use this.opts instead
        this.initMargin();
        if (this.opts.rtl === 'auto') {
            this.opts.rtl = el.style.direction === 'rtl';
        }
        if (this.opts.rtl) {
            this.el.classList.add('grid-stack-rtl');
        }
        // check if we're been nested, and if so update our style and keep pointer around (used during save)
        let parentGridItemEl = utils_1.Utils.closestByClass(this.el, GridDefaults.itemClass);
        if (parentGridItemEl && parentGridItemEl.gridstackNode) {
            this.opts._isNested = parentGridItemEl.gridstackNode;
            this.opts._isNested.subGrid = this;
            this.el.classList.add('grid-stack-nested');
        }
        this._isAutoCellHeight = (this.opts.cellHeight === 'auto');
        if (this._isAutoCellHeight) {
            // make the cell content square initially (will use resize event to keep it square)
            let marginDiff = -this.opts.marginRight - this.opts.marginLeft
                + this.opts.marginTop + this.opts.marginBottom;
            this.cellHeight(this.cellWidth() + marginDiff, false);
        }
        else {
            this.cellHeight(this.opts.cellHeight, false);
        }
        this.el.classList.add(this.opts._styleSheetClass);
        this._setStaticClass();
        this.engine = new gridstack_engine_1.GridStackEngine({
            column: this.opts.column,
            float: this.opts.float,
            maxRow: this.opts.maxRow,
            onChange: (cbNodes, removeDOM = true) => {
                let maxH = 0;
                this.engine.nodes.forEach(n => { maxH = Math.max(maxH, n.y + n.h); });
                cbNodes.forEach(n => {
                    let el = n.el;
                    if (removeDOM && n._id === null) {
                        if (el && el.parentNode) {
                            el.parentNode.removeChild(el);
                        }
                    }
                    else {
                        this._writePosAttr(el, n.x, n.y, n.w, n.h);
                    }
                });
                this._updateStyles(false, maxH); // false = don't recreate, just append if need be
            }
        });
        if (this.opts.auto) {
            this.batchUpdate(); // prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...
            let elements = [];
            this.getGridItems().forEach(el => {
                let x = parseInt(el.getAttribute('gs-x'));
                let y = parseInt(el.getAttribute('gs-y'));
                elements.push({
                    el,
                    // if x,y are missing (autoPosition) add them to end of list - but keep their respective DOM order
                    i: (Number.isNaN(x) ? 1000 : x) + (Number.isNaN(y) ? 1000 : y) * this.opts.column
                });
            });
            elements.sort(e => e.i).forEach(e => this._prepareElement(e.el));
            this.commit();
        }
        this.engine.saveInitial(); // initial start of items
        this.setAnimation(this.opts.animate);
        this._updateStyles();
        if (this.opts.column != 12) {
            this.el.classList.add('grid-stack-' + this.opts.column);
        }
        this._setupDragIn();
        this._setupRemoveDrop();
        this._setupAcceptWidget();
        this._updateWindowResizeEvent(); // finally this may size us down to 1 column
    }
    /**
     * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will
     * simply return the existing instance (ignore any passed options). There is also an initAll() version that support
     * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.
     * @param options grid options (optional)
     * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)
     *
     * @example
     * let grid = GridStack.init();
     *
     * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later
     * let grid = document.querySelector('.grid-stack').gridstack;
     */
    static init(options = {}, elOrString = '.grid-stack') {
        let el = GridStack.getGridElement(elOrString);
        if (!el) {
            if (typeof elOrString === 'string') {
                console.error('GridStack.initAll() no grid was found with selector "' + elOrString + '" - element missing or wrong selector ?' +
                    '\nNote: ".grid-stack" is required for proper CSS styling and drag/drop, and is the default selector.');
            }
            else {
                console.error('GridStack.init() no grid element was passed.');
            }
            return null;
        }
        if (!el.gridstack) {
            el.gridstack = new GridStack(el, Object.assign({}, options));
        }
        return el.gridstack;
    }
    /**
     * Will initialize a list of elements (given a selector) and return an array of grids.
     * @param options grid options (optional)
     * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)
     *
     * @example
     * let grids = GridStack.initAll();
     * grids.forEach(...)
     */
    static initAll(options = {}, selector = '.grid-stack') {
        let grids = [];
        GridStack.getGridElements(selector).forEach(el => {
            if (!el.gridstack) {
                el.gridstack = new GridStack(el, Object.assign({}, options));
            }
            grids.push(el.gridstack);
        });
        if (grids.length === 0) {
            console.error('GridStack.initAll() no grid was found with selector "' + selector + '" - element missing or wrong selector ?' +
                '\nNote: ".grid-stack" is required for proper CSS styling and drag/drop, and is the default selector.');
        }
        return grids;
    }
    /**
     * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then
     * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from
     * JSON serialized data, including options.
     * @param parent HTML element parent to the grid
     * @param opt grids options used to initialize the grid, and list of children
     */
    static addGrid(parent, opt = {}) {
        if (!parent)
            return null;
        // create the grid element
        let doc = document.implementation.createHTMLDocument();
        doc.body.innerHTML = `<div class="grid-stack ${opt.class || ''}"></div>`;
        let el = doc.body.children[0];
        parent.append(el);
        // create grid class and load any children
        let grid = GridStack.init(opt, el);
        if (opt.children) {
            grid.load(opt.children);
        }
        return grid;
    }
    /** @internal create placeholder DIV as needed */
    get placeholder() {
        if (!this._placeholder) {
            let placeholderChild = document.createElement('div'); // child so padding match item-content
            placeholderChild.className = 'placeholder-content';
            if (this.opts.placeholderText) {
                placeholderChild.innerHTML = this.opts.placeholderText;
            }
            this._placeholder = document.createElement('div');
            this._placeholder.classList.add(this.opts.placeholderClass, GridDefaults.itemClass, this.opts.itemClass);
            this.placeholder.appendChild(placeholderChild);
        }
        return this._placeholder;
    }
    /**
     * add a new widget and returns it.
     *
     * Widget will be always placed even if result height is more than actual grid height.
     * You need to use `willItFit()` before calling addWidget for additional check.
     * See also `makeWidget()`.
     *
     * @example
     * let grid = GridStack.init();
     * grid.addWidget({w: 3, content: 'hello'});
     * grid.addWidget('<div class="grid-stack-item"><div class="grid-stack-item-content">hello</div></div>', {w: 3});
     *
     * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add
     * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget
     */
    addWidget(els, options) {
        // support legacy call for now ?
        if (arguments.length > 2) {
            console.warn('gridstack.ts: `addWidget(el, x, y, width...)` is deprecated. Use `addWidget({x, y, w, content, ...})`. It will be removed soon');
            // eslint-disable-next-line prefer-rest-params
            let a = arguments, i = 1, opt = { x: a[i++], y: a[i++], w: a[i++], h: a[i++], autoPosition: a[i++],
                minW: a[i++], maxW: a[i++], minH: a[i++], maxH: a[i++], id: a[i++] };
            return this.addWidget(els, opt);
        }
        function isGridStackWidget(w) {
            return w.x !== undefined || w.y !== undefined || w.w !== undefined || w.h !== undefined || w.content !== undefined ? true : false;
        }
        let el;
        if (typeof els === 'string') {
            let doc = document.implementation.createHTMLDocument();
            doc.body.innerHTML = els;
            el = doc.body.children[0];
        }
        else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {
            let content = els ? els.content || '' : '';
            options = els;
            let doc = document.implementation.createHTMLDocument();
            doc.body.innerHTML = `<div class="grid-stack-item ${this.opts.itemClass || ''}"><div class="grid-stack-item-content">${content}</div></div>`;
            el = doc.body.children[0];
        }
        else {
            el = els;
        }
        // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos
        // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz) before adding the node.
        // So make sure we load any DOM attributes that are not specified in passed in options (which override)
        let domAttr = this._readAttr(el);
        options = Object.assign({}, (options || {})); // make a copy before we modify in case caller re-uses it
        utils_1.Utils.defaults(options, domAttr);
        this.engine.prepareNode(options);
        this._writeAttr(el, options);
        if (this._insertNotAppend) {
            this.el.prepend(el);
        }
        else {
            this.el.appendChild(el);
        }
        // similar to makeWidget() that doesn't read attr again and worse re-create a new node and loose any _id
        this._prepareElement(el, true, options);
        this._updateContainerHeight();
        this._triggerAddEvent();
        this._triggerChangeEvent();
        return el;
    }
    /**
     * saves the current layout returning a list of widgets for serialization (with default to save content), which might include any nested grids.
     * Optionally you can also save the grid with options itself, so you can call the new GridStack.addGrid()
     * to recreate everything from scratch. GridStackOptions.children would then contain the widget list.
     */
    save(saveContent = true, saveGridOpt = false) {
        // return copied nodes we can modify at will...
        let list = this.engine.save(saveContent);
        // check for HTML content as well
        if (saveContent) {
            list.forEach(n => {
                if (n.el && !n.subGrid) { // sub-grid are saved differently, not plain content
                    let sub = n.el.querySelector('.grid-stack-item-content');
                    n.content = sub ? sub.innerHTML : undefined;
                    if (!n.content)
                        delete n.content;
                    delete n.el;
                }
            });
        }
        // check if save entire grid options (needed for recursive) + children...
        if (saveGridOpt) {
            // check for nested grid
            list.forEach(n => {
                if (n.subGrid) {
                    n.subGrid = n.subGrid.save(saveContent, saveGridOpt);
                }
            });
            let o = Object.assign({}, this.opts);
            // delete default values that will be recreated on launch
            if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {
                o.margin = o.marginTop;
                delete o.marginTop;
                delete o.marginRight;
                delete o.marginBottom;
                delete o.marginLeft;
            }
            if (o.rtl === (this.el.style.direction === 'rtl')) {
                o.rtl = 'auto';
            }
            if (this._isAutoCellHeight) {
                o.cellHeight = 'auto';
            }
            utils_1.Utils.removeInternalAndSame(o, GridDefaults);
            o.children = list;
            return o;
        }
        return list;
    }
    /**
     * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.
     *
     * @param layout list of widgets definition to update/create
     * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving
     * the user control of insertion.
     *
     * @example
     * see http://gridstackjs.com/demo/serialization.html
     **/
    load(layout, addAndRemove = true) {
        let items = GridStack.Utils.sort(layout, -1, this._prevColumn || this.opts.column);
        this._insertNotAppend = true; // since create in reverse order...
        // if we're loading a layout into 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save
        // the original wanted layout so we can scale back up correctly #1471
        if (this._prevColumn && this._prevColumn !== this.opts.column && items.some(n => (n.x + n.w) > this.opts.column)) {
            this._ignoreLayoutsNodeChange = true; // skip layout update
            this.engine.cacheLayout(items, this._prevColumn, true);
        }
        let removed = [];
        this.batchUpdate();
        // see if any items are missing from new layout and need to be removed first
        if (addAndRemove) {
            let copyNodes = [...this.engine.nodes]; // don't loop through array you modify
            copyNodes.forEach(n => {
                let item = items.find(w => n.id === w.id);
                if (!item) {
                    if (typeof (addAndRemove) === 'function') {
                        addAndRemove(this, n, false);
                    }
                    else {
                        removed.push(n); // batch keep track
                        this.removeWidget(n.el, true, false);
                    }
                }
            });
        }
        // now add/update the widgets
        items.forEach(w => {
            let item = (w.id || w.id === 0) ? this.engine.nodes.find(n => n.id === w.id) : undefined;
            if (item) {
                this.update(item.el, w);
                if (w.subGrid && w.subGrid.children) { // update any sub grid as well
                    let sub = item.el.querySelector('.grid-stack');
                    if (sub && sub.gridstack) {
                        sub.gridstack.load(w.subGrid.children); // TODO: support updating grid options ?
                        this._insertNotAppend = true; // got reset by above call
                    }
                }
            }
            else if (addAndRemove) {
                if (typeof (addAndRemove) === 'function') {
                    w = addAndRemove(this, w, true).gridstackNode;
                }
                else {
                    w = this.addWidget(w).gridstackNode;
                }
                if (w.subGrid) { // see if there is a sub-grid to create too
                    let content = w.el.querySelector('.grid-stack-item-content');
                    w.subGrid = GridStack.addGrid(content, w.subGrid);
                }
            }
        });
        this.engine.removedNodes = removed;
        this.commit();
        // after commit, clear that flag
        delete this._ignoreLayoutsNodeChange;
        delete this._insertNotAppend;
        return this;
    }
    /**
     * Initializes batch updates. You will see no changes until `commit()` method is called.
     */
    batchUpdate() {
        this.engine.batchUpdate();
        return this;
    }
    /**
     * Gets current cell height.
     */
    getCellHeight(forcePixel = false) {
        if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' &&
            (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {
            return this.opts.cellHeight;
        }
        // else get first cell height
        // or do entire grid and # of rows ? (this.el.getBoundingClientRect().height) / parseInt(this.el.getAttribute('gs-current-row'))
        let el = this.el.querySelector('.' + this.opts.itemClass);
        let height = utils_1.Utils.toNumber(el.getAttribute('gs-h'));
        return Math.round(el.offsetHeight / height);
    }
    /**
     * Update current cell height - see `GridStackOptions.cellHeight` for format.
     * This method rebuilds an internal CSS style sheet.
     * Note: You can expect performance issues if call this method too often.
     *
     * @param val the cell height
     * @param update (Optional) if false, styles will not be updated
     *
     * @example
     * grid.cellHeight(grid.cellWidth() * 1.2);
     */
    cellHeight(val, update = true) {
        let data = utils_1.Utils.parseHeight(val);
        if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {
            return this;
        }
        this.opts.cellHeightUnit = data.unit;
        this.opts.cellHeight = data.h;
        if (update) {
            this._updateStyles(true, this.getRow()); // true = force re-create, for that # of rows
        }
        this._resizeNestedGrids(this.el);
        return this;
    }
    /**
     * Gets current cell width.
     */
    cellWidth() {
        // use parent width if we're 0 (no size yet)
        return (this.el.offsetWidth || this.el.parentElement.offsetWidth || window.innerWidth) / this.opts.column;
    }
    /**
     * Finishes batch updates. Updates DOM nodes. You must call it after batchUpdate.
     */
    commit() {
        this.engine.commit();
        this._triggerRemoveEvent();
        this._triggerAddEvent();
        this._triggerChangeEvent();
        return this;
    }
    /** re-layout grid items to reclaim any empty space */
    compact() {
        this.engine.compact();
        this._triggerChangeEvent();
        return this;
    }
    /**
     * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,
     * as well as cache the original layout so you can revert back to previous positions without loss.
     * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],
     * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)
     * @param column - Integer > 0 (default 12).
     * @param layout specify the type of re-layout that will happen (position, size, etc...).
     * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column
     */
    column(column, layout = 'moveScale') {
        if (this.opts.column === column)
            return this;
        let oldColumn = this.opts.column;
        // if we go into 1 column mode (which happens if we're sized less than minW unless disableOneColumnMode is on)
        // then remember the original columns so we can restore.
        if (column === 1) {
            this._prevColumn = oldColumn;
        }
        else {
            delete this._prevColumn;
        }
        this.el.classList.remove('grid-stack-' + oldColumn);
        this.el.classList.add('grid-stack-' + column);
        this.opts.column = this.engine.column = column;
        // update the items now - see if the dom order nodes should be passed instead (else default to current list)
        let domNodes;
        if (column === 1 && this.opts.oneColumnModeDomSort) {
            domNodes = [];
            this.getGridItems().forEach(el => {
                if (el.gridstackNode) {
                    domNodes.push(el.gridstackNode);
                }
            });
            if (!domNodes.length) {
                domNodes = undefined;
            }
        }
        this.engine.updateNodeWidths(oldColumn, column, domNodes, layout);
        // and trigger our event last...
        this._ignoreLayoutsNodeChange = true; // skip layout update
        this._triggerChangeEvent();
        delete this._ignoreLayoutsNodeChange;
        return this;
    }
    /**
     * get the number of columns in the grid (default 12)
     */
    getColumn() {
        return this.opts.column;
    }
    /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children */
    getGridItems() {
        return Array.from(this.el.children)
            .filter((el) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass));
    }
    /**
     * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.
     * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).
     */
    destroy(removeDOM = true) {
        if (!this.el)
            return; // prevent multiple calls
        this._updateWindowResizeEvent(true);
        this.setStatic(true); // permanently removes DD
        if (!removeDOM) {
            this.removeAll(removeDOM);
            this.el.classList.remove(this.opts._styleSheetClass);
        }
        else {
            this.el.parentNode.removeChild(this.el);
        }
        this._removeStylesheet();
        delete this.opts._isNested;
        delete this.opts;
        delete this._placeholder;
        delete this.engine;
        delete this.el.gridstack; // remove circular dependency that would prevent a freeing
        delete this.el;
        return this;
    }
    /**
     * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)
     */
    float(val) {
        this.engine.float = val;
        this._triggerChangeEvent();
        return this;
    }
    /**
     * get the current float mode
     */
    getFloat() {
        return this.engine.float;
    }
    /**
     * Get the position of the cell under a pixel on screen.
     * @param position the position of the pixel to resolve in
     * absolute coordinates, as an object with top and left properties
     * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).
     * Useful when grid is within `position: relative` element
     *
     * Returns an object with properties `x` and `y` i.e. the column and row in the grid.
     */
    getCellFromPixel(position, useDocRelative = false) {
        let box = this.el.getBoundingClientRect();
        // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)
        let containerPos;
        if (useDocRelative) {
            containerPos = { top: box.top + document.documentElement.scrollTop, left: box.left };
            // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)
        }
        else {
            containerPos = { top: this.el.offsetTop, left: this.el.offsetLeft };
            // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)
        }
        let relativeLeft = position.left - containerPos.left;
        let relativeTop = position.top - containerPos.top;
        let columnWidth = (box.width / this.opts.column);
        let rowHeight = (box.height / parseInt(this.el.getAttribute('gs-current-row')));
        return { x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight) };
    }
    /** returns the current number of rows, which will be at least `minRow` if set */
    getRow() {
        return Math.max(this.engine.getRow(), this.opts.minRow);
    }
    /**
     * Checks if specified area is empty.
     * @param x the position x.
     * @param y the position y.
     * @param w the width of to check
     * @param h the height of to check
     */
    isAreaEmpty(x, y, w, h) {
        return this.engine.isAreaEmpty(x, y, w, h);
    }
    /**
     * If you add elements to your grid by hand, you have to tell gridstack afterwards to make them widgets.
     * If you want gridstack to add the elements for you, use `addWidget()` instead.
     * Makes the given element a widget and returns it.
     * @param els widget or single selector to convert.
     *
     * @example
     * let grid = GridStack.init();
     * grid.el.appendChild('<div id="gsi-1" gs-w="3"></div>');
     * grid.makeWidget('#gsi-1');
     */
    makeWidget(els) {
        let el = GridStack.getElement(els);
        this._prepareElement(el, true);
        this._updateContainerHeight();
        this._triggerAddEvent();
        this._triggerChangeEvent();
        return el;
    }
    /**
     * Event handler that extracts our CustomEvent data out automatically for receiving custom
     * notifications (see doc for supported events)
     * @param name of the event (see possible values) or list of names space separated
     * @param callback function called with event and optional second/third param
     * (see README documentation for each signature).
     *
     * @example
     * grid.on('added', function(e, items) { log('added ', items)} );
     * or
     * grid.on('added removed change', function(e, items) { log(e.type, items)} );
     *
     * Note: in some cases it is the same as calling native handler and parsing the event.
     * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );
     *
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    on(name, callback) {
        // check for array of names being passed instead
        if (name.indexOf(' ') !== -1) {
            let names = name.split(' ');
            names.forEach(name => this.on(name, callback));
            return this;
        }
        if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {
            // native CustomEvent handlers - cash the generic handlers so we can easily remove
            let noData = (name === 'enable' || name === 'disable');
            if (noData) {
                this._gsEventHandler[name] = (event) => callback(event);
            }
            else {
                this._gsEventHandler[name] = (event) => callback(event, event.detail);
            }
            this.el.addEventListener(name, this._gsEventHandler[name]);
        }
        else if (name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resizestop' || name === 'dropped') {
            // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.
            // do same for start event to make it easier...
            this._gsEventHandler[name] = callback;
        }
        else {
            console.log('GridStack.on(' + name + ') event not supported, but you can still use $(".grid-stack").on(...) while jquery-ui is still used internally.');
        }
        return this;
    }
    /**
     * unsubscribe from the 'on' event below
     * @param name of the event (see possible values)
     */
    off(name) {
        // check for array of names being passed instead
        if (name.indexOf(' ') !== -1) {
            let names = name.split(' ');
            names.forEach(name => this.off(name));
            return this;
        }
        if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {
            // remove native CustomEvent handlers
            if (this._gsEventHandler[name]) {
                this.el.removeEventListener(name, this._gsEventHandler[name]);
            }
        }
        delete this._gsEventHandler[name];
        return this;
    }
    /**
     * Removes widget from the grid.
     * @param el  widget or selector to modify
     * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).
     * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).
     */
    removeWidget(els, removeDOM = true, triggerEvent = true) {
        GridStack.getElements(els).forEach(el => {
            if (el.parentElement !== this.el)
                return; // not our child!
            let node = el.gridstackNode;
            // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272
            if (!node) {
                node = this.engine.nodes.find(n => el === n.el);
            }
            if (!node)
                return;
            // remove our DOM data (circular link) and drag&drop permanently
            delete el.gridstackNode;
            gridstack_ddi_1.GridStackDDI.get().remove(el);
            this.engine.removeNode(node, removeDOM, triggerEvent);
            if (removeDOM && el.parentElement) {
                el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM
            }
        });
        if (triggerEvent) {
            this._triggerRemoveEvent();
            this._triggerChangeEvent();
        }
        return this;
    }
    /**
     * Removes all widgets from the grid.
     * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).
     */
    removeAll(removeDOM = true) {
        // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently
        this.engine.nodes.forEach(n => {
            delete n.el.gridstackNode;
            gridstack_ddi_1.GridStackDDI.get().remove(n.el);
        });
        this.engine.removeAll(removeDOM);
        this._triggerRemoveEvent();
        return this;
    }
    /**
     * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.
     * @param doAnimate if true the grid will animate.
     */
    setAnimation(doAnimate) {
        if (doAnimate) {
            this.el.classList.add('grid-stack-animate');
        }
        else {
            this.el.classList.remove('grid-stack-animate');
        }
        return this;
    }
    /**
     * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.
     * Also toggle the grid-stack-static class.
     * @param val if true the grid become static.
     */
    setStatic(val) {
        if (this.opts.staticGrid === val)
            return this;
        this.opts.staticGrid = val;
        this.engine.nodes.forEach(n => this._prepareDragDropByNode(n)); // either delete Drag&drop or initialize it
        this._setStaticClass();
        return this;
    }
    /**
     * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.
     * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)
     * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.
     */
    update(els, opt) {
        // support legacy call for now ?
        if (arguments.length > 2) {
            console.warn('gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update({x, w, content, ...})`. It will be removed soon');
            // eslint-disable-next-line prefer-rest-params
            let a = arguments, i = 1;
            opt = { x: a[i++], y: a[i++], w: a[i++], h: a[i++] };
            return this.update(els, opt);
        }
        GridStack.getElements(els).forEach(el => {
            if (!el || !el.gridstackNode)
                return;
            let n = el.gridstackNode;
            let w = Object.assign({}, opt); // make a copy we can modify in case they re-use it or multiple items
            delete w.autoPosition;
            // move/resize widget if anything changed
            let keys = ['x', 'y', 'w', 'h'];
            let m;
            if (keys.some(k => w[k] !== undefined && w[k] !== n[k])) {
                m = {};
                keys.forEach(k => {
                    m[k] = (w[k] !== undefined) ? w[k] : n[k];
                    delete w[k];
                });
            }
            // for a move as well IFF there is any min/max fields set
            if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {
                m = {}; // will use node position but validate values
            }
            // check for content changing
            if (w.content) {
                let sub = el.querySelector('.grid-stack-item-content');
                if (sub && sub.innerHTML !== w.content) {
                    sub.innerHTML = w.content;
                }
                delete w.content;
            }
            // any remaining fields are assigned, but check for dragging changes, resize constrain
            let changed = false;
            let ddChanged = false;
            for (const key in w) {
                if (key[0] !== '_' && n[key] !== w[key]) {
                    n[key] = w[key];
                    changed = true;
                    ddChanged = ddChanged || (!this.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked'));
                }
            }
            // finally move the widget
            if (m) {
                this.engine.cleanNodes();
                this.engine.beginUpdate(n);
                this.engine.moveNode(n, m.x, m.y, m.w, m.h);
                this._updateContainerHeight();
                this._triggerChangeEvent();
                this.engine.endUpdate();
            }
            if (changed) { // move will only update x,y,w,h so update the rest too
                this._writeAttr(el, n);
            }
            if (ddChanged) {
                this._prepareDragDropByNode(n);
            }
        });
        return this;
    }
    /**
     * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).
     * @param value margin value
     */
    margin(value) {
        let isMultiValue = (typeof value === 'string' && value.split(' ').length > 1);
        // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)
        if (!isMultiValue) {
            let data = utils_1.Utils.parseHeight(value);
            if (this.opts.marginUnit === data.unit && this.opts.margin === data.h)
                return;
        }
        // re-use existing margin handling
        this.opts.margin = value;
        this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;
        this.initMargin();
        this._updateStyles(true); // true = force re-create
        return this;
    }
    /** returns current margin number value (undefined if 4 sides don't match) */
    getMargin() { return this.opts.margin; }
    /**
     * Returns true if the height of the grid will be less than the vertical
     * constraint. Always returns true if grid doesn't have height constraint.
     * @param node contains x,y,w,h,auto-position options
     *
     * @example
     * if (grid.willItFit(newWidget)) {
     *   grid.addWidget(newWidget);
     * } else {
     *   alert('Not enough free space to place the widget');
     * }
     */
    willItFit(node) {
        // support legacy call for now
        if (arguments.length > 1) {
            console.warn('gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon');
            // eslint-disable-next-line prefer-rest-params
            let a = arguments, i = 0, w = { x: a[i++], y: a[i++], w: a[i++], h: a[i++], autoPosition: a[i++] };
            return this.willItFit(w);
        }
        return this.engine.willItFit(node);
    }
    /** @internal */
    _triggerChangeEvent() {
        if (this.engine.batchMode)
            return this;
        let elements = this.engine.getDirtyNodes(true); // verify they really changed
        if (elements && elements.length) {
            if (!this._ignoreLayoutsNodeChange) {
                this.engine.layoutsNodesChange(elements);
            }
            this._triggerEvent('change', elements);
        }
        this.engine.saveInitial(); // we called, now reset initial values & dirty flags
        return this;
    }
    /** @internal */
    _triggerAddEvent() {
        if (this.engine.batchMode)
            return this;
        if (this.engine.addedNodes && this.engine.addedNodes.length > 0) {
            if (!this._ignoreLayoutsNodeChange) {
                this.engine.layoutsNodesChange(this.engine.addedNodes);
            }
            // prevent added nodes from also triggering 'change' event (which is called next)
            this.engine.addedNodes.forEach(n => { delete n._dirty; });
            this._triggerEvent('added', this.engine.addedNodes);
            this.engine.addedNodes = [];
        }
        return this;
    }
    /** @internal */
    _triggerRemoveEvent() {
        if (this.engine.batchMode)
            return this;
        if (this.engine.removedNodes && this.engine.removedNodes.length > 0) {
            this._triggerEvent('removed', this.engine.removedNodes);
            this.engine.removedNodes = [];
        }
        return this;
    }
    /** @internal */
    _triggerEvent(name, data) {
        let event = data ? new CustomEvent(name, { bubbles: false, detail: data }) : new Event(name);
        this.el.dispatchEvent(event);
        return this;
    }
    /** @internal called to delete the current dynamic style sheet used for our layout */
    _removeStylesheet() {
        if (this._styles) {
            utils_1.Utils.removeStylesheet(this._styles._id);
            delete this._styles;
        }
        return this;
    }
    /** @internal updated/create the CSS styles for row based layout and initial margin setting */
    _updateStyles(forceUpdate = false, maxH) {
        // call to delete existing one if we change cellHeight / margin
        if (forceUpdate) {
            this._removeStylesheet();
        }
        this._updateContainerHeight();
        // if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??
        if (this.opts.cellHeight === 0) {
            return this;
        }
        let cellHeight = this.opts.cellHeight;
        let cellHeightUnit = this.opts.cellHeightUnit;
        let prefix = `.${this.opts._styleSheetClass} > .${this.opts.itemClass}`;
        // create one as needed
        if (!this._styles) {
            let id = 'gridstack-style-' + (Math.random() * 100000).toFixed();
            // insert style to parent (instead of 'head' by default) to support WebComponent
            let styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode;
            this._styles = utils_1.Utils.createStylesheet(id, styleLocation);
            if (!this._styles)
                return this;
            this._styles._id = id;
            this._styles._max = 0;
            // these are done once only
            utils_1.Utils.addCSSRule(this._styles, prefix, `min-height: ${cellHeight}${cellHeightUnit}`);
            // content margins
            let top = this.opts.marginTop + this.opts.marginUnit;
            let bottom = this.opts.marginBottom + this.opts.marginUnit;
            let right = this.opts.marginRight + this.opts.marginUnit;
            let left = this.opts.marginLeft + this.opts.marginUnit;
            let content = `${prefix} > .grid-stack-item-content`;
            let placeholder = `.${this.opts._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;
            utils_1.Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);
            utils_1.Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);
            // resize handles offset (to match margin)
            utils_1.Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);
            utils_1.Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);
            utils_1.Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);
            utils_1.Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);
            utils_1.Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);
            utils_1.Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);
        }
        // now update the height specific fields
        maxH = maxH || this._styles._max;
        if (maxH > this._styles._max) {
            let getHeight = (rows) => (cellHeight * rows) + cellHeightUnit;
            for (let i = this._styles._max + 1; i <= maxH; i++) { // start at 1
                let h = getHeight(i);
                utils_1.Utils.addCSSRule(this._styles, `${prefix}[gs-y="${i - 1}"]`, `top: ${getHeight(i - 1)}`); // start at 0
                utils_1.Utils.addCSSRule(this._styles, `${prefix}[gs-h="${i}"]`, `height: ${h}`);
                utils_1.Utils.addCSSRule(this._styles, `${prefix}[gs-min-h="${i}"]`, `min-height: ${h}`);
                utils_1.Utils.addCSSRule(this._styles, `${prefix}[gs-max-h="${i}"]`, `max-height: ${h}`);
            }
            this._styles._max = maxH;
        }
        return this;
    }
    /** @internal */
    _updateContainerHeight() {
        if (!this.engine || this.engine.batchMode)
            return this;
        let row = this.getRow(); // checks for minRow already
        // check for css min height
        let cssMinHeight = parseInt(getComputedStyle(this.el)['min-height']);
        if (cssMinHeight > 0) {
            let minRow = Math.round(cssMinHeight / this.getCellHeight(true));
            if (row < minRow) {
                row = minRow;
            }
        }
        this.el.setAttribute('gs-current-row', String(row));
        if (row === 0) {
            this.el.style.removeProperty('height');
            return this;
        }
        let cellHeight = this.opts.cellHeight;
        let unit = this.opts.cellHeightUnit;
        if (!cellHeight)
            return this;
        this.el.style.height = row * cellHeight + unit;
        return this;
    }
    /** called to resize children nested grids when we/item resizes */
    _resizeNestedGrids(target) {
        target.querySelectorAll('.grid-stack').forEach((el) => {
            if (el.gridstack) {
                el.gridstack.onParentResize();
            }
        });
        return this;
    }
    /** @internal */
    _prepareElement(el, triggerAddEvent = false, node) {
        if (!node) {
            el.classList.add(this.opts.itemClass);
            node = this._readAttr(el);
        }
        el.gridstackNode = node;
        node.el = el;
        node.grid = this;
        let copy = Object.assign({}, node);
        node = this.engine.addNode(node, triggerAddEvent);
        // write node attr back in case there was collision or we have to fix bad values during addNode()
        if (!utils_1.Utils.same(node, copy)) {
            this._writeAttr(el, node);
        }
        this._prepareDragDropByNode(node);
        return this;
    }
    /** @internal call to write x,y,w,h attributes back to element */
    _writePosAttr(el, x, y, w, h) {
        if (x !== undefined && x !== null) {
            el.setAttribute('gs-x', String(x));
        }
        if (y !== undefined && y !== null) {
            el.setAttribute('gs-y', String(y));
        }
        if (w) {
            el.setAttribute('gs-w', String(w));
        }
        if (h) {
            el.setAttribute('gs-h', String(h));
        }
        return this;
    }
    /** @internal call to write any default attributes back to element */
    _writeAttr(el, node) {
        if (!node)
            return this;
        this._writePosAttr(el, node.x, node.y, node.w, node.h);
        let attrs /*: GridStackWidget but strings */ = {
            autoPosition: 'gs-auto-position',
            minW: 'gs-min-w',
            minH: 'gs-min-h',
            maxW: 'gs-max-w',
            maxH: 'gs-max-h',
            noResize: 'gs-no-resize',
            noMove: 'gs-no-move',
            locked: 'gs-locked',
            id: 'gs-id',
            resizeHandles: 'gs-resize-handles'
        };
        for (const key in attrs) {
            if (node[key]) { // 0 is valid for x,y only but done above already and not in list anyway
                el.setAttribute(attrs[key], String(node[key]));
            }
            else {
                el.removeAttribute(attrs[key]);
            }
        }
        return this;
    }
    /** @internal call to read any default attributes from element */
    _readAttr(el) {
        let node = {};
        node.x = utils_1.Utils.toNumber(el.getAttribute('gs-x'));
        node.y = utils_1.Utils.toNumber(el.getAttribute('gs-y'));
        node.w = utils_1.Utils.toNumber(el.getAttribute('gs-w'));
        node.h = utils_1.Utils.toNumber(el.getAttribute('gs-h'));
        node.maxW = utils_1.Utils.toNumber(el.getAttribute('gs-max-w'));
        node.minW = utils_1.Utils.toNumber(el.getAttribute('gs-min-w'));
        node.maxH = utils_1.Utils.toNumber(el.getAttribute('gs-max-h'));
        node.minH = utils_1.Utils.toNumber(el.getAttribute('gs-min-h'));
        node.autoPosition = utils_1.Utils.toBool(el.getAttribute('gs-auto-position'));
        node.noResize = utils_1.Utils.toBool(el.getAttribute('gs-no-resize'));
        node.noMove = utils_1.Utils.toBool(el.getAttribute('gs-no-move'));
        node.locked = utils_1.Utils.toBool(el.getAttribute('gs-locked'));
        node.resizeHandles = el.getAttribute('gs-resize-handles');
        node.id = el.getAttribute('gs-id');
        // remove any key not found (null or false which is default)
        for (const key in node) {
            if (!node.hasOwnProperty(key))
                return;
            if (!node[key] && node[key] !== 0) { // 0 can be valid value (x,y only really)
                delete node[key];
            }
        }
        return node;
    }
    /** @internal */
    _setStaticClass() {
        let classes = ['grid-stack-static'];
        if (this.opts.staticGrid) {
            this.el.classList.add(...classes);
            this.el.setAttribute('gs-static', 'true');
        }
        else {
            this.el.classList.remove(...classes);
            this.el.removeAttribute('gs-static');
        }
        return this;
    }
    /**
     * called when we are being resized by the window - check if the one Column Mode needs to be turned on/off
     * and remember the prev columns we used, as well as check for auto cell height (square)
     */
    onParentResize() {
        if (!this.el || !this.el.clientWidth)
            return; // return if we're gone or no size yet (will get called again)
        // make the cells content (minus margin) square again
        if (this._isAutoCellHeight) {
            utils_1.Utils.throttle(() => {
                let marginDiff = -this.opts.marginRight - this.opts.marginLeft
                    + this.opts.marginTop + this.opts.marginBottom;
                this.cellHeight(this.cellWidth() + marginDiff);
            }, 100);
        }
        if (!this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.minWidth) {
            if (this._oneColumnMode)
                return this;
            this._oneColumnMode = true;
            this.column(1);
            this._resizeNestedGrids(this.el);
        }
        else {
            if (!this._oneColumnMode)
                return this;
            delete this._oneColumnMode;
            this.column(this._prevColumn);
            this._resizeNestedGrids(this.el);
        }
        return this;
    }
    /** add or remove the window size event handler */
    _updateWindowResizeEvent(forceRemove = false) {
        const workTodo = (this._isAutoCellHeight || !this.opts.disableOneColumnMode);
        // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)
        if (workTodo && !forceRemove && !this.opts._isNested && !this._windowResizeBind) {
            this._windowResizeBind = this.onParentResize.bind(this); // so we can properly remove later
            window.addEventListener('resize', this._windowResizeBind);
            this.onParentResize(); // initially call it once...
        }
        else if ((forceRemove || !workTodo) && this._windowResizeBind) {
            window.removeEventListener('resize', this._windowResizeBind);
            delete this._windowResizeBind; // remove link to us so we can free
        }
        return this;
    }
    /** @internal convert a potential selector into actual element */
    static getElement(els = '.grid-stack-item') { return utils_1.Utils.getElement(els); }
    /** @internal */
    static getElements(els = '.grid-stack-item') { return utils_1.Utils.getElements(els); }
    /** @internal */
    static getGridElement(els) { return GridStack.getElement(els); }
    /** @internal */
    static getGridElements(els) { return utils_1.Utils.getElements(els); }
    /** @internal initialize margin top/bottom/left/right and units */
    initMargin() {
        let data;
        let margin = 0;
        // support passing multiple values like CSS (ex: '5px 10px 0 20px')
        let margins = [];
        if (typeof this.opts.margin === 'string') {
            margins = this.opts.margin.split(' ');
        }
        if (margins.length === 2) { // top/bot, left/right like CSS
            this.opts.marginTop = this.opts.marginBottom = margins[0];
            this.opts.marginLeft = this.opts.marginRight = margins[1];
        }
        else if (margins.length === 4) { // Clockwise like CSS
            this.opts.marginTop = margins[0];
            this.opts.marginRight = margins[1];
            this.opts.marginBottom = margins[2];
            this.opts.marginLeft = margins[3];
        }
        else {
            data = utils_1.Utils.parseHeight(this.opts.margin);
            this.opts.marginUnit = data.unit;
            margin = this.opts.margin = data.h;
        }
        // see if top/bottom/left/right need to be set as well
        if (this.opts.marginTop === undefined) {
            this.opts.marginTop = margin;
        }
        else {
            data = utils_1.Utils.parseHeight(this.opts.marginTop);
            this.opts.marginTop = data.h;
            delete this.opts.margin;
        }
        if (this.opts.marginBottom === undefined) {
            this.opts.marginBottom = margin;
        }
        else {
            data = utils_1.Utils.parseHeight(this.opts.marginBottom);
            this.opts.marginBottom = data.h;
            delete this.opts.margin;
        }
        if (this.opts.marginRight === undefined) {
            this.opts.marginRight = margin;
        }
        else {
            data = utils_1.Utils.parseHeight(this.opts.marginRight);
            this.opts.marginRight = data.h;
            delete this.opts.margin;
        }
        if (this.opts.marginLeft === undefined) {
            this.opts.marginLeft = margin;
        }
        else {
            data = utils_1.Utils.parseHeight(this.opts.marginLeft);
            this.opts.marginLeft = data.h;
            delete this.opts.margin;
        }
        this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...
        if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {
            this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()
        }
        return this;
    }
    /*
     * drag&drop empty stubs that will be implemented in gridstack-dd.ts for non static grid
     * so we don't incur the load unless needed.
     * NOTE: had to make those methods public in order to define them else as
     *   GridStack.prototype._setupAcceptWidget = function()
     * maybe there is a better way ????
     */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /**
     * Enables/Disables moving. No-op for static grids.
     * @param els widget or selector to modify.
     * @param val if true widget will be draggable.
     */
    movable(els, val) { return this; }
    /**
     * Enables/Disables resizing. No-op for static grids.
     * @param els  widget or selector to modify
     * @param val  if true widget will be resizable.
     */
    resizable(els, val) { return this; }
    /**
     * Temporarily disables widgets moving/resizing.
     * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.
     * Note: no-op for static grid
     * This is a shortcut for:
     * @example
     *  grid.enableMove(false);
     *  grid.enableResize(false);
     */
    disable() { return this; }
    /**
     * Re-enables widgets moving/resizing - see disable().
     * Note: no-op for static grid.
     * This is a shortcut for:
     * @example
     *  grid.enableMove(true);
     *  grid.enableResize(true);
     */
    enable() { return this; }
    /**
     * Enables/disables widget moving. No-op for static grids.
     *
     * @param doEnable
     * @param includeNewWidgets will force new widgets to be draggable as per
     * doEnable`s value by changing the disableDrag grid option (default: true).
     */
    enableMove(doEnable, includeNewWidgets = true) { return this; }
    /**
     * Enables/disables widget resizing. No-op for static grids.
     * @param doEnable
     * @param includeNewWidgets will force new widgets to be draggable as per
     * doEnable`s value by changing the disableResize grid option (default: true).
     */
    enableResize(doEnable, includeNewWidgets = true) { return this; }
    /** @internal called to add drag over support to support widgets */
    _setupAcceptWidget() { return this; }
    /** @internal called to setup a trash drop zone if the user specifies it */
    _setupRemoveDrop() { return this; }
    /** @internal */
    _setupRemovingTimeout(el) { return this; }
    /** @internal */
    _clearRemovingTimeout(el) { return this; }
    /** @internal call to setup dragging in from the outside (say toolbar), with options */
    _setupDragIn() { return this; }
    /** @internal prepares the element for drag&drop **/
    _prepareDragDropByNode(node) { return this; }
    // 2.x API that just calls the new and better update() - keep those around for backward compat only...
    /** @internal */
    locked(els, locked) { return this.update(els, { locked }); }
    /** @internal */
    maxWidth(els, maxW) { return this.update(els, { maxW }); }
    /** @internal */
    minWidth(els, minW) { return this.update(els, { minW }); }
    /** @internal */
    maxHeight(els, maxH) { return this.update(els, { maxH }); }
    /** @internal */
    minHeight(els, minH) { return this.update(els, { minH }); }
    /** @internal */
    move(els, x, y) { return this.update(els, { x, y }); }
    /** @internal */
    resize(els, w, h) { return this.update(els, { w, h }); }
}
exports.GridStack = GridStack;
/** scoping so users can call GridStack.Utils.sort() for example */
GridStack.Utils = utils_1.Utils;
/** scoping so users can call new GridStack.Engine(12) for example */
GridStack.Engine = gridstack_engine_1.GridStackEngine;
//# sourceMappingURL=gridstack.js.map

/***/ }),
/* 141 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// gridstack-engine.ts 3.2.0 @preserve
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * https://gridstackjs.com/
 * (c) 2014-2020 Alain Dumesny, Dylan Weiss, Pavel Reznikov
 * gridstack.js may be freely distributed under the MIT license.
*/
const utils_1 = __webpack_require__(142);
/**
 * Defines the GridStack engine that does most no DOM grid manipulation.
 * See GridStack methods and vars for descriptions.
 *
 * NOTE: values should not be modified directly - call the main GridStack API instead
 */
class GridStackEngine {
    constructor(opts = {}) {
        this.addedNodes = [];
        this.removedNodes = [];
        /** @internal legacy method renames */
        this.getGridHeight = utils_1.obsolete(this, GridStackEngine.prototype.getRow, 'getGridHeight', 'getRow', 'v1.0.0');
        this.column = opts.column || 12;
        this.onChange = opts.onChange;
        this._float = opts.float;
        this.maxRow = opts.maxRow;
        this.nodes = opts.nodes || [];
    }
    batchUpdate() {
        if (this.batchMode)
            return this;
        this.batchMode = true;
        this._prevFloat = this._float;
        this._float = true; // let things go anywhere for now... commit() will restore and possibly reposition
        return this;
    }
    commit() {
        if (!this.batchMode)
            return this;
        this.batchMode = false;
        this._float = this._prevFloat;
        delete this._prevFloat;
        this._packNodes();
        this._notify();
        return this;
    }
    /** @internal */
    _fixCollisions(node) {
        this._sortNodes(-1);
        let nn = node;
        let hasLocked = Boolean(this.nodes.find(n => n.locked));
        if (!this.float && !hasLocked) {
            nn = { x: 0, y: node.y, w: this.column, h: node.h };
        }
        while (true) {
            let collisionNode = this.collide(node, nn);
            if (!collisionNode)
                return this;
            let moved;
            if (collisionNode.locked) {
                // if colliding with a locked item, move ourself instead
                moved = this.moveNode(node, node.x, collisionNode.y + collisionNode.h, node.w, node.h, true);
            }
            else {
                moved = this.moveNode(collisionNode, collisionNode.x, node.y + node.h, collisionNode.w, collisionNode.h, true);
            }
            if (!moved)
                return this; // break inf loop if we couldn't move after all (ex: maxRow, fixed)
        }
    }
    /** return any intercepted node with the given area, skipping the passed in node (usually self) */
    collide(node, area = node) {
        return this.nodes.find(n => n !== node && utils_1.Utils.isIntercepted(n, area));
    }
    isAreaEmpty(x, y, w, h) {
        let nn = { x: x || 0, y: y || 0, w: w || 1, h: h || 1 };
        return !this.collide(nn);
    }
    /** re-layout grid items to reclaim any empty space */
    compact() {
        if (this.nodes.length === 0)
            return this;
        this.batchUpdate();
        this._sortNodes();
        let copyNodes = this.nodes;
        this.nodes = []; // pretend we have no nodes to conflict layout to start with...
        copyNodes.forEach(node => {
            if (!node.noMove && !node.locked) {
                node.autoPosition = true;
            }
            this.addNode(node, false); // 'false' for add event trigger
            node._dirty = true; // force attr update
        });
        this.commit();
        return this;
    }
    /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */
    set float(val) {
        if (this._float === val)
            return;
        this._float = val || false;
        if (!val) {
            this._packNodes();
            this._notify();
        }
    }
    /** float getter method */
    get float() { return this._float || false; }
    /** @internal */
    _sortNodes(dir) {
        this.nodes = utils_1.Utils.sort(this.nodes, dir, this.column);
        return this;
    }
    /** @internal */
    _packNodes() {
        this._sortNodes();
        if (this.float) {
            this.nodes.forEach((n, i) => {
                if (n._updating || n._packY === undefined || n.y === n._packY) {
                    return this;
                }
                let newY = n.y;
                while (newY >= n._packY) {
                    let box = { x: n.x, y: newY, w: n.w, h: n.h };
                    let collisionNode = this.nodes.slice(0, i).find(bn => utils_1.Utils.isIntercepted(box, bn));
                    if (!collisionNode) {
                        n._dirty = true;
                        n.y = newY;
                    }
                    --newY;
                }
            });
        }
        else {
            this.nodes.forEach((n, i) => {
                if (n.locked)
                    return this;
                while (n.y > 0) {
                    let newY = n.y - 1;
                    let canBeMoved = i === 0;
                    let box = { x: n.x, y: newY, w: n.w, h: n.h };
                    if (i > 0) {
                        let collisionNode = this.nodes.slice(0, i).find(bn => utils_1.Utils.isIntercepted(box, bn));
                        canBeMoved = !collisionNode;
                    }
                    if (!canBeMoved) {
                        break;
                    }
                    // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions
                    // and move items back. The user 'change' CB should detect changes from the original
                    // starting position instead.
                    n._dirty = (n.y !== newY);
                    n.y = newY;
                }
            });
        }
        return this;
    }
    /**
     * given a random node, makes sure it's coordinates/values are valid in the current grid
     * @param node to adjust
     * @param resizing if out of bound, resize down or move into the grid to fit ?
     */
    prepareNode(node, resizing) {
        node = node || {};
        node._id = node._id || GridStackEngine._idSeq++;
        // if we're missing position, have the grid position us automatically (before we set them to 0,0)
        if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {
            node.autoPosition = true;
        }
        // assign defaults for missing required fields
        let defaults = { x: 0, y: 0, w: 1, h: 1 };
        utils_1.Utils.defaults(node, defaults);
        if (!node.autoPosition) {
            delete node.autoPosition;
        }
        if (!node.noResize) {
            delete node.noResize;
        }
        if (!node.noMove) {
            delete node.noMove;
        }
        // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)
        if (typeof node.x == 'string') {
            node.x = Number(node.x);
        }
        if (typeof node.y == 'string') {
            node.y = Number(node.y);
        }
        if (typeof node.w == 'string') {
            node.w = Number(node.w);
        }
        if (typeof node.h == 'string') {
            node.h = Number(node.h);
        }
        if (isNaN(node.x)) {
            node.x = defaults.x;
            node.autoPosition = true;
        }
        if (isNaN(node.y)) {
            node.y = defaults.y;
            node.autoPosition = true;
        }
        if (isNaN(node.w)) {
            node.w = defaults.w;
        }
        if (isNaN(node.h)) {
            node.h = defaults.h;
        }
        if (node.maxW) {
            node.w = Math.min(node.w, node.maxW);
        }
        if (node.maxH) {
            node.h = Math.min(node.h, node.maxH);
        }
        if (node.minW) {
            node.w = Math.max(node.w, node.minW);
        }
        if (node.minH) {
            node.h = Math.max(node.h, node.minH);
        }
        if (node.w > this.column) {
            node.w = this.column;
        }
        else if (node.w < 1) {
            node.w = 1;
        }
        if (this.maxRow && node.h > this.maxRow) {
            node.h = this.maxRow;
        }
        else if (node.h < 1) {
            node.h = 1;
        }
        if (node.x < 0) {
            node.x = 0;
        }
        if (node.y < 0) {
            node.y = 0;
        }
        if (node.x + node.w > this.column) {
            if (resizing) {
                node.w = this.column - node.x;
            }
            else {
                node.x = this.column - node.w;
            }
        }
        if (this.maxRow && node.y + node.h > this.maxRow) {
            if (resizing) {
                node.h = this.maxRow - node.y;
            }
            else {
                node.y = this.maxRow - node.h;
            }
        }
        return node;
    }
    getDirtyNodes(verify) {
        // compare original X,Y,W,H (or entire node?) instead as _dirty can be a temporary state
        if (verify) {
            let dirtNodes = [];
            this.nodes.forEach(n => {
                if (n._dirty) {
                    if (n.y === n._origY && n.x === n._origX && n.w === n._origW && n.h === n._origH) {
                        delete n._dirty;
                    }
                    else {
                        dirtNodes.push(n);
                    }
                }
            });
            return dirtNodes;
        }
        return this.nodes.filter(n => n._dirty);
    }
    /** @internal */
    _notify(nodes, removeDOM = true) {
        if (this.batchMode)
            return this;
        nodes = (nodes === undefined ? [] : (Array.isArray(nodes) ? nodes : [nodes]));
        let dirtyNodes = nodes.concat(this.getDirtyNodes());
        if (this.onChange) {
            this.onChange(dirtyNodes, removeDOM);
        }
        return this;
    }
    cleanNodes() {
        if (this.batchMode)
            return this;
        this.nodes.forEach(n => { delete n._dirty; });
        return this;
    }
    addNode(node, triggerAddEvent = false) {
        node = this.prepareNode(node);
        if (node.autoPosition) {
            this._sortNodes();
            for (let i = 0;; ++i) {
                let x = i % this.column;
                let y = Math.floor(i / this.column);
                if (x + node.w > this.column) {
                    continue;
                }
                let box = { x, y, w: node.w, h: node.h };
                if (!this.nodes.find(n => utils_1.Utils.isIntercepted(box, n))) {
                    node.x = x;
                    node.y = y;
                    delete node.autoPosition; // found our slot
                    break;
                }
            }
        }
        this.nodes.push(node);
        if (triggerAddEvent) {
            this.addedNodes.push(node);
        }
        this._fixCollisions(node);
        this._packNodes();
        this._notify();
        return node;
    }
    removeNode(node, removeDOM = true, triggerEvent = false) {
        if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)
            this.removedNodes.push(node);
        }
        node._id = null; // hint that node is being removed
        // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.
        this.nodes = this.nodes.filter(n => n !== node);
        if (!this.float) {
            this._packNodes();
        }
        this._notify(node, removeDOM);
        return this;
    }
    removeAll(removeDOM = true) {
        delete this._layouts;
        if (this.nodes.length === 0)
            return this;
        if (removeDOM) {
            this.nodes.forEach(n => { n._id = null; }); // hint that node is being removed
        }
        this.removedNodes = this.nodes;
        this.nodes = [];
        this._notify(this.removedNodes, removeDOM);
        return this;
    }
    canMoveNode(node, x, y, w, h) {
        if (!this.isNodeChangedPosition(node, x, y, w, h)) {
            return false;
        }
        let hasLocked = this.nodes.some(n => n.locked);
        if (!this.maxRow && !hasLocked) {
            return true;
        }
        let clonedNode;
        let clone = new GridStackEngine({
            column: this.column,
            float: this.float,
            nodes: this.nodes.map(n => {
                if (n === node) {
                    clonedNode = Object.assign({}, n);
                    return clonedNode;
                }
                return Object.assign({}, n);
            })
        });
        if (!clonedNode)
            return true;
        clone.moveNode(clonedNode, x, y, w, h);
        let canMove = true;
        if (hasLocked) {
            canMove = !clone.nodes.some(n => n.locked && n._dirty && n !== clonedNode);
        }
        if (this.maxRow && canMove) {
            canMove = (clone.getRow() <= this.maxRow);
        }
        return canMove;
    }
    /** return true if can fit in grid height constrain only (always true if no maxRow) */
    willItFit(node) {
        if (!this.maxRow)
            return true;
        let clone = new GridStackEngine({
            column: this.column,
            float: this.float,
            nodes: this.nodes.map(n => { return Object.assign({}, n); })
        });
        clone.addNode(node);
        return clone.getRow() <= this.maxRow;
    }
    /** return true if the passed in node (x,y) is being dragged outside of the grid, and not added to bottom */
    isOutside(x, y, node) {
        // simple outside boundaries
        if (x < 0 || x >= this.column || y < 0)
            return true;
        if (this.maxRow)
            return (y >= this.maxRow);
        else if (this.float)
            return false; // infinite grow with no maxRow
        // see if dragging PAST bottom (row+1)
        let row = this.getRow();
        if (y < row || y === 0)
            return false;
        if (y > row)
            return true;
        // else check to see if we can add that item to the bottom... (y == row)
        if (!node._temporaryRemoved) {
            let clone = new GridStackEngine({
                column: this.column,
                float: this.float,
                nodes: this.nodes.filter(n => n !== node).map(n => { return Object.assign({}, n); })
            });
            let nn = Object.assign(Object.assign({}, node), { x, y });
            clone.addNode(nn);
            return nn.y === node.y && nn.x === node.x; // didn't actually move, so last row was a drag out and not a new place...
        }
        return node._temporaryRemoved; // if still outside so we don't flicker back & forth
    }
    isNodeChangedPosition(node, x, y, w, h) {
        if (typeof x !== 'number') {
            x = node.x;
        }
        if (typeof y !== 'number') {
            y = node.y;
        }
        if (typeof w !== 'number') {
            w = node.w;
        }
        if (typeof h !== 'number') {
            h = node.h;
        }
        if (node.maxW) {
            w = Math.min(w, node.maxW);
        }
        if (node.maxH) {
            h = Math.min(h, node.maxH);
        }
        if (node.minW) {
            w = Math.max(w, node.minW);
        }
        if (node.minH) {
            h = Math.max(h, node.minH);
        }
        if (node.x === x && node.y === y && node.w === w && node.h === h) {
            return false;
        }
        return true;
    }
    moveNode(node, x, y, w, h, noPack) {
        if (node.locked)
            return null;
        if (typeof x !== 'number') {
            x = node.x;
        }
        if (typeof y !== 'number') {
            y = node.y;
        }
        if (typeof w !== 'number') {
            w = node.w;
        }
        if (typeof h !== 'number') {
            h = node.h;
        }
        // constrain the passed in values and check if we're still changing our node
        let resizing = (node.w !== w || node.h !== h);
        let nn = { x, y, w, h, maxW: node.maxW, maxH: node.maxH, minW: node.minW, minH: node.minH };
        nn = this.prepareNode(nn, resizing);
        if (node.x === nn.x && node.y === nn.y && node.w === nn.w && node.h === nn.h) {
            return null;
        }
        node._dirty = true;
        node.x = node._lastTriedX = nn.x;
        node.y = node._lastTriedY = nn.y;
        node.w = node._lastTriedW = nn.w;
        node.h = node._lastTriedH = nn.h;
        this._fixCollisions(node);
        if (!noPack) {
            this._packNodes();
            this._notify();
        }
        return node;
    }
    getRow() {
        return this.nodes.reduce((memo, n) => Math.max(memo, n.y + n.h), 0);
    }
    beginUpdate(node) {
        if (node._updating)
            return this;
        node._updating = true;
        this.nodes.forEach(n => { n._packY = n.y; });
        return this;
    }
    endUpdate() {
        let n = this.nodes.find(n => n._updating);
        if (n) {
            delete n._updating;
            this.nodes.forEach(n => { delete n._packY; });
        }
        return this;
    }
    /** saves the current layout returning a list of widgets for serialization */
    save(saveElement = true) {
        let widgets = [];
        utils_1.Utils.sort(this.nodes);
        this.nodes.forEach(n => {
            let w = {};
            for (let key in n) {
                if (key[0] !== '_' && n[key] !== null && n[key] !== undefined)
                    w[key] = n[key];
            }
            // delete other internals
            if (!saveElement)
                delete w.el;
            delete w.grid;
            // delete default values (will be re-created on read)
            if (!w.autoPosition)
                delete w.autoPosition;
            if (!w.noResize)
                delete w.noResize;
            if (!w.noMove)
                delete w.noMove;
            if (!w.locked)
                delete w.locked;
            widgets.push(w);
        });
        return widgets;
    }
    /** @internal called whenever a node is added or moved - updates the cached layouts */
    layoutsNodesChange(nodes) {
        if (!this._layouts || this._ignoreLayoutsNodeChange)
            return this;
        // remove smaller layouts - we will re-generate those on the fly... larger ones need to update
        this._layouts.forEach((layout, column) => {
            if (!layout || column === this.column)
                return this;
            if (column < this.column) {
                this._layouts[column] = undefined;
            }
            else {
                // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.
                // Note: we don't need to check against out of bound scaling/moving as that will be done when using those cache values.
                nodes.forEach(node => {
                    let n = layout.find(l => l._id === node._id);
                    if (!n)
                        return this; // no cache for new nodes. Will use those values.
                    let ratio = column / this.column;
                    // Y changed, push down same amount
                    // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)
                    if (node.y !== node._origY) {
                        n.y += (node.y - node._origY);
                    }
                    // X changed, scale from new position
                    if (node.x !== node._origX) {
                        n.x = Math.round(node.x * ratio);
                    }
                    // width changed, scale from new width
                    if (node.w !== node._origW) {
                        n.w = Math.round(node.w * ratio);
                    }
                    // ...height always carries over from cache
                });
            }
        });
        return this;
    }
    /**
     * @internal Called to scale the widget width & position up/down based on the column change.
     * Note we store previous layouts (especially original ones) to make it possible to go
     * from say 12 -> 1 -> 12 and get back to where we were.
     *
     * @param oldColumn previous number of columns
     * @param column  new column number
     * @param nodes different sorted list (ex: DOM order) instead of current list
     * @param layout specify the type of re-layout that will happen (position, size, etc...).
     * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column
     */
    updateNodeWidths(oldColumn, column, nodes, layout = 'moveScale') {
        if (!this.nodes.length || oldColumn === column)
            return this;
        // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data
        this.cacheLayout(this.nodes, oldColumn);
        // if we're going to 1 column and using DOM order rather than default sorting, then generate that layout
        if (column === 1 && nodes && nodes.length) {
            let top = 0;
            nodes.forEach(n => {
                n.x = 0;
                n.w = 1;
                n.y = Math.max(n.y, top);
                top = n.y + n.h;
            });
        }
        else {
            nodes = utils_1.Utils.sort(this.nodes, -1, oldColumn); // current column reverse sorting so we can insert last to front (limit collision)
        }
        // see if we have cached previous layout.
        let cacheNodes = this._layouts[column] || [];
        // if not AND we are going up in size start with the largest layout as down-scaling is more accurate
        let lastIndex = this._layouts.length - 1;
        if (cacheNodes.length === 0 && column > oldColumn && column < lastIndex) {
            cacheNodes = this._layouts[lastIndex] || [];
            if (cacheNodes.length) {
                // pretend we came from that larger column by assigning those values as starting point
                oldColumn = lastIndex;
                cacheNodes.forEach(cacheNode => {
                    let j = nodes.findIndex(n => n._id === cacheNode._id);
                    if (j !== -1) {
                        // still current, use cache info positions
                        nodes[j].x = cacheNode.x;
                        nodes[j].y = cacheNode.y;
                        nodes[j].w = cacheNode.w;
                    }
                });
                cacheNodes = []; // we still don't have new column cached data... will generate from larger one.
            }
        }
        // if we found cache re-use those nodes that are still current
        let newNodes = [];
        cacheNodes.forEach(cacheNode => {
            let j = nodes.findIndex(n => n._id === cacheNode._id);
            if (j !== -1) {
                // still current, use cache info positions
                nodes[j].x = cacheNode.x;
                nodes[j].y = cacheNode.y;
                nodes[j].w = cacheNode.w;
                newNodes.push(nodes[j]);
                nodes.splice(j, 1);
            }
        });
        // ...and add any extra non-cached ones
        if (nodes.length) {
            if (typeof layout === 'function') {
                layout(column, oldColumn, newNodes, nodes);
            }
            else {
                let ratio = column / oldColumn;
                let move = (layout === 'move' || layout === 'moveScale');
                let scale = (layout === 'scale' || layout === 'moveScale');
                nodes.forEach(node => {
                    node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));
                    node.w = ((column === 1 || oldColumn === 1) ? 1 :
                        scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));
                    newNodes.push(node);
                });
                nodes = [];
            }
        }
        // finally re-layout them in reverse order (to get correct placement)
        newNodes = utils_1.Utils.sort(newNodes, -1, column);
        this._ignoreLayoutsNodeChange = true;
        this.batchUpdate();
        this.nodes = []; // pretend we have no nodes to start with (we use same structures) to simplify layout
        newNodes.forEach(node => {
            this.addNode(node, false); // 'false' for add event trigger
            node._dirty = true; // force attr update
        }, this);
        this.commit();
        delete this._ignoreLayoutsNodeChange;
        return this;
    }
    /** @internal called to save initial position/size */
    saveInitial() {
        this.nodes.forEach(n => {
            n._origX = n.x;
            n._origY = n.y;
            n._origW = n.w;
            n._origH = n.h;
            delete n._dirty;
        });
        return this;
    }
    /**
     * call to cache the given layout internally to the given location so we can restore back when column changes size
     * @param nodes list of nodes
     * @param column corresponding column index to save it under
     * @param clear if true, will force other caches to be removed (default false)
     */
    cacheLayout(nodes, column, clear = false) {
        let copy = [];
        nodes.forEach((n, i) => {
            n._id = n._id || GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set
            copy[i] = { x: n.x, y: n.y, w: n.w, _id: n._id }; // only thing we change is x,y,w and id to find it back
        });
        this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick
        this._layouts[column] = copy;
        return this;
    }
    /** called to remove all internal values */
    cleanupNode(node) {
        for (let prop in node) {
            if (prop[0] === '_')
                delete node[prop];
        }
        return this;
    }
}
exports.GridStackEngine = GridStackEngine;
/** @internal */
GridStackEngine._idSeq = 1;
//# sourceMappingURL=gridstack-engine.js.map

/***/ }),
/* 142 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// utils.ts 3.2.0 @preserve
Object.defineProperty(exports, "__esModule", ({ value: true }));
/** checks for obsolete method names */
// eslint-disable-next-line
function obsolete(self, f, oldName, newName, rev) {
    let wrapper = (...args) => {
        console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' +
            'with `' + newName + '`. It will be **completely** removed in v1.0');
        return f.apply(self, args);
    };
    wrapper.prototype = f.prototype;
    return wrapper;
}
exports.obsolete = obsolete;
/** checks for obsolete grid options (can be used for any fields, but msg is about options) */
function obsoleteOpts(opts, oldName, newName, rev) {
    if (opts[oldName] !== undefined) {
        opts[newName] = opts[oldName];
        console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' +
            newName + '`. It will be **completely** removed in v1.0');
    }
}
exports.obsoleteOpts = obsoleteOpts;
/** checks for obsolete grid options which are gone */
function obsoleteOptsDel(opts, oldName, rev, info) {
    if (opts[oldName] !== undefined) {
        console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);
    }
}
exports.obsoleteOptsDel = obsoleteOptsDel;
/** checks for obsolete Jquery element attributes */
function obsoleteAttr(el, oldName, newName, rev) {
    let oldAttr = el.getAttribute(oldName);
    if (oldAttr !== null) {
        el.setAttribute(newName, oldAttr);
        console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' +
            newName + '`. It will be **completely** removed in v1.0');
    }
}
exports.obsoleteAttr = obsoleteAttr;
/**
 * Utility methods
 */
class Utils {
    /** convert a potential selector into actual list of html elements */
    static getElements(els) {
        if (typeof els === 'string') {
            let list = document.querySelectorAll(els);
            if (!list.length && els[0] !== '.' && els[0] !== '#') {
                list = document.querySelectorAll('.' + els);
                if (!list.length) {
                    list = document.querySelectorAll('#' + els);
                }
            }
            return Array.from(list);
        }
        return [els];
    }
    /** convert a potential selector into actual single element */
    static getElement(els) {
        if (typeof els === 'string') {
            if (!els.length)
                return null;
            if (els[0] === '#') {
                return document.getElementById(els.substring(1));
            }
            if (els[0] === '.' || els[0] === '[') {
                return document.querySelector(els);
            }
            // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS
            if (!isNaN(+els[0])) { // start with digit
                return document.getElementById(els);
            }
            // finally try string, then id then class
            let el = document.querySelector(els);
            if (!el) {
                el = document.getElementById(els);
            }
            if (!el) {
                el = document.querySelector('.' + els);
            }
            return el;
        }
        return els;
    }
    /** returns true if a and b overlap */
    static isIntercepted(a, b) {
        return !(a.x + a.w <= b.x || b.x + b.w <= a.x || a.y + a.h <= b.y || b.y + b.h <= a.y);
    }
    /**
     * Sorts array of nodes
     * @param nodes array to sort
     * @param dir 1 for asc, -1 for desc (optional)
     * @param width width of the grid. If undefined the width will be calculated automatically (optional).
     **/
    static sort(nodes, dir, column) {
        if (!column) {
            let widths = nodes.map(n => n.x + n.w);
            column = Math.max(...widths);
        }
        if (dir === -1)
            return nodes.sort((a, b) => (b.x + b.y * column) - (a.x + a.y * column));
        else
            return nodes.sort((b, a) => (b.x + b.y * column) - (a.x + a.y * column));
    }
    /**
     * creates a style sheet with style id under given parent
     * @param id will set the 'gs-style-id' attribute to that id
     * @param parent to insert the stylesheet as first child,
     * if none supplied it will be appended to the document head instead.
     */
    static createStylesheet(id, parent) {
        let style = document.createElement('style');
        style.setAttribute('type', 'text/css');
        style.setAttribute('gs-style-id', id);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        if (style.styleSheet) { // TODO: only CSSImportRule have that and different beast ??
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            style.styleSheet.cssText = '';
        }
        else {
            style.appendChild(document.createTextNode('')); // WebKit hack
        }
        if (!parent) {
            // default to head
            parent = document.getElementsByTagName('head')[0];
            parent.appendChild(style);
        }
        else {
            parent.insertBefore(style, parent.firstChild);
        }
        return style.sheet;
    }
    /** removed the given stylesheet id */
    static removeStylesheet(id) {
        let el = document.querySelector('STYLE[gs-style-id=' + id + ']');
        if (el && el.parentNode)
            el.remove();
    }
    /** inserts a CSS rule */
    static addCSSRule(sheet, selector, rules) {
        if (typeof sheet.addRule === 'function') {
            sheet.addRule(selector, rules);
        }
        else if (typeof sheet.insertRule === 'function') {
            sheet.insertRule(`${selector}{${rules}}`);
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static toBool(v) {
        if (typeof v === 'boolean') {
            return v;
        }
        if (typeof v === 'string') {
            v = v.toLowerCase();
            return !(v === '' || v === 'no' || v === 'false' || v === '0');
        }
        return Boolean(v);
    }
    static toNumber(value) {
        return (value === null || value.length === 0) ? undefined : Number(value);
    }
    static parseHeight(val) {
        let h;
        let unit = 'px';
        if (typeof val === 'string') {
            let match = val.match(/^(-[0-9]+\.[0-9]+|[0-9]*\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);
            if (!match) {
                throw new Error('Invalid height');
            }
            unit = match[2] || 'px';
            h = parseFloat(match[1]);
        }
        else {
            h = val;
        }
        return { h, unit };
    }
    /** copies unset fields in target to use the given default sources values */
    // eslint-disable-next-line
    static defaults(target, ...sources) {
        sources.forEach(source => {
            for (const key in source) {
                if (!source.hasOwnProperty(key))
                    return;
                if (target[key] === null || target[key] === undefined) {
                    target[key] = source[key];
                }
                else if (typeof source[key] === 'object' && typeof target[key] === 'object') {
                    // property is an object, recursively add it's field over... #1373
                    this.defaults(target[key], source[key]);
                }
            }
        });
        return target;
    }
    /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */
    static same(a, b) {
        if (typeof a !== 'object')
            return a == b;
        if (typeof a !== typeof b)
            return false;
        // else we have object, check just 1 level deep for being same things...
        if (Object.keys(a).length !== Object.keys(b).length)
            return false;
        for (const key in a) {
            if (a[key] !== b[key])
                return false;
        }
        return true;
    }
    /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */
    static removeInternalAndSame(a, b) {
        if (typeof a !== 'object' || typeof b !== 'object')
            return;
        for (let key in a) {
            let val = a[key];
            if (val && typeof val === 'object') {
                for (let i in val) {
                    if (val[i] === b[key][i] || i[0] === '_') {
                        delete val[i];
                    }
                }
                if (!Object.keys(val).length) {
                    delete a[key];
                }
            }
            else if (val === b[key] || key[0] === '_') {
                delete a[key];
            }
        }
    }
    /** return the closest parent matching the given class */
    static closestByClass(el, name) {
        while (el = el.parentElement) {
            if (el.classList.contains(name))
                return el;
        }
        return null;
    }
    /** delay calling the given function by certain amount of time */
    static throttle(callback, delay) {
        let isWaiting = false;
        return (...args) => {
            if (!isWaiting) {
                callback.apply(this, args);
                isWaiting = true;
                setTimeout(() => isWaiting = false, delay);
            }
        };
    }
    static removePositioningStyles(el) {
        let style = el.style;
        if (style.position) {
            style.removeProperty('position');
        }
        if (style.left) {
            style.removeProperty('left');
        }
        if (style.top) {
            style.removeProperty('top');
        }
        if (style.width) {
            style.removeProperty('width');
        }
        if (style.height) {
            style.removeProperty('height');
        }
    }
    /** @internal */
    static getScrollParent(el) {
        if (el === null)
            return document.documentElement;
        const style = getComputedStyle(el);
        const overflowRegex = /(auto|scroll)/;
        if (overflowRegex.test(style.overflow + style.overflowY)) {
            return el;
        }
        else {
            return this.getScrollParent(el.parentElement);
        }
    }
    /** @internal */
    static updateScrollPosition(el, position, distance) {
        // is widget in view?
        let rect = el.getBoundingClientRect();
        let innerHeightOrClientHeight = (window.innerHeight || document.documentElement.clientHeight);
        if (rect.top < 0 ||
            rect.bottom > innerHeightOrClientHeight) {
            // set scrollTop of first parent that scrolls
            // if parent is larger than el, set as low as possible
            // to get entire widget on screen
            let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;
            let offsetDiffUp = rect.top;
            let scrollEl = this.getScrollParent(el);
            if (scrollEl !== null) {
                let prevScroll = scrollEl.scrollTop;
                if (rect.top < 0 && distance < 0) {
                    // moving up
                    if (el.offsetHeight > innerHeightOrClientHeight) {
                        scrollEl.scrollTop += distance;
                    }
                    else {
                        scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;
                    }
                }
                else if (distance > 0) {
                    // moving down
                    if (el.offsetHeight > innerHeightOrClientHeight) {
                        scrollEl.scrollTop += distance;
                    }
                    else {
                        scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;
                    }
                }
                // move widget y by amount scrolled
                position.top += scrollEl.scrollTop - prevScroll;
            }
        }
    }
    /**
     * @internal Function used to scroll the page.
     *
     * @param event `MouseEvent` that triggers the resize
     * @param el `HTMLElement` that's being resized
     * @param distance Distance from the V edges to start scrolling
     */
    static updateScrollResize(event, el, distance) {
        const scrollEl = this.getScrollParent(el);
        const height = scrollEl.clientHeight;
        const top = event.clientY < distance;
        const bottom = event.clientY > height - distance;
        if (top) {
            // This also can be done with a timeout to keep scrolling while the mouse is
            // in the scrolling zone. (will have smoother behavior)
            scrollEl.scrollBy({ behavior: 'smooth', top: event.clientY - distance });
        }
        else if (bottom) {
            scrollEl.scrollBy({ behavior: 'smooth', top: distance - (height - event.clientY) });
        }
    }
}
exports.Utils = Utils;
//# sourceMappingURL=utils.js.map

/***/ }),
/* 143 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// gridstack-ddi.ts 3.2.0 @preserve
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Abstract Partial Interface API for drag'n'drop plugin - look at GridStackDD and HTML5 / Jquery implementation versions
 */
class GridStackDDI {
    /** call this method to register your plugin instead of the default no-op one */
    static registerPlugin(pluginClass) {
        GridStackDDI.ddi = new pluginClass();
        return GridStackDDI.ddi;
    }
    /** get the current registered plugin to use */
    static get() {
        return GridStackDDI.ddi || GridStackDDI.registerPlugin(GridStackDDI);
    }
    /** removes any drag&drop present (called during destroy) */
    remove(el) {
        return this; // no-op for static grids
    }
}
exports.GridStackDDI = GridStackDDI;
//# sourceMappingURL=gridstack-ddi.js.map

/***/ }),
/* 144 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LineEditorExt: () => (/* binding */ LineEditorExt),
/* harmony export */   LineType: () => (/* binding */ LineType)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);



var LineType;
(function (LineType) {
    LineType["textline"] = "textline";
    LineType["id"] = "id";
    LineType["uppercase"] = "uppercase";
    LineType["number"] = "number";
    LineType["select"] = "select";
    LineType["table"] = "table";
    LineType["json"] = "json";
    LineType["color"] = "color";
    LineType["id_"] = "id_";
    LineType["richtext"] = "richtext";
    LineType["readonly"] = "readonly";
    LineType["boolean"] = "boolean";
    LineType["multiselect"] = "multiselect";
    LineType["folderselect"] = "folderselect";
    LineType["userAndGroupSelect"] = "userAndGroupSelect";
})(LineType || (LineType = {}));
//This class will allow to use the lineEditor outside the config app.
class LineEditorExt {
    constructor() {
        // super();
    }
    showDialog(title, height, input, onOk, width, showUserAndGroupsSelectWithDialog) {
        let that = this;
        let ok;
        let d = $.Deferred();
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.html("");
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.addClass("dlg-v-scroll");
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.removeClass("dlg-no-scroll");
        let ctrls = [];
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog({
            autoOpen: true,
            title: title,
            height: height,
            width: width ? width : 720,
            modal: true,
            close: function () {
            },
            open: function () {
                var _a;
                for (let inp of input) {
                    let canEdit = !inp.readonly;
                    let inlineHelp = inp.explanation ? inp.explanation : "";
                    let dataCy = (_a = inp.id) !== null && _a !== void 0 ? _a : inp.help.replace(/\s/g, "_");
                    let ctrl = $(`<div class="controlContainer" data-cy="${dataCy}">`).appendTo(_globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm);
                    switch (inp.type) {
                        case LineType.textline:
                        case LineType.id:
                        case LineType.id_:
                        case LineType.uppercase:
                        case LineType.number:
                            ctrl.plainText({
                                canEdit: canEdit,
                                help: inp.help + (inp.required ? "<sup>*</sup>" : ""),
                                valueChanged: function () {
                                    that.setEnabled(ok, ctrls, input);
                                },
                                parameter: { rows: inp.multiple ? 5 : 1, allowResize: false, inlineHelp: inlineHelp },
                                fieldValue: inp.value,
                            });
                            break;
                        case LineType.json:
                            ctrl.plainText({
                                canEdit: canEdit,
                                help: inp.help + (inp.required ? "<sup>*</sup>" : ""),
                                valueChanged: function () {
                                    that.setEnabled(ok, ctrls, input);
                                },
                                parameter: {
                                    code: 'json',
                                    height: 200,
                                    autoFormat: true,
                                    showJSONFormat: true,
                                    hideFullscreen: true,
                                    rows: inp.multiple ? 5 : 1, allowResize: false, inlineHelp: inlineHelp
                                },
                                fieldValue: inp.value,
                            });
                            break;
                        case LineType.color:
                            ctrl.colorPicker({
                                canEdit: canEdit,
                                help: inp.help + (inp.required ? "<sup>*</sup>" : ""),
                                valueChanged: function () {
                                    that.setEnabled(ok, ctrls, input);
                                },
                                parameter: { allowResize: false, inlineHelp: inlineHelp },
                                fieldValue: inp.value,
                            });
                            break;
                        case LineType.richtext:
                            ctrl.richText({
                                canEdit: canEdit,
                                help: inp.help + (inp.required ? "<sup>*</sup>" : ""),
                                valueChanged: function () {
                                    that.setEnabled(ok, ctrls, input);
                                },
                                parameter: { height: 200, requiresContent: inp.required, tiny: true },
                                fieldValue: inp.value,
                            });
                            break;
                        case LineType.readonly:
                            ctrl.plainText({
                                canEdit: false,
                                help: inp.help,
                                valueChanged: function () {
                                },
                                parameter: { rows: 1, allowResize: false, inlineHelp: inlineHelp },
                                fieldValue: inp.value
                            });
                            break;
                        case LineType.boolean:
                            ctrl.checkBox({
                                canEdit: canEdit,
                                help: inp.help,
                                valueChanged: function () {
                                    that.setEnabled(ok, ctrls, input);
                                },
                                fieldValue: inp.value,
                                parameter: { inlineHelp: inlineHelp }
                            });
                            ctrl.removeClass("controlContainer");
                            break;
                        case LineType.table:
                            ctrl.tableCtrl({
                                canEdit: canEdit,
                                help: inp.help,
                                valueChanged: function () {
                                },
                                fieldValue: inp.value,
                                parameter: {
                                    canBeModified: inp.noEdit ? false : true,
                                    create: inp.noEdit ? false : true,
                                    showLineNumbers: false,
                                    readonly_allowfocus: false,
                                    columns: inp.columns,
                                    inlineHelp: inlineHelp
                                }
                            });
                            break;
                        case LineType.select:
                            ctrl.mxDropdown({
                                controlState: _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.FormEdit,
                                canEdit: canEdit,
                                help: inp.help + (inp.required ? "<sup>*</sup>" : ""),
                                fieldValue: inp.value,
                                valueChanged: function () {
                                    that.setEnabled(ok, ctrls, input);
                                },
                                parameter: {
                                    placeholder: 'select',
                                    maxItems: inp.multiple ? 100 : 1,
                                    options: inp.options,
                                    groups: inp.groups ? inp.groups : [],
                                    create: inp.noEdit ? false : true,
                                    sort: false,
                                    inlineHelp: inlineHelp
                                },
                            });
                            break;
                        case LineType.folderselect:
                            let showOnly = [], showNot = [];
                            if (inp.extraOptions) {
                                if (inp.extraOptions.showOnly && inp.extraOptions.showOnly.length > 0) {
                                    showOnly = inp.extraOptions.showOnly;
                                }
                                if (inp.extraOptions.showNot && inp.extraOptions.showNot.length > 0) {
                                    showNot = inp.extraOptions.showNot;
                                }
                            }
                            // This a hack to make sure that we will parse the ref to create link.
                            addHighlightLink("", _globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.matrixBaseUrl + "/");
                            ctrl.itemSelection({
                                controlState: _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.FormEdit,
                                canEdit: canEdit,
                                help: inp.help + (inp.required ? "<sup>*</sup>" : ""),
                                fieldValue: inp.value,
                                valueChanged: function () {
                                    that.setEnabled(ok, ctrls, input);
                                },
                                parameter: {
                                    crossProject: true,
                                    crossProjectAsList: false,
                                    prefix: "Selected folder : ",
                                    buttonName: "Select folder",
                                    singleFolderOnly: true,
                                    showOnly: showOnly,
                                    showNot: showNot,
                                },
                            });
                            break;
                        case LineType.multiselect:
                            ctrl.multiSelect({
                                afterSelect: function (values) {
                                    var _a;
                                    let selection = (_a = ctrl.data("selected")) !== null && _a !== void 0 ? _a : [];
                                    values.forEach((value) => {
                                        if (!selection.includes(value))
                                            selection.push(value);
                                    });
                                    ctrl.data("selected", selection);
                                    that.setEnabled(ok, ctrls, input);
                                },
                                afterDeselect: function (values) {
                                    var _a;
                                    let selection = (_a = ctrl.data("selected")) !== null && _a !== void 0 ? _a : [];
                                    values.forEach((value) => {
                                        let i = selection.indexOf(value);
                                        selection = selection.splice(i, 1);
                                    });
                                    ctrl.data("selected", selection);
                                }
                            });
                            if (inp.options) {
                                inp.options.forEach((opt) => {
                                    ctrl.multiSelect('addOption', { value: opt.id, text: opt.label });
                                });
                                let selection = inp.value ? inp.value.split(",") : [];
                                ctrl.multiSelect("select", selection);
                            }
                            $("<div class='baseControlHelp' style='margin-top:10px'>" + inp.help + (inp.required ? "<sup>*</sup>" : "") + "</div>").insertBefore(ctrl);
                            break;
                        case LineType.userAndGroupSelect:
                            ctrl.data("selected", inp.value ? inp.value.split(",") : []);
                            if (showUserAndGroupsSelectWithDialog) {
                                showUserAndGroupsSelectWithDialog(ctrl, true, true, inp.help + (inp.required ? "<sup>*</sup>" : ""), "select users or groups", inp.value ? inp.value.split(",") : [], inp.help, (selected) => {
                                    ctrl.data("selected", selected);
                                    that.setEnabled(ok, ctrls, input);
                                });
                            }
                            break;
                        default:
                            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Logger.error("Unknown input type " + inp.type);
                    }
                    ctrls.push(ctrl);
                    if (inp.hide) {
                        ctrl.hide();
                    }
                }
            },
            resizeStop: function (event, ui) {
            },
            buttons: [{
                    text: 'Ok',
                    class: 'btnDoIt',
                    click: async function () {
                        let updates = await that.getValue(ctrls, input);
                        let issues = [];
                        $.each(updates, function (idx, update) {
                            if (update.type == LineType.id_ && !update.value.match(/^[a-z0-9]+$/i)) {
                                issues.push(input[idx].help + " is an identifier. It cannot contain anything but letters and digits");
                            }
                            if (update.type == LineType.id_ && !update.value.match(/^[a-z0-9_\-]+$/i)) {
                                issues.push(input[idx].help + " is an identifier. It cannot contain anything but letters, digits, dash and underscore");
                            }
                            if (update.type == LineType.id_ && !update.value.substr(0, 1).match(/^[a-z]+$/i)) {
                                issues.push(input[idx].help + " is an identifier. It must start with a letter");
                            }
                            if (update.type == LineType.number && !update.value.match(/^[0-9]+$/)) {
                                issues.push(input[idx].help + " is a number. It cannot contain anything but digits");
                            }
                            if (update.type == LineType.uppercase && !update.value.match(/^[A-Z]+$/)) {
                                issues.push(input[idx].help + " is a short id. It cannot contain nothing but uppercase letters");
                            }
                        });
                        if (issues.length) {
                            alert(issues.join("\n"));
                        }
                        else if (onOk(updates)) {
                            _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog("close");
                            d.resolve();
                        }
                    }
                }, {
                    text: 'Cancel',
                    class: 'btnCancelIt',
                    click: function () {
                        d.reject();
                        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog("close");
                    }
                }]
        });
        // get Ok button
        ok = $(".btnDoIt", _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.parent());
        // check if at least one shown input is required
        let showsRequired = false;
        $.each(input, function (idx, inp) {
            if (inp.required && !inp.hide) {
                showsRequired = true;
            }
        });
        if (showsRequired) {
            ok.parent().prepend("* required ");
        }
        this.setEnabled(ok, ctrls, input);
        return d;
    }
    static mapToKeys(results) {
        let update = [];
        $.each(results, function (idx, uwk) {
            update[uwk.key] = uwk;
        });
        return update;
    }
    async setEnabled(btn, ctrls, input) {
        if (btn) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.setEnabled(btn, this.isEnabled(await this.getValue(ctrls, input)));
        }
    }
    async getValue(ctrls, input) {
        let updates = _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.JSON.clone(input);
        let idx = 0;
        for (let ctrl of ctrls) {
            if (ctrl.getController) {
                updates[idx].value = await ctrl.getController().getValueAsync();
            }
            else {
                updates[idx].value = ctrl.data("selected") ? ctrl.data("selected").join(",") : "";
            }
            idx++;
        }
        return updates;
    }
    isEnabled(status) {
        let hasRequired = false;
        let hasAllRequired = true;
        $.each(status, function (idx, input) {
            if (input.required && !input.hide) {
                hasRequired = true;
                if (!input.value) {
                    hasAllRequired = false;
                }
            }
        });
        return !hasRequired || hasAllRequired;
    }
}


/***/ }),
/* 145 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IWidgetScope: () => (/* binding */ IWidgetScope),
/* harmony export */   WidgetPluginManager: () => (/* binding */ WidgetPluginManager),
/* harmony export */   renderMode: () => (/* binding */ renderMode),
/* harmony export */   widgetPluginManager: () => (/* binding */ widgetPluginManager),
/* harmony export */   widgetRenderEvent: () => (/* binding */ widgetRenderEvent)
/* harmony export */ });

;
var widgetRenderEvent;
(function (widgetRenderEvent) {
    widgetRenderEvent[widgetRenderEvent["load"] = 0] = "load";
    widgetRenderEvent[widgetRenderEvent["scroll"] = 1] = "scroll";
    widgetRenderEvent[widgetRenderEvent["click"] = 2] = "click";
})(widgetRenderEvent || (widgetRenderEvent = {}));
var renderMode;
(function (renderMode) {
    renderMode[renderMode["placeholder"] = 0] = "placeholder";
    renderMode[renderMode["minimized"] = 1] = "minimized";
    renderMode[renderMode["maximized"] = 2] = "maximized";
})(renderMode || (renderMode = {}));
var IWidgetScope;
(function (IWidgetScope) {
    IWidgetScope[IWidgetScope["admin"] = 0] = "admin";
    IWidgetScope[IWidgetScope["user"] = 1] = "user";
    IWidgetScope[IWidgetScope["superAdmin"] = 2] = "superAdmin";
})(IWidgetScope || (IWidgetScope = {}));
class WidgetPluginManager {
    constructor() {
        this.pluginList = {};
        this.loadedWidgets = {};
    }
    registerPlugin(plugin) {
        this.pluginList[plugin.pluginName()] = (plugin);
    }
    addLoadedWidget(key, widget) {
        let id = key;
        this.loadedWidgets[id] = widget;
    }
    unLoadAllWidgets() {
        for (let key in this.loadedWidgets) {
            if (this.loadedWidgets[key].unload)
                this.loadedWidgets[key].unload();
        }
        this.loadedWidgets = {};
    }
    removeLoadedWidget(displayedWidget) {
        let foundWidget = this.loadedWidgets[displayedWidget.id];
        if (foundWidget) {
            if (foundWidget.unload) {
                foundWidget.unload();
            }
            delete this.loadedWidgets[displayedWidget.id];
        }
    }
}
var widgetPluginManager = new WidgetPluginManager(); // plugin manager 


/***/ }),
/* 146 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WidgetSettingsManager: () => (/* binding */ WidgetSettingsManager)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(145);



class WidgetSettingsManager {
    static getHiddenWidgets() {
        let list = [];
        let index = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.serverConfig.currentUserSettings.findIndex(o => { return o.key == "hiddenWidget"; });
        if (index >= 0) {
            try {
                let templist = JSON.parse(_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.serverConfig.currentUserSettings[index].value);
                list = templist.filter(function (item, pos) {
                    return templist.indexOf(item) == pos;
                });
            }
            catch (error) {
            }
        }
        return list;
    }
    static hide(widget) {
        let d = $.Deferred();
        let list = [];
        let index = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.serverConfig.currentUserSettings.findIndex(o => { return o.key == "hiddenWidget"; });
        if (index >= 0) {
            let templist = JSON.parse(_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.serverConfig.currentUserSettings[index].value);
            templist.push(widget.id);
            //Remove duplicates
            list = templist.filter(function (item, pos) {
                return templist.indexOf(item) == pos;
            });
            _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.serverConfig.currentUserSettings[index].value = JSON.stringify(list);
        }
        else {
            list.push(widget.id);
            _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.serverConfig.currentUserSettings.push({
                key: "hiddenWidget",
                value: JSON.stringify(list), secret: false
            });
        }
        let data = {
            key: "hiddenWidget",
            value: JSON.stringify(list),
            reason: "adding widget Setting"
        };
        return _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.postServer("user/" + _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser() + "/setting", data);
    }
    static unhide(displayedWidget) {
        let index = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.serverConfig.currentUserSettings.findIndex(o => { return o.key == "hiddenWidget"; });
        let list = WidgetSettingsManager.getHiddenWidgets().filter((w => { return w != displayedWidget.id; }));
        if (index >= 0)
            _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.serverConfig.currentUserSettings[index].value = JSON.stringify(list);
        let data = {
            key: "hiddenWidget",
            value: JSON.stringify(list),
            reason: "adding widget Setting"
        };
        return _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.postServer("user/" + _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser() + "/setting", data);
    }
    static updatePosition(widget) {
        let d = $.Deferred();
        if (widget.parameters.users != undefined && widget.parameters.users.length > 0 && widget.createdBy != _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser()) {
            // Save new position to localstorage
            localStorage.setItem(widget.id, JSON.stringify(widget.parameters.position));
            d.resolve();
            return d;
        }
        else {
            return WidgetSettingsManager.setSettings(widget);
        }
    }
    static setSettings(widget) {
        let d = $.Deferred();
        if (widget.parameters.users != undefined && widget.parameters.users.length > 0) {
            if (_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.isAdmin()) {
                let index = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.serverConfig.customerSettings.findIndex(o => { return o.key == widget.id; });
                if (index >= 0)
                    _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.serverConfig.customerSettings[index].value = JSON.stringify(widget);
                else
                    _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.serverConfig.customerSettings.push({ key: widget.id, value: JSON.stringify(widget), secret: false });
                return _globals__WEBPACK_IMPORTED_MODULE_0__.app.setSettingCustomerJSON(widget.id, widget);
            }
        }
        else {
            let index = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.serverConfig.currentUserSettings.findIndex(o => { return o.key == widget.id; });
            if (index >= 0)
                _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.serverConfig.currentUserSettings[index].value = JSON.stringify(widget);
            else
                _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.serverConfig.currentUserSettings.push({ key: widget.id, value: JSON.stringify(widget), secret: false });
            if (widget.parameters.canBeAddedOrDeletedBy == _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_1__.IWidgetScope.user) {
                let data = {
                    key: widget.id,
                    value: JSON.stringify(widget),
                    reason: "adding widget Setting"
                };
                return _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.postServer("user/" + _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser() + "/setting", data);
            }
        }
        d.fail();
        return d;
    }
    static deleteDeleteWidgetSettings(widget) {
        let d = $.Deferred();
        if (widget.parameters.users != undefined && widget.parameters.users.length > 0) {
            if (_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.isAdmin()) {
                _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.serverConfig.customerSettings = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.serverConfig.customerSettings.filter((value, index, arr) => { return value.key != widget.id; });
                return _globals__WEBPACK_IMPORTED_MODULE_0__.app.setSettingCustomerJSON(widget.id, "");
            }
        }
        else {
            if (widget.parameters.canBeAddedOrDeletedBy == undefined || widget.parameters.canBeAddedOrDeletedBy == _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_1__.IWidgetScope.user) {
                _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.serverConfig.currentUserSettings = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.serverConfig.currentUserSettings.filter((value, index, arr) => { return value.key != widget.id; });
                let data = {
                    key: widget.id,
                    value: "",
                    reason: "removing widget Setting"
                };
                return _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.postServer("user/" + _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser() + "/setting", data);
            }
        }
        d.fail();
        return d;
    }
    static canBeEdited(displayedWidget, configurator) {
        if (displayedWidget.parameters.users != undefined && displayedWidget.parameters.users.length > 0) {
            if (_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.isAdmin())
                return true;
            else
                return false;
        }
        return (displayedWidget.parameters.canBeAddedOrDeletedBy == _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_1__.IWidgetScope.user
            || (displayedWidget.parameters.canBeAddedOrDeletedBy == _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_1__.IWidgetScope.admin && _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.isAdmin())
            || (displayedWidget.parameters.canBeAddedOrDeletedBy == _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_1__.IWidgetScope.superAdmin && _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.isSuperAdmin()))
            && (configurator != undefined && configurator.length > 0);
    }
    static canBeDeleted(displayedWidget) {
        if (displayedWidget.parameters.users != undefined && displayedWidget.parameters.users.length > 0) {
            if (_globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.isAdmin())
                return true;
            else
                return false;
        }
        return (displayedWidget.parameters.canBeAddedOrDeletedBy == undefined || displayedWidget.parameters.canBeAddedOrDeletedBy == _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_1__.IWidgetScope.user
            || (displayedWidget.parameters.canBeAddedOrDeletedBy == _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_1__.IWidgetScope.admin && _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.isAdmin())
            || (displayedWidget.parameters.canBeAddedOrDeletedBy == _WidgetPluginManager__WEBPACK_IMPORTED_MODULE_1__.IWidgetScope.superAdmin && _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.isSuperAdmin()));
    }
}


/***/ }),
/* 147 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DateTimeUI: () => (/* binding */ DateTimeUI)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _businesslogic_DateTimeBL__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(89);



class DateTimeUI {
    initDateTimeSettings(update) {
        return _businesslogic_DateTimeBL__WEBPACK_IMPORTED_MODULE_2__.DateTimeBL.getInstance().initDateTimeSettings(update);
    }
    renderHumanDate(date, dateOnly) {
        return _businesslogic_DateTimeBL__WEBPACK_IMPORTED_MODULE_2__.DateTimeBL.getInstance().renderHumanDate(date, dateOnly);
    }
    renderCustomerHumanDate(date, dateOnly) {
        return _businesslogic_DateTimeBL__WEBPACK_IMPORTED_MODULE_2__.DateTimeBL.getInstance().renderCustomerHumanDate(date, dateOnly);
    }
    renderHumanMonth(dateObj) {
        return _businesslogic_DateTimeBL__WEBPACK_IMPORTED_MODULE_2__.DateTimeBL.getInstance().renderHumanMonth(dateObj);
    }
    renderDashFormat(dateObj) {
        return _businesslogic_DateTimeBL__WEBPACK_IMPORTED_MODULE_2__.DateTimeBL.getInstance().renderDashFormat(dateObj);
    }
    getSimpleDateFormat() {
        return _businesslogic_DateTimeBL__WEBPACK_IMPORTED_MODULE_2__.DateTimeBL.getInstance().getSimpleDateFormat();
    }
    getSimpleDateFormatMoment() {
        return _businesslogic_DateTimeBL__WEBPACK_IMPORTED_MODULE_2__.DateTimeBL.getInstance().getSimpleDateFormatMoment();
    }
    getSimpleDateTimeFormatMoment() {
        return _businesslogic_DateTimeBL__WEBPACK_IMPORTED_MODULE_2__.DateTimeBL.getInstance().getSimpleDateTimeFormatMoment();
    }
    // *******************************************************
    // helper for ui to manage time and date settings
    // *******************************************************
    // gets the current server or user setting from the server and renders
    // the controls to see and modify the settings
    async showControlsAsync(controlOptions) {
        let that = this;
        let table = controlOptions.table;
        // shows the time setting controls for the server or a user
        let currentSettings = await this.initAsync(controlOptions.user);
        try {
            let tbody = $("tbody", table);
            tbody.append($('<tr><td colspan="2" class="baseControlHelp">' + controlOptions.help + '</td></tr>'));
            let isUserOwnSetting = controlOptions.user && controlOptions.user.toLowerCase() === _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser().toLowerCase();
            let isUserSetting = controlOptions.user;
            that.renderDateTimeFormat(tbody, isUserSetting, isUserOwnSetting, currentSettings, "timeformat", "Date Time Formatting");
            that.renderDateTimeFormat(tbody, isUserSetting, isUserOwnSetting, currentSettings, "dateformat", "Date Only Formatting");
            that.renderTimeZone(tbody, isUserSetting, isUserOwnSetting, currentSettings, "timezone", controlOptions.user ? "User Timezone" : "Server Timezone");
        }
        catch (e) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Could not retrieve date time settings from server", "");
        }
    }
    // gets the server or user time/date settings from the server (if specified)
    renderDateTimeFormat(tableBody, isUserSetting, isUserOwnSetting, currentSettings, settingName, explanation) {
        let that = this;
        let help = $('<a href="https://urlshort.matrixreq.com/d23/manual/datetime" target="_blank"><span style="top:-4px; margin: 0px 3px;font-size: 12px" class="fal fa-info-circle"></span></a>');
        let timeUpdate;
        let si = $('<input autocomplete="off" type="text" class="form-control admin_utime">').on("keyup", function () {
            clearTimeout(timeUpdate);
            timeUpdate = window.setTimeout(function () {
                that.showTime(example, si.val());
                if (example.html() === si.data("last_val") || example.html() === "") {
                    setb.prop('disabled', true);
                    setb.removeClass("btn-success");
                    setb.addClass("btn-default");
                }
                else {
                    setb.prop('disabled', false);
                    setb.addClass("btn-success");
                    setb.removeClass("btn-default");
                }
            }, 300);
        });
        let resetb = $("<button class='btn btn-default' style='margin-right:10px' >Reset</button>").click(function () {
            that.setSetting(isUserOwnSetting, currentSettings.settingsSource, settingName, "");
            si.val(settingName === "timeformat" ? _businesslogic_DateTimeBL__WEBPACK_IMPORTED_MODULE_2__.DateTimeBL.getInstance().serverDateTimeFormat : _businesslogic_DateTimeBL__WEBPACK_IMPORTED_MODULE_2__.DateTimeBL.getInstance().serverDateOnlyFormat);
            that.showTime(example, si.val());
            si.data("last_val", example.html());
            setb.removeClass("btn-success");
            setb.addClass("btn-default");
            setb.prop('disabled', true);
        });
        let setb = $("<button class='btn btn-default' style='margin-right:10px' disabled>Use</button>").click(async function () {
            await that.setSetting(isUserOwnSetting, currentSettings.settingsSource, settingName, si.val());
            si.data("last_val", example.html());
            setb.removeClass("btn-success");
            setb.addClass("btn-default");
            setb.prop('disabled', true);
        });
        let example = $('<span>');
        let tr = $("<tr>");
        tableBody.append(tr);
        tr.append($("<td class='admin_utdl'>").append($("<label class='control-label'>").html(explanation)).append(help));
        tr.append($("<td>").append(si));
        tr.append($("<td>").append(setb));
        tr.append($("<td>").append(resetb));
        let tre = $("<tr style='vertical-align:top;height:36px'>");
        tableBody.append(tre);
        tre.append($("<td>"));
        tre.append($("<td colspan='3' style='font-size:75%'>").append("<span style='color:darkgrey'>Example: </span>").append(example));
        let cs = currentSettings[settingName];
        si.val(cs ? cs : (settingName === "timeformat" ? _businesslogic_DateTimeBL__WEBPACK_IMPORTED_MODULE_2__.DateTimeBL.getInstance().serverDateTimeFormat : _businesslogic_DateTimeBL__WEBPACK_IMPORTED_MODULE_2__.DateTimeBL.getInstance().serverDateOnlyFormat));
        this.showTime(example, si.val());
        si.data("last_val", example.html());
    }
    showTime(uic, format) {
        let date = new Date(2014, 1, 15, 6, 23, 55);
        let df = new SimpleDateFormat(format);
        uic.html(df.format(date));
    }
    async setSetting(isUserOwnSetting, serverOrUserPrefix, key, val) {
        let that = this;
        let postSetSetting = {
            value: val,
            key: key,
            reason: "settings change"
        };
        try {
            await _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.postServer(serverOrUserPrefix, postSetSetting);
            await that.initDateTimeSettings(true);
        }
        catch (e) {
            _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Failed to change setting!", "");
            throw e;
        }
    }
    renderTimeZone(tableBody, isUserSetting, isUserOwnSetting, currentSettings, settingName, explanation) {
        let that = this;
        let dd = $('<select class="form-control admin_utime">');
        dd.change(function () {
            example.html("");
            if (dd.val() === example.data("last_val")) {
                setb.removeClass("btn-success");
                setb.addClass("btn-default");
            }
            else {
                setb.addClass("btn-success");
                setb.removeClass("btn-default");
            }
        });
        for (let idx = 0; idx < currentSettings.timeZoneOptions.length; idx++) {
            dd.append($("<option value='" + currentSettings.timeZoneOptions[idx].val + "'>" + currentSettings.timeZoneOptions[idx].text + "</option>"));
        }
        let resetb = $("<button class='btn btn-default' style='margin-right:10px'>Reset</button>").click(async () => {
            await that.setSetting(isUserOwnSetting, currentSettings.settingsSource, settingName, "");
            dd.val(_businesslogic_DateTimeBL__WEBPACK_IMPORTED_MODULE_2__.DateTimeBL.getInstance().serverTimezone);
            example.html(that.renderTimeZoneWarning(isUserOwnSetting));
            setb.removeClass("btn-success");
            setb.addClass("btn-default");
        });
        let setb = $("<button class='btn btn-default' style='margin-right:10px'>Use</button>").click(async () => {
            await that.setSetting(isUserOwnSetting, currentSettings.settingsSource, settingName, dd.val());
            example.html(that.renderTimeZoneWarning(isUserOwnSetting));
            setb.removeClass("btn-success");
            setb.addClass("btn-default");
        });
        let example = $('<span style="color:red">');
        let tr = $("<tr>");
        tableBody.append(tr);
        tr.append($("<td class='admin_utdl'>").append($("<label class='control-label'>").html(explanation)));
        tr.append($("<td>").append(dd));
        tr.append($("<td>").append(setb));
        tr.append($("<td>").append(resetb));
        let tre = $("<tr>");
        tableBody.append(tre);
        tre.append($("<td>"));
        tre.append($("<td colspan='3'>").append(example));
        let cs = currentSettings[settingName];
        dd.val(cs ? cs : _businesslogic_DateTimeBL__WEBPACK_IMPORTED_MODULE_2__.DateTimeBL.getInstance().serverTimezone);
        example.html(this.renderTimeZoneWarning(isUserOwnSetting)).data("last_val", dd.val());
    }
    renderTimeZoneWarning(isUserOwnSetting) {
        return (isUserOwnSetting && _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.DateTime.requiresTimeZoneWarning()) ? "the timezone of your PC seems different!" : "";
    }
    // render user controls to see / change the settings
    async renderSettingControlsAsync(options) {
        await this.showControlsAsync(options);
    }
    // shows a pop dialog with control to modify date time settings
    renderSettingDialog(user) {
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.hide();
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.html("");
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.removeClass("dlg-no-scroll");
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.addClass("dlg-v-scroll");
        let table = $("<table style='width:100%'><tbody/></table>");
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.append(table);
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog({
            autoOpen: true,
            title: "User Date Time Settings: " + user,
            width: 700,
            height: 430,
            modal: true,
            resizeStop: function () {
                //We don't do anything here.
            },
            open: async () => {
                await _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.DateTime.renderSettingControlsAsync({
                    user: user,
                    help: "Settings",
                    table: table
                });
            },
            buttons: [{
                    text: 'Ok',
                    class: 'btnDoIt',
                    click: function () {
                        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog("close");
                    }
                }
            ]
        });
    }
    // returns an empty string or a warning if the time zone on the PC is different to the server settings
    requiresTimeZoneWarning() {
        let d = new Date(_businesslogic_DateTimeBL__WEBPACK_IMPORTED_MODULE_2__.DateTimeBL.getInstance().dateIso8601FromServer);
        let ds = _businesslogic_DateTimeBL__WEBPACK_IMPORTED_MODULE_2__.DateTimeBL.getInstance().simpleDateTimeFormat.format(d);
        if (ds !== _businesslogic_DateTimeBL__WEBPACK_IMPORTED_MODULE_2__.DateTimeBL.getInstance().dateUserFromServer) {
            return true;
        }
        else {
            return false;
        }
    }
    // return a clickable link button if there are timezone issues
    getTimeZoneCTA() {
        if (!_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.DateTime.requiresTimeZoneWarning()) {
            return $("");
        }
        let button = $("<button class='buttonCTA'></button>").text("verify your time zone").click(function () {
            try {
                if (_globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog("isOpen")) {
                    _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog("close");
                }
            }
            catch (exception) {
                // nothing bad - it just means no dialog was ever opened before
            }
            _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.changePassword();
        });
        return button;
    }
    async initAsync(user) {
        // returns the following settings from the server... currently 3 rest calls are needed
        // if no user is passed the global server settings are retrieved
        let result = {
            timeZoneOptions: [],
            settingsSource: user ? ("user/" + user + "/setting") : "all/setting"
        };
        let allTimeZones = await _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.getServer("all/timezone");
        for (let idx = 0; idx < allTimeZones.length; idx++) {
            result.timeZoneOptions.push({
                val: allTimeZones[idx],
                text: allTimeZones[idx]
            });
        }
        // check for user overwrites
        if (user) {
            let userInfo = await _globals__WEBPACK_IMPORTED_MODULE_0__.restConnection.getServer("user/" + user);
            let settings = userInfo.userSettingsList;
            for (let idx = 0; idx < settings.length; idx++) {
                if (settings[idx].key === "timeformat") {
                    result.timeformat = settings[idx].value;
                }
                if (settings[idx].key === "dateformat") {
                    result.dateformat = settings[idx].value;
                }
                if (settings[idx].key === "timezone") {
                    result.timezone = settings[idx].value;
                }
            }
        }
        return result;
    }
}



/***/ }),
/* 148 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   URLTools: () => (/* binding */ URLTools)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);



class URLTools {
    getParameterByName(url, name) {
        var match = RegExp('[?&]' + name + '=([^&]*)').exec(url);
        return match && decodeURIComponent(match[1].replace(/\+/g, ' '));
    }
    parseUrl(url) {
        let result = {
            project: "",
            item: "",
            params: {}
        };
        // remove https://server.matrixreq.com/
        let noserver = url.replace(_globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.matrixBaseUrl + "/", "").replace(_globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.matrixBaseUrl, "").split("?");
        if (noserver[0]) {
            let pi = noserver[0].split("/");
            result.project = pi[0];
            result.item = pi.length > 1 ? pi[1] : "";
        }
        if (noserver.length > 1) {
            let params = noserver[1].split("&");
            $.each(params, function (pidx, param) {
                let firstE = param.indexOf("=");
                if (firstE == -1) {
                    _matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Logger.log("warning", "invalid url parameter '" + param + "'");
                    return;
                }
                result.params[param.substr(0, firstE)] = decodeURIComponent(param.substr(firstE + 1).replace(/\+/g, ' '));
            });
        }
        return result;
    }
}
;


/***/ }),
/* 149 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   XPathTools: () => (/* binding */ XPathTools)
/* harmony export */ });

class XPathTools {
    constructor() {
    }
    get(node) {
        var comp, comps = [];
        var xpath = '';
        var getPos = function (element) {
            var position = 1, curNode;
            if (element.nodeType == Node.ATTRIBUTE_NODE) {
                return null;
            }
            for (curNode = element.previousSibling; curNode; curNode = curNode.previousSibling) {
                if (curNode.nodeName == element.nodeName) {
                    ++position;
                }
            }
            return position;
        };
        var element = node[0];
        if (element instanceof Document) {
            return '/';
        }
        for (; element && !(element instanceof Document); element = element.nodeType == Node.ATTRIBUTE_NODE ? element.ownerElement : element.parentNode) {
            comp = comps[comps.length] = {};
            switch (element.nodeType) {
                case Node.TEXT_NODE:
                    comp.name = 'text()';
                    break;
                case Node.ATTRIBUTE_NODE:
                    comp.name = '@' + element.nodeName;
                    break;
                case Node.PROCESSING_INSTRUCTION_NODE:
                    comp.name = 'processing-instruction()';
                    break;
                case Node.COMMENT_NODE:
                    comp.name = 'comment()';
                    break;
                case Node.ELEMENT_NODE:
                    comp.name = element.nodeName;
                    break;
            }
            comp.position = getPos(element);
        }
        for (var i = comps.length - 1; i >= 0; i--) {
            comp = comps[i];
            xpath += '/' + comp.name.toLowerCase();
            if (comp.position !== null) {
                xpath += '[' + comp.position + ']';
            }
        }
        return xpath;
    }
    ;
    hardCopy(element) {
        // note this is used only by selenium top copy the attributes of a doc
        $.each(element.find("select"), function (idx, select) {
            var selected = $(select).val();
            $(select).find('option').prop('selected', false);
            $(select).find('option').removeAttr('selected');
            $(select).find("option[value='" + selected + "']").prop('selected', true);
            $(select).find("option[value='" + selected + "']").attr('selected', 'selected');
        });
        $.each(element.find("input[type='checkbox']"), function (idx, cb) {
            $(cb).is(":checked") ? $(cb).attr("checked", "checked") : $(cb).removeAttr("checked");
        });
        return element.html();
    }
}
;


/***/ }),
/* 150 */,
/* 151 */,
/* 152 */,
/* 153 */,
/* 154 */,
/* 155 */,
/* 156 */,
/* 157 */,
/* 158 */,
/* 159 */,
/* 160 */,
/* 161 */,
/* 162 */,
/* 163 */,
/* 164 */,
/* 165 */,
/* 166 */,
/* 167 */,
/* 168 */,
/* 169 */,
/* 170 */,
/* 171 */,
/* 172 */,
/* 173 */,
/* 174 */,
/* 175 */,
/* 176 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DocReviewImpl: () => (/* binding */ DocReviewImpl),
/* harmony export */   HTMLAnnotator: () => (/* binding */ HTMLAnnotator)
/* harmony export */ });
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _Components_ItemForm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(17);
/* harmony import */ var _docBase___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(23);
/* harmony import */ var _matrixlib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1);
/* harmony import */ var _businesslogic_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(11);
/* harmony import */ var _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(24);
/// <reference types="matrixrequirements-type-declarations" />







$.fn.docReview = function (options) {
    if (!options.fieldHandler) {
        //No need for a field handler here, so let's create a dummy one.
        options.fieldHandler = _businesslogic_index__WEBPACK_IMPORTED_MODULE_4__.FieldHandlerFactory.CreateHandler(_globals__WEBPACK_IMPORTED_MODULE_0__.globalMatrix.ItemConfig, _businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_5__.FieldDescriptions.Field_dummy, options);
        options.fieldHandler.initData(options.fieldValue);
    }
    let baseControl = new DocReviewImpl(this, options.fieldHandler);
    this.getController = () => { return baseControl; };
    baseControl.init(options);
    return this;
};
class DocReviewImpl extends _docBase___WEBPACK_IMPORTED_MODULE_2__.DocBaseImpl {
    constructor(control, fieldHandler) {
        super(control, fieldHandler);
    }
    init(options) {
        let that = this;
        this.annotationRecording = [];
        if (options.controlState == _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.Print || options.controlState == _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.Tooltip || options.controlState == _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.HistoryView) {
            return;
        }
        this._root.append(super.createHelp(options));
        this.uiCtrl = $("<div style='margin-top:6px' class='baseControl'>").appendTo(this._root);
        let defaultOptions = {
            controlState: _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.FormView,
            canEdit: false,
            valueChanged: function () {
            },
            parameter: {
            // item the item containing the rest of the information
            }
        };
        this.settings = _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.JSON.mergeOptions(defaultOptions, options);
        // changes shall not overwrite other people's changes
        this.needsLatest = true;
        this.data = this.parseValue(this.settings.fieldValue);
        let signatureStatus = _docBase___WEBPACK_IMPORTED_MODULE_2__.DocBaseImpl.readSignatureInfo(this.settings.item);
        // show the comment dialog button
        if (!this.settings.parameter.hideReview) {
            this.reviewButton(signatureStatus);
        }
    }
    // initialize options
    // public interface
    async hasChangedAsync() {
        return this.annotationRecording && this.annotationRecording.length > 0;
    }
    async getValueAsync(currentItem) {
        if (currentItem) {
            var currentValue = this.parseValue(currentItem[this.settings.fieldId]);
            currentValue = this.applyRecordings(currentValue);
            return JSON.stringify(currentValue);
        }
        else {
            return JSON.stringify(this.data);
        }
    }
    destroy() {
        this.reportBuffer = "";
    }
    resizeItem() {
    }
    applyRecordings(currentValue) {
        $.each(this.annotationRecording, function (aidx, record) {
            // if there is already an comment with this id: delete it
            currentValue.inlineComments = currentValue.inlineComments.filter(function (r) {
                return record.value.id != r.id;
            });
            switch (record.action) {
                // re(add) it
                case "add":
                case "update":
                    currentValue.inlineComments.push(record.value);
                    break;
            }
        });
        return currentValue;
    }
    parseValue(fieldVal) {
        if (fieldVal) {
            return JSON.parse(fieldVal);
        }
        else {
            return {
                inlineComments: []
            };
        }
    }
    /********************************************

     ******************************************** */
    // show button to allow user to comment on document
    reviewButton(signatureStatus) {
        let that = this;
        if (this.settings.parameter.hideReview) {
            return;
        }
        let canEdit = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.isEditor();
        var button = $(`<button class='btn btn-default docActionButton'>${canEdit ? "Review and add comments" : "Review comments"}</button>`).click(function () {
            _globals__WEBPACK_IMPORTED_MODULE_0__.app.getItemAsync(that.settings.id).done(function (item) {
                let mostRecentCommentField = item[that.settings.fieldId];
                let mostRecentComments = [];
                if (mostRecentCommentField) {
                    let rd = JSON.parse(mostRecentCommentField);
                    if (rd && rd.inlineComments) {
                        rd = that.applyRecordings(rd);
                        mostRecentComments = rd.inlineComments;
                    }
                }
                that.showReviewComments(canEdit, mostRecentComments);
            });
        });
        if ((this.data.inlineComments && this.data.inlineComments.length > 0) || canEdit) {
            this.uiCtrl.append(button);
            this.uiCtrl.append("<span class='searchResult'>there are <span id='currentComments'>" + (this.data.inlineComments ? this.data.inlineComments.length : 0) + "</span> comments</span>");
        }
    }
    recordAnnotation(action, annotation) {
        this.annotationRecording.push({ action: action, value: annotation });
        let rd = this.applyRecordings(_matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.JSON.clone(this.data));
        this.showComments(rd.inlineComments);
    }
    // show dialog to allow user to comment on document
    showReviewComments(canEdit, comments) {
        let that = this;
        let reportProc;
        // make dialog UI: table left comments, right preview area
        let preview = $("<div id='previewDiv' class='reviewDlgBox '>");
        let commentBar = $("<div  class='reviewDlgBox commentBarBox'>");
        let sort = $("<div class='commentOrder'>").appendTo(commentBar).html("Sort by: ");
        $("<div id='commentBarDiv'>").appendTo(commentBar);
        let ds = $("<button class='sortButton nav-link btn-xs'>Creation Date<div class='commentSort' /></button>").appendTo(sort).click(function () {
            that.sortCommentsBy(1);
        });
        $("<button class='sortButton  nav-link btn-xs'>Creator<div class='commentSort' /></button>").appendTo(sort).click(function () {
            that.sortCommentsBy(2);
        });
        $("<button class='sortButton  nav-link btn-xs'>Location<div class='commentSort' /></button>").appendTo(sort).click(function () {
            that.sortCommentsBy(3);
        });
        let table = $("<table style='width:100%'>");
        table.append($("<tr>").append($("<td class='commentBar'>").append(commentBar)).append($("<td class='commentDoc'>").append(preview)));
        preview.append(_matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.getSpinningWait("retrieving document..."));
        // show dialog
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.html("").append(table);
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.removeClass("dlg-v-scroll");
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.addClass("dlg-no-scroll");
        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog({
            autoOpen: true,
            title: "Add comments below",
            height: _globals__WEBPACK_IMPORTED_MODULE_0__.app.itemForm.height() * 0.9,
            width: $(document).width() * 0.9,
            modal: true,
            close: function () {
                // dlg is gone
            },
            open: function () {
                that.commentSortedBy = 1;
                that.showComments(comments);
                // start recording
                let height = _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.height();
                preview.height(height - 1);
                commentBar.height(height - 1);
            },
            resizeStop: function (event, ui) {
                _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.resizeDlgContent([]);
                let height = _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.height();
                preview.height(height - 1);
                commentBar.height(height - 1);
            },
            buttons: [{
                    text: 'OK',
                    class: 'btnDoIt',
                    click: function () {
                        that.settings.valueChanged();
                        let commentCount = (that.data.inlineComments ? that.data.inlineComments.length : 0);
                        $.each(that.annotationRecording, function (idx, ar) {
                            switch (ar.action) {
                                case "add":
                                    commentCount++;
                                    break;
                                case "delete":
                                    commentCount--;
                                    break;
                            }
                        });
                        $("#currentComments").html("" + commentCount);
                        _globals__WEBPACK_IMPORTED_MODULE_0__.app.dlgForm.dialog("close");
                    }
                }]
        }).resizeDlgContent([], false);
        if (this.reportBuffer) {
            // used cached html
            that.showReportWithComments(preview, comments, canEdit);
        }
        else {
            _globals__WEBPACK_IMPORTED_MODULE_0__.app.startCreateDocumentAsync(this.settings.item.id, { format: "html" }).done(function (result) {
                _businesslogic_index__WEBPACK_IMPORTED_MODULE_4__.mDHF.loadDocument(result.jobId, function (htmlDOM) {
                    that.reportBuffer = htmlDOM;
                    that.showReportWithComments(preview, comments, canEdit);
                });
            });
        }
    }
    showReportWithComments(preview, comments, canEdit) {
        preview.html("");
        preview.append(this.reportBuffer).annotator({
            readOnly: !canEdit
        });
        preview.data('annotator');
        preview.annotator("loadAnnotations", comments);
        preview.annotator('addPlugin', 'IO', true);
        preview.data("instance", this);
    }
    showComments(comments) {
        if (!comments || comments.length === 0) {
            $("#commentBarDiv").html("<span class='searchResult'>no comments</span>");
            return;
        }
        let preview = $("#previewDiv");
        $("#commentBarDiv").html("");
        $.each(comments, function (idx, comment) {
            let cui = $("<div class='commentUI'>").appendTo($("#commentBarDiv"));
            let tr = $("<div class='commenttr'>").appendTo(cui);
            if (comment.changedBy === _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser()) {
                tr.addClass("myComment");
            }
            $("<div class='commentUser'>").appendTo(tr).html(comment.changedBy);
            $("<div class='commentDate'>").appendTo(tr).html(_matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.DateTime.renderHumanDate(new Date(comment.changedAt), false));
            $("<div class='commentText'>").appendTo(cui).html(comment.text);
            cui.data("date", comment.changedAt);
            cui.data("id", comment.id);
            cui.data("user", comment.changedBy);
            cui.click(function (event) {
                $(".selectedAnnotation").removeClass("selectedAnnotation");
                $(".selectedComment").removeClass("selectedComment");
                let box = $(event.delegateTarget).addClass("selectedComment");
                let anno = $("[data-annotation-id='" + box.data("id") + "']");
                anno.addClass("selectedAnnotation");
                // pos absolut in box
                let offset = anno.offset().top - preview.offset().top;
                let visibleTop = preview.scrollTop();
                if (offset < 0) {
                    preview.scrollTop(visibleTop + offset);
                }
                else if (offset > preview.height() - 20) {
                    preview.scrollTop(visibleTop + (offset - preview.height() + 20));
                }
            });
        });
        this.sortCommentsBy(3);
    }
    sortCommentsBy(sortBy) {
        let that = this;
        if (sortBy) {
            this.commentSortedBy = (this.commentSortedBy === sortBy) ? -sortBy : sortBy;
        }
        $(".commentSortDown").removeClass("commentSortDown");
        $(".commentSortUp").removeClass("commentSortUp");
        $(".commentSort", $(".sortButton")[Math.abs(this.commentSortedBy) - 1]).addClass(this.commentSortedBy > 0 ? "commentSortDown" : "commentSortUp");
        $('.commentUI').toArray().sort(function (a, b) {
            let fv = "";
            let sv = "";
            let swap = false;
            switch (that.commentSortedBy) {
                case 1:
                    fv = $(a).data("date");
                    sv = $(b).data("date");
                    swap = fv > sv;
                    break;
                case -1:
                    fv = $(a).data("date");
                    sv = $(b).data("date");
                    swap = fv < sv;
                    break;
                case 2:
                    fv = $(a).data("user");
                    sv = $(b).data("user");
                    swap = fv > sv;
                    break;
                case -2:
                    fv = $(a).data("user");
                    sv = $(b).data("user");
                    swap = fv < sv;
                    break;
                case 3:
                    var f = $("[data-annotation-id='" + $(a).data("id") + "']").offset();
                    var s = $("[data-annotation-id='" + $(b).data("id") + "']").offset();
                    swap = f.top > s.top || (f.top === s.top && f.left > s.left);
                    break;
                case -3:
                    var f = $("[data-annotation-id='" + $(a).data("id") + "']").offset();
                    var s = $("[data-annotation-id='" + $(b).data("id") + "']").offset();
                    swap = f.top < s.top || (f.top === s.top && f.left < s.left);
            }
            // swap in UI
            if (swap) {
                // create marker element and insert it where obj1 is
                var temp = document.createElement("div");
                a.parentNode.insertBefore(temp, a);
                // move obj1 to right before obj2
                b.parentNode.insertBefore(a, b);
                // move obj2 to right before where obj1 used to be
                temp.parentNode.insertBefore(b, temp);
                // remove temporary marker node
                temp.parentNode.removeChild(temp);
            }
            // sort array
            return swap ? 1 : -1;
        });
    }
}
;
// allows user to add annotations / linked to some html
class HTMLAnnotator {
    constructor() {
    }
    // initialize options
    // public interface
    hasChanged() {
        return this.annotationsAfter && JSON.stringify(this.annotationsAfter) != JSON.stringify(this.annotationsBefore);
    }
    async getValueAsync() {
        return JSON.stringify(this.annotationsAfter);
    }
    destroy() {
    }
    resizeItem() {
    }
    /**
     * this function merges annotations done locally with the changes happened in parallel on the server.
     *
     * @param serverVersion these are the annotations last saved (by another user)
     * @param localBefore these are the ones which existed locally, before starting to edit
     * @param localAfter  these are the ones which existed locally when user saves
     * @returns
     */
    static mergeAnnotation(serverVersion, localBefore, localAfter) {
        if (!serverVersion)
            return localAfter; // currently no annotations on the server, so all local ones are to be taken
        if (!localAfter)
            return serverVersion; // locally were were no changes and there are no changes (so nothing got added or deleted) -> the server is still good
        if (localAfter == localBefore)
            return serverVersion; // nothing changed locally so the server is still good
        let server = JSON.parse(serverVersion).inlineComments;
        let after = JSON.parse(localAfter).inlineComments;
        if (localBefore) {
            // we need to update the annotations coming from the server:
            let before = JSON.parse(localBefore).inlineComments;
            let beforeId = before.map(function (comment) { return comment.id; });
            let afterId = after.map(function (comment) { return comment.id; });
            // update everything which CHANGED locally
            for (let comment of server) {
                if (beforeId.includes(comment.id) && afterId.includes(comment.id)) {
                    // possible it changed
                    let b = before.filter(c => c.id == comment.id)[0];
                    let a = after.filter(c => c.id == comment.id)[0];
                    if (JSON.stringify(a) != JSON.stringify(b)) {
                        // it did change
                        comment.changedAt = a.changedAt;
                        comment.changedBy = a.changedBy;
                        comment.highlights = a.highlights;
                        comment.quote = a.quote;
                        comment.ranges = a.ranges;
                        comment.text = a.text;
                    }
                }
            }
            // now  remove all annotations from the server if they were removed locally
            server = server.filter(function (comment) {
                // keep it IF it did not exist before or if it still exists
                return !beforeId.includes(comment.id) || afterId.includes(comment.id);
            });
            // now add all annotations which were added locally
            let added = after.filter(comment => !beforeId.includes(comment.id));
            if (added.length) {
                server = server.concat(added);
            }
        }
        else {
            // add all comments were created locally so they can just be added
            server = server.concat(after);
        }
        return JSON.stringify({ inlineComments: server });
    }
    static hasAnnotations(reviewComments) {
        if (!reviewComments)
            return false;
        return JSON.parse(reviewComments).inlineComments.length > 0;
    }
    // show dialog to allow user to comment on document
    showReviewDialog(canEdit, itemId, version, data, reviewComments, isSuperUser, onUpdate) {
        let that = this;
        let reviewItem = $("<div class=''>");
        this.annotationsBefore = reviewComments ? JSON.parse(reviewComments) : { inlineComments: [] };
        this.annotationsAfter = reviewComments ? JSON.parse(reviewComments) : { inlineComments: [] };
        // make dialog UI: table left comments, right preview area
        let preview = $("<div id='previewDiv' class='reviewDlgBox'>").append(reviewItem);
        let commentBar = $("<div  class='reviewDlgBox commentBarBox'>");
        let sort = $("<div  class='commentOrder'>").appendTo(commentBar).html("Sort by: ");
        $("<div id='commentBarDiv'>").appendTo(commentBar);
        $("<button class='sortButton btn btn-default btn-xs'>Creation Date<div class='commentSort' /></button>").appendTo(sort).click(function () {
            that.sortCommentsBy(1);
        });
        $("<button class='sortButton btn btn-default btn-xs'>Creator<div class='commentSort' /></button>").appendTo(sort).click(function () {
            that.sortCommentsBy(2);
        });
        $("<button class='sortButton btn btn-default btn-xs'>Location<div class='commentSort' /></button>").appendTo(sort).click(function () {
            that.sortCommentsBy(3);
        });
        let table = $("<table style='width:100%'>");
        table.append($("<tr>").append($("<td class='commentDoc'>").append(preview)).append($("<td class='commentBar'>").append(commentBar)));
        // show dialog
        let dlg = $("<div>").appendTo($("body"));
        _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.showDialogDes({
            container: dlg,
            content: table,
            title: "Add/Edit Comments",
            noXButton: true,
            noCloseOnEscape: true,
            autoResize: true,
            maximizeButton: true,
            buttons: [{
                    text: 'OK',
                    class: 'btnDoIt',
                    click: function () {
                        onUpdate();
                        dlg.dialog("close");
                    }
                }],
            onOpen: async () => {
                // start drawing item
                let itemForm = new _Components_ItemForm__WEBPACK_IMPORTED_MODULE_1__.ItemControl({
                    control: reviewItem,
                    controlState: _globals__WEBPACK_IMPORTED_MODULE_0__.ControlState.Review,
                    isHistory: version,
                    type: _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.Item.parseRef(itemId).type,
                    item: data,
                    isItem: true,
                    parameter: {
                        reviewMode: true
                    },
                    changed: function () {
                    }
                });
                await itemForm.load();
                that.commentSortedBy = 1;
                that.showCommentList(that.annotationsBefore.inlineComments);
                $(".panel-body-v-scroll", reviewItem).css("text-align", "initial");
                $(".panel-body-v-scroll", reviewItem).css("overflow-x", "auto");
                // start recording
                let height = dlg.height();
                preview.height(height - 1);
                commentBar.height(height - 1 - (commentBar.outerHeight() - commentBar.height())); // take padding into account
                // show annotations
                window.setTimeout(function () {
                    // give it some time to redraw / resize tables (itemForm resize, 299)
                    that.showHTMLWithComments(reviewItem, that.annotationsBefore.inlineComments, canEdit, isSuperUser);
                    // fix layout
                    $(".itemTitleBarNoToolsNoEdit", reviewItem).css("height", "");
                    $(".itemTitle", reviewItem).removeClass("pull-left").css("max-width", "100%");
                }, 301);
            },
            onResize: () => {
                dlg.resizeDlgContent([]);
                let height = dlg.height();
                preview.height(height - 1);
                commentBar.height(height - 1 - (commentBar.outerHeight() - commentBar.height())); // take padding into account
            },
            onClose: () => { dlg.remove(); }
        });
    }
    recordAnnotation(action, annotation) {
        // in remove the previous value for the annotation with this id
        this.annotationsAfter.inlineComments = this.annotationsAfter.inlineComments.filter(function (r) {
            return annotation.id != r.id;
        });
        // unless the action is a delete re-add it
        switch (action) {
            // re(add) it
            case "add":
            case "update":
                this.annotationsAfter.inlineComments.push(annotation);
                break;
        }
        // update ui
        this.showCommentList(this.annotationsAfter.inlineComments);
    }
    showHTMLWithComments(preview, comments, canEdit, isSuperUser) {
        let that = this;
        preview.annotator({
            readOnly: !canEdit
        });
        preview.data('annotator');
        preview.annotator("loadAnnotations", comments);
        preview.annotator('addPlugin', 'IO', isSuperUser);
        preview.data("instance", this);
        // sort comment by place in UI (wait a bit so that UI is ready)
        window.setTimeout(function () {
            that.sortCommentsBy(-3);
        }, 1000);
    }
    showCommentList(comments) {
        if (!comments || comments.length === 0) {
            $("#commentBarDiv").html("<span class='searchResult'>no comments</span>");
            return;
        }
        let preview = $("#previewDiv");
        $("#commentBarDiv").html("");
        $.each(comments, function (idx, comment) {
            let cui = $("<div class='commentUI'>").appendTo($("#commentBarDiv"));
            let tr = $("<div class='commenttr'>").appendTo(cui);
            if (comment.changedBy === _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser()) {
                tr.addClass("myComment");
            }
            $("<div class='commentUser'>").appendTo(tr).html(comment.changedBy);
            $("<div class='commentDate'>").appendTo(tr).html(_matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.UI.DateTime.renderHumanDate(new Date(comment.changedAt), false));
            $("<div class='commentText'>").appendTo(cui).html(comment.text);
            cui.data("date", comment.changedAt);
            cui.data("id", comment.id);
            cui.data("user", comment.changedBy);
            cui.click(function (event) {
                $(".selectedAnnotation").removeClass("selectedAnnotation");
                $(".selectedComment").removeClass("selectedComment");
                let box = $(event.delegateTarget).addClass("selectedComment");
                let anno = $("[data-annotation-id='" + box.data("id") + "']");
                anno.addClass("selectedAnnotation");
                // pos absolut in box
                let offset = anno.offset().top - preview.offset().top;
                let visibleTop = preview.scrollTop();
                if (offset < 0) {
                    preview.scrollTop(visibleTop + offset);
                }
                else if (offset > preview.height() - 20) {
                    preview.scrollTop(visibleTop + (offset - preview.height() + 20));
                }
            });
        });
    }
    sortCommentsBy(sortBy) {
        let that = this;
        if (sortBy) {
            this.commentSortedBy = (this.commentSortedBy === sortBy) ? -sortBy : sortBy;
        }
        $(".commentSortDown").removeClass("commentSortDown");
        $(".commentSortUp").removeClass("commentSortUp");
        $(".commentSort", $(".sortButton")[Math.abs(this.commentSortedBy) - 1]).addClass(this.commentSortedBy > 0 ? "commentSortDown" : "commentSortUp");
        let comments = $('.commentUI').toArray();
        comments.sort(function (a, b) {
            let fv = "";
            let sv = "";
            let swap = false;
            switch (that.commentSortedBy) {
                case 1:
                    fv = $(a).data("date");
                    sv = $(b).data("date");
                    swap = fv > sv;
                    break;
                case -1:
                    fv = $(a).data("date");
                    sv = $(b).data("date");
                    swap = fv < sv;
                    break;
                case 2:
                    fv = $(a).data("user");
                    sv = $(b).data("user");
                    swap = fv > sv;
                    break;
                case -2:
                    fv = $(a).data("user");
                    sv = $(b).data("user");
                    swap = fv < sv;
                    break;
                case 3:
                    var f = $("[data-annotation-id='" + $(a).data("id") + "']").offset();
                    var s = $("[data-annotation-id='" + $(b).data("id") + "']").offset();
                    swap = f.top > s.top || (f.top === s.top && f.left > s.left);
                    break;
                case -3:
                    var f = $("[data-annotation-id='" + $(a).data("id") + "']").offset();
                    var s = $("[data-annotation-id='" + $(b).data("id") + "']").offset();
                    swap = f.top < s.top || (f.top === s.top && f.left < s.left);
            }
            // sort array
            return swap ? -1 : 1;
        });
        // now repaint the UI, sorted
        //$("#commentBarDiv").html("");
        $.each(comments, function (idx, commentBox) {
            $("#commentBarDiv").append(commentBox);
        });
    }
}
;
Annotator.Plugin.IO = function (element, options) {
    Annotator.Plugin.superUser = options;
    Annotator.Plugin.apply(this, arguments);
};
function getAnnotation(obj) {
    var cp = _matrixlib__WEBPACK_IMPORTED_MODULE_3__.ml.JSON.clone(obj);
    cp.highlights = [];
    return cp;
}
$.extend(Annotator.Plugin.IO.prototype, new Annotator.Plugin(), {
    events: {},
    options: {},
    pluginInit: function () {
        let that = this;
        this.annotator
            .subscribe("annotationEditorShown", function (editor) {
            let leftBox = $(this).offset().left;
            let widthBox = $(this).width();
            let editorBox = $("#" + editor.fields[0].id);
            let leftEditor = editorBox.offset().left;
            let widthEditor = editorBox.width();
            let anchorX = leftEditor + 20;
            let anchorRight = editorBox.closest(".annotator-editor").hasClass("annotator-invert-x");
            if (anchorRight) {
                anchorX = leftEditor + widthEditor - 20;
            }
            // check if box needs to be flipped
            if (anchorX - leftBox < widthBox / 2) {
                // box is in left half and should open to right
                editorBox.closest(".annotator-editor").removeClass("annotator-invert-x");
                editorBox.css("max-width", (widthBox + leftBox - anchorX) + "px");
            }
            else {
                // right half: open to left
                editorBox.closest(".annotator-editor").addClass("annotator-invert-x");
                editorBox.css("max-width", (anchorX - leftBox) + "px");
            }
        })
            .subscribe("annotationViewerShown", function (annotation) {
            let widthPanel = $(this).width();
            let viewerPos = $(annotation.element).position().left;
            let viewerWidth = $(".annotator-widget", $(annotation.element)).width();
            if (viewerPos - viewerWidth < 10) {
                // make sure the viewer opens to the right
                $(annotation.element).removeClass("annotator-invert-x");
            }
            if (widthPanel - viewerWidth - 10 < viewerPos) {
                // make sure the viewer opens to the left
                $(annotation.element).addClass("annotator-invert-x");
            }
        })
            .subscribe("annotationCreated", function (annotation) {
            annotation.id = new Date().getTime().toString();
            annotation.createdBy = annotation.changedBy = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser();
            annotation.createdAt = annotation.changedAt = new Date().toISOString();
            $(annotation.highlights[0]).attr("data-annotation-id", annotation.id);
            $(this).data("instance").recordAnnotation("add", getAnnotation(annotation));
        })
            .subscribe("annotationUpdated", function (annotation) {
            annotation.changedBy = _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser();
            annotation.changedAt = new Date().toISOString();
            $(this).data("instance").recordAnnotation("update", getAnnotation(annotation));
        })
            .subscribe("annotationDeleted", function (annotation) {
            $(this).data("instance").recordAnnotation("delete", getAnnotation(annotation));
        }) // wait until all annotations are shown and sort the bar on the right
            .viewer.addField({
            load: function (field, annotation, controls) {
                $(field).html(annotation.createdBy).addClass("annotator-user");
                if (controls) {
                    if (!Annotator.Plugin.superUser && annotation.createdBy !== _globals__WEBPACK_IMPORTED_MODULE_0__.matrixSession.getUser()) {
                        controls.hideEdit();
                        return controls.hideDelete();
                    }
                }
            }
        });
    }
});


/***/ }),
/* 177 */,
/* 178 */,
/* 179 */,
/* 180 */,
/* 181 */,
/* 182 */,
/* 183 */,
/* 184 */,
/* 185 */,
/* 186 */,
/* 187 */,
/* 188 */,
/* 189 */,
/* 190 */,
/* 191 */,
/* 192 */,
/* 193 */,
/* 194 */,
/* 195 */,
/* 196 */,
/* 197 */,
/* 198 */,
/* 199 */,
/* 200 */,
/* 201 */,
/* 202 */,
/* 203 */,
/* 204 */,
/* 205 */,
/* 206 */,
/* 207 */,
/* 208 */,
/* 209 */,
/* 210 */,
/* 211 */,
/* 212 */,
/* 213 */,
/* 214 */,
/* 215 */,
/* 216 */,
/* 217 */,
/* 218 */,
/* 219 */,
/* 220 */,
/* 221 */,
/* 222 */,
/* 223 */,
/* 224 */,
/* 225 */,
/* 226 */,
/* 227 */,
/* 228 */,
/* 229 */,
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */,
/* 234 */,
/* 235 */,
/* 236 */,
/* 237 */,
/* 238 */,
/* 239 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ReviewControlColumns: () => (/* binding */ ReviewControlColumns),
/* harmony export */   ReviewControlImpl: () => (/* binding */ ReviewControlImpl),
/* harmony export */   ScheduleReview: () => (/* binding */ ScheduleReview),
/* harmony export */   initialize: () => (/* binding */ initialize)
/* harmony export */ });
/* harmony import */ var _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);
/* harmony import */ var _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _common_matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var _common_UI_Components_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(16);
/* harmony import */ var _common_UI_Controls_BaseControl__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(20);
/* harmony import */ var _common_UI_Controls_docReview__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(176);
/* harmony import */ var _common_UI_Tools_ItemHistoryView__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(29);
/* harmony import */ var _common_UI_Tools_ItemSelectionView__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(48);
/* harmony import */ var _ReviewContextFrame__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(51);
/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(5);
/* harmony import */ var _common_businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(24);















;
;
class ScheduleReview {
    constructor() {
        this.isDefault = true;
    }
    initItem(item, jui) {
    }
    initServerSettings() {
    }
    initProject() {
    }
    async getProjectPagesAsync() {
        return new Promise((resolve, reject) => {
            let that = this;
            let pages = [];
            if (!_globals__WEBPACK_IMPORTED_MODULE_9__.globalMatrix.ItemConfig.getTimeWarp()) {
                pages.push({
                    id: "REVIEWS",
                    title: "Review Overview",
                    folder: "DASHBOARDS",
                    order: 4000,
                    icon: "fal fa-stamp",
                    usesFilters: false,
                    render: (options) => that.renderReviewProjectPage(options)
                });
            }
            resolve(pages);
        });
    }
    supportsControl(fieldType) {
        return (fieldType === ScheduleReview.fieldType);
    }
    createControl(ctrl, options) {
        ctrl.reviewControl(options);
    }
    getFieldConfigOptions() {
        return [{
                id: ScheduleReview.fieldType,
                label: "Design Review Table [" + ScheduleReview.fieldType + "]",
                capabilities: {
                    canImportedFromExcel: true,
                    onlyOne: true,
                    canBeXtcPreset: false,
                    canBePublished: false,
                    canBeReadonly: true,
                    canHideInDoc: false,
                    needsConfiguration: true,
                    canBeUnsafe: true,
                }, class: "all", help: "table control to simplify design reviews"
            }];
    }
    addFieldSettings(configApp, project, pageId, fieldType, fieldParams, ui, paramChanged) {
        let that = this;
        if (fieldType != ScheduleReview.fieldType) {
            return;
        }
        if (!_globals__WEBPACK_IMPORTED_MODULE_9__.matrixSession.isReview()) {
            ui.html('<p style="color:red">Review module not licensed</p>');
            return;
        }
        // check if there's a review dropdown, if not create it
        let dd = _globals__WEBPACK_IMPORTED_MODULE_9__.globalMatrix.ItemConfig.getSettingJSON(ReviewControlImpl.reviewOptionsSetting);
        if (!dd || !dd.options) {
            // create the setting with default values!
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Logger.log("warn", "No configuration of dropdown with review results exists, creating it now....");
            dd = {
                options: [{
                        id: "inprogress", label: "in progress", class: "inprogress"
                    }, {
                        id: "fail", label: "Failed", class: "failed"
                    }, {
                        id: "pass", label: "Passed", class: "passed"
                    }],
                groups: [{
                        value: "passed", label: "passed"
                    }, {
                        value: "failed", label: "failed"
                    }, {
                        value: "inprogress", label: "in progress"
                    }]
            };
            configApp.setJSONProjectSettingAsync(project, {
                id: ReviewControlImpl.reviewOptionsSetting,
                value: dd
            }, pageId);
            _globals__WEBPACK_IMPORTED_MODULE_9__.globalMatrix.ItemConfig.setSettingJSON(ReviewControlImpl.reviewOptionsSetting, dd);
        }
        if (typeof fieldParams.showAnnotations == "undefined")
            fieldParams.showAnnotations = true;
        if (typeof fieldParams.showHistory == "undefined")
            fieldParams.showHistory = true;
        if (typeof fieldParams.showInline == "undefined")
            fieldParams.showInline = false;
        if (typeof fieldParams.showVersions == "undefined")
            fieldParams.showVersions = true;
        if (typeof fieldParams.showComments == "undefined")
            fieldParams.showComments = true;
        _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.SelectUserOrGroup.getAllUsersAndGroups().done((userDropdown) => {
            let grouping = [{ value: "groups", label: "groups" }, { value: "users", label: "users" }];
            // label options
            let lls = _globals__WEBPACK_IMPORTED_MODULE_9__.globalMatrix.ItemConfig.getSettingJSON("lockingLabels");
            let lockingLabels = (lls && lls.locks) ? lls.locks.map(function (lock) {
                return { id: lock.label, label: lock.label };
            }) : [];
            let lt = _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.CreateNewLabelTools();
            let allLabels = lt.getLabelDefinitions(null).map(function (ld) {
                return { id: ld.label, label: ld.label };
            });
            // drop down options
            let dds = _globals__WEBPACK_IMPORTED_MODULE_9__.globalMatrix.ItemConfig.getDropDowns();
            let allDropdowns = dds.map(function (dd) {
                return { id: dd.id, label: dd.label };
            });
            if (!fieldParams.doneLabel)
                fieldParams.doneLabel = { buttonName: "set progress labels" };
            if (!fieldParams.lockLabel)
                fieldParams.lockLabel = { buttonName: "set lock labels" };
            if (!fieldParams.mailTo)
                fieldParams.mailTo = { buttonName: "send mail" };
            if (!fieldParams.tasks)
                fieldParams.tasks = { buttonName: "create tasks" };
            if (!fieldParams.statusDropdown)
                fieldParams.statusDropdown = ReviewControlImpl.reviewOptionsSetting;
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addCheckbox(ui, "allow selecting user groups as reviewer", fieldParams, "allowSelectUserGroups", paramChanged);
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addCheckbox(ui, "show version number of reviewed items", fieldParams, "showVersions", paramChanged);
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addCheckbox(ui, "allow text annotations", fieldParams, "showAnnotations", paramChanged);
            let dummy = { method: "0" };
            if (fieldParams.showHistory) {
                dummy.method = "1";
                if (fieldParams.showHistoryOutOfDate)
                    dummy.method = "2";
                if (fieldParams.showHistoryOutOfDateBeforeDone)
                    dummy.method = "3";
            }
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addDropdownToValue(ui, "show history button", dummy, "method", [
                { id: "0", label: "don't show button" },
                { id: "1", label: "show button" },
                { id: "2", label: "show button - indicate if items have changed" },
                {
                    id: "3",
                    label: "show button - indicate if items have changed, unless review is done"
                }
            ], false, false, () => {
                switch (dummy.method) {
                    case "0":
                        fieldParams.showHistory = false;
                        fieldParams.showHistoryOutOfDate = false;
                        fieldParams.showHistoryOutOfDateBeforeDone = false;
                        break;
                    case "1":
                        fieldParams.showHistory = true;
                        fieldParams.showHistoryOutOfDate = false;
                        fieldParams.showHistoryOutOfDateBeforeDone = false;
                        break;
                    case "2":
                        fieldParams.showHistory = true;
                        fieldParams.showHistoryOutOfDate = true;
                        fieldParams.showHistoryOutOfDateBeforeDone = false;
                        break;
                    case "3":
                        fieldParams.showHistory = true;
                        fieldParams.showHistoryOutOfDate = false;
                        fieldParams.showHistoryOutOfDateBeforeDone = true;
                        break;
                }
                paramChanged();
            });
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addCheckbox(ui, "allow showing items in review table", fieldParams, "showInline", paramChanged);
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addCheckbox(ui, "auto enable context view if item cell is selected", fieldParams, "autoshowContext", paramChanged);
            let showC = _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addCheckbox(ui, "show comment column", fieldParams, "showComments", paramChanged);
            let confC = _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addCheckbox(ui, "append new comments at end of comment list", fieldParams, "appendComments", paramChanged);
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.enableIf(showC, true, [confC]);
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addDropdownToValue(ui, "review result dropdown", fieldParams, "statusDropdown", allDropdowns, false, true, paramChanged, "select dropdown definition");
            let cb = _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addCheckbox(ui, "allow to modify review content", fieldParams, "canBeModified", paramChanged);
            let mb = _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addDropdownToArray(ui, "who can modify (empty for all)", fieldParams, "canBeModifiedBy", userDropdown, grouping, 1000, false, true, paramChanged, "select user");
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.enableIf(cb, true, [mb]);
            mb.css("margin", "-12px 0 0 24px"); // indent dropdown under checkbox
            $("<h1>Connection to task management tool</h1>").appendTo(ui);
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addTextInput(ui, "button name", fieldParams.tasks, "buttonName", paramChanged);
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addDropdownToArray(ui, "users (empty for all)", fieldParams.tasks, "users", userDropdown, grouping, 1000, false, true, paramChanged, "select user");
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addTextInput(ui, "task plugin id", fieldParams.tasks, "taskPluginId", paramChanged);
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addTextInput(ui, "project id", fieldParams.tasks, "taskProject", paramChanged);
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addTextInput(ui, "ticket type", fieldParams.tasks, "taskIssueType", paramChanged);
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addTextInput(ui, "task description", fieldParams.tasks, "taskDescription", paramChanged);
            $("<h1>Actions to lock</h1>").appendTo(ui);
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addTextInput(ui, "button name", fieldParams.lockLabel, "buttonName", paramChanged);
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addDropdownToValue(ui, "lock label", fieldParams.lockLabel, "label", lockingLabels, false, true, paramChanged, lockingLabels.length ? "select lock - or keep empty to disable" : "no locks defined!");
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addDropdownToArray(ui, "users (empty for all)", fieldParams.lockLabel, "users", userDropdown, grouping, 1000, false, true, paramChanged, "select user");
            $("<h1>Action to set progress labels</h1>").appendTo(ui);
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addTextInput(ui, "button name", fieldParams.doneLabel, "buttonName", paramChanged);
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addDropdownToArray(ui, "users (empty for all)", fieldParams.doneLabel, "users", userDropdown, grouping, 1000, false, true, paramChanged, "select user");
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addDropdownToValue(ui, "passed items", fieldParams.doneLabel, "passedLabel", allLabels, false, true, paramChanged, "select labels - or keep empty to disable");
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addDropdownToValue(ui, "failed items", fieldParams.doneLabel, "failedLabel", allLabels, false, true, paramChanged, "select labels - or keep empty to disable");
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addDropdownToValue(ui, "to do items", fieldParams.doneLabel, "todoLabel", allLabels, false, true, paramChanged, "select labels - or keep empty to disable");
            $("<h1>Send Mail</h1>").appendTo(ui);
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addTextInput(ui, "button name", fieldParams.mailTo, "buttonName", paramChanged);
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addTextInput(ui, "subject", fieldParams.mailTo, "mailSubject", paramChanged);
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.addDropdownToArray(ui, "users (empty for all)", fieldParams.mailTo, "users", userDropdown, grouping, 1000, false, true, paramChanged, "select user");
            // enable the save button (at least first time the control is configured)
            paramChanged();
        });
    }
    updateMenu(ul) {
        return;
    }
    renderReviewProjectPage(options) {
        let that = this;
        if (options.controlState === _globals__WEBPACK_IMPORTED_MODULE_9__.ControlState.Print) {
            return;
        }
        document.title = "Reviews - " + _globals__WEBPACK_IMPORTED_MODULE_9__.matrixSession.getProject();
        options.control.html("");
        _globals__WEBPACK_IMPORTED_MODULE_9__.app.waitForMainTree(renderTabs);
        function renderTabs() {
            options.control.html("");
            // paint the tabs
            let container = $("<div class='panel-body-v-scroll' >").appendTo(options.control);
            if (!_globals__WEBPACK_IMPORTED_MODULE_9__.matrixSession.isReview()) {
                container.append($('<p style="color:red;margin:10px">Review module not licensed</p>'));
                return;
            }
            var tabpanel = $('<div role="tabpanel" class="tabpanel-container " style="padding:0px;">');
            container.append(tabpanel);
            let tabpanelul = $('<ul class="nav nav-tabs contextFrameTabs" role="tablist">');
            tabpanel.append(tabpanelul);
            let tabpanels = $('<div class="tab-content" style="height:' + ($("#itemDetails").height() - tabpanelul.height() - 70) + 'px">');
            tabpanel.append(tabpanels);
            let progress = $("<div>").appendTo(tabpanels).append(_common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.getSpinningWait("retrieving review info..."));
            tabpanelul.append('<li role="presentation" class="active"><a href="#MYREVIEWS"  role="tab" data-toggle="tab">My Reviews</a></li>');
            let myReviewPanel = $('<div role="tabpanel"  style="height:100%" class="tabpaneltab tab-pane active" id="MYREVIEWS" >');
            tabpanels.append(myReviewPanel);
            tabpanelul.append('<li role="presentation"><a href="#ALLREVIEWS"  role="tab" data-toggle="tab">All Reviews</a></li>');
            let allReviewPanel = $('<div role="tabpanel"  style="height:100%" class="tabpaneltab tab-pane" id="ALLREVIEWS" >');
            tabpanels.append(allReviewPanel);
            tabpanelul.append('<li role="presentation"><a href="#ALLITEMS"  role="tab" data-toggle="tab">Reviews Per Item</a></li>');
            let itemReviewPanel = $('<div role="tabpanel"  style="height:100%" class="tabpaneltab tab-pane" id="ALLITEMS" >');
            tabpanels.append(itemReviewPanel);
            // all categories with a review control
            let catsWithReview = _globals__WEBPACK_IMPORTED_MODULE_9__.globalMatrix.ItemConfig.getFieldsOfType("reviewControl").map(function (rcs) {
                return "category=" + rcs.category;
            });
            if (!catsWithReview.length) {
                progress.remove();
                myReviewPanel.html("There are no categories with review fields in this project.");
                allReviewPanel.html("There are no categories with review fields in this project.");
                return;
            }
            _globals__WEBPACK_IMPORTED_MODULE_9__.app.getNeedlesAsync(catsWithReview.join(" OR "), false, false, "*", false, true).done((reviews) => {
                that.renderReviews(myReviewPanel, reviews, true);
                that.renderReviews(allReviewPanel, reviews, false);
                that.renderItems(itemReviewPanel, catsWithReview, reviews);
                progress.remove();
            });
        }
    }
    // project pages show in the top in Projects, Reports and Documents
    renderReviews(control, needles, onlyMine) {
        let that = this;
        let container = $("<div class='panel-body-v-scroll' style='padding: 0 12px;'>").appendTo(control);
        if (onlyMine) {
            $("<h2>My Reviews</h2>").appendTo(container);
            // only show reviews for me and the stats for me
        }
        else {
            $("<h2>Overview Reviews</h2>").appendTo(container);
        }
        let filters = $("<div>").appendTo(container);
        $('<div class="alignHorizontal" ><div class="checkbox" ><label><input type="checkbox" data-hide="review_open" checked >show open</label></div></div>').appendTo(filters);
        $('<div class="alignHorizontal" ><div class="checkbox" ><label><input type="checkbox" data-hide="review_done" checked >show done</label></div></div>').appendTo(filters);
        $("input", container).change(function () {
            $.each($("input", container), function (idx, input) {
                if ($(input).data("hide")) {
                    let sh = $("." + $(input).data("hide"), container);
                    if ($(input).prop("checked")) {
                        sh.show();
                        sh.removeClass("hideCopy");
                    }
                    else {
                        sh.hide();
                        sh.addClass("hideCopy");
                    }
                }
            });
        });
        let details = $("<ul>").appendTo(container);
        _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.copyBuffer(filters, "copy to clipboard", details, control);
        let shown = 0;
        $.each(needles, function (idx, needle) {
            let fieldId = _globals__WEBPACK_IMPORTED_MODULE_9__.globalMatrix.ItemConfig.getFieldsOfType("reviewControl", _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(needle.id).type)[0].field.id;
            let tableData = that.getReviewTable(needle);
            if (tableData.length == 0)
                return;
            let reviewUsers = ReviewControlImpl.getReviewers(tableData);
            if (onlyMine && reviewUsers.indexOf(_globals__WEBPACK_IMPORTED_MODULE_9__.matrixSession.getUser()) == -1)
                return; // review does not concern me
            let itemCount = tableData.length;
            let columns = Object.keys(tableData[0]);
            const handler = _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.FieldHandlerFactory.CreateHandler(_globals__WEBPACK_IMPORTED_MODULE_9__.globalMatrix.ItemConfig, _common_businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_10__.FieldDescriptions.Field_reviewControl, ReviewControlImpl.defaultOptions);
            let ctrl = new ReviewControlImpl($("<div>"), handler);
            let todos = ctrl.getItemsToDoByUser(fieldId, tableData);
            // figure out how many reviews have to be done.
            let userCount = onlyMine ? 1 : reviewUsers.length; // if it's only about mine, don't care about other users
            let total = itemCount * userCount;
            let stillTodo = 0;
            if (onlyMine) {
                stillTodo = todos[_globals__WEBPACK_IMPORTED_MODULE_9__.matrixSession.getUser()] ? todos[_globals__WEBPACK_IMPORTED_MODULE_9__.matrixSession.getUser()].length : 0;
            }
            else {
                // add up all the todo's for all users
                $.each(columns, function (cidx, col) {
                    if (todos[col]) {
                        stillTodo += todos[col].length;
                    }
                });
            }
            shown++;
            if (stillTodo) {
                details.append("<li class='review_open'><b>" + that.getNeedleRef(needle) + "</b> " + Math.floor((total - stillTodo) * 100 / total) + "% done</li>");
            }
            else {
                details.append("<li class='review_done'><b style='text-decoration: line-through'>" + that.getNeedleRef(needle) + "</b>  done</li>");
            }
        });
        if (!shown) {
            details.append("<li class=''><b>no reviews yet</b></li>");
        }
        details.highlightReferences();
    }
    getNeedleRef(needle) {
        return this.getItemRef(_common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(needle.id).id);
    }
    getItemRef(id) {
        return "<span class='hideCopy'>" + id + "!</span><span class='replaceCopy' data-with='" + id + "!'></span>";
    }
    renderItems(control, catsWithReview, needles) {
        let that = this;
        let cp = $("<div class='panel-body-v-scroll' style='padding-top:10px'>").appendTo(control);
        let h1 = $("<h1 class='hideCopy'>").html("Status by item").appendTo(cp);
        _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.copyBuffer(h1, "copy to clipboard", cp, cp);
        let allCats = _globals__WEBPACK_IMPORTED_MODULE_9__.globalMatrix.ItemConfig.getCategories(true).filter(function (cat) {
            return cat != "REPORT" && catsWithReview.indexOf(cat) == -1;
        });
        let cat = localStorage.getItem(_globals__WEBPACK_IMPORTED_MODULE_9__.matrixSession.getProject() + "_lastReviewDashbordCat");
        cat = cat ? cat : allCats[0];
        let dropdown = $(`<span class="hideCopy dropdown" style="float:right; margin-right:12px">
        <button class="btn btn-xs dropdown-toggle" type="button" data-toggle="dropdown">
            <span id="selectedCat" >${cat}</span>&nbsp;
            <span class="caret"></span>
        </button>
        <ul class="dropdown-menu dropdown-menu-right">
        ${allCats.map(c => `<li class="catselect" data-cat="${c}"><a href="javascript:void(0)">${c}</a></li>`).join("\n")}
        </ul>
        </span>`).appendTo(h1);
        // build a list with all items, for each item know in which reviews it was passed, failed, todo
        let reviewAnalysis = {};
        $.each(needles, function (idx, needle) {
            that.analyzeReview(needle, reviewAnalysis);
        });
        let container = $("<div>").appendTo(cp);
        this.renderItemsCat(container, cat, reviewAnalysis);
        $(".catselect", dropdown).click((event) => {
            let selectedCat = $(event.delegateTarget).data("cat");
            localStorage.setItem(_globals__WEBPACK_IMPORTED_MODULE_9__.matrixSession.getProject() + "_lastReviewDashbordCat", selectedCat);
            $("#selectedCat", dropdown).html(selectedCat);
            that.renderItemsCat(container, selectedCat, reviewAnalysis);
        });
    }
    ;
    renderItemsCat(container, cat, reviewAnalysis) {
        let that = this;
        container.html("");
        // prepare table
        let table = $("<table class='table table-bordered'>").appendTo(container);
        let head = $("<thead>").appendTo(table);
        let trh = $("<tr>").appendTo(head);
        $("<th>").html("Item").appendTo(trh);
        let rc = $("<th>").html("Reviews").appendTo(trh);
        $('<div class="checkbox hideCopy" ><label><input type="checkbox" data-hide="notReviewed" checked >Show not reviewed items</label></div>').appendTo(rc);
        let rsc = $("<th>").html("Review Status").appendTo(trh);
        $('<div class="checkbox hideCopy" ><label><input type="checkbox" data-hide="todo" checked >todo</label></div>').appendTo(rsc);
        $('<div class="checkbox hideCopy" ><label><input type="checkbox" data-hide="failed" checked >failed</label></div>').appendTo(rsc);
        $('<div class="checkbox hideCopy" ><label><input type="checkbox" data-hide="passed" checked >passed</label></div>').appendTo(rsc);
        let rwd = $("<th>").html("Review Date").appendTo(trh);
        $('<div class="checkbox hideCopy" ><label><input type="checkbox" data-hide="allReviews" checked >Show all but last reviews</label></div>').appendTo(rwd);
        $('<div class="checkbox hideCopy" ><label><input type="checkbox" data-hide="lastReviews" checked >Show last reviews</label></div>').appendTo(rwd);
        let tbody = $("<tbody>").appendTo(table);
        let hasContent = false;
        let itemsInCat = _globals__WEBPACK_IMPORTED_MODULE_9__.app.getChildrenIdsRec("F-" + cat + "-1").sort(function (a, b) {
            return _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(a).number - _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(b).number;
        });
        $.each(itemsInCat, function (itemIdx, item) {
            // add a row for item
            let tdItem;
            if (reviewAnalysis[item]) {
                // item was in some reviews
                let reviewCount = reviewAnalysis[item].all.length;
                // check if all have the same status (in that case the filter needs to remove all)
                let overallStatus = (reviewAnalysis[item].passed.length == reviewCount) ? "passed" : (reviewAnalysis[item].failed.length == reviewCount) ? "failed" : (reviewAnalysis[item].todo.length == reviewCount) ? "todo" : "";
                for (let idx = 0; idx < reviewCount; idx++) {
                    // a new row for this review
                    hasContent = true;
                    let tr = $(`<tr class='item_${cat} wasReviewed'>`).appendTo(tbody);
                    if (overallStatus) {
                        tr.addClass(overallStatus);
                    }
                    if (idx == 0) {
                        // add a first column with item id
                        tdItem = $(`<td rowspan=${reviewAnalysis[item].all.length}>${that.getItemRef(item)}</td>`).appendTo(tr);
                    }
                    // now add review results
                    let needle = reviewAnalysis[item].all[idx];
                    let passed = reviewAnalysis[item].passed.indexOf(needle.itemOrFolderRef) != -1;
                    let failed = reviewAnalysis[item].failed.indexOf(needle.itemOrFolderRef) != -1;
                    // set the text to passed, failed, to do
                    let text = passed ? "passed" : failed ? "failed" : "to do";
                    let statusClass = passed ? "passed" : failed ? "failed" : "todo";
                    let td1 = $("<td class='" + statusClass + "'>" + that.getNeedleRef(needle) + "</td>").appendTo(tr);
                    let td2 = $("<td class='" + statusClass + "'>" + text + "</td>").appendTo(tr);
                    let td3 = $("<td class='" + statusClass + "'>" + needle.lastModDate + "</td>").appendTo(tr);
                    if (idx != reviewCount - 1) {
                        // not the last review so we mark it
                        td1.addClass("allReviews");
                        td2.addClass("allReviews");
                        td3.addClass("allReviews");
                    }
                }
            }
            else {
                let tr = $("<tr class='item_" + cat + " notReviewed'>").appendTo(tbody);
                $("<td>" + that.getItemRef(item) + "</td>").appendTo(tr);
                $("<td colspan='3'>not reviewed</td>").appendTo(tr);
            }
        });
        if (hasContent) {
            table.highlightReferences();
            $("input", container).change(function () {
                $("body").css("cursor", "progress");
                window.setTimeout(() => {
                    that.showHide(container);
                    $("body").css("cursor", "default");
                }, 1);
            });
        }
        else {
            container.html(`<p>There are no reviewed items in the category ${cat}</p>`);
        }
    }
    showHide(container) {
        $(".hideCopy", container).show().removeClass("hideCopy");
        $.each($("input", container), function (idx, input) {
            if ($(input).data("hide") && !$(input).prop("checked")) {
                $("." + $(input).data("hide"), container).hide().addClass("hideCopy");
            }
        });
    }
    // go through a review and figure which items were passed or failed...
    analyzeReview(needle, reviewAnalysis) {
        let that = this;
        let tableData = that.getReviewTable(needle);
        if (tableData.length == 0)
            return;
        let fieldId = _globals__WEBPACK_IMPORTED_MODULE_9__.globalMatrix.ItemConfig.getFieldsOfType("reviewControl", _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(needle.id).type)[0].field.id;
        let reviewId = needle.id;
        let passedItems = [];
        let failedItems = [];
        let todoItems = [];
        ReviewControlImpl.analyzeReview(fieldId, tableData, passedItems, failedItems, todoItems);
        for (let item of passedItems) {
            if (!reviewAnalysis[item]) {
                reviewAnalysis[item] = { passed: [], failed: [], todo: [], all: [] };
            }
            reviewAnalysis[item].passed.push(reviewId);
            reviewAnalysis[item].all.push(needle);
        }
        for (let item of failedItems) {
            if (!reviewAnalysis[item]) {
                reviewAnalysis[item] = { passed: [], failed: [], todo: [], all: [] };
            }
            reviewAnalysis[item].failed.push(reviewId);
            reviewAnalysis[item].all.push(needle);
        }
        for (let item of todoItems) {
            if (!reviewAnalysis[item]) {
                reviewAnalysis[item] = { passed: [], failed: [], todo: [], all: [] };
            }
            reviewAnalysis[item].todo.push(reviewId);
            reviewAnalysis[item].all.push(needle);
        }
    }
    getReviewTable(needle) {
        let tableData = [];
        let fieldId = _globals__WEBPACK_IMPORTED_MODULE_9__.globalMatrix.ItemConfig.getFieldsOfType("reviewControl", _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(needle.id).type)[0].field.id;
        if (needle[fieldId]) {
            let rawValue = needle[fieldId];
            let val = (rawValue ? JSON.parse(rawValue) : { reviewTable: [] });
            if (!val.reviewtable) { // review items which have never been scheduled
                val.reviewtable = [];
            }
            tableData = val.reviewtable;
        }
        return tableData;
    }
}
ScheduleReview.fieldType = _common_businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_10__.FieldDescriptions.Field_reviewControl;
function initialize() {
    _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.plugins.register(new ScheduleReview());
}
/*
interface JQuery {
    reviewControl?: ( options:IReviewControlOptions )=> JQuery;
}
*/
$.fn.reviewControl = function (options) {
    if (!options.fieldHandler) {
        //No need for a field handler here, so let's create a dummy one.
        options.fieldHandler = _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.FieldHandlerFactory.CreateHandler(_globals__WEBPACK_IMPORTED_MODULE_9__.globalMatrix.ItemConfig, _common_businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_10__.FieldDescriptions.Field_reviewControl, options);
        options.fieldHandler.initData(options.fieldValue);
    }
    let baseControl = new ReviewControlImpl(this, options.fieldHandler);
    this.getController = () => {
        return baseControl;
    };
    baseControl.init(options);
    return this;
};
class ReviewControlColumns {
}
ReviewControlColumns.COL_COMMENT_LOG = "commentlog";
ReviewControlColumns.COL_ITEM = "reviewitem";
ReviewControlColumns.COL_VERSION = "_version";
ReviewControlColumns.COL_ANNOTATIONS = "_annotation";
class ReviewControlImpl extends _common_UI_Controls_BaseControl__WEBPACK_IMPORTED_MODULE_4__.BaseControl {
    constructor(control, fieldHandler) {
        super(control, fieldHandler);
        this.expanded = [];
        this.expandDetails = [];
        this.readonly = false;
        this.texts = {};
    }
    init(options) {
        this.texts = {};
        this.settings = _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.JSON.mergeOptions(ReviewControlImpl.defaultOptions, options);
        if (this.settings.parameter.hide_UI) {
            this._root.hide();
        }
        if (typeof this.settings.parameter.showComments == "undefined") {
            this.settings.parameter.showComments = true;
        }
        this.init2();
        this.needsLatest = true;
    }
    updateControl() {
        this.destroy();
        this._root.html("");
        this.init2();
    }
    highlightReferences() {
        // Only in cell, not in header
        $(this._root).find(".grid-canvas").highlightReferences();
    }
    init2() {
        let that = this;
        if (!_globals__WEBPACK_IMPORTED_MODULE_9__.matrixSession.isReview()) {
            this._root.html('<p style="color:red">Review module not licensed</p>');
            return;
        }
        let dd = ReviewControlImpl.getDropdownParams(this.settings.fieldId);
        if (!dd || !dd.options) {
            $('<span class="baseControlHelp">').appendTo(this._root).html(this.settings.help);
            $('<div><span class="warnNoEdit" style="">no valid configuration</span></div>').appendTo(this._root);
            return;
        }
        this.readonly = this.forceNewTable || (this.settings.parameter && this.settings.parameter.readonly) || !this.settings.canEdit ||
            this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_9__.ControlState.Print ||
            this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_9__.ControlState.DialogEdit ||
            this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_9__.ControlState.Tooltip ||
            this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_9__.ControlState.HistoryView ||
            this.settings.controlState === _globals__WEBPACK_IMPORTED_MODULE_9__.ControlState.DialogCreate;
        this._root.addClass("reviewControl");
        let actions = $("<div class='controlContainer'>").appendTo(this._root);
        if (!this.settings.fieldValue || this.settings.fieldValue == "{}") {
            if (!this.readonly) {
                that.renderReviewInput(this._root, false);
            }
        }
        else {
            let tableData = JSON.parse(this.settings.fieldValue).reviewtable;
            if (!this.readonly) {
                let hasTools = false;
                $('<div class="baseControlHelp">' + this.settings.help + ' - Review Tools</div>').appendTo(actions);
                let buttons = $("<div class='baseControl rowFlex'>").appendTo(actions);
                // create button to set a locking label
                if (this.settings.parameter.canBeModified) {
                    hasTools = true;
                    let enabled = (!this.settings.parameter.canBeModifiedBy || this.settings.parameter.canBeModifiedBy.length == 0 ||
                        _globals__WEBPACK_IMPORTED_MODULE_9__.matrixSession.amIAllowedUser(this.settings.parameter.canBeModifiedBy));
                    let changeReviewContainer = $("<span>").appendTo(buttons);
                    $('<button id="changeReview" class="buttonCreateSelect btn btn-success" ' + (enabled ? "" : "disabled") + '>Edit users / items</button>').click(function () {
                        that.editReview();
                    }).appendTo(changeReviewContainer);
                }
                // create button to set a locking label
                if (this.settings.parameter.lockLabel && this.settings.parameter.lockLabel.label) {
                    hasTools = true;
                    let enabled = !this.settings.parameter.lockLabel.users || this.settings.parameter.lockLabel.users.length == 0 ||
                        _globals__WEBPACK_IMPORTED_MODULE_9__.matrixSession.amIAllowedUser(this.settings.parameter.lockLabel.users);
                    $('<button class="buttonCreateSelect btn btn-success" ' + (enabled ? "" : "disabled") + '>' + that.settings.parameter.lockLabel.buttonName + '</button>').click(function () {
                        that.lockItems(that.getItems());
                    }).appendTo(buttons);
                }
                // create button to set a review done label
                if (this.settings.parameter.doneLabel && (this.settings.parameter.doneLabel.failedLabel || this.settings.parameter.doneLabel.todoLabel || this.settings.parameter.doneLabel.passedLabel)) {
                    hasTools = true;
                    let enabled = !this.settings.parameter.doneLabel.users || this.settings.parameter.doneLabel.users.length == 0 ||
                        _globals__WEBPACK_IMPORTED_MODULE_9__.matrixSession.amIAllowedUser(this.settings.parameter.doneLabel.users);
                    $('<button class="buttonCreateSelect btn btn-default" ' + (enabled ? "" : "disabled") + '>' + that.settings.parameter.doneLabel.buttonName + '</button>').click(function () {
                        that.setItemReviewStatusLabel(that.getItems());
                    }).appendTo(buttons);
                }
                // create button to make new task using ticketing plugin
                if (this.settings.parameter.tasks && this.settings.parameter.tasks.taskPluginId) {
                    hasTools = true;
                    let enabled = !this.settings.parameter.tasks.users || this.settings.parameter.tasks.users.length == 0 ||
                        _globals__WEBPACK_IMPORTED_MODULE_9__.matrixSession.amIAllowedUser(this.settings.parameter.tasks.users);
                    $('<button class="buttonCreateSelect btn btn-default" ' + (enabled ? "" : "disabled") + '>' + that.settings.parameter.tasks.buttonName + '</button>').click(function () {
                        $.each($("li", _globals__WEBPACK_IMPORTED_MODULE_9__.matrixApplicationUI.lastMainItemForm.getControls("tasksControl")[0]), function (lidx, li) {
                            if ($(li).text() == "no tasks linked")
                                $(li).remove();
                        });
                        that.createTasks(ReviewControlImpl.getReviewers(tableData), [that.settings.item.id]).done(function () {
                            var ctrls = _globals__WEBPACK_IMPORTED_MODULE_9__.matrixApplicationUI.lastMainItemForm.getControls("tasksControl");
                            $.each(ctrls, function (idx, ctrl) {
                                _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.Tasks.showTasks(_globals__WEBPACK_IMPORTED_MODULE_9__.app.getCurrentItemId(), ctrl, !that.readonly);
                            });
                        });
                    }).appendTo(buttons);
                }
                // create button to send reminder email
                if (this.settings.parameter.mailTo) {
                    hasTools = true;
                    let enabled = !this.settings.parameter.mailTo.users || this.settings.parameter.mailTo.users.length == 0 ||
                        _globals__WEBPACK_IMPORTED_MODULE_9__.matrixSession.amIAllowedUser(this.settings.parameter.mailTo.users);
                    $('<button class="buttonCreateSelect btn btn-default" ' + (enabled ? "" : "disabled") + '>' + that.settings.parameter.mailTo.buttonName + '</button>').click(function () {
                        that.sendReminder();
                    }).appendTo(buttons);
                }
                if (!hasTools) {
                    actions.hide();
                }
            }
            let container = $("<div>").appendTo(this._root);
            this.showTable(container);
            if (this.settings.parameter.createDoc && this.settings.parameter.createDoc.template) {
                $('<button class="buttonCreateSelect btn btn-default" style="margin-bottom:12px;">Create Document</button>').click(function () {
                    that.copyDetails();
                }).appendTo(this._root);
            }
        }
    }
    copyDetails() {
        let that = this;
        let tableData = JSON.parse(this.settings.fieldValue).reviewtable;
        let details = $("<div style='position:absolute;top:0;left:-10000px;width:1000px;height:100%'>").appendTo($("body"));
        let render = $("<div>").appendTo(details);
        _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.BlockingProgress.Init([{ name: "Generating document" }]);
        this.copyDetail(render, tableData, 0).done(function () {
            // in case there's something sections to hide / hide them (including  possible comments)
            if (that.settings.parameter.createDoc.hide) {
                for (let sec of that.settings.parameter.createDoc.hide) {
                    $(".ft_" + sec, details).remove();
                }
            }
            // remove bad headings
            $("div.itemTitle", details).each((idx, itemTitle) => {
                let id = $(".refIdHyper", $(itemTitle)).text();
                let newId = $("<h2>" + id + "!</h2>");
                that.copyAnnotations($(itemTitle), newId);
                $(itemTitle).replaceWith(newId);
            });
            // remove other bad links
            $(".refIdHyper", details).each((idx, itemId) => {
                let id = $(itemId).text();
                let newId = $("<span>" + id + "!</span>");
                let parent = $(itemId).closest("a").parent();
                that.copyAnnotations(parent, newId);
                parent.replaceWith(newId);
            });
            $(".baseControlHelp").each((i, bch) => {
                $(bch).removeClass("baseControlHelp").attr("style", "font-size: 12px; font-weight: 700;color: #a9b3b8;text-transform: uppercase;letter-spacing: 1px;left: 0!important;margin:24px 0;");
            });
            // make annotater headings printable
            $(".annotator-hl", details).css("background-color", "aliceblue");
            // remove annotater tools
            $(".annotator-outer", details).remove();
            $(".annotator-adder", details).remove();
            $(".slickTable", details).each((idx, table) => that.replaceSlickTables($(table)));
            that.fixInputs(details);
            // final cleanup (get rid of lot's of markup)
            let panels = $(".panel-body-v-scroll", details);
            panels.each((i, old) => {
                let item = $("<div>");
                $(".itemTitleBarNoToolsNoEdit > h2", $(old)).appendTo(item);
                $(".dialog-body", $(old)).children().each((j, field) => {
                    $(field).removeAttr("class"); // remove classes (not useful)
                    $(field).removeAttr("style"); // remove margin-right: 15px; margin-bottom: 15px;
                    // maybe we add a class to render nicer
                    $(".baseControl", $(field)).removeAttr("class"); // not needed
                    $(field).appendTo(item);
                });
                $(old).parent().parent().replaceWith(item);
            });
            _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.mDHF.preparePasteBuffer(null);
            _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.mDHF.copyTemplate([that.settings.parameter.createDoc.template], 0, true).done(() => {
                that.createNewDoc(that.settings.parameter.createDoc.pasteTo ? that.settings.parameter.createDoc.pasteTo : "F-DOC-1", details.html()).done(() => {
                    _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.BlockingProgress.SetProgress(0, 1);
                    details.remove();
                    _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showSuccess("Created Review Document");
                });
            });
        });
    }
    // convert input fields into spans (otherwise they'll be rendered empty)
    fixInputs(details) {
        $("input[type='text']", details).each((i, inp) => {
            $(inp).replaceWith("<span>" + $(inp).val() + "</span>");
        });
        $("select", details).each((i, inp) => {
            $(inp).replaceWith("<span> " + $('option:selected', $(inp)).text() + "</span>");
        });
        $("input[type='checkbox']:checked", details).each((i, inp) => {
            $(inp).replaceWith("<span>X </span>");
        });
        $("input[type='checkbox']", details).each((i, inp) => {
            $(inp).replaceWith("<span>_ </span>");
        });
        $("textarea", details).each((i, inp) => {
            $(inp).replaceWith($("<span style='white-space: pre;'>").html($(inp).val()));
        });
    }
    // replace div based table with a real table
    replaceSlickTables(old) {
        let that = this;
        let table = $("<table class='table table-bordered'>");
        let tr = $("<tr>").appendTo($("<thead>").appendTo(table));
        // copy the headers
        $(".slick-header .slick-header-column", old).each((i, header) => {
            $("<td>").appendTo(tr).html($("span", $(header)).html());
        });
        let body = $("<tbody>").appendTo(table);
        $(".slick-row", old).each((i, row) => {
            let r = $("<tr>").appendTo(body);
            $(".slick-cell", $(row)).each((j, cell) => {
                $("<td>").appendTo(r).html($(cell).html());
            });
        });
        old.replaceWith(table);
    }
    copyAnnotations(fromNode, toNode) {
        // find annotations inside and move the to smart link
        $(".annPO", fromNode).each((ai, an) => {
            toNode.append(an);
        });
    }
    createNewDoc(folderId, reviewText) {
        let res = $.Deferred();
        let that = this;
        let currentBufferString = localStorage.getItem(_common_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.mDHF.COPY_PASTE_BUFFER);
        let pasteBuffer = JSON.parse(currentBufferString).items[0];
        let targetCategory = _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(folderId).type;
        let sourceref = 0;
        let srfs = _globals__WEBPACK_IMPORTED_MODULE_9__.globalMatrix.ItemConfig.getFieldsOfType("sourceref", targetCategory);
        if (srfs.length) {
            sourceref = srfs.length ? srfs[0].field.id : 0;
        }
        // prepare the item to be created
        let itemJson = {};
        itemJson.title = pasteBuffer.title + " " + _globals__WEBPACK_IMPORTED_MODULE_9__.app.getCurrentItemId();
        if (sourceref) {
            itemJson[sourceref] = pasteBuffer.sourceProject + "/" + pasteBuffer.sourceItem;
        }
        let fields = _globals__WEBPACK_IMPORTED_MODULE_9__.globalMatrix.ItemConfig.getItemConfiguration(targetCategory).fieldList;
        $.each(fields, function (fidx, f) {
            for (var idx = 0; idx < pasteBuffer.item.length; idx++) {
                if (pasteBuffer.item[idx].def.label === f.label && sourceref != f.id) {
                    itemJson[f.id] = pasteBuffer.item[idx].val;
                }
            }
        });
        let textField = pasteBuffer.item.filter(f => f.def.fieldType == _common_businesslogic_FieldDescriptions__WEBPACK_IMPORTED_MODULE_10__.FieldDescriptions.Field_dhf && f.val && JSON.parse(f.val) && JSON.parse(f.val).name.toLowerCase() == that.settings.parameter.createDoc.section.toLowerCase());
        if (textField.length == 1) {
            let val = JSON.parse(textField[0].val);
            val.fieldValue = reviewText;
            itemJson[textField[0].def.id] = JSON.stringify(val);
        }
        _globals__WEBPACK_IMPORTED_MODULE_9__.app.createItemOfTypeAsync(targetCategory, itemJson, "review document creation", folderId).done(function (result) {
            res.resolve();
            _globals__WEBPACK_IMPORTED_MODULE_9__.app.treeSelectionChangeAsync(result.item.id);
        }).fail(function (error) {
        });
        return res;
    }
    ;
    copyDetail(details, tableData, rowIdx) {
        let res = $.Deferred();
        let that = this;
        if (rowIdx >= tableData.length) {
            res.resolve();
            return res;
        }
        _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.BlockingProgress.SetProgress(0, 100 * (rowIdx + 1) / tableData.length);
        if (rowIdx) {
            $("<hr style='margin:30px 0'>").appendTo(details);
        }
        let reviewItem = $("<div>").appendTo(details);
        let reviewComments = $("<div style='margin-top:15px;'>").appendTo(details);
        let currentAnnotations = that.reviewTable.getController().getHiddenCell(rowIdx, ReviewControlColumns.COL_ANNOTATIONS);
        let annotations = currentAnnotations ? JSON.parse(currentAnnotations).inlineComments : [];
        reviewComments.append(`<span class="baseControlHelp">Inline Comments for ${tableData[rowIdx].reviewitem}</span>`);
        let body = $("<tbody>");
        if (annotations.length) {
            $("<table class='annTa' style='width:100%'>").appendTo(reviewComments)
                .append("<thead style='font-weight: 700;'><tr><th>Pos</th><th>User</th><th>Comment</th></tr></thead>")
                .append(body);
        }
        else {
            $("<p class='annNC'>no inline annotations for this item</p>").appendTo(reviewComments);
        }
        let row = tableData[rowIdx];
        let itemId = ReviewControlImpl.getItem(row);
        let version = row[ReviewControlColumns.COL_VERSION] ? Number(row[ReviewControlColumns.COL_VERSION]) : undefined;
        _globals__WEBPACK_IMPORTED_MODULE_9__.app.getItemAsync(itemId, version).done(async function (data) {
            let itemC = new _common_UI_Components_index__WEBPACK_IMPORTED_MODULE_3__.ItemControl({
                control: reviewItem,
                controlState: _globals__WEBPACK_IMPORTED_MODULE_9__.ControlState.Tooltip,
                isHistory: version,
                type: _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(itemId).type,
                item: data,
                isItem: true,
                parameter: {
                    reviewMode: true
                },
                changed: function () {
                }
            });
            await itemC.load();
            window.setTimeout(function () {
                reviewItem.annotator({ readOnly: true });
                reviewItem.data('annotator');
                reviewItem.annotator("loadAnnotations", _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.JSON.clone(annotations));
                $(".annotator-wrapper", reviewItem).removeClass("annotator-wrapper");
                for (let anIdx = 0; anIdx < annotations.length; anIdx++) {
                    let an = annotations[anIdx];
                    let hyper = reviewItem.find(`[data-annotation-id='${an.id}']`);
                    if (hyper.length) {
                        $(`<span class="annPO" style="position: relative;padding: 0 20px 0 0;"><span style="color: red;border: 1px solid red;border-radius: 8px;position: absolute;top: -12px;left: -4px;width: 18px;text-align: center;">${Number(anIdx) + 1}</span></span>`).insertAfter($(hyper[hyper.length - 1]));
                        body.append(`<tr><td style='color:red'>${Number(anIdx) + 1}</td><td class="annUs">${an.createdBy}</td><td class="annTe">${an.text}</td></tr>`);
                    }
                }
                that.copyDetail(details, tableData, rowIdx + 1).done(() => res.resolve());
            }, 300);
        });
        return res;
    }
    renderReviewInput(ctrl, isDialog) {
        let that = this;
        $('<span class="baseControlHelp">' + this.settings.help + ' - Review Items</span>').appendTo(ctrl);
        let items = $("<span>");
        var selStr = $("<span class='itemSelectionList'></span>");
        ctrl.append($('<p>').append(selStr).append(items));
        let selectTools = new _common_UI_Tools_ItemSelectionView__WEBPACK_IMPORTED_MODULE_7__.ItemSelectionTools();
        selectTools.renderButtons({
            selectMode: _common_UI_Components_index__WEBPACK_IMPORTED_MODULE_3__.SelectMode.auto,
            control: items,
            linkTypes: _globals__WEBPACK_IMPORTED_MODULE_9__.globalMatrix.ItemConfig.getCategories(true).map(function (cat) {
                return { type: cat };
            }),
            smallbutton: true,
            selectionChange: (newSelection) => {
                that.reviewItems = newSelection.map(function (sel) {
                    return sel.to;
                });
                selStr.html(_common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.refListToDisplayString(newSelection, "items:"));
                let ok;
                if (isDialog) {
                    ok = $(".btnDoIt", ctrl.closest(".ui-dialog"));
                    _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.setEnabled(ok, false); // disable ok/save button, because we first need to get the latest versions
                }
                else {
                    $("#btnSave").hide();
                }
                let folders = that.reviewItems.filter(id => _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(id).isFolder).map(id => "folderm=" + id);
                let items = that.reviewItems.filter(id => !_common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(id).isFolder).map(id => "id=" + id);
                let itemsAndFolders = items.concat(folders);
                let search = itemsAndFolders.join(" OR ");
                const allowSave = () => {
                    if (isDialog) {
                        _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.setEnabled(ok, true);
                    }
                    else {
                        $("#btnSave").show();
                    }
                };
                //Don't make the rest call if the selection is empty
                if (itemsAndFolders.length > 0) {
                    _globals__WEBPACK_IMPORTED_MODULE_9__.app.searchAsync("mrql:" + search, undefined, true).done((results) => {
                        allowSave();
                        that.currentVersions = results;
                        that.settings.valueChanged.apply(null);
                    });
                }
                else {
                    allowSave();
                    that.currentVersions = [];
                    that.settings.valueChanged.apply(null);
                }
            },
            getSelectedItems: async function () {
                if (that.reviewItems) {
                    return that.reviewItems.map(function (sel) {
                        return { to: sel, title: "" };
                    });
                }
                else {
                    return [];
                }
            },
            buttonName: "Select Review Items"
        });
        if (that.reviewItems && that.reviewItems.length > 0) {
            selStr.html(_common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.refListToDisplayString(that.reviewItems.map((item) => {
                return { to: item, title: "" };
            }), "items:"));
        }
        _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.SelectUserOrGroup.showMultiUserSelect(ctrl, this.settings.help + " - Reviewers", that.reviewUsers, "Select Reviewers", "", "", true, this.settings.parameter.allowSelectUserGroups, function (selection) {
            that.reviewUsers = selection;
            that.settings.valueChanged.apply(null);
        });
        $("button", items).css("margin-top", "4px");
    }
    isReviewDone() {
        let tableData = JSON.parse(this.settings.fieldValue).reviewtable;
        let passedItems = [];
        let failedItems = [];
        let todoItems = [];
        ReviewControlImpl.analyzeReview(this.settings.fieldId, tableData, passedItems, failedItems, todoItems);
        return todoItems.length == 0;
    }
    editReview() {
        let that = this;
        this.reviewItems = [];
        this.reviewUsers = [];
        let tableData = JSON.parse(this.settings.fieldValue).reviewtable;
        if (tableData && tableData.length) {
            this.reviewUsers = ReviewControlImpl.getReviewers(tableData);
            this.reviewItems = this.getItems();
        }
        let dlg = $("<div>").appendTo($("body"));
        let ui = $("<div style='height:100%;width:100%'>");
        this.renderReviewInput(ui, true);
        _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showDialog(dlg, "Change items or reviewers", ui, $(document).width() * 0.9, _globals__WEBPACK_IMPORTED_MODULE_9__.app.itemForm.height() * 0.9, [{
                text: 'OK',
                class: 'btnDoIt',
                click: function () {
                    dlg.dialog("close");
                    dlg.remove();
                    that.updateReview();
                    _globals__WEBPACK_IMPORTED_MODULE_9__.app.saveAsync(true).done(function () {
                    }).fail(function () {
                        // or user refused
                        // these are set by controls: reset
                        that.reviewItems = null;
                        that.reviewUsers = null;
                        // update save buttons
                    });
                }
            }, {
                text: 'Cancel',
                class: 'btnCancelIt',
                click: function () {
                    dlg.dialog("close");
                    dlg.remove();
                    // these are set by controls: reset
                    that.reviewItems = null;
                    that.reviewUsers = null;
                    // update save buttons
                    that.settings.valueChanged.apply(null);
                }
            }], _common_matrixlib_MatrixLibInterfaces__WEBPACK_IMPORTED_MODULE_2__.UIToolsConstants.Scroll.Vertical, true, true, () => {
        }, () => {
        }, () => {
        });
    }
    async updateReview() {
        let that = this;
        let savedData = JSON.parse(this.settings.fieldValue).reviewtable;
        let tableData = JSON.parse(await this.reviewTable.getController().getValueAsync());
        let oldReviewUsers = ReviewControlImpl.getReviewers(tableData);
        let oldReviewItems = this.getItems();
        // for users other than myself, keep original data
        $.each(oldReviewUsers, function (uIdx, otherUser) {
            if (otherUser != _globals__WEBPACK_IMPORTED_MODULE_9__.matrixSession.getUser()) {
                $.each(tableData, function (idx, tableRow) {
                    let originalRow = savedData.filter(function (row) {
                        return row.reviewitem == tableRow.reviewitem;
                    });
                    if (originalRow.length == 1) {
                        tableRow[otherUser] = originalRow[0][otherUser];
                    }
                });
            }
        });
        // add new items
        let items = [];
        $.each(this.reviewItems, function (sidx, select) {
            items = items.concat(_globals__WEBPACK_IMPORTED_MODULE_9__.app.getChildrenIdsRec(select));
        });
        $.each(items, function (idx, item) {
            if (oldReviewItems.indexOf(item) == -1) {
                let row = {};
                row[ReviewControlColumns.COL_ITEM] = that.getItemRef(item);
                row[ReviewControlColumns.COL_VERSION] = that.getItemVersion(item);
                $.each(that.reviewUsers, function (uidx, user) {
                    row[user] = "";
                });
                row[ReviewControlColumns.COL_COMMENT_LOG] = "";
                tableData.push(row);
            }
        });
        // remove not needed rows
        tableData = tableData.filter(function (tableRow) {
            let oldItem = tableRow.reviewitem.split(" ")[0].replace("!", "");
            return items.indexOf(oldItem) != -1;
        });
        // add and remove users
        let removeTheseUsers = oldReviewUsers.filter(function (oldUser) {
            return that.reviewUsers.indexOf(oldUser) == -1;
        });
        let addTheseUsers = that.reviewUsers.filter(function (oldUser) {
            return oldReviewUsers.indexOf(oldUser) == -1;
        });
        $.each(tableData, function (idx, tableRow) {
            $.each(removeTheseUsers, function (ridx, removeUser) {
                delete tableRow[removeUser];
            });
            $.each(addTheseUsers, function (ridx, addUser) {
                tableRow[addUser] = "";
            });
        });
        // acknowledge selected users
        this.reviewItems = null;
        this.reviewUsers = null;
        // save and repaint
        let newTable = JSON.stringify({ reviewtable: tableData });
        if (newTable != this.settings.fieldValue) {
            this.settings.fieldValue = newTable;
            // make sure new layout overwrites other changes
            this.forceNewTable = true;
            this.updateControl();
        }
        // update save buttons
        this.settings.valueChanged.apply(null);
    }
    // implement interface
    async hasChangedAsync() {
        if (this.isCommenting) {
            // user has the annotate dialog open
            return true;
        }
        if (this.forceNewTable) {
            return true;
        }
        if (this.reviewUsers && this.reviewUsers.length > 0 && !!this.reviewItems)
            return true;
        if (!this.reviewTable)
            return false;
        let newTable = JSON.parse(await this.reviewTable.getController().getValueAsync());
        let oldTable = JSON.parse(this.settings.fieldValue).reviewtable;
        let changeReview = $("#changeReview");
        for (let idx = 0; idx < newTable.length; idx++) {
            let changed = false;
            if (newTable[idx][ReviewControlColumns.COL_ANNOTATIONS] != oldTable[idx][ReviewControlColumns.COL_ANNOTATIONS] ||
                newTable[idx][ReviewControlColumns.COL_COMMENT_LOG] != oldTable[idx][ReviewControlColumns.COL_COMMENT_LOG]) {
                changed = true;
            }
            else {
                let myReviewColumns = this.getMyReviewColumns();
                $.each(myReviewColumns, function (mrcIdx, mrc) {
                    if (newTable[idx][mrc] != oldTable[idx][mrc])
                        changed = true;
                });
            }
            if (changed) {
                _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.setEnabled(changeReview, false);
                changeReview.parent().attr("title", "save to modify the table structure");
                return true;
            }
        }
        if (this.settings.parameter.canBeModified) {
            let enabled = (!this.settings.parameter.canBeModifiedBy || this.settings.parameter.canBeModifiedBy.length == 0 ||
                _globals__WEBPACK_IMPORTED_MODULE_9__.matrixSession.amIAllowedUser(this.settings.parameter.canBeModifiedBy));
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.setEnabled(changeReview, enabled);
        }
        changeReview.parent().attr("title", "");
        return false;
    }
    async getValueAsync(currentItem) {
        let that = this;
        if (this.reviewTable) {
            if (this.forceNewTable) {
                return this.settings.fieldValue;
            }
            if (!currentItem) {
                return undefined;
            }
            let myReviewColumns = this.getMyReviewColumns();
            // get the old review status for user
            let oldTable = this.settings.fieldValue ? JSON.parse(this.settings.fieldValue).reviewtable : [];
            let beforeEdit = {}; // lookup table item id -> row
            $.each(oldTable, function (oidx, row) {
                beforeEdit[ReviewControlImpl.getItem(row)] = row;
            });
            // get the updated review status for user
            let thisTable = JSON.parse(await this.reviewTable.getController().getValueAsync());
            let afterEdit = {}; // lookup table item id -> row
            $.each(thisTable, function (oidx, row) {
                afterEdit[ReviewControlImpl.getItem(row)] = row;
            });
            // update last saved table
            let lastSavedValue = JSON.parse(currentItem[this.settings.fieldId]);
            $.each(lastSavedValue.reviewtable, function (oidx, dbRow) {
                let item = ReviewControlImpl.getItem(dbRow);
                $.each(myReviewColumns, function (mrcIdx, mrc) {
                    dbRow[mrc] = afterEdit[item][mrc];
                    if (mrc != _globals__WEBPACK_IMPORTED_MODULE_9__.matrixSession.getUser() && afterEdit[item][mrc] != beforeEdit[item][mrc]) {
                        // ACL - remember that the logged on user did the change
                        dbRow["_" + mrc] = _globals__WEBPACK_IMPORTED_MODULE_9__.matrixSession.getUser();
                    }
                });
                // row: the values saved in the database (might have changed since user started edit)
                // oldValues: values before user started edit
                // newValues: values after used did edit
                // -> changes from old to new need to merged into row...
                that.mergeComments(dbRow, beforeEdit[item], afterEdit[item]);
                that.mergeAnnotations(dbRow, beforeEdit[item], afterEdit[item]);
            });
            return JSON.stringify(lastSavedValue);
        }
        else if (this.reviewItems && this.reviewUsers && this.reviewUsers.length > 0) {
            // create the initial table
            let items = [];
            $.each(this.reviewItems, function (sidx, select) {
                items = items.concat(_globals__WEBPACK_IMPORTED_MODULE_9__.app.getChildrenIdsRec(select));
            });
            let newReview = { reviewtable: [] };
            $.each(items, function (idx, item) {
                let row = {};
                row[ReviewControlColumns.COL_ITEM] = that.getItemRef(item);
                row[ReviewControlColumns.COL_VERSION] = that.getItemVersion(item);
                $.each(that.reviewUsers, function (uidx, user) {
                    row[user] = "";
                });
                row[ReviewControlColumns.COL_COMMENT_LOG] = "";
                newReview.reviewtable.push(row);
            });
            return JSON.stringify(newReview);
        }
        else {
            return JSON.stringify({});
        }
    }
    mergeComments(db, beforeEdit, afterEdit) {
        let that = this;
        let domHelper = $("<div style='display:none'>").appendTo($("body"));
        // get the users' current comments in this cell
        let ncs = [];
        domHelper.html(afterEdit[ReviewControlColumns.COL_COMMENT_LOG]);
        $(".commentLine", domHelper).each(function (cidx, nc) {
            if ($(".commentUser", $(nc)).text() == _globals__WEBPACK_IMPORTED_MODULE_9__.matrixSession.getUser()) {
                ncs.push(nc.outerHTML);
            }
        });
        // get the users previous comments in the this cell
        let ocs = [];
        domHelper.html(beforeEdit[ReviewControlColumns.COL_COMMENT_LOG]);
        $(".commentLine", domHelper).each(function (cidx, oc) {
            if ($(".commentUser", $(oc)).text() == _globals__WEBPACK_IMPORTED_MODULE_9__.matrixSession.getUser()) {
                ocs.push(oc.outerHTML);
            }
        });
        // build list of comments to add/remove
        let removeComments = ocs.filter(function (oc) {
            return ncs.indexOf(oc) == -1;
        });
        let addComments = ncs.filter(function (nc) {
            return ocs.indexOf(nc) == -1;
        });
        // now update the comments in the current Item
        domHelper.html(db[ReviewControlColumns.COL_COMMENT_LOG]);
        // go through existing comments and remove them if they have been deleted
        $(".commentLine", domHelper).each(function (cidx, cc) {
            if (removeComments.indexOf(cc.outerHTML) == -1) {
                addComments.push(cc.outerHTML);
            }
        });
        // that's an old comment from validation test phase... add a fake comment to keep order
        $(".commentDate", domHelper).each(function (cidx, cc) {
            if (!$(cc).data("cd")) {
                $(cc).data("cd", new Date(2017, 1, 1, 1, 1, that.settings.parameter.appendComments ? cidx : 59 - cidx));
            }
        });
        // sort comments
        let mult = that.settings.parameter.appendComments ? 1 : -1;
        let sortedComments = addComments.sort(function (a, b) {
            let aDate = $(".commentDate", $(a)).data("cd");
            let bDate = $(".commentDate", $(b)).data("cd");
            return mult * (new Date(aDate).getTime() - new Date(bDate).getTime());
        });
        // add new stuff
        domHelper.html("");
        $.each(sortedComments, function (clidx, cl) {
            domHelper.append(cl);
        });
        let mergedValue = domHelper.html();
        domHelper.remove();
        db[ReviewControlColumns.COL_COMMENT_LOG] = mergedValue;
    }
    mergeAnnotations(db, beforeEdit, afterEdit) {
        db[ReviewControlColumns.COL_ANNOTATIONS] = _common_UI_Controls_docReview__WEBPACK_IMPORTED_MODULE_5__.HTMLAnnotator.mergeAnnotation(db[ReviewControlColumns.COL_ANNOTATIONS], beforeEdit[ReviewControlColumns.COL_ANNOTATIONS], afterEdit[ReviewControlColumns.COL_ANNOTATIONS]);
    }
    getItemRef(item) {
        let that = this;
        let ref = item + "!";
        if (that.settings.parameter.showVersions) {
            let version = that.getItemVersion(item);
            ref += " (version " + version + ")";
        }
        return ref;
    }
    getItemVersion(item) {
        let that = this;
        let version = "";
        $.each(that.currentVersions, function (cidx, current) {
            if (current.itemId == item) {
                version = "" + current.version;
                return;
            }
        });
        return version;
    }
    destroy() {
    }
    async resizeItem(newWidth, force) {
        let that = this;
        if (force && this.reviewTable && this.reviewTable.resizeItem) {
            this.reviewTable.resizeItem(newWidth, force);
            // the redraw, removes the tools (history and such, so they need to be added)
            let currentValue = await this.reviewTable.getController().getValueAsync();
            if (this.settings.controlState == _globals__WEBPACK_IMPORTED_MODULE_9__.ControlState.FormEdit && currentValue) {
                // add the tools to expand inline / show history
                this.reviewTable.getController().redraw();
                let tableData = _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.JSON.clone(JSON.parse(currentValue));
                $.each($(".r1>span", this.reviewTable), function (rowIdx, row) {
                    that.makeExpandable(tableData, that.reviewTable, rowIdx);
                });
            }
            this.reviewTable.getController().refresh();
        }
    }
    // create JIRA tasks
    createTasks(reviewers, items) {
        let res = $.Deferred();
        if (!this.settings.parameter.tasks) {
            res.resolve([]);
            return res;
        }
        let jiraConfig = _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.Tasks.getConfig(this.settings.parameter.tasks.taskPluginId);
        if (!jiraConfig) {
            console.log("plugin " + this.settings.parameter.tasks.taskPluginId + " not configured");
            res.resolve([]);
            return res;
        }
        this.createTask(reviewers, items, 0, []).done(function (tasks) {
            res.resolve(tasks.map(function (ei) {
                return ei.externalItemId;
            }));
        }).fail(function () {
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Failed to create tasks", "see console log");
            res.resolve([]);
        });
        return res;
    }
    createTask(reviewers, items, jobId, taskList) {
        let that = this;
        let res = $.Deferred();
        if (jobId == reviewers.length * items.length) {
            res.resolve([]);
            return res;
        }
        let itemIdx = jobId % items.length;
        let reviewerIdx = Math.floor(jobId / items.length);
        let next = jobId + 1;
        if (itemIdx == 0) {
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showSuccess("Create new review task for " + reviewers[reviewerIdx]);
            let title = (reviewers[reviewerIdx] + ": " + _globals__WEBPACK_IMPORTED_MODULE_9__.app.getCurrentTitle());
            _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.Tasks.postCreateIssue(that.settings.parameter.tasks.taskPluginId, items[itemIdx], title, reviewers[reviewerIdx] + ",\n" + (that.settings.parameter.tasks.taskDescription ? that.settings.parameter.tasks.taskDescription : "a review has been scheduled for you. See linked review item for details."), that.settings.parameter.tasks.taskProject, that.settings.parameter.tasks.taskIssueType).done(function (created) {
                taskList.push(created[0]);
                that.createTask(reviewers, items, next, taskList).done(function (tasks) {
                    res.resolve(taskList);
                }).fail(function () {
                    res.reject();
                });
            }).fail(function () {
                console.log("could not create task in external ticketing");
                res.reject();
            });
        }
        else {
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showSuccess("Added item " + items[itemIdx] + " to task of " + reviewers[reviewerIdx]);
            _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.Tasks.postCreateLinks(items[itemIdx], [taskList[taskList.length - 1]]).done(function () {
                that.createTask(reviewers, items, next, taskList).done(function (tasks) {
                    res.resolve(taskList);
                }).fail(function () {
                    res.reject();
                });
            }).fail(function () {
                console.log("could not link item to external ticket");
                res.reject();
            });
        }
        return res;
    }
    // invite users to do reviews, by email and jira task
    async sendReminder() {
        let that = this;
        let tableData = JSON.parse(this.settings.fieldValue).reviewtable;
        let todos = this.getItemsToDoByUser(this.settings.fieldId, tableData);
        let actualReviewers = [];
        let link = _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(_globals__WEBPACK_IMPORTED_MODULE_9__.app.getCurrentItemId()).link;
        let richtexts = _globals__WEBPACK_IMPORTED_MODULE_9__.matrixApplicationUI.lastMainItemForm.getControls("richtext");
        let body = richtexts.length ? await richtexts[0].getController().getValueAsync() : "";
        body = body ? ("See " + link + "<br><br>" + body + "<br><br>") : ("Review: " + link + "<br><br>");
        $.each(ReviewControlImpl.getReviewers(tableData), function (idx, user) {
            if (todos[user].length) {
                // add info to mail body
                body += "<b>" + user + "</b> - ";
                // remember that person needs to do some work
                actualReviewers.push(user);
                // add links to review items
                let links = todos[user].map(function (id) {
                    return "<li>" + _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.renderLink(id).html();
                });
                body += "still to do:<br><ul> " + links.join(",") + "</ul>";
            }
        });
        let cannedMessage = _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Mail.getCannedMessage("review_reminder", actualReviewers.join(","), _globals__WEBPACK_IMPORTED_MODULE_9__.app.getCurrentItemId(), undefined, body);
        let subject = that.settings.parameter.mailTo.mailSubject ? that.settings.parameter.mailTo.mailSubject : "Review _id_";
        subject = subject.replace("_id_", _globals__WEBPACK_IMPORTED_MODULE_9__.app.getCurrentItemId());
        _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Mail.sendMailDlg(actualReviewers.join(","), null, subject, cannedMessage, _globals__WEBPACK_IMPORTED_MODULE_9__.matrixSession.getUser());
    }
    // set the label for a list of items
    lockItems(items) {
        let labelConfig = this.settings.parameter.lockLabel;
        let lt = _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.CreateNewLabelTools();
        let res = $.Deferred();
        this.setLabels(lt, items, labelConfig.label).done(function () {
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showSuccess("All lock labels set!");
            res.resolve();
        }).fail(function () {
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Failed to set labels", "see console log");
            res.resolve();
        });
        return res;
    }
    // mark items as done (passed/failed/todo)
    async setItemReviewStatusLabel(items) {
        let that = this;
        // get current table
        let tableData = _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.JSON.clone(JSON.parse(await this.reviewTable.getController().getValueAsync()));
        // merge with original data to change UI values to internal values for other reviewers
        let oldData = JSON.parse(this.settings.fieldValue).reviewtable;
        let otherReviewers = ReviewControlImpl.getReviewers(tableData).filter(function (reviewer) {
            return reviewer != _globals__WEBPACK_IMPORTED_MODULE_9__.matrixSession.getUser();
        });
        $.each(tableData, function (ridx, row) {
            $.each(otherReviewers, function (oridx, other) {
                tableData[ridx][other] = oldData[ridx][other];
            });
        });
        // prepare the triaged list of items
        let passedItems = [];
        let failedItems = [];
        let todoItems = [];
        ReviewControlImpl.analyzeReview(this.settings.fieldId, tableData, passedItems, failedItems, todoItems);
        // now set the labels for each group (if configured)
        let res = $.Deferred();
        let lt = _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.CreateNewLabelTools();
        let marks = this.settings.parameter.doneLabel;
        this.setLabels(lt, failedItems, marks.failedLabel).done(function () {
            that.setLabels(lt, passedItems, marks.passedLabel).done(function () {
                that.setLabels(lt, todoItems, marks.todoLabel).done(function () {
                    _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showSuccess("All review status labels set!");
                    res.resolve();
                }).fail(function () {
                    _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Failed to set labels", "see console log");
                    res.resolve();
                });
            }).fail(function () {
                _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Failed to set labels", "see console log");
                res.resolve();
            });
        }).fail(function () {
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showError("Failed to set labels", "see console log");
            res.resolve();
        });
        return res;
    }
    // set a label recursively on all items which need it
    setLabels(lt, items, label) {
        let that = this;
        let res = $.Deferred();
        if (!label) {
            // nothing to do
            res.resolve();
            return res;
        }
        if (items.length == 0) {
            // nothing to do
            res.resolve();
            return res;
        }
        // filter the items to only those which have the label
        let labelDefs = lt.getLabelDefinitions([]).filter(function (ld) { return ld.label == label; });
        if (labelDefs.length == 0) {
            // nothing to do
            res.resolve();
            return res;
        }
        // get a list with all relevant categories for that labels
        let categories = [];
        for (let labelDef of labelDefs) {
            for (let cat of labelDef.categories) {
                if (categories.indexOf(cat) == -1)
                    categories.push(cat);
            }
        }
        if (categories.length == 0) {
            // nothing to do
            res.resolve();
            return res;
        }
        let catSearch = categories.map(c => "category=" + c).join(" OR ");
        let idSearch = items.map(id => "id=" + id).join(" OR ");
        let labelSearch = 'label!="' + label + '"';
        _globals__WEBPACK_IMPORTED_MODULE_9__.app.searchAsync(`mrql:(${catSearch}) and (${idSearch}) and (${labelSearch})`).done(function (results) {
            var itemWithoutLabels = results.map(function (needle) { return needle.itemId; });
            that.setLabel(lt, itemWithoutLabels, label, 0).done(function () {
                res.resolve();
            }).fail(function () {
                res.reject();
            });
        });
        return res;
    }
    // set a label recursively on all items which need it
    setLabel(lt, items, label, nextIdx) {
        let that = this;
        let res = $.Deferred();
        if (!label || nextIdx >= items.length) {
            res.resolve();
            return res;
        }
        // verify if the label is defined for the item / if not skip
        if (!label || lt.getLabelDefinitions([_common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(items[nextIdx]).type]).map(function (ld) {
            return ld.label;
        }).indexOf(label) == -1) {
            // for this category no labels are defined, so we can skip this item
            let cont = nextIdx + 1;
            that.setLabel(lt, items, label, cont).done(function () {
                res.resolve();
            }).fail(function () {
                res.reject();
            });
            return res;
        }
        // set the label and proceed
        _globals__WEBPACK_IMPORTED_MODULE_9__.app.getItemAsync(items[nextIdx]).done(function (original) {
            // check if label needs to be set
            let originalLabels = original.labels;
            let labels = lt.setLabel(original.labels, label);
            let same = labels && originalLabels && labels.length == originalLabels.length && labels.every(function (x) {
                return originalLabels.indexOf(x) != -1;
            });
            if (same) {
                // no label is already set
                _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showSuccess("Set label '" + label + "' " + (nextIdx + 1) + " / " + items.length + " : " + items[nextIdx]);
                let cont = nextIdx + 1;
                that.setLabel(lt, items, label, cont).done(function () {
                    res.resolve();
                }).fail(function () {
                    res.reject();
                });
            }
            else {
                // do set label
                let changes = { id: items[nextIdx], onlyThoseFields: 1, labels: labels.join(",") };
                _globals__WEBPACK_IMPORTED_MODULE_9__.app.updateItemInDBAsync(changes, "Schedule Review").done(function () {
                    _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.showSuccess("Set label '" + label + "' " + (nextIdx + 1) + " / " + items.length + " : " + items[nextIdx]);
                    let cont = nextIdx + 1;
                    that.setLabel(lt, items, label, cont).done(function () {
                        res.resolve();
                    }).fail(function () {
                        res.reject();
                    });
                }).fail(function () {
                    console.log("failed to set label");
                    res.reject();
                });
            }
        }).fail(function () {
            console.log("failed to get item");
            res.reject();
        });
        return res;
    }
    // get all items from table
    getItems() {
        let that = this;
        let tableData = JSON.parse(this.settings.fieldValue).reviewtable;
        let items = [];
        $.each(tableData, function (idx, row) {
            let item = ReviewControlImpl.getItem(row);
            items.push(item);
        });
        return items;
    }
    getItemsToDoByUser(fieldId, tableData) {
        let that = this;
        let todos = {};
        // get dropdown setting options which are considered to be still todo
        let todoStates = ReviewControlImpl.getReviewOptions(fieldId, false, false, true);
        let columns = ReviewControlImpl.getReviewers(tableData);
        $.each(columns, function (idx, column) {
            if (!todos[column]) {
                // might be first task of user
                todos[column] = [];
            }
            // get items which still need to be reviewed
            $.each(tableData, function (rowIdx, row) {
                if (!row[column] || todoStates.indexOf(row[column]) != -1) {
                    // in table we keep the ID with a ! to render title
                    let item = ReviewControlImpl.getItem(row);
                    todos[column].push(item);
                }
            });
        });
        return todos;
    }
    static analyzeReview(fieldId, tableData, passedItems, failedItems, todoItems) {
        let reviewers = ReviewControlImpl.getReviewers(tableData);
        // get the cell values which represent the different states
        let passed = ReviewControlImpl.getReviewOptions(fieldId, true, false, false);
        let failed = ReviewControlImpl.getReviewOptions(fieldId, false, true, false);
        let todo = ReviewControlImpl.getReviewOptions(fieldId, false, false, true);
        // for each row - check items in which bucket they need to go
        $.each(tableData, function (rowIdx, row) {
            let stillTodo = false;
            let alreadyFailed = false;
            $.each(reviewers, function (cidx, column) {
                if (!row[column] || todo.indexOf(row[column]) != -1) {
                    stillTodo = true;
                }
                else if (failed.indexOf(row[column]) != -1) {
                    alreadyFailed = true;
                }
                else if (passed.indexOf(row[column]) != -1) {
                }
                else {
                    // default unknown state
                    stillTodo = true;
                }
            });
            if (alreadyFailed) {
                failedItems.push(ReviewControlImpl.getItem(row));
            }
            else if (stillTodo) {
                todoItems.push(ReviewControlImpl.getItem(row));
            }
            else {
                passedItems.push(ReviewControlImpl.getItem(row));
            }
        });
    }
    // get all columns which are user or ACL columns
    static getReviewers(tableData) {
        if (tableData.length == 0)
            return [];
        let reviewColumns = Object.keys(tableData[0]).filter(function (c) {
            return c[0] != "_" && c != ReviewControlColumns.COL_ITEM && c != ReviewControlColumns.COL_COMMENT_LOG;
        });
        return reviewColumns.sort();
    }
    static getItem(row) {
        return ReviewControlImpl.getItemFromCell(row['reviewitem']);
    }
    static getItemFromCell(value) {
        return value.split(" ")[0].replace("!", "");
    }
    // returns all drop down options for the wanted principal states
    static getReviewOptions(fieldId, passed, failed, todo) {
        let dd = ReviewControlImpl.getDropdownParams(fieldId);
        if (!dd || !dd.options) {
            _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Logger.log("warn", "no setting for dropdowns in review table");
            return [];
        }
        return dd.options.filter(function (ddo) {
            return (todo && (!ddo.class || ddo.class == "todo")) || (passed && ddo.class == "passed") || (failed && ddo.class == "failed");
        }).map(function (ddo) {
            return ddo.id;
        });
    }
    static getDropdownParams(fieldId) {
        let field = _globals__WEBPACK_IMPORTED_MODULE_9__.globalMatrix.ItemConfig.getFieldsOfType("reviewControl").filter(function (rcs) {
            return rcs.field.id == fieldId;
        });
        if (field.length && field[0].field.parameterJson && field[0].field.parameterJson.statusDropdown) {
            return _globals__WEBPACK_IMPORTED_MODULE_9__.globalMatrix.ItemConfig.getSettingJSON(field[0].field.parameterJson.statusDropdown);
        }
        return _globals__WEBPACK_IMPORTED_MODULE_9__.globalMatrix.ItemConfig.getSettingJSON(ReviewControlImpl.reviewOptionsSetting);
    }
    // either a column specifically for the user or a acl group containing the user
    getMyReviewColumns() {
        let mine = [_globals__WEBPACK_IMPORTED_MODULE_9__.matrixSession.getUser()];
        let groups = _globals__WEBPACK_IMPORTED_MODULE_9__.globalMatrix.ItemConfig.getUserGroups();
        if (groups) {
            $.each(groups, function (aclIdx, group) {
                if (group.membership.map(function (member) {
                    return member.login;
                }).indexOf(_globals__WEBPACK_IMPORTED_MODULE_9__.matrixSession.getUser()) != -1) {
                    mine.push(_common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.SelectUserOrGroup.getGroupId(group));
                }
            });
        }
        return mine;
    }
    showTable(container) {
        let that = this;
        that.outOfDateInfo = null;
        if ((this.settings.controlState == _globals__WEBPACK_IMPORTED_MODULE_9__.ControlState.FormEdit || this.settings.controlState == _globals__WEBPACK_IMPORTED_MODULE_9__.ControlState.FormView) && // the out of date icons don't make sense in the history view as they would be wrong / the are not shown in the tooltip either
            (this.settings.parameter.showHistoryOutOfDate ||
                (this.settings.parameter.showHistoryOutOfDateBeforeDone && !this.isReviewDone()))) {
            let items = this.getItems().map(id => "id=" + id);
            _globals__WEBPACK_IMPORTED_MODULE_9__.app.searchAsync("mrql:" + items.join(" or "), null, true, "", null, null, null, null).done((currentItems) => {
                that.outOfDateInfo = {};
                for (let item of currentItems) {
                    that.outOfDateInfo[item.itemId] = item.version;
                }
                that.showTableDetails(container);
            });
        }
        else {
            that.showTableDetails(container);
        }
    }
    showTableDetails(container) {
        let that = this;
        let dd = ReviewControlImpl.getDropdownParams(this.settings.fieldId);
        let ddName = this.settings.parameter.statusDropdown ? this.settings.parameter.statusDropdown : ReviewControlImpl.reviewOptionsSetting;
        // render actual review table
        this.settings.parameter.canBeModified = false;
        this.settings.parameter.showLineNumbers = false;
        this.settings.parameter.columns = [];
        this.settings.parameter.doNotRememberWidth = true;
        this.settings.parameter.disableColumnReorder = true;
        this.settings.parameter.onColumnsResized = () => {
            that.repaintAfterColumnChange();
        };
        let tableData = JSON.parse(this.settings.fieldValue).reviewtable;
        this.settings.parameter.readOnlyFields = ["items"];
        if (tableData && tableData.length) {
            let columns = Object.keys(tableData[0]);
            this.settings.parameter.columns.push({
                name: "Item", field: ReviewControlColumns.COL_ITEM, editor: _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.ColumnEditor.none, relativeWidth: 300
            });
            let reviewers = ReviewControlImpl.getReviewers(tableData);
            let myReviewColumns = this.getMyReviewColumns();
            $.each(reviewers, function (cidx, reviewer) {
                let itsMe = myReviewColumns.indexOf(reviewer) != -1;
                that.settings.parameter.columns.push({
                    name: _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.UI.SelectUserOrGroup.getGroupDisplayNameFromId(reviewer),
                    field: reviewer,
                    editor: itsMe ? _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.ColumnEditor.select : _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.ColumnEditor.none,
                    options: { setting: ddName },
                    relativeWidth: itsMe ? 100 : 50,
                    cssClass: itsMe ? "reviewMe" : "reviewOther",
                    headerCssClass: itsMe ? "reviewMeHeader" : "reviewOtherHeader"
                });
                if (!itsMe) {
                    that.settings.parameter.readOnlyFields.push(reviewer);
                }
                ;
            });
            if (typeof that.settings.parameter.showComments == "undefined" || that.settings.parameter.showComments) {
                this.settings.parameter.columns.push({
                    name: "Comments",
                    field: ReviewControlColumns.COL_COMMENT_LOG,
                    editor: _common_businesslogic_index__WEBPACK_IMPORTED_MODULE_0__.ColumnEditor.commentlog,
                    options: this.settings.parameter.appendComments ? { append: "true" } : {},
                    relativeWidth: 300
                });
            }
            $.each(tableData, function (ridx, row) {
                $.each(columns, function (cidx, column) {
                    // replace the drop down ids of other users with actual values
                    if (reviewers.indexOf(column) != -1 && myReviewColumns.indexOf(column) == -1) {
                        let opts = dd.options.filter(function (ddo) {
                            return ddo.id == row[column];
                        });
                        row[column] = opts.length ? opts[0].label : row[column];
                    }
                });
            });
        }
        let tableInfo = _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.JSON.clone(this.settings);
        tableInfo.fieldHandler = null;
        tableInfo.parameter.onCellChanged = function (row) {
            that.makeExpandable(tableData, container, row.row);
        };
        tableInfo.fieldValue = JSON.stringify(tableData);
        tableInfo.onSelectCell = (rowIdx, colIdx, data) => {
            if (colIdx == 1) {
                let reviewItem = data.reviewitem.replace("!", "").replace("(version ", "").replace(")", "");
                let itemId = reviewItem.split(" ")[0];
                let line = tableData[rowIdx];
                let version = line[ReviewControlColumns.COL_VERSION] ? Number(line[ReviewControlColumns.COL_VERSION]) : 0;
                _ReviewContextFrame__WEBPACK_IMPORTED_MODULE_8__.ReviewContextFrame.renderItem(itemId, version, that.settings.parameter.autoshowContext);
            }
        };
        container.html("");
        this.reviewTable = $("<div>").appendTo(container);
        this.reviewTable.tableCtrl(tableInfo);
        if (this.settings.controlState != _globals__WEBPACK_IMPORTED_MODULE_9__.ControlState.HistoryView) {
            this.reviewTable.highlightReferences();
        }
        this.reviewTable.getController().redraw();
        if (this.settings.controlState == _globals__WEBPACK_IMPORTED_MODULE_9__.ControlState.FormEdit) {
            // add the tools to expand inline / show history
            $.each($(".r1>span", container), function (rowIdx, row) {
                that.makeExpandable(tableData, container, rowIdx);
            });
        }
        this.reviewTable.getController().refresh();
    }
    makeExpandable(tableData, container, rowIdx) {
        let that = this;
        let row = $($(".r1>span", container)[rowIdx]);
        let toggler = $('<span class="cbimg reviewToggle fal fa-chevron-right">');
        let history = $('<span title="view changes" class="fal fa-history reviewHistory">');
        let allowShowHistory = true;
        if (this.outOfDateInfo) {
            let line = tableData[rowIdx];
            let itemId = ReviewControlImpl.getItem(line);
            let version = line[ReviewControlColumns.COL_VERSION] ? Number(line[ReviewControlColumns.COL_VERSION]) : 0;
            if (version) {
                if (!this.outOfDateInfo[itemId]) {
                    history.css("color", "red");
                    history.attr("title", "item was deleted");
                    allowShowHistory = false;
                }
                else if (this.outOfDateInfo[itemId] > version) {
                    history.css("color", "orange");
                    history.attr("title", "item was changed after it was added to review");
                }
            }
        }
        let annotations = $('<span title="annotate" class="fal fa-pencil reviewAnnotations">');
        let details = $('<div class="reviewDetails">');
        if (that.settings.parameter.showInline)
            $(row).prepend(toggler);
        if (that.settings.parameter.showHistory) {
            $(row).append(history);
        }
        else {
            allowShowHistory = false;
        }
        if (that.settings.parameter.showAnnotations)
            $(row).append(annotations);
        if (that.settings.parameter.showInline) {
            row.append(details);
            if (that.expanded[rowIdx]) {
                details.html(that.expandDetails[rowIdx]);
            }
            else {
                that.expanded[rowIdx] = false;
            }
        }
        if (allowShowHistory) {
            history.click(function (event) {
                let line = tableData[rowIdx];
                let version = line[ReviewControlColumns.COL_VERSION] ? Number(line[ReviewControlColumns.COL_VERSION]) : 0;
                let itemId = ReviewControlImpl.getItem(line);
                // showHistoryAgainstLastReviewed is an async function, but we do not wait for it to finish here.
                // We are only kicking off the process.
                that.showHistoryAgainstLastReviewed(itemId, version);
                if (event.preventDefault)
                    event.preventDefault();
                if (event.stopPropagation)
                    event.stopPropagation();
                return false;
            });
        }
        annotations.click(function (event) {
            let icon = $(event.delegateTarget);
            let line = tableData[rowIdx];
            let version = line[ReviewControlColumns.COL_VERSION] ? Number(line[ReviewControlColumns.COL_VERSION]) : 0;
            let itemId = ReviewControlImpl.getItem(line);
            that.showAnnotations(itemId, version, rowIdx, icon);
            if (event.preventDefault)
                event.preventDefault();
            if (event.stopPropagation)
                event.stopPropagation();
            return false;
        });
        that.colorIcon(annotations, tableData[rowIdx][ReviewControlColumns.COL_ANNOTATIONS]);
        row.click(function (event) {
            that.toggleItem(rowIdx, tableData, event, details);
        });
    }
    showAnnotations(itemId, version, rowIdx, icon) {
        let that = this;
        let currentAnnotations = that.reviewTable.getController().getHiddenCell(rowIdx, ReviewControlColumns.COL_ANNOTATIONS);
        that.retrieveItem(itemId, version).done(function (data) {
            // show dialog
            let hTMLAnnotator = new _common_UI_Controls_docReview__WEBPACK_IMPORTED_MODULE_5__.HTMLAnnotator();
            let isSuperUser = that.settings.parameter.annotationMasters && that.settings.parameter.annotationMasters.indexOf(_globals__WEBPACK_IMPORTED_MODULE_9__.matrixSession.getUser()) != -1;
            that.isCommenting = true;
            that.settings.valueChanged.apply(null);
            hTMLAnnotator.showReviewDialog(!that.readonly, itemId, version, data, currentAnnotations, isSuperUser, async function () {
                that.isCommenting = false;
                let changed = await hTMLAnnotator.getValueAsync();
                that.reviewTable.getController().setHiddenCell(rowIdx, ReviewControlColumns.COL_ANNOTATIONS, changed);
                that.colorIcon(icon, changed);
            });
        });
    }
    colorIcon(icon, annotations) {
        icon.css("color", _common_UI_Controls_docReview__WEBPACK_IMPORTED_MODULE_5__.HTMLAnnotator.hasAnnotations(annotations) ? "red" : "");
    }
    repaintAfterColumnChange() {
        $.each($(".reviewDetails"), function (rowIdx, rwd) {
            if ($(rwd).html() != "" && $(rwd).css("display") != "none") {
                let toogle = $(rwd).parent().find(".reviewToggle");
                // hide it
                toogle.click();
                // reset it
                $(rwd).html("");
                $(rwd).show();
            }
        });
    }
    toggleItem(rowIdx, tableData, event, details) {
        let that = this;
        that.expanded[rowIdx] = !that.expanded[rowIdx];
        let line = tableData[rowIdx];
        let reviewDetails = $(".reviewDetails", $(event.delegateTarget).parent());
        if (that.expanded[rowIdx]) {
            $(".cbimg", $(event.delegateTarget).parent()).removeClass("fa-chevron-right").addClass("fa-chevron-down");
        }
        else {
            $(".cbimg", $(event.delegateTarget).parent()).removeClass("fa-chevron-down").addClass("fa-chevron-right");
        }
        if (reviewDetails.html()) {
            reviewDetails.toggle();
            let top = that.reviewTable.closest(".panel-body-v-scroll");
            let topPos = top.scrollTop();
            that.reviewTable.getController().refresh();
            top.scrollTop(topPos);
        }
        else {
            let version = line[ReviewControlColumns.COL_VERSION] ? Number(line[ReviewControlColumns.COL_VERSION]) : undefined;
            let itemId = ReviewControlImpl.getItem(line);
            that.retrieveItem(itemId, version).done(async function (data) {
                let ctrl = new _common_UI_Components_index__WEBPACK_IMPORTED_MODULE_3__.ItemControl({
                    control: reviewDetails,
                    controlState: _globals__WEBPACK_IMPORTED_MODULE_9__.ControlState.Tooltip,
                    isHistory: version,
                    type: _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.Item.parseRef(itemId).type,
                    item: data,
                    isItem: true,
                    parameter: {
                        updateParent: function () {
                            window.clearTimeout(that.expandSaveTimeout);
                            // in case there's a table this function is called after the table has finished rendering
                            that.expandDetails[rowIdx] = details.html();
                            let top = that.reviewTable.closest(".panel-body-v-scroll");
                            let topPos = top.scrollTop();
                            that.reviewTable.getController().refresh();
                            top.scrollTop(topPos);
                        }
                    },
                    changed: function () {
                    }
                });
                await ctrl.load();
                window.clearTimeout(that.expandSaveTimeout);
                that.expandSaveTimeout = window.setTimeout(function () {
                    // in case there's no table: html is already ok: save it
                    $(".itemTitle", details).remove(); // it's just above
                    that.expandDetails[rowIdx] = details.html();
                    let top = that.reviewTable.closest(".panel-body-v-scroll");
                    let topPos = top.scrollTop();
                    that.reviewTable.getController().refresh();
                    top.scrollTop(topPos);
                }, 500); // wait a little, e.g. to render images
            });
        }
    }
    retrieveItem(itemId, version) {
        let res = $.Deferred();
        let that = this;
        if (this.texts[itemId]) {
            res.resolve(this.texts[itemId]);
            return res;
        }
        _globals__WEBPACK_IMPORTED_MODULE_9__.app.getItemAsync(itemId, version).done(function (data) {
            that.texts[itemId] = data;
            res.resolve(data);
        });
        return res;
    }
    async showHistoryAgainstLastReviewed(itemId, version) {
        let that = this;
        var ht = new _common_UI_Tools_ItemHistoryView__WEBPACK_IMPORTED_MODULE_6__.HistoryTools();
        if (!version) {
            ht.compareLatest(itemId);
            return;
        }
        if (version == 1 || !that.settings.parameter.doneLabel.passedLabel) {
            ht.compareVersions(itemId, version, 0);
            return;
        }
        const lastRevision = await _common_matrixlib__WEBPACK_IMPORTED_MODULE_1__.ml.LabelTools.getLastTimeLabelWasSet(itemId, that.settings.parameter.doneLabel.passedLabel, version);
        if (!lastRevision) {
            ht.compareVersions(itemId, version, 0);
        }
        else {
            _globals__WEBPACK_IMPORTED_MODULE_9__.app.getItemAsync(itemId, lastRevision).done(function (data) {
                ht.compareVersions(itemId, lastRevision, version);
            });
        }
    }
}
ReviewControlImpl.reviewOptionsSetting = "dd_reviewOptions";
ReviewControlImpl.defaultOptions = {
    controlState: _globals__WEBPACK_IMPORTED_MODULE_9__.ControlState.FormView,
    canEdit: false,
    fieldValue: "",
    parameter: {
        readonly: false, // can be set to overwrite the default readonly status
    }
};


/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ReviewControlColumns: () => (/* reexport safe */ _core_client_plugins_ScheduleReview__WEBPACK_IMPORTED_MODULE_0__.ReviewControlColumns),
/* harmony export */   SelectMode: () => (/* reexport safe */ _core_common_UI_Components_ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__.SelectMode),
/* harmony export */   getSdkInstance: () => (/* binding */ getSdkInstance),
/* harmony export */   registerPlugin: () => (/* binding */ registerPlugin)
/* harmony export */ });
/* harmony import */ var _core_client_plugins_ScheduleReview__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);
/* harmony import */ var _core_common_UI_Components_ProjectViewDefines__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18);



function isOutsideMatrixApp() {
    return !(window && window.matrixSdk);
}
function getSdkInstance() {
    if (isOutsideMatrixApp()) {
        throw new Error("Client SDK can only be used within Matrix Requirements application");
    }
    return window.matrixSdk;
}
function registerPlugin(plugin) {
    getSdkInstance().plugins.register(plugin);
}

})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=clientSdk.js.map
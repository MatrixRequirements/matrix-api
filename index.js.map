{"version":3,"file":"consoleapi.js","mappings":"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AC,CAAC,EACvB,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/B,CAAC;KAEJ;IA/iCQ,kDAAmB;;;;;;;;;ACrB5B;AACA;AACA;AACA;AACA,mBAAO,CAAC,GAAc;AACtB;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA,qDAAqD;AACrD,QAAQ;AACR;AACA,QAAQ;AACR,4EAA4E;AAC5E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,qBAAqB;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEO;AACP;A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a;YACrH,OAAO,wBAAY,EAAC,IAAI,CAAC,aAAa,CAAC,CAAC,iBAAiB,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC1I,CAAC;KAEJ;IA/vDD,gCA+vDC;;;;;;;;;AC1ojBD;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;;;;;;;;AChBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEa;;AAEb,eAAe,mBAAO,CAAC,GAAU;AACjC,WAAW,mBAAO,CAAC,GAAQ;;AAE3B,aAAa;AACb,eAAe;AACf,qBAAqB;AACrB,cAAc;;AAEd,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB,KAAK;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,2CAA2C,KAAK;AAChD,0CAA0C,KAAK;AAC/C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,kBAAkB,mBAAO,CAAC,GAAa;;AAEvC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,oBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,OAAO;AACnD;AACA;AACA;AACA;AACA,2CAA2C,OAAO;AAClD;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,2CAA2C,OAAO;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iBAAiB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B,QAAQ;AACvC;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3tBA;AACA,CAAC;;AAED;AACA,mBAAmB,KAA0B;AAC7C;AACA,kBAAkB,KAAyB;AAC3C;AACA,yBAAyB,qBAAM,gBAAgB,qBAAM;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB,cAAc,OAAO;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,UAAU;AACtB;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,UAAU;AACtB;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,MAAM;AACN,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB,cAAc,QAAQ;AACtB;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mCAAmC;AACnE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB;;AAEzB,0CAA0C,qBAAqB;;AAE/D;AACA;AACA;AACA;AACA;AACA,mCAAmC,oBAAoB;;AAEvD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,eAAe,iBAAiB;AAChC;;AAEA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,oBAAoB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAE,IAEU;AACZ;AACA,EAAE,mCAAmB;AACrB;AACA,GAAG;AAAA,kGAAC;AACJ,GAAG,KAAK,EAUN;;AAEF,CAAC;;;;;;;;ACjhBY;;AAEb;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;;;;;;ACfa;;AAEb,cAAc,GAAG,wCAAmC;AACpD,cAAc,GAAG,4CAAuC;;;;;;;;ACHxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE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","sources":["webpack:///webpack/universalModuleDefinition","webpack:///./ts/core/globals.ts","webpack:///./ts/core/common/matrixlib/SimpleItemTools.ts","webpack:///./ts/core/common/UI/Parts/RefLinkDefines.ts","webpack:///./ts/core/ProjectSettings.ts","webpack:///./ts/core/common/businesslogic/FieldDescriptions.ts","webpack:///./ts/core/common/businesslogic/TestManagerConfiguration.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/index.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/EmptyFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/RichtextFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/TextlineFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/CheckboxFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/SteplistFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/BaseValidatedTableFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/BaseTableFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/GenericFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/DropdownFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/TestStepsFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/TestStepsResultFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/TestResultFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/UserFieldHandler.ts","webpack:///./ts/core/common/businesslogic/BasicFunctions.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/DateFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/GateFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/HyperlinkFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/CrosslinksFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/ItemSelectionFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/DHFFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/GenericDocFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/GenericDocAbstractFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/SectionDescriptions.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/index.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/GenericTableDocHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/DateDocHandler.ts","webpack:///./ts/core/common/businesslogic/DateTimeBL.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/CustomDocFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/ItemSelectionFromToAbstractDocFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/ItemSelectionFieldHandlerFromTo.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/RemarksDocFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/DropdownAbstractDocFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/CheckBoxDocFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/DesignReviewDocFieldHandler.ts","webpack:///./ts/core/common/matrixlib/JQueryExtendReplacement.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/ItemIndexDocFieldHander.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/ItemListDocFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/ItemSelectionAbstractDocFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/LinkListDocFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/ItemTableDocFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/RiskStatsDocFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/ItemRefDocFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/ListOfFiguresDocFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/SmartTextDocFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/TableOfContentDocFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/testResultsDocFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/DerivedFromDocFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/DocumentOptionsFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/TextLineDocFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/RichTextDocFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/TraceMatrixDocFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/TraceDocFieldHandler.ts","webpack:///./ts/core/common/businesslogic/FieldHandlers/Document/DropdownDocFieldHandler.ts","webpack:///./ts/core/common/businesslogic/ItemConfiguration.ts","webpack:///./ts/core/common/matrixlib/LabelManager.ts","webpack:///./ts/core/common/matrixlib/JSONTools.ts","webpack:///./ts/core/common/matrixlib/LoggerTools.ts","webpack:///./ts/api/standalone.ts","webpack:///./node_modules/isomorphic-fetch/fetch-npm-browserify.js","webpack:///./node_modules/whatwg-fetch/fetch.js","webpack:///./ts/api/configuration.ts","webpack:///./ts/api/rest-api.ts","webpack:///./node_modules/btoa/index.js","webpack:///./node_modules/url/url.js","webpack:///./node_modules/punycode/punycode.js","webpack:///./node_modules/url/util.js","webpack:///./node_modules/querystring/index.js","webpack:///./node_modules/querystring/decode.js","webpack:///./node_modules/querystring/encode.js","webpack:///./ts/api/objects/Project.ts","webpack:///./ts/api/objects/Category.ts","webpack:///./ts/api/objects/Item.ts","webpack:///./ts/api/objects/Field.ts","webpack:///./ts/api/objects/TreeFolder.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///webpack/runtime/node module decorator","webpack:///webpack/before-startup","webpack:///webpack/startup","webpack:///webpack/after-startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"matrixConsoleApi\"] = factory();\n\telse\n\t\troot[\"matrixConsoleApi\"] = factory();\n})(this, () => {\nreturn ","import { MatrixSession } from \"./common/businesslogic/index\";\nimport { JsonValidator } from \"../jsonvalidation/JsonValidator\";\nimport { ItemConfiguration } from \"./common/businesslogic/index\";\nimport { Application } from \"./common/UI/Application\";\nimport { RestConnector } from \"./common/businesslogic/index\";\nimport { XRCrossProjectLink, XRTrimLink, XRCategoryAndRoot } from \"./RestResult\";\n\nimport { IApp } from \"./common/matrixlib/MatrixLibInterfaces\";\n\nexport type {\n    Admin, MatrixReq, Error, IControlDefinition, IGenericMap, IAnyMap,\n    IStringMap, IItemGetMap, INumberStringMap, IStringNumberMap, IBooleanMap,\n    IStringStringArrayMap, IStringJQueryMap, IJsonSetting, IRestParam,\n    IRestResult\n};\nexport type {\n    IReference, IItemIdParts, IReferenceChange,\n    IEmail, IDevice, ISize, IItem, ILink, IItemGet, IItemPut, IItemHistory,\n    IDataStorage\n};\nexport { ControlState, globalMatrix }\nexport { matrixSession, restConnection, app, matrixApplicationUI };\nexport { setIC, setMatrixSession, setRestConnection, setMatrixApplicationUI, setApp };\nexport { InstallLegacyAdaptor };\n\n// TODO(modules) why are these 2 interfaces here? To solve some type error elsewhere?\ninterface Admin { }\ninterface MatrixReq { }\n\ninterface Error { name: string, message: string }\ninterface IControlDefinition {\n    name?: string,\n    control?: JQuery,\n    fieldId?: number,\n    isDhfType?: boolean,\n\n    /**\n     * fieldType is set if this control supports displaying a particular kind of field.\n     * See FieldDescriptions for a list of many of the field types.\n     */\n    fieldType?: string\n}\n\n// helper to allow things like x={}; x[y] = 1\ninterface IGenericMap {\n    [key: string]: any\n}\ninterface IAnyMap { [key: string]: any }\ninterface IStringMap { [key: string]: string }\ninterface IItemGetMap { [key: string]: IItemGet }\ninterface INumberStringMap { [key: number]: string }\ninterface IStringNumberMap { [key: string]: number }\ninterface IBooleanMap { [key: string]: boolean }\ninterface IStringStringArrayMap { [key: string]: string[] }\ninterface IStringJQueryMap { [key: string]: JQuery }\n\ninterface IJsonSetting { id: string, value: any }\n\ninterface IRestParam extends Object { td?: number, reason?: string, filter?: string, [key: string]: any };\ntype IRestResult = {} | string;  \n\nclass GlobalMatrix {\n    // these should go once everything is converted...\n    verbose: boolean;\n    ItemConfig: ItemConfiguration;\n    PopulateProjects: Function; // exists only in admin client\n\n    mobileApp: {\n        Login: Function,\n        ShowLoginScreen: Function,\n        ShowMobileUI: Function\n    }; // exists only in mobile app\n    jiraPlugin: any; // jira cloud plugin\n\n    // declare var EmbeddedReport:any;\n    Admin: any;\n\n    doc: any; // no idea used in ContextFrames..\n\n    ITEM_DOES_NOT_EXIST: string;\n    matrixRestUrl: string; // delivered by server\n    matrixBaseUrl: string; // delivered by server \n    matrixWfgw: string; // delivered by server \n    matrixExpress: boolean; // delivered by server\n    matrixProduct: string; // delivered by server \n    matrixUniqueSerial: string; // delivered by server\n    mxOauth: string; // delivered by server \n    mxOauthLoginUrl: string; // delivered by server\n\n    serverStorage: IDataStorage; // keeps information in local client storage per server\n\n    projectStorage: IDataStorage; // keeps information in local client storage per project\n\n\n    wfgwConnection: RestConnector; // global plugin rest connection\n\n    globalShiftDown: boolean;\n    globalCtrlDown: boolean;\n\n    jsonValidator: JsonValidator;\n\n    // filter for activity stream / calendar\n    historyFilter;\n    // legacy,js\n    EmbeddedReport: any;\n\n    constructor() {\n        this.ITEM_DOES_NOT_EXIST = \"\";\n        this.globalShiftDown = false;\n        this.globalCtrlDown = false;\n        this.historyFilter = \"merge,delete,undelete,add,edit,execute,reviewed,signature,report,touch,release\";\n        this.mobileApp = undefined;\n    }\n\n    installLegacyAdaptor() {\n        globalThis.ITEM_DOES_NOT_EXIST = this.ITEM_DOES_NOT_EXIST;\n        globalThis.matrixRestUrl = this.matrixRestUrl;\n        globalThis.matrixBaseUrl = this.matrixBaseUrl;\n        globalThis.matrixWfgw = this.matrixWfgw;\n        globalThis.matrixExpress = this.matrixExpress;\n        globalThis.matrixProduct = this.matrixProduct;\n        globalThis.mxOauth = this.mxOauth;\n        globalThis.mxOauthLoginUrl = this.mxOauthLoginUrl;\n\n        globalThis.serverStorage = this.serverStorage;\n        globalThis.projectStorage = this.projectStorage;\n        globalThis.wfgwConnection = this.wfgwConnection;\n\n        globalThis.globalShiftDown = this.globalShiftDown;\n        globalThis.globalCtrlDown = this.globalCtrlDown;\n\n        globalThis.jsonValidator = this.jsonValidator;\n    }\n\n}\n\nvar globalMatrix: GlobalMatrix = new GlobalMatrix();\n\nfunction setIC(newIC: ItemConfiguration) {\n    globalMatrix.ItemConfig = newIC;  // To use in matrixApi\n    globalThis.IC = newIC; // legacy support\n}\nvar matrixSession: MatrixSession;\nfunction setMatrixSession(session: MatrixSession) {\n    matrixSession = session;\n}\nvar restConnection: RestConnector; // global rest connection\nfunction setRestConnection(rc: RestConnector) {\n    restConnection = rc;\n}\nvar matrixApplicationUI: Application; // the application\nfunction setMatrixApplicationUI(ui: Application) {\n    matrixApplicationUI = ui;\n}\n\n// TODO(modules): app was declared as interface MatrixReq, which is empty, and then usually\n// assigned to a variable of type businesslogic/UI/MatrixReq. We just opt out of typing for\n// this variable and ideally we should fix that with a real interface. I changed the type to\n// any to make the true situation easier to see.\nvar app: IApp; // main application \nfunction setApp(newApp: any) {\n    app = newApp;\n}\n\n// type JQuery = any;\n\n// global interfaces by matrix\ninterface IReference {\n    projectShortLabel?: string,\n    to: string,\n    title: string,\n    modDate?: string,\n    isIndirect?: boolean\n}\ninterface IItemIdParts { id: string, version: number, type: string, isFolder: boolean, url: string, link: string, linkv: string, number: number }\ninterface IReferenceChange { action: string, fromId: string, toId: string }\n\ninterface IEmail { summary: string, description: string, matrixProject: string, matrixItem: string, browser: string, log: string, email?: string };\ninterface IDevice { screen: ISize, viewport: ISize }\ninterface ISize { width: number, height: number }\n\ninterface IItem {\n    upLinks?: IReference[],\n    upLinkList?: XRTrimLink[],\n    downLinks?: IReference[],\n    children?: IItem[],\n    history?: IItemHistory[],\n    modDate?: string,\n    isUnselected?: number,\n    availableFormats?: string[],\n    selectSubTree?: XRCategoryAndRoot[],\n    requireSubTree?: XRCategoryAndRoot[],\n    icon?: string,\n    type?: string,\n    id?: string,\n    title?: string,\n    linksUp?: string,\n    linksDown?: string,\n    isFolder?: boolean,\n    isDeleted?: boolean,\n    maxVersion?: number,\n    docHasPackage?: boolean,\n    \n    [key: string]: any\n}\n\n// a link from one item to another item\ninterface ILink { from: string, to: string }\n\ninterface IItemGet extends IItem { labels?: string[], crossLinks?:XRCrossProjectLink[] }\ninterface IItemPut extends IItem { labels?: string, onlyThoseFields?: number, onlyThoseLabels?: number }\n\ninterface IItemHistory {\n    action: string, user: string, dateUserFormat: string, comment: string,\nid:string, version:number, date:string, title:string, deletedate?:string }\n\n\ninterface IDataStorage {  \n    setItem: (itemKey:string, itemVal:string, sanitize?:boolean) => void, \n    getItem: (itemKey:string, dontSanitize?:boolean) => string\n    getItemDefault: (itemKey:string,  defaultValue:string) => string\n}\n\n\nenum ControlState {\n    FormEdit= 0, //this is a embedded form which allows the user to modify the content\n    FormView, //this is read only version with (some) read only tools enabled (e.g. history)\n    DialogCreate, //this allows the user to modify the content, usually to create new elements. No tools \n    HistoryView, //is a read only version, e.g. used for the history where smart text and smart link is not resolved\n    Tooltip, // most things will not shown as tooltip...\n    Print, // for printing ...\n    Report, // special to render report into page\n    DialogEdit // between FormEdit and DialogCreate to edit an item in popup\n};\n\n// This is so that old legacy scripts can \"just work\" to a degree.\nfunction InstallLegacyAdaptor() {\n    globalThis.ControlState = ControlState;\n    globalThis.IC = globalMatrix.ItemConfig;\n    globalThis.matrixSession = matrixSession;\n    globalThis.restConnection = restConnection;\n    globalThis.app = app;\n    globalThis.matrixApplicationUI = matrixApplicationUI;\n    globalMatrix.installLegacyAdaptor();\n}","import { IItemIdParts, IItem, IReference, IReferenceChange, IItemGet, IItemPut, IGenericMap } from \"../../globals\";\nimport { refLinkStyle, refLinkTooltip } from \"../UI/Parts/RefLinkDefines\";\nimport { ISimpleItemTools } from \"./MatrixLibInterfaces\";\n\nexport { SimpleItemTools };\n\n// Implements ItemTools functionality with minimal dependencies\nclass SimpleItemTools implements ISimpleItemTools {\n    // extract different parts from item ids, like version, category, ...\n    public parseRef(itemRef: string, project: string, matrixBaseUrl: string): IItemIdParts {\n        let ref = itemRef; // e.g. F-REQ-13-v12\n        var result = {\n            id: \"\", // F-REQ-13-v12 -> REQ-13\n            number: 0, // F-REQ-13-v12 -> 13\n            version: 0, // F-REQ-13-v12 -> 12\n            type: \"\", // F-REQ-13-v12 -> REQ\n            isFolder: false, // F-REQ-13-v12 -> true\n            url: \"\", // company.matrixreq.com/project/REQ-13-v12\n            link: \"\", // <a href=url>item</a>\n            linkv: \"\" // <a href=url>url</a>\n        } as IItemIdParts;\n\n        var vp = ref.indexOf(\"-v\");\n        if (vp !== -1) {\n            result.version = parseInt(ref.substr(vp + 2));\n            ref = ref.substr(0, vp);\n        }\n        result.id = ref;\n        if (ref.indexOf(\"F-\") === 0) {\n            result.isFolder = true;\n            ref = ref.substr(2);\n        }\n        var parts = ref.split(\"-\");\n\n        if (parts.length > 1) {\n            result.type = parts[0];\n\n            result.number = Number(parts[1]);\n        }\n        result.url = matrixBaseUrl + \"/\" + project + \"/\" + itemRef;\n        result.link = \"<a style='color:blue !important' href='\" + result.url + \"'>\" + itemRef + \"</a>\";\n        result.linkv = \"<a style='color:blue !important' href='\" + result.url + \"'>\" + result.url + \"</a>\";\n\n        return result;\n    };\n\n    public getCreator(item: IItem): string {\n        return item.history[item.history.length - 1].user;\n    }\n\n    public getLastEditor(item: IItem): string {\n        return item.history.length > 0 ? item.history[0].user : \"\";\n    }\n\n    // render a list of item ids, to show up as <b>ID</b> name, <b>ID</b> name, \n    refListToDisplayString(inputItems: IReference[] | null, prefix: string, getTitleFunction: any, shorten?: number): string {\n\n        function makeLink(itemobj: IReference, shorten: boolean) {\n            if (!itemobj.projectShortLabel) {\n                return \"<b>\" + itemobj.to + \"</b>\" + (shorten ? \"\" : (\" \" + getTitleFunction(itemobj.to)));\n            }\n\n            var label = itemobj.projectShortLabel + \":\" + itemobj.to;\n\n            return \"#\" + itemobj.projectShortLabel + \"/\" + itemobj.to + \"#\";\n\n            //return \"<a class='crossProjectLink' title='\" + itemobj.title + \"' href='\" + matrixBaseUrl + \"/\" + itemobj.projectShortLabel + \"/\" + itemobj.to + \"' target='_blank'>\" + label + \"</a> \";\n        }\n\n        if (inputItems) {\n            // build the list ItemId Title can take a long time, e.g. if there's dozens of search results and the list should be a short list. In that case only show names if there's less than 5 items \n            let refs = inputItems.map(function (inputItem) { return makeLink(inputItem, shorten && inputItems.length > 4 ? true : false); });\n            let list = refs.join(\", \");\n            if (shorten && list.replace(/<b>/g, \"\").replace(/<\\/b>/g, \"\").length > shorten) {\n                refs = inputItems.map(function (inputItem) { return makeLink(inputItem, true); });\n                list = refs.join(\", \");\n            }\n            if (shorten && list.replace(/<b>/g, \"\").replace(/<\\/b>/g, \"\").length > shorten) {\n                list = \"<b>\" + list.replace(/<b>/g, \"\").replace(/<\\/b>/g, \"\").substr(0, shorten - 4) + \" ...</b>\";\n            }\n            if (prefix) {\n                list = prefix + \" \" + list;\n            }\n\n            return list;\n        }\n        else {\n            return \"\";\n        }\n    };\n\n    renderLink(itemId: string, itemTitle: string, newWindow?: boolean) {\n        let dbt = itemTitle;\n\n        return $(\"<div>\").refLink({\n            id: itemId,\n            folder: false,\n            title: dbt ? dbt : \"(deleted)\",\n            style: newWindow ? refLinkStyle.link : refLinkStyle.selectTree,\n            tooltip: refLinkTooltip.html\n        });\n    }\n    // update and changes to reference lists\n    updateReferences(oldReferences: IReference[], newReferences: IReference[], fromId: string | null, toId: string | null): IReferenceChange[] {\n\n        var changeList: IReferenceChange[] = [];\n        // find links to add\n        for (var idx = 0; idx < newReferences.length; idx++) {\n            var found = false;\n            for (var jdx = 0; jdx < oldReferences.length; jdx++) {\n                if (newReferences[idx].to === oldReferences[jdx].to) {\n                    found = true;\n                    continue;\n                }\n            }\n            if (!found) {\n                if (fromId) {\n                    changeList.push({ action: 'addLink', fromId: fromId, toId: newReferences[idx].to });\n                } else if (toId) {\n                    changeList.push({ action: 'addLink', fromId: newReferences[idx].to, toId: toId });\n                }\n            }\n        }\n        // find links to remove\n        for (var jdx = 0; jdx < oldReferences.length; jdx++) {\n            var found = false;\n            for (var idx = 0; idx < newReferences.length; idx++) {\n                if (newReferences[idx].to === oldReferences[jdx].to) {\n                    found = true;\n                    continue;\n                }\n            }\n            if (!found) {\n                if (fromId) {\n                    changeList.push({ action: 'removeLink', fromId: fromId, toId: oldReferences[jdx].to });\n                } else if (toId) {\n                    changeList.push({ action: 'removeLink', fromId: oldReferences[jdx].to, toId: toId });\n                }\n            }\n        }\n        return changeList;\n    };\n\n    // clone item from IItemGet to IItemPut\n    clone(item: IItemGet, copyLabels: boolean): IItemPut {\n        var newItem: IItemPut = {};\n\n        $.each(item, function (idx, val) {\n            if (idx !== \"maxVersion\" && idx !== \"labels\" && idx !== \"labels\" && idx !== \"downLinks\" && idx !== \"upLinks\" && idx !== \"type\" && idx !== \"children\" && idx !== \"hide\" && idx !== \"history\" && idx !== \"isUnselected\" && idx !== \"modDate\" && idx !== \"restricted\" && idx !== \"upLinkList\" && idx !== \"userRights\") {\n                (<IGenericMap>newItem)[idx] = val;\n            }\n        });\n\n        if (copyLabels) {\n            newItem.labels = item.labels.join(\",\");\n        } else {\n            newItem.labels = \"\";\n        }\n\n        return newItem;\n    }\n\n    sort(a: string, b: string, project: string, matrixBaseUrl: string) {\n        let at = this.parseRef(a, project, matrixBaseUrl);\n        let bt = this.parseRef(b, project, matrixBaseUrl);\n        if (at.type == bt.type) {\n            if (at.isFolder && !bt.isFolder) return -1;\n            if (bt.isFolder && !at.isFolder) return 1;\n\n            return at.number - bt.number;\n        }\n        return a < b ? -1 : 1;\n    }\n}","export type { IRefLinkOptions };\nexport { refLinkStyle, refLinkTooltip };\n\nenum refLinkStyle {\n    edit = 1, // user can change title\n    link, // click opens another window\n    show, // read only, can call callback if clicked\n    select, // renders like the link, but select the item in the tree (changes selection)\n    selectTree  // like link, but selects in tree unless ctrl-was clicked\n}\n\nenum refLinkTooltip {\n    none = 1, // no tooltip\n    html // full html tooltip\n}\n\ninterface IRefLinkOptions {\n    style?: refLinkStyle,\n    tooltip?: refLinkTooltip,\n    callback?: Function, // function to be called (if syle is refLinkStyle.show) or after edit\n    id?: string, // id of object\n    title?: string, //  title of object\n    folder?: boolean, //  (true if no id should be rendred)\n    showVersion?: boolean, //  \n    validate?: boolean, //   default is true. valdiation requires non-empty string,\n    isHidden?: boolean, //    default false, whether the item title should indicate that object is not in project filter\n    placeholder?: string,\n    hideTitle?: boolean, // option to hide the title\n    crossProject?: string // if the item id from another project\n    css?: string // possibility to add style information to class\n}\n","// example generation of json schema from typescript type\n// \n//  typescript-json-schema web/ts/ProjectSettings.ts ITestConfig > test.txt\n\nimport { IStringMap, IStringStringArrayMap } from \"./globals\";\nimport { JsonEditorValidation } from \".././jsonvalidation/JsonValidator\";\nimport { IPrintFunctionParamsOverwrites } from \"./printinterface/PrintFunction\";\nimport { ColumnEditor } from \"./common/businesslogic\";\n\nexport type {\n    IDeletedProjects, IWorkflowConfig, IWorkflowConfigOne2One, IWorkflowConfigProjectsAndTypes, IWorkflowConfigIssueType,\n    IWorkflowConfigStates, IWorkflowConfigStateDetails, IWorkflowConfigJira, IWorkflowConfigZoho, IWorkflowConfigIssueTypesZoho,\n    ITraceConfig, ITraceConfigDetails, ITraceConfigRule, TTraceRule, IQMSConfig,\n    ITraining, ITrainingMessages, IPublication, IPublicationCategory, IPublicationCategoryGroup, IPublishLegacy,\n    ILabelsConfig, ILabelStyle, ILabel, ILabelInstance, ILabelTemplate, ILabelGroup,\n    IFilterMenu, IDesignReview, IMailConfig, IMailConfigCanned, IMailConfigCustom, ISearchConfig, ISearchConfigSearch,\n    IInitialSearches, ILabelLockConfig, ILabelLockConfigLocks, IRiskConfig,\n    IRiskConfigMethod, IRiskConfigRT, IRiskConfigMitgationType, IRiskConfigFactor, IColDef, IRiskConfigMitgationTable, IRiskConfigTablesColumn,\n    RiskTableCellEditor, IRiskConfigFactorInputType, IRiskConfigFactorOption, IRiskConfigSelectChanges, IRiskConfigFactorWeight, IRiskConfigFactorWeightValue,\n    IRiskConfigReduction, IRiskConfigReductionOptions, IRiskConfigZone, IRiskConfigRPN, IRiskPostReduction, ICascadingSelect,\n    ICascadingSelectGroup, ICascadingSelectNumber, ICascadingSelectSelect, ICascadingSelectText,\n    IDHFConfig, ICaptions, ICaption, IDHFCategories, IDHFConfigCustomReports, IDHFConfigDefaultFormats, IDHFConfigDefaultFormatsOption,\n    IDHFConfigHideFormat, IDHFConfigCustomColumn, IDHFConfigTable, IDHFConfigTableColumn, IDHFConfigTableColumnType, IDHFConfigCustomTable,\n    IDHFConfigStandardDocs, IDHFConfigStandardDocsDef, IDHFConfigStandardDocsSection, IContextPageConfig, IContextPageConfigHelp,\n    IContextPageConfigTab, ContextPageConfigTabOption, ITestConfig, ITestConfigPresetField, ITestConfigTables, ITestConfigTablesColumns,\n    ITestConfigTablesColumn, TableCellEditor, ITestRule, ITestRuleAuto, ITestRuleManual, ITestRuleStep, TestResultType,\n    TestResultRule, ICategorySetting, ICategorySettingTitle, ICategorySettingTextIcon, ICategorySettingTabs, ICategorySettingTab,\n    ICategoryGroups, ICategoryGroup, IACL, IACLRules, IACLGroupsAcl, IFieldParameter, IDropDownConfig,\n    IDropdownGroup, IDropdownOption, IAutoFillSetting, ISmartTextConfig, ISmartTextConfigReplacement, IProjectLogo,\n    IExtras, IImportConfig, IImportConfigDetails, IEmbeddedReport, IProjectGroups, IProjectGroup, IFieldCapabilities, IFieldDescription, INotificationConfig,\n    IAutoColumn, IAutoColumnMap, IAutoColumnMapping,\n    ICleanup, ICleanupProtocol\n};\n\nexport { EnumItemPublish, qmsDefaultConfig, mailConfigSetting, smartTextConfigSetting, autoColumnSetting, autoColumnDefault, notificationSetting, defaultNotificationConfig, ACL_SETTING };\n\n// --------------------------------------------------\n// public project settings in admin client\n// --------------------------------------------------\n\ninterface IDeletedProjects {\n    deleted:string[];\n}\n\n// *******************************\n// workflow (JIRA, Zoho, Weblinks\n// *******************************\n\ninterface IWorkflowConfig {\n    enabled?: boolean,\n    defaultProjectId?: string,\n    defaultTypeId?: string,\n    projectsAndTypes?: IWorkflowConfigProjectsAndTypes[],\n    one2one?: IWorkflowConfigOne2One,\n    states?: IWorkflowConfigStates[],\n    pluginId: number\n}\ninterface IWorkflowConfigOne2One {\n    projectId: string, typeId: string\n}\ninterface IWorkflowConfigProjectsAndTypes {\n    key: string, id: string, issueTypes: IWorkflowConfigIssueType[], name: string\n}\ninterface IWorkflowConfigIssueType {\n    id: string, name: string, icon?: string, quickIssue?: boolean\n}\ninterface IWorkflowConfigStates {\n    projectId: string, typeId: string, states: IWorkflowConfigStateDetails[]\n}\ninterface IWorkflowConfigStateDetails {\n    name: string, color: string, background: string, done: boolean | string\n}\ninterface IWorkflowConfigJira extends IWorkflowConfig {\n    hideCreateJiraSimpleIssue?: boolean,\n    hideCreateJiraNativeIssue?: boolean,\n    requireCommitTicket?: boolean,\n    addJIRAComment?: boolean,\n\n}\ninterface IWorkflowConfigZoho extends IWorkflowConfig {\n    zohoBaseUrl?: string\n}\ninterface IWorkflowConfigIssueTypesZoho extends IWorkflowConfigIssueType {\n    prefix: string,\n    details?: string\n}\n\n// *******************************\n// trace config        \n// *******************************\ninterface ITraceConfig { rules: ITraceConfigDetails[] } // configuration of tracability rules \ninterface ITraceConfigDetails {\n    category: string, // id of category\n    creates_end: string|boolean,\n    end_point?:string,\n    reporting: string[], up_rules: ITraceConfigRule[], down_rules: ITraceConfigRule[]\n}\ninterface ITraceConfigRule { message: string, name: string, rule: TTraceRule, any_of: string[] }\ntype TTraceRule = \"can_have\" | \"must_have\"\n// *******************************\n// qms configuration        \n// *******************************\n\n\nenum EnumItemPublish {\n    IfNotInGroup=0, //allow items to be published unless they are in a group\n    Always=1, // allow items to be published even if they are in a group\n    Never=2 // items cannot be published by itself \n}\n\n\ninterface IQMSConfig {\n    /** there's only one publication in the array supported */\n    publications: IPublication[ ]\n    // roles are defined globally\n    rolesTargetProjects?:string[] // a list of projects to which the roles can be published to\n    affectedByField?:string //optional to overwrite the default field name \"Affected by Process\"; \n    responsibleForField?:string // optional to overwrite the default field name \"Responsible for Process Application\"; \n    training?:ITraining\n    /** Experimental: comma separated list of labels to show in published site -> if they are set */\n    showLabels?:string\n    /** obsolete */\n    legacyRoles:boolean, // set to true to show roles as drop downs and not as groups\n}\ninterface ITraining {\n    messages?:ITrainingMessages;\n}\ninterface ITrainingMessages {\n    trainingSub?:string\n    trainingText?:string\n    overdueSub?:string\n    overdueText?:string\n}\n\ninterface IPublication {\n    /** information for each publishable category */\n    rules: IPublicationCategory[], // which categories to publish when\n    /** needs to be PUB right now */\n    toCategory:string // into which category to publish default PUB\n    /** needs to be pub right now */\n    target:string // same as toTarget for URL, default pub\n    /** comma separated list of users who can publish */\n    publisher: string // comma separated list of publishers\n    /** beta: userMode: default 0 - select the logged in user, 1 no user pre selected, 2: hide all other users , 3: hide all other users (Strict mode) */\n    userMode?:number,\n    /** obsolete */\n    keepFlatList:boolean // if true items are created as flat list. if not set (new default) items are created in a folder hierarchy\n}\ninterface IPublicationCategory {\n    /** the category for which the rule applies  */\n    category:string, // category id\n    /** a list of labels which must be set to be able to publish (approved labels)*/\n    readyLabels: string[], // in case there are labels which must be set to be able to publish\n    /** how individual items can be published:  0 - only if they are not in a group, 1 - independently of groups, 2 - only as part of a group*/\n    itemRules: EnumItemPublish // to define if items should only be published as part of a group,\n    /** name of the group, displayed in the UI as heading in the navigation of the live qms */\n    groupName?: string; // name of group like SOP\n    /** identification of labels which define the group (groupType setting in labels)  */\n    groupLabelType?: string // identification of label, e.g. SOP labels\n    /** if a PROC should only be published with its WI,s the group down would be WI*/\n    groupDown?:string[] // categories which are pulled in group\n}\n\ninterface IPublicationCategoryGroup {\n    category:string, // grouping based on which category\n    groupName: string; // name of group like SOP\n    groupLabelType: string // identification of label\n}\n\nconst qmsDefaultConfig: IQMSConfig = {\n    publications: [{\n        rules: [\n            {\n                category: \"PROC\", // category id\n                readyLabels: [\"PROCOK\"], // in case there are labels which must be set to be able to publish\n                itemRules: EnumItemPublish.IfNotInGroup,\n                groupName: \"SOP\",\n                groupLabelType: \"SOPS\",\n                groupDown: [\"WI\"]\n            },\n            {\n                category: \"WI\", // category id\n                readyLabels: [\"WIOK\"], // in case there are labels which must be set to be able to publish\n                itemRules: EnumItemPublish.IfNotInGroup,\n            }\n        ], // which categories to publish when\n        toCategory: \"PUB\", // into which category to publish\n        target:\"pub\", // the name under which to publish the category (part of the URL, defaults to pub)\n        keepFlatList:false, // if true items are created as flat list. if not set (new default) items are created in a folder hierarchy\n        publisher: \"_\" // comma separated list of publishers _ for legacy: look in category setting for PUB,\n        \n    }\n    ],\n    legacyRoles:false // use user groups \n}\n\ninterface IPublishLegacy {\n    publisher:string // comma separated list of users who can click on publish button\n}\n\n// *******************************\n// labels configuration        \n// *******************************\ninterface ILabelsConfig {\n    /** basic label definitions */\n    labels: ILabel[],\n    /** grouping of labels to or, xor or review groups */\n    groups: ILabelGroup[],\n    /** array of the design review labels */\n    design_reviews?: IDesignReview[],\n    /** allows to change the background color of the top bar if a filter is selected */\n    filterBackgroundColor?: string,\n    /** if set to true, the filters are shown in a drop down menu (each group needs to be added as well)*/\n    useFilterMenu?: boolean,\n    /** beta: when looking at an item, it shows the labels underneath the item if set to true - this allows for more items.. */\n    useLabelBar?:boolean \n    /** invert groups in items (this will make groups show in the wrong order... as it was in 2.2 and before) */\n    invertGroups?:boolean\n}\n\n\ninterface ILabelStyle {\n    label: {\n        on: {\n            foreground: string,\n            background: string,\n            icon?: string,\n            displayName: string,\n            tooltip?: string\n        },\n        off: {\n            foreground: string,\n            background: string,\n            icon?: string,\n            displayName: string,\n            tooltip?: string\n        }\n    },\n    filter: {\n        on: {\n            foreground: string,\n            background: string,\n            icon?: string,\n            displayName: string,\n            tooltip?: string\n        },\n        off: {\n            foreground: string,\n            background: string,\n            icon?: string,\n            displayName: string,\n            tooltip?: string\n        }\n    }\n}\ninterface ILabel {\n    label: string,\n    categories: string[],\n    editors?: string[], // can be set to restrict clicking on labels to comma seperated list of users\n    reportName: string,\n    reportHide?: string, // can be 'unset' in order to not show it if it is NOT set\n    default?: boolean | string // set the label when creating new elements\n    defaultAsk?: boolean, // show in UI to set when creating new elements\n    style: ILabelStyle\n    // dynamic\n    isSelected?: boolean,\n    isNegative?: boolean,\n    askForComment?: boolean,\n    displayName?: string,\n    toolTipFilterOn?: string,\n    color?: string\n    template?: ILabelTemplate\n    dontCopy?:boolean // if set to true the label will be ignored during copy and paste of items\n}\n\ninterface ILabelInstance extends ILabel {\n    btn:JQuery;\n}\n\ninterface ILabelTemplate {\n    id: number,\n    name: string,\n    key: string\n}\ninterface ILabelGroup {\n    selection: string,\n    labels: string[],\n    filterMenu?: IFilterMenu,\n    // only for some groups\n    default?: string, defaultAsk?: boolean,\n    noColor?: string, noName?: string, noIcon?: string,\n    reset?: boolean,\n    foreground?: string, background?: string\n    askForComment?: boolean,\n    showComments?: boolean,\n    tooltip?: string,\n    reviewers?: string[], // can be a list of reviewers: if set only these users can change the label \n    groupType?:string, // can be used to set a group type (used internally e.g. to indicate a group is a SOP group)\n    //dynamic\n    labelDef?: ILabel[],\n    filterSelection?: string\n    virtualGroup?:boolean // set to true of the group is created on the fly for labels which are in no real group\n}   \n\ninterface IFilterMenu {\n    displayName: string,\n    on?: {\n        foreground: string,\n        background: string,\n        icon?: string,\n        displayName: string,\n        tooltip?: string\n    },\n    off?: {\n        foreground: string,\n        background: string,\n        icon?: string,\n        displayName: string,\n        tooltip?: string\n    }\n\n}\ninterface IDesignReview {\n    /** id of label (no spaces, special characters) */\n    label: string,\n    /** define who can approve the review. Empty array -> everybody.  */\n    reviewers?: string[],\n    /** beta: allow to specify the name of a field from which to take possible approvers. If set it has precedence over reviewers */\n    reviewerField?:string,\n    /** set to true if labels should be reset if item is changed */\n    reset: boolean,\n    /** title of review  */\n    reviewName: string,\n    /** sub title */\n    reviewHelp: string,\n    /** list of questions, checkboxes, or a signature box */\n    reviewDetails: { name: string, help?: string, type?:string }[],\n    /**  can be set to rename comment field to something else than \"Design Review Comment\" */\n    commentHeading?:string,  \n    /** can be used to set a group type (used internally e.g. to indicate a group is a design review for a Process) */\n    groupType?:string, \n    /** can be used to put the reviews' filter into the filter menu if enabled */\n    filterMenu?:IFilterMenu\n    /** beta: allows to name a table field. If this exists, the revision need to increase when setting the label */\n    revisionTableName?:string\n}\n\n// *******************************\n// mail config\n// *******************************\nconst mailConfigSetting = \"mail_config\";\ninterface IMailConfig {\n    canned?: IMailConfigCanned, // can be used to overwrite standard email messages send / proposed by the system\n    defaultCC?:string[], // can be set to a default CC user to be added to all emails\n}\ninterface IMailConfigCanned {\n    /**  replacement for please sign message (in SIGN page)*/\n    please_sign?: string,\n    /** replacement for look at item message (in tool menu)*/\n    look_at?: string, \n   /** replacement for training message (in SIGN page)*/\n    training?: string, \n   /** replacement for document released message (in SIGN page)*/\n   release_note?: string, \n   /** Generic replacement */\n   [key:string]:string|undefined \n}\ninterface IMailConfigCustom {\n    name: string, // name of this mail in send to menu \n    categories: string[], // categories for which message should be available\n    to: string[], // a list of users who should get the message\n    subject: string, // the subject\n    message: string // the message\n}\n\n// *******************************\n// *******************************\ninterface ISearchConfig {\n    searches: ISearchConfigSearch[],\n    init?: IInitialSearches[]\n}\ninterface ISearchConfigSearch {\n    name: string, expr: string\n}\ninterface IInitialSearches {\n    expr: string, style:string, computeFolder:number\n}\n// *******************************\n// label lock config \n// *******************************\n\ninterface ILabelLockConfig {\n    locks:ILabelLockConfigLocks[]\n}\ninterface ILabelLockConfigLocks {\n    label:string, // label which locks \n    lockKeeper:string[], // user who can unlock the item (by resetting the label)\n    /**  if set to true, the user can add up / down traces to the item even if the item is locked*/\n    allowTraces?:boolean\n}\n\n// *******************************\n// risk config\n// *******************************\ninterface IRiskConfig {\n    factors?: IRiskConfigFactor[], //  a list of factors contributing to risk levels, see below\n    method?: IRiskConfigMethod, // \"+\" or \"*\" whether to add or multiply the risk factors, \"lookup\" to get values from lookup table\n    // '+' / '*' as method:\n    maxGreen?: number, // the maximum risk level value which will be shown in green (low risk)\n    maxYellow?: number, // the maximum risk level value which will be shown in yellow (moderate risk), all above will be red (high risk)\n    // 'lookup' as method\n    charts?: IRiskConfigZone[], // colors and text per risk class\n    rpns?: IRiskConfigRPN[], // lookup table to determine for risk priority numbers based on weights\n    // risk controls\n    riskCategory?:string, // can be used to overwrite the risk category which by default is RISK\n    riskCategories?:string[], // can be used to specify several risk categories 8if there's more than one)\n    mitigationTypes?: IRiskConfigMitgationType[], // a list of categories which can be used as risk controls, see below. If there are no mitigations the RBM section will not be shown.\n    mitigationTable?: IRiskConfigMitgationTable, // when user wants to show risk in table instead of 'normal' item list \n    mitigationColDef?:IColDef // can be used to specify css of column if rendered as table\n    reductions?: IRiskConfigReduction[], // a list describing how risk levels can be reduced by risk controls, see below.\n    postReduction?: IRiskPostReduction // option for user selection after risk controls\n    // optional setting to configure if/how risk assessment is rendered\n    rbm?: IRiskConfigRT,// allows to overwrite the default text used for Risk Before Mitigation fields \n    ram?: IRiskConfigRT, // allows to overwrite the default text used for Risk After Mitigation fields (RAM) \n    controls?: string, // allows to overwrite the default text used for Risk Controls \n    // \n    hazard_category?: string\n}\ntype IRiskConfigMethod = \"+\" | \"*\" | \"lookup\";\n\ninterface IRiskConfigRT {\n    short: string, // text used in UI just before the field\n    long: string, // text used in tooltip in UI\n    report: string, // text used in report\n    hidden?: boolean // default:false, set to true if this should not be displayed/reported\n    colDef?:IColDef // can be used to specify css of column if rendered as table\n}\ninterface IRiskConfigMitgationType {\n    type: string, //  the short label of the category, like REQ, SPEC, TC, ...\n    name: string //  the name shown on the button to select the items, e.g.Requirement, Risk Control, ...\n}\ninterface IRiskConfigFactor {\n    type: string, // an unique identification of the factor\n    label: string, // the label displayed in the UI, where user can enter some text, e.g. \"Cause\" or \"Effect\"\n    weights: IRiskConfigFactorWeight[] // an array of definitions describing how the factor contributes to the risk level, each weight is a a drop down of values\n    hideTextInput?: boolean, // default: false, set to trueif there should not be a text input field to specify details \n    readonly?: boolean, //  default: false, can be set to true if user should not be able to change the field \n    inputType?: IRiskConfigFactorInputType, // default:text (a single line text input), can be used to overwrite the input as a drop down selection or a text area \n    options?: IRiskConfigFactorOption[], // if inputType is \"select\" this contains the values which can be selected \n    spancols?:boolean // if true and there are no weights, the input field will be spanning over full width\n\n    colDef?:IColDef // can be used to specify css of column if rendered as table\n}\n\ninterface IColDef {\n    width?:string, // if rendered as table this can be used to specify the css of the width\n    minWidth?:string, // if rendered as table this can be used to specify the css of the min-width\n    maxWidth?:string// if rendered as table this can be used to specify the css of the max-width\n    rowSpan?:boolean // if set to true, all rows, share the same value for that column\n}\n\ninterface IRiskConfigMitgationTable {\n    columns:IRiskConfigTablesColumn[]\n}\n\ninterface IRiskConfigTablesColumn {\n    name: string,\n    field: string,\n    editor: RiskTableCellEditor,\n    options?: any\n}\ntype RiskTableCellEditor = \"control\" | \"reduction\"; // note these are the 'special' editors  for risk reduction table, all others works also...\n\ntype IRiskConfigFactorInputType = \"text\" | \"select\" | \"textarea\" | \"richtext\";\n\ninterface IRiskConfigFactorOption {\n    value: string, // a unique identifier\n    label: string, // text to display\n    changes: IRiskConfigSelectChanges[] // for input select only. Allows to automatically change other inputs / weights when the select changes \n}\n\ninterface IRiskConfigSelectChanges {\n    changesFactor?: string, // identifier (type) the factor to be modified OR\n    changesWeight?: string, // identifier (type) the weight to be modified \n    value: number|string // the new value to set\n}\n\ninterface IRiskConfigFactorWeight {\n    type: string, // an identifier of the contributing factor\n    help: boolean, // if set true a help popover will explain the values\n    label: string, // the label displayed in the UI, where the user can select a value from the drop down, e.g. \"Probability\", \"Severit\"y or \"Detectability\"\n    readonly?: boolean, // default false, set to true, if an input field should not be changeable by the user  \n    hidden?: boolean, // default false, set to true, if field should be hidden\n    values: IRiskConfigFactorWeightValue[] // an array of options of the drop down\n    colDef?:IColDef // can be used to specify css of column if rendered as table\n}\n\ninterface IRiskConfigFactorWeightValue {\n    shortname: string,// name displayed in the UI, can omitted to only show the factor\n    help: string,// name displayed in tool tip help\n    factor: number //factor which goes into calculation of risk\n}\n\ninterface IRiskConfigReduction {\n    name: string,// a unqiue id of the reduction factor\n    options: IRiskConfigReductionOptions[] // an array of reductions factors describing how the risk level can be reduced. These show up as drop down of values:\n}\ninterface IRiskConfigReductionOptions {\n    shortname: string, // the string shown in drop down\n    by: number,  // the amount by which a factor of the risk is changed (so negative values reduce the risk level)\n    changes: string, // defines which weight is reduced.\n}\ninterface IRiskConfigZone {\n    zone?: string, // unqiue ID\n    foreground?: string, // foreground color in the user interface\n    background?: string, // background color in the user interface\n    textColor?: string, // text color in reports\n    label?: string // text to be displayed\n}\n\ninterface IRiskConfigRPN { // e.g. { \"probability\":5, \"severity\":4, \"zone\":\"LOW\", \"text\":\"5 x 4 = 20\" }\n    zone: string, // ID of zone\n    text: string, // for below combination of numbers: the resulting zone(char) and text\n    [key: string]: string | number // properties for each weight defining the lookup value for this lookup entry\n}\n\ninterface IRiskPostReduction {\n    weights: IRiskConfigFactorWeight[]\n    help?: string // help text, defaults to \"Risk After Risk Controls\"\n}\n\n\n// *******************************\n// cascading select config\n// *******************************\n\ninterface ICascadingSelect {\n    startGroupId: string, // selectes one of the define groups to start with\n    groups: ICascadingSelectGroup[] // GUID is made out a combination of the defined groups\n}\ninterface ICascadingSelectGroup {\n    groupId: string, // id of a group\n    type: \"text\" | \"number\" | \"select\",\n    spec: ICascadingSelectText | ICascadingSelectNumber | ICascadingSelectSelect[] // depends on type\n}\ninterface ICascadingSelectNumber {\n    counter: string, // db counter name\n    format: string, // how number is displayed, e.g. ### or ##, ...\n    nextGroupId: string // possibly another group to follow\n}\ninterface ICascadingSelectSelect {\n    text: string, // option in dropdown menu\n    help?: string, // help text for user\n    nextGroupId: string // if option is selected, possibly another group to follow\n}\ninterface ICascadingSelectText {\n    text: string, // static text block\n    nextGroupId: string // possibly another group to follow\n}\n\n\n\n\n// *******************************\n// dhf config\n// *******************************\n\ninterface IDHFConfig {\n    /** if set to true the created PDFs won't be locked */\n    doNotLockPDF?: boolean \n    /** default formats for different report types */\n    defaultFormats?: IDHFConfigDefaultFormats \n    /** table configuration for audit trail table */\n    audittrail?: IDHFConfigTable, // \n    /** table configuration for signature table*/\n    signatures?: IDHFConfigTable, \n    /** table configuration for responsibilities table */\n    responsibilities?: IDHFConfigTable, \n    /** list with predefined document sections when creating new DOC items */\n    controlledDocs?: IDHFConfigStandardDocs,\n    /** can be used to define custom table columns (e.g. dropdowns) */\n    customColumns?: IDHFConfigCustomColumn[],\n    /** allows to specify an alternative for \"Ready to Sign / Release\" button*/\n    archiveButtonName?: string, \n    /** if set to true a warning will be shown if there's a missing signature */\n    warnMissingSign?:boolean  \n    // 2.0\n    /** possibility to overwrite options in signature meaning column */\n    signatureMeanings?:IStringMap // \n    \n    // 2.3\n    /**  beta: if true a user can reject instead of signing. the reject comment will be stored and showed, other cannot sign anymore */\n    canReject?:boolean, \n    /**  beta:  if canReject is true and this is true the user can reject without supplying a password */\n    rejectWithoutPass?:boolean, \n    /** beta: if canReject is true and this is true the user needs to supply special comment to reject */\n    rejectNeedsComment?:boolean, \n    /** beta: text shown in signature box if someone needs to sign something */\n    signatureHint?: string \n    /** beta: list of users who can change name of person who needs to sign */\n    proxyRights?:string[] \n    /** beta: a list of options to declare what user is signing for [\"i release\", \"i confirm correct\",\"I don't know\"], */\n    signedMeaning?:string[] \n    /** beta: removes not needed notifications and adds new ones when changing signatures proxies */\n    fixNotifications?:boolean \n    /** beta: 0 leave original sign info. 1 replace name and title when changing signature proxies */\n    proxySignTableUpdate?:number \n    /** beta: set to true show a column with sign meaning in SIGN */\n    showOriginalSignMeaning?:boolean \n\n    // obsolete:\n    /** obsolete */\n    hideFileFormats?: IDHFConfigHideFormat[], // possibility to hide formats per report type\n    /** obsolete */\n    customTables?: IDHFConfigCustomTable[] // possibility to define custom tables \n    //  customTable1_id\": IDHFConfigTable,\n    // customTable2_id: IDHFConfigTable, \n    /** obsolete  */\n    customReports?: IDHFConfigCustomReports, // legacy option defining customer specific reports \n    /**  obsolete */\n    categories?: IDHFCategories, // allows to overwrite defaults\n    /**  obsolete */\n    captions?: ICaptions, // set to at least {} will enable captions for figures/tables (see below for more options)\n    /**  obsolete */\n    renderInTree?:string[], // if REPORT, SIGN, DOC should be rendered in normal tree\n    /** obsolete */\n    toolFolderName?:string, // can be set to rename the \"Project, Reports & Controlled Documents\" folder\n    /** obsolete */\n    functionDefaults?:IPrintFunctionParamsOverwrites // overwrites for print functions\n}\n\n// definition of formatting of captions and references to captions\ninterface ICaptions {\n    figure?: ICaption, // optional: specify how references to captions are rendered (default italic)\n    table?: ICaption// optional: specify how references to captions are rendered (default italic)\n}\ninterface ICaption {\n    preNo: string, // e.g. \"Figure \"\n    postNo: string, // e.g \".\"\n    \n}\ninterface IDHFCategories {\n    documentTypes: string[], // DOC, SIGN, REPORT\n    documentForms: string[], // DOC\n    documentSigned: string[], // SIGN items which have / can be signed (frozen)\n    documentTemplates: string[] // SIGN items which can be used as a template\n    signAs: string  // SIGN category to create in order to sign\n}\n\ninterface IDHFConfigCustomReports {\n    // allows to add custom reports (legacy option, not available to customers)\n    group: string;\n}\ninterface IDHFConfigDefaultFormats {\n    DOC: IDHFConfigDefaultFormatsOption, // default format of documents create from DOC items\n    SIGN: IDHFConfigDefaultFormatsOption, // default format of documents create from SIGN items\n    REPORT: IDHFConfigDefaultFormatsOption, // default format of documents create from REPORT items\n    [map: string]: IDHFConfigDefaultFormatsOption\n}\ntype IDHFConfigDefaultFormatsOption =\n    \"docx\" // word\n    | \"pdf\" // pdf\n    | \"html\" // html\n    ;\n\ninterface IDHFConfigHideFormat {\n    category: string,\n    format: IDHFConfigDefaultFormatsOption\n}\ninterface IDHFConfigCustomColumn {\n    type: string,\n    options: IDropdownOption[]|any,\n    name: string,\n    editor?: string\n}\ninterface IDHFConfigTable {\n    columns: IDHFConfigTableColumn[]\n}\ninterface IDHFConfigTableColumn {\n    name: string,\n    field: string, // col0, col1, col2, etc.\n    columnType: IDHFConfigTableColumnType,\n    pos: number,  // pos of column 0,1,2\n    editor?: TableCellEditor,\n    options?: IDropdownOption[]\n}\ntype IDHFConfigTableColumnType =\n    \"type0\" // Short Text (one line text)\n    | \"type1\" // Long Text (multi line text)\n    | \"type2\" // Version Letter (A, B, C, ...)\n    | \"type3\" // eSignature (for electronic signatures)\n    | \"type4\" // Name (a printed user name)\n    | \"type5\"  // eDate (automatic date if there is a eSignature in the same row)\n    | \"type6\" // : \"signaturemeaning\",\n    | \"type7\" // : \"eco\",\n    | \"type8\" // \"ecocapa\"\n    | \"type9\" // date\n    | \"type10\" // not used anymore\n    | \"type11\" // Group / Role\n    | \"type12\" // Revision\n    | \"type13\" // auto date: when creating a new row set the date\n    | \"type14\" // number\n    \n    ;\ninterface IDHFConfigCustomTable {\n    name: string, // name of table (in section selection dialog\n    id: string // internal id of table (valid json keys, e.g. customTable1_id)\n}\n\ninterface IDHFConfigStandardDocs {\n    [key: string]: IDHFConfigStandardDocsDef // defines a standard doc template, e.g \"Plan\": IDHFConfigStandardDocsDef\n}\ninterface IDHFConfigStandardDocsDef {\n    fields: IDHFConfigStandardDocsSection[] // defines sections of a standard doc template\n}\ninterface IDHFConfigStandardDocsSection {\n    [key: string]: string\n}\n\n// *******************************\n// context pages \n// *******************************\n\ninterface IContextPageConfig {\n    categoryHelp?: IContextPageConfigHelp, // allows to define specific help text per category (needs \"help\" tab enabled)\n    itemHelp?: IContextPageConfigHelp, // allows to define specific help text per item (needs \"help\" tab enabled)\n    tabs?: IContextPageConfigTab[] // defines the tabs in the context pages\n}\ninterface IContextPageConfigHelp {\n    [key: string]: string // defines custom help information for a given category if na item of this category is selected, e.g. \"UREQ\":\"please enter user requirements\",\"SREQ\":\"define system requirements here\"\n}\ninterface IContextPageConfigTab {\n    title: string, // the name of the context tab in the ui\n    type: ContextPageConfigTabOption, // defines the content of the tab\n    tabId?:string, // internal tab id once generated\n    hipchat?: boolean, // depriciated\n    baseURL?: string // (required for type iframe) Note: the url must be on an https://  protocol, otherwise the browser will reject to load it.\n}\n\ntype ContextPageConfigTabOption =\n    \"help\" // shows a tab with pre-defined (or custom) help explaining what you can do with the selected item, depedning on its category \n    | \"support\" // allows to create help desk tickets from within the software including information about the item/project and operating system / browser\n    | \"faq\" // shows a tab with faqs about the product. This is useful for first time visitors\n    | \"references\" //  shows a tab with all up and down references of the selected items\n    | \"smartlinks\" // shows a tab with all smartlinks in the text boxes and tables of the selected item\n    | \"iframe\" // embeds an iframe. This iframe can be page which is hosted on your own servers. When called it receives the content of the selected item (as payload) \n    | \"iframeget\" // embeds an iframe. This iframe can be page which is hosted on your own servers. When called it receives part of the item information in the called url\n    | \"upreferences\" // (recursive) uplinks\n    | \"downreferences\" // (recursive) downlinks\n    | \"foldercontent\" //  shows the items and folders in a folder \n    | \"trainings\" // shows any registered trainings\n    ;\n\n// *******************************\n// XTCconfig\n// *******************************\n\ninterface ITestConfig {\n    xtcType: string, // must be \"XTC\"\n    cloneSources: string[], // all categories which can be converted to XTC, e.g. [ \"TC\", \"ITC\" ]\n    presetFields: ITestConfigPresetField[], // fields that the user can enter when creating XTCs, e.g. [ { \"field\": \"name\", \"value\": \"Version\" } ]\n    render: ITestConfigTables, // defines how tables look like\n    defaultTestResultResult: string, // \"an|warning|not started\",\n    automatic: ITestRuleAuto[],\n    manual: ITestRuleManual[],\n    perStep: ITestRuleStep[],\n    reExecute?:string, // a (search expression) to find failed tests to re execute them\n    autoFillTester?:string // first - set it to user saving if empty, last - always set it to user saving, \"\" - don't set it\n}\n\ninterface ITestConfigPresetField {\n    field: string, // how to identify the field (\"name\" means the displayed name\", \"meaning\" can refer to a field setting fieldMeaning)\n    value: string, // the what the field name should be\n}\ninterface ITestConfigTables {\n    [key: string]: ITestConfigTablesColumns;\n}\n\ninterface ITestConfigTablesColumns {\n    columns: ITestConfigTablesColumn[]\n}\n\ninterface ITestConfigTablesColumn {\n    name: string,\n    field: string,\n    editor: TableCellEditor,\n    options?: IDropdownOption[]|any\n}\n\ntype TableCellEditor = ColumnEditor.text | ColumnEditor.none | ColumnEditor.textline | ColumnEditor.design | ColumnEditor.uprules | ColumnEditor.downrules | ColumnEditor.rules | ColumnEditor.result | ColumnEditor.user | ColumnEditor.versionletter | ColumnEditor.date | ColumnEditor.select;\n\ninterface ITestRule {\n    human: string, //a human readable text explaining the test result\n    code: string, // a unique identifier for the status of the test result\n    render: TestResultType // whether test result means 'ok' (all good), 'error' (test failed), 'warning' (e.g. not completed): this is used in report renderings\n}\n\ninterface ITestRuleAuto extends ITestRule {\n    rule: TestResultRule, // the type of rule to determine from the test steps the overall status. Can be 'one', 'all' or ''. The first rule matching determines the status\n    param: string // parameter for the rule, i.e. a code of a test step\n}\n\ninterface ITestRuleManual extends ITestRule {\n    command: string // Tthe string in the drop down menu\n}\ninterface ITestRuleStep extends ITestRuleManual {\n    key: string, // the keyboard shortcut\n    image: string // so far only internally used to show icons for common states (passed, fail and docu)\n}\n\ntype TestResultType = \"ok\" | \"error\" | \"warning\";\ntype TestResultRule = \"all\" | \"one\" | \"\";\n\n\n\n// --------------------------------------------------\n// project settings full admin client\n// --------------------------------------------------\n\n// ******************************* \n// categories rendering / label + color\n// *******************************\ninterface ICategorySetting { }\ninterface ICategorySettingTitle extends ICategorySetting {\n    // name of category setting: title \n    // example of value:  {create:\"TITLE OF THIS\", placeholder:\"enter title of this\"}\n    create?: string,      // if user can enter title of an item, this is the text of th ehlpe to displayed, if not specified the default is Title:\n    placeholder?: string, // if this is set this is the placeholder for the title input input field. Default \"enter title\" \n}\ninterface ICategorySettingTextIcon extends ICategorySetting {\n    // name of category setting: textIcon \n    // example of value:  {color:\"#345500\", text:\"RC\"}\n    color?: string, // html color of category font in tree\n    text?: string, //  short label of category in tree\n}\ninterface ICategorySettingTabs extends ICategorySetting {\n    // define tabs inside an item\n    tabs:ICategorySettingTab[] \n}   \ninterface ICategorySettingTab {\n    id?:string, // temp ids for ui,\n    name: string, //  tab name\n    fields: string[] // fields to display in tab\n}\n// ******************************* \n// grouping of categories in meta categories\n// *******************************\n\ninterface ICategoryGroups {\n    groups: ICategoryGroup[] // a list of groups\n}\n\ninterface ICategoryGroup {\n    categories: string[], // list of categories in that group\n    text: string,   // label displyed in tree (short form / bold)\n    name: string,  // name displayed in tree (long form)\n    color: string,  // color of group in tree\n    position?: number,  // position \n    helpPage?: string // link to a page which contains group specific help\n}\n\n\n// ******************************* \n// ACL user access lists\n// *******************************\nconst ACL_SETTING = \"acl\";\n    \ninterface IACL {\n    rules: IACLRules[] // a list of rules\n}\n\ninterface IACLRules {\n    name:string // \n    groups: string[], // group names\n    acl:IACLGroupsAcl[], // access rights for group\n}\ninterface IACLGroupsAcl {\n    category: string, // name of the category\n    fields?: string[],  // fields array, can exist for edit... if fields array exist but is empty no user can edit anything\n                        // in field array you'll find field name which allow editing\n    rights: string[], // given rights\n }\n/*\n { category:\"REQ\", rights:[\"edit\"], fields:[]}\n { category:\"REQ\", rights:[\"edit\"]}\n*/\n // --------------------------------------------------\n// field settings in full admin client\n// --------------------------------------------------\n\ninterface IFieldParameter {\n    [key: string]: any,\n    // common control options = all filed types and all categories\n    /** if set to true, the control will not be editable by the user */\n    readonly?: boolean,\n    /** if set to true the field will not be shown in reports */\n    hide_report?: boolean,\n    /** if set to true the field will not be shown in documents */\n    hide_document?: boolean,\n    /** if set to true the field will not be shown in published (QMS) */\n    hide_publication?: boolean,\n    // options to show help for an input field\n    hide_UI?:boolean,\n    /** set to 1 to not clean the field values */    \n    unsafeHtml?:number,\n    /** this can be set to point to a an external website which is openend when user clicks on a link, e.g.\n     * \"externalHelp\":\"matrix.com\". Note this must be a website which is accesible through https://url */\n    externalHelp?: string,\n    /** this can be set to show help as a tooltip, e.g. \"popupHelp\":\"enter a short description\" */\n    popupHelp?: string,\n    /** this can be set to render a help line underneath the \"heading\":\"enter a long description\" */\n    inlineHelp?: string,\n    /** for folder category */\n    visibleOption?: string,\n    /** for SIGN category\n     * if set to true, the field is not visible (only makes sense with the above flag)\n     */\n    invisible?: boolean,\n    /** this allows to copy fields from underlying DOC into the SIGN item.\n     * Note: Fields are copied only if this is set to true and the labels (names) of the field is the same in the\n     * DOC and the SIGN */\n    copyfromdoc?: boolean\n    /** legacy options */\n    adminVisibility?: boolean,\n    /** legacy options */\n    requiresContent?: boolean,\n}\n\n// *******************************\n// drop down options\n// *******************************\ninterface IDropDownConfig {\n    fieldMeaning?: string, // can be used in reports / docs\n    placeholder?: string, // to be shown if no value is selected\n    options: IDropdownOption[], // list of options in drop down\n    groups?: IDropdownGroup[], // grouping of option\n}\ninterface IDropdownGroup {\n    value: string, // id of group (as class reference in drop down option), groups are sorted by this ID\n    label: string // name of group as displayed in UI\n\n}\n\ninterface IDropdownOption {\n    id: string, // internal ID\n    label: string, // visible name in drop down\n    class?: string, // if option should be in a group of options, this is the id (value) of  group \n    disabled?: boolean, // for classic select dropdowns in table, allow to define unselectable things\n    strikethrough?: boolean // to visually indicate that a selection is deleted, out-of-date, etc\n}\n\n// --------------------------------------------------\n// settings with user interface\n// --------------------------------------------------\n\ninterface IAutoFillSetting {\n    allowAutoFill:boolean, // if set to true auto fill is allowed for all of the below\nallowLoginAutoFill:boolean, // overwrite auto fill setting for login\n    allowDocSignAutoFill:boolean, // overwrite auto fill setting for electronic signatures\n    allowLabelSignAutoFill:boolean, // overwrite auto fill setting for label signatures\n    allowGateAutoFill:boolean // overwrite auto fill setting for gate signatures\nallowPublishAutoFill:boolean // overwrite auto fill setting for publications\n}\n\n// *******************************\n// smart text , abbreviations, ....\n// *******************************\nconst smartTextConfigSetting = \"rtf\";\ninterface ISmartTextConfig { replacements?: ISmartTextConfigReplacement[] }\ninterface ISmartTextConfigReplacement { \n    /** id of the macro: needs to be simple combination of letters and digits */\n    what: string, \n    /** the text to display */\n    with: string, \n    /** value from 1 to 4: 1=plain text 2=rich text 3=term 4=abbreviation */\n    tagType: number, \n    /**  additional explanation for terms*/\n    description?: string, \n    /** set to true to ask user to review before creating document */\n    warn: boolean, \n    /** date/time of creation */\n    when: string \n    /** internal: not to be used */\n    projectSetting?: boolean, \n    /** legacy: now handled by tagType */\n    plain?: boolean, \n    /**  Include this term/abv in the List of Terms and abbreviation doc section when not surrounded with _ */\n    tableNoUnderscore?:boolean\n    \n}\ninterface IProjectLogo { fileId: string }\n\n\n// --------------------------------------------------\n// hidden / beta features\n// --------------------------------------------------\n\n\ninterface IExtras {\n    tableCanImport: boolean | string, // set to true to allow importing into table  \n    copyPaste: boolean | string, // set to true to allow copy paste \n    moveIn: boolean | string, // set to true to allow to move into folder\n    excelImport: boolean | string, // set to true to allow to import from excel\n    deepTouch: boolean | string, // allows items to be touched recursively \n    noTouch:  boolean | string,  // allows items to hide touch from the menu\n    setLabel: boolean | string // allow to set labels on multiple items in tree\n    compareX: boolean | string // allow to compare any documents (also between projects)\n    compareInsideX: boolean | string // allow to compare any documents \n    indexer:boolean // allow to re-index database after config changes\n    cleanup:boolean | string // show cleanup tools\n    defaultToNewEditor:boolean | string // show cleanup tools\n    enableLegacyReport?:\"0\"|\"1\"|\"2\" // Allow to re-enabled the legacy REPORT category. 0=warning, 1=removed, 2=enabled\n}\n\ninterface IEmbeddedReport {\n    reportId: string;\n}\n\ninterface IProjectGroups {\n    groups: IProjectGroup[]\n}\n\ninterface IProjectGroup {\n    name: string,\n    projects: string[]\n}\n\n// --------------------------------------------------\n// (custom) fields\n// --------------------------------------------------\n\ninterface IFieldCapabilities {\n    onlyOne?:boolean // if set only one of this kind of fields can be created per category\n    canBePublished:boolean // can be published to QMS site\n    canBeReadonly:boolean // can be set to readonly\n    canHideInDoc: boolean, // whether field can be hidden in DOCs\n    canBeXtcPreset: boolean, // whether a field can be a preset in an XTC\n    canRequireContent?: boolean // whether a field needs to have a value set\n    canBeUsedInDocs?: boolean // whether a field can be added to DOCs and SIGN\n    validationFunction?:JsonEditorValidation // an optional validation function to run against the code\n    schema?:string // the name of interface schema. If no validation is provided this will also be used for validation\n    needsConfiguration?:boolean // if true the user needs to set some settings to make it useful\n    canBeUnsafe?:boolean // user can allow unsafe text entry\n}\n\ninterface IFieldDescription {\n    id: string,\n    label: string,\n    class: string, // in which categories it can be used: all (well all categories), toolbar, docs, report, sign, sync, beta\n    help: string,\n    capabilities: IFieldCapabilities // what the field can be used\n}\n// --------------------------------------------------\n// notification\n// --------------------------------------------------\ninterface INotificationConfig {\n    enabled:boolean, // show notification user interface\n    closeAuto:boolean, // allow user to close automatically created notification\n    manualCreate:boolean, // allow user to create\n    browserNotificationDisabled?:boolean,\n    browserNotificationAutoCloseAfter?: number;\n\n}\n\nlet notificationSetting = \"\";\nlet defaultNotificationConfig: INotificationConfig = {\n    enabled:true,\n    closeAuto:true,\n    manualCreate:true,\n    browserNotificationDisabled : false,\n    browserNotificationAutoCloseAfter:9000\n};\n// --------------------------------------------------\n// column autofill\n// --------------------------------------------------\n\n/** allow to set cell in table column if another dropdown cell in same row changes*/\ninterface IAutoColumn {\n    /** a list of mappings (which cell is updated upon change of which cell) */\n    maps:IAutoColumnMap[];\n}\n\ninterface IAutoColumnMap {\n    /** name of cell which triggers change */\n    dropdownColumnName:string;\n    /** name of cell which is updated  */\n    textColumnName:string;\n    /** mapping from selected to set value */\n    mapping:IAutoColumnMapping[];\n}\n\ninterface IAutoColumnMapping {\n    /** selected value */\n    dropdownValue:string;\n    /** set value */\n    textValue:string;\n}\n\n// setting can be for customer (e.g. user titles) and project (user roles)\nconst autoColumnSetting = \"autoColumn\";\nconst autoColumnDefault: IAutoColumn = { maps: [] };\n\n\n// -----------------------------------------\n// html cleanup \n// -----------------------------------------\n\ninterface ICleanup {\n    \"cleanup\": boolean,\n    \"tags\": string[],\n    \"attributes\": IStringStringArrayMap,\n    \"enforcedAttributes\":IStringStringArrayMap,\n    \"protocolAttributes\": ICleanupProtocol[]\n}\ninterface ICleanupProtocol {\n    \"element\":string,\n    \"attribute\": string,\n    \"protocols\": string[]\n}\n\n\n/** defines parameters for imports */ \ninterface IImportConfig {\n    /** includes keep same id */\n    includes: IImportConfigDetails,\n    /** copies are editable new copies */\n    copies:IImportConfigDetails\n}\n\n\ninterface IImportConfigDetails { \n    /** includes can be locked by specifying a lock label */\n    lockLabel:string,\n    /** there can be a list of users who can import (if there's nobody in there, or no list is defined: everybody can) */\n    importMasters?:string[]\n}\n","import { JsonEditorValidation } from \"../../../jsonvalidation/JsonValidator\";\nimport { IFieldDescription } from \"../../ProjectSettings\";\nexport { FieldDescriptions };\n\nclass FieldDescriptions {\n\n    public static Field_sourceref = \"sourceref\";\n    public static Field_markAsTemplate = \"markAsTemplate\";\n    public static Field_dhf = \"dhf\";\n    public static Field_docFilter = \"docFilter\";\n\n    // normal fields\n    public static Field_richtext = \"richtext\";\n    public static Field_text = \"text\";\n    public static Field_section = \"section\";\n    public static Field_fileManager = \"fileManager\";\n    public static Field_tasksControl = \"tasksControl\";\n    public static Field_textline = \"textline\";\n    public static Field_user = \"user\";\n    public static Field_date = \"date\";\n    public static Field_dropdown = \"dropdown\";\n    public static Field_links = \"links\";\n    public static Field_uplinkinfo = \"uplinkinfo\";\n    public static Field_crosslinks = \"crosslinks\";\n    public static Field_risk2 = \"risk2\";\n    public static Field_checkbox = \"checkbox\";\n    public static Field_gateControl = \"gateControl\";\n    public static Field_colorPicker = \"colorPicker\";\n    public static Field_steplist = \"steplist\";\n\n    // toolbar\n    public static Field_labels = \"labels\";\n    public static Field_workflow = \"workflow\";\n\n    // tests and xtcs\n    public static Field_test_steps = \"test_steps\";\n    public static Field_test_steps_result = \"test_steps_result\";\n    public static Field_test_result = \"test_result\";\n\n    // agile sync\n    public static Field_syncStatus = \"syncStatus\";\n    public static Field_syncSourceInfo = \"syncSourceInfo\";\n\n    // beta should not be used really\n    public static Field_report = \"report\";\n    public static Field_cascadingSelect = \"cascadingSelect\";\n    public static Field_hyperlink = \"hyperlink\";\n\n    // technical - these need to be added once when creating a new DOC category or something special like this\n    public static Field_reportId = \"reportId\";\n    public static Field_filter_file = \"filter_file\";\n    public static Field_signature = \"signature\";\n    public static Field_signatureControl = \"signatureControl\";\n    public static Field_signCache= \"signCache\";\n    static Field_publishedItemList= \"publishedItemList\"\n    static Field_publishedFilesList = \"publishedFilesList\";\n    static Field_publishedContent= \"publishedContent\";\n    static Field_publishedTitle = \"publishedTitle\";\n    static Field_docTraining= \"docTraining\";\n    static Field_docReview = \"docReview\";\n    static Field_risk = \"risk\";\n    static Field_htmlForm = \"htmlForm\";\n    static Field_hidden = \"hidden\";\n    static Field_dummy = \"dummy\";\n    static Field_guid = \"guid\";\n    static Field_oid = \"oid\";\n    static Field_versionLive = \"versionLive\";\n    static Field_version = \"version\";\n    static Field_currentVersion = \"currentVersion\";\n    static Field_riskFolder = \"riskFolder\";\n    static Field_reviewControl = \"reviewControl\";\n\n    public static findById(idToFind: string): IFieldDescription | undefined {\n        const result = this.descriptions.filter((description) => description.id === idToFind);\n        return result.length === 1 ? result[0] : undefined;\n    }\n\n    public static appendFieldDescriptions(newFields: IFieldDescription[]) {\n        for (let fco of newFields) {\n            if (!this.findById(fco.id)) {\n                this.descriptions.push(fco);\n            }\n        }\n    }\n\n    public static get(): IFieldDescription[] { return FieldDescriptions.descriptions; }\n\n    // A [fieldId]: JsonValidationFunction map built up at runtime.\n    // We can't build this at compile time because validation functions are high-level entities.\n    private static validationFunctions = {};\n\n    private static descriptions: IFieldDescription[] = [\n        // docs and sign\n        { id: FieldDescriptions.Field_sourceref, capabilities: { canBeUsedInDocs: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: \"Source (Original Document) [sourceref]\", class: \"docsign\", help: \"keeps a reference to original document when copying and pasting\" },\n        { id: FieldDescriptions.Field_markAsTemplate, capabilities: { canBeUsedInDocs: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: \"Mark as template [markAsTemplate]\", class: \"docsign\", help: \"allows to define DOC templates which can be used in other projects\" },\n        { id: FieldDescriptions.Field_dhf, capabilities: { canBeUsedInDocs: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: \"DFH field  [dhf]\", class: \"docs\", help: \"for documents only: holds a section in a document\" },\n        { id: FieldDescriptions.Field_docFilter, capabilities: { canBeUsedInDocs: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: \"Label Filter in DOCs [docFilter]\", class: \"docs\", help: \"a special field for Document categories to filter documents by label\" },\n\n        // normal fields\n        { id: FieldDescriptions.Field_richtext, capabilities: { canBeUnsafe: true, canBeUsedInDocs: true, canHideInDoc: true, canBeXtcPreset: true, canBePublished: true, canBeReadonly: true, canRequireContent: true }, label: \"Rich Text Control [richtext]\", class: \"all\", help: \"a rich text editor field (with formatting)\" },\n        { id: FieldDescriptions.Field_text, capabilities: { canBeUnsafe: true, canBeUsedInDocs: true, canHideInDoc: true, canBeXtcPreset: true, canBePublished: true, canBeReadonly: true, canRequireContent: true }, label: \"Plain Text Control [text]\", class: \"all\", help: \"a text editor field (no formatting)\" },\n        { id: FieldDescriptions.Field_section, capabilities: { canBeUsedInDocs: false, canHideInDoc: false, canBeXtcPreset: false, canBePublished: true, canBeReadonly: false, canRequireContent: false }, label: \"Section with explanation [section]\", class: \"all\", help: \"a title with some explanation to separate fields\" },\n        { id: FieldDescriptions.Field_fileManager, capabilities: { canBeUsedInDocs: true, canHideInDoc: true, canBeXtcPreset: true, canBePublished: true, canBeReadonly: true }, label: \"File Manager Control [fileManager]\", class: \"all\", help: \"a control which allows to attach files by browsing or drag and drop\" },\n        { id: FieldDescriptions.Field_tasksControl, capabilities: { canBeUsedInDocs: true, canHideInDoc: true, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: \"Tasks Control [tasksControl]\", class: \"all\", help: \"a field which shows links to external systems, like JIRA, github etc. (eg extensions folder)\" },\n        { id: FieldDescriptions.Field_textline, capabilities: { canBeUnsafe: true, canBeUsedInDocs: true, canHideInDoc: true, canBeXtcPreset: true, canBePublished: true, canBeReadonly: true, canRequireContent: true }, label: \"Text Line Control [textline]\", class: \"all\", help: \"a field for one line of text\" },\n        { id: FieldDescriptions.Field_user, capabilities: { canBeUsedInDocs: true, canHideInDoc: true, canBeXtcPreset: true, canBePublished: true, canBeReadonly: true, canRequireContent: true }, label: \"User Select Control [user]\", class: \"all\", help: \"a drop down to select a user in the project\" },\n        { id: FieldDescriptions.Field_date, capabilities: { canBeUsedInDocs: true, canHideInDoc: true, canBeXtcPreset: true, canBePublished: true, canBeReadonly: true, canRequireContent: true }, label: \"Date Select Control [date]\", class: \"all\", help: \"a field to select a date\" },\n        { id: FieldDescriptions.Field_dropdown, capabilities: { canBeUnsafe: true, needsConfiguration: true, canBeUsedInDocs: true, canHideInDoc: true, canBeXtcPreset: true, canBePublished: true, canBeReadonly: true, canRequireContent: true }, label: \"Drop Down Control [dropdown]\", class: \"all\", help: \"a drop-down selection field\" },\n        { id: FieldDescriptions.Field_links, capabilities: { canBeUsedInDocs: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: \"Down Traces Control [links]\", class: \"all\", help: \"a field to show and edit down traces as defined in the traceability configuration\" },\n        { id: FieldDescriptions.Field_uplinkinfo, capabilities: { schema: \"IUpLinkDetails\", needsConfiguration: true, canBeUsedInDocs: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: \"Uplink information [uplinkinfo]\", class: \"all\", help: \"a field to show information about up traces in the user interface\" },\n        { id: FieldDescriptions.Field_crosslinks, capabilities: { canBeUsedInDocs: true, canHideInDoc: true, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: \"Cross Project Link Control [crosslinks]\", class: \"all\", help: \"a field to add links to other matrix projects\" },\n        { id: FieldDescriptions.Field_risk2, capabilities: { canBeUnsafe: true, onlyOne: true, canHideInDoc: true, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: \"Risk Control [risk2]\", class: \"all\", help: \"a field rendering an FMEA-type risk field\" },\n        { id: FieldDescriptions.Field_checkbox, capabilities: { canBeUsedInDocs: true, canHideInDoc: true, canBeXtcPreset: true, canBePublished: true, canBeReadonly: true }, label: \"Checkbox Control [checkbox]\", class: \"all\", help: \"a checkbox field\" },\n\n        {\n            id: FieldDescriptions.Field_gateControl,\n            capabilities: {\n                canBeUnsafe: true, needsConfiguration: true, canHideInDoc: true, canBeXtcPreset: true, canBePublished: false,\n                canBeReadonly: true, schema: \"IGate\"\n            },\n            label: \"Gate Control [gateControl]\", class: \"all\", help: \"a quality gate field\"\n        },\n\n        {\n            id: FieldDescriptions.Field_colorPicker,\n            capabilities: {\n                canBeUsedInDocs: true, canHideInDoc: true, canBeXtcPreset: true,\n                canBePublished: true, canBeReadonly: true, canRequireContent: true\n            },\n            label: \"Color picker [colorPicker]\", class: \"super\", help: \"a color picker field\"\n        },\n\n        {\n            id: \"steplist\",\n            capabilities: {\n                needsConfiguration: true, canBeUsedInDocs: true, canHideInDoc: true, canBeXtcPreset: false,\n                canBePublished: true, canBeReadonly: true, canBeUnsafe: true,\n                schema: \"IFieldParameter\",\n            },\n            label: \"Table Control [steplist]\",\n            class: \"all\",\n            help: \"a field rendered as a table\",\n        },\n\n        // toolbar\n        { id: FieldDescriptions.Field_labels, capabilities: { onlyOne: true, canBeUsedInDocs: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: \"Labels [labels]\", class: \"toolbar\", help: \"shows defined labels in the item's tool bar\" },\n        { id: FieldDescriptions.Field_workflow, capabilities: { onlyOne: true, canBeUsedInDocs: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: \"One2One Issue Mapping [workflow]\", class: \"toolbar\", help: \"a field shown in the item's tool bar showing the status of an external ticket (i.e. jira)\" },\n\n        // tests and xtcs\n        { id: FieldDescriptions.Field_test_steps, capabilities: { canBeUnsafe: true, onlyOne: true, canHideInDoc: true, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: \"Test Table [test_steps]\", class: \"tests\", help: \"a special table control to define tests (see test configuration)\" },\n        { id: FieldDescriptions.Field_test_steps_result, capabilities: { canBeUnsafe: true, onlyOne: true, canHideInDoc: true, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: \"Test Result Table [test_steps_result]\", class: \"xtcs\", help: \"a special table control to define tests with results (see test configuration)\" },\n        { id: FieldDescriptions.Field_test_result, capabilities: { onlyOne: true, canHideInDoc: true, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: \"Test Result Summary [test_result]\", class: \"xtcs\", help: \"a special field to compute or specify the overall test result\" },\n\n\n        // agile sync\n        { id: FieldDescriptions.Field_syncStatus, capabilities: { onlyOne: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: \"SYNC Status [syncStatus]\", class: \"sync\", help: \"control to hold the information about synced external items \" },\n        { id: FieldDescriptions.Field_syncSourceInfo, capabilities: { onlyOne: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: \"SYNC Source Info [syncSourceInfo]\", class: \"sync\", help: \"a control to show control syncing of external items\" },\n\n\n        // beta should not be used really\n        { id: FieldDescriptions.Field_report, capabilities: { canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: \"Embedded Report [report]\", class: \"beta\", help: \"allows to embed a standard report\" },\n        { id: FieldDescriptions.Field_cascadingSelect, capabilities: { canHideInDoc: false, canBeXtcPreset: true, canBePublished: true, canBeReadonly: true }, label: \"Cascading Select [cascadingSelect]\", class: \"beta\", help: \"a field to select values from hierachies of drop downs\" },\n        { id: FieldDescriptions.Field_hyperlink, capabilities: { canHideInDoc: false, canBeXtcPreset: false, canBePublished: true, canBeReadonly: true }, label: \"Hyperlink Control [hyperlink]\", class: \"beta\", help: \"a field holding a hyperlink (url)\" },\n\n        // technical - these need to be added once when creating a new DOC category or something special like this\n        { id: FieldDescriptions.Field_reportId, capabilities: { onlyOne: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: \"report ID [reportId]\", class: \"super\", help: \"contains the id of the xslt template for reports\" },\n        { id: FieldDescriptions.Field_filter_file, capabilities: { onlyOne: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: \"filter_file [filter_file]\", class: \"super\", help: \"internal field required for documents\" },\n        { id: FieldDescriptions.Field_signature, capabilities: { onlyOne: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: \"Signature Table [signature]\", class: \"super\", help: \"field showing signature in documents\" },\n        { id: FieldDescriptions.Field_signatureControl, capabilities: { onlyOne: true, canHideInDoc: false, canBeXtcPreset: false, canBePublished: false, canBeReadonly: true }, label: \"Signature Password Field [signatureControl]\", class: \"super\", help: \"field with control for signatures\" }\n    ];\n\n    static setValidationFunction(fieldId: string, validator: JsonEditorValidation) {\n        let fieldDesc = FieldDescriptions.findById(fieldId);\n        if (!fieldDesc) {\n            throw new Error(`No such field type ${fieldId} registered`);\n        }\n        fieldDesc.capabilities.validationFunction = validator;\n    }\n}\n","import { ITestConfig, ITestConfigTablesColumn, ITestConfigTablesColumns, ITestRuleStep } from \"../../ProjectSettings\";\nimport { ItemConfiguration, XRFieldTypeAnnotatedParamJson } from \"./ItemConfiguration\";\n\nexport type { ITestFieldParam, ITestStepsResultOption, ITestConfig15, ITestStepsResultsConfig };\nexport { TestManagerConfiguration };\n\ninterface ITestFieldParam extends XRFieldTypeAnnotatedParamJson {\n    fieldMeaning: string\n}\ninterface ITestStepsResultOption {\n    id: string,\n    label: string\n}\n\ninterface ITestConfig15 {\n    columnsStepsResult: ITestConfigTablesColumn[],\n    columnsSteps: ITestConfigTablesColumn[]\n}\n\ninterface ITestStepsResultsConfig {\n    canBeModified: boolean,\n    columns: ITestConfigTablesColumn[],\n    passFailEditorConfig: ITestRuleStep[]\n}\n\nclass TestManagerConfiguration {\n    // configuration for per project\n    public XTCconfig: ITestConfig;\n\n    constructor() {\n        this.XTCconfig = <ITestConfig><any>{};\n    }\n\n    initialize(itemConfig: ItemConfiguration) {\n        this.XTCconfig = itemConfig.getTestConfig();\n\n        if (!this.XTCconfig) {\n            // default until 1.3\n            this.XTCconfig = <any>{\n                \"xtcType\": \"XTC\",\n                \"cloneSources\": [\"TC\", \"UC\"],\n                \"columnsSteps\": [{ \"name\": \"Action\", \"field\": \"action\", \"editor\": \"text\" },\n                { \"name\": \"Expected Result\", \"field\": \"expected\", \"editor\": \"text\" }],\n                \"columnsStepsResult\": [{ \"name\": \"Action\", \"field\": \"action\", \"editor\": \"none\" },\n                { \"name\": \"Expected Result\", \"field\": \"expected\", \"editor\": \"none\" },\n                { \"name\": \"Passed/Failed\", \"field\": \"result\", \"editor\": \"result\" },\n                { \"name\": \"Comment\", \"field\": \"comment\", \"editor\": \"text\" }],\n                \"automatic\": [],\n                \"manual\": [\n                    { \"human\": \"passed\", \"command\": \"passed\", \"render\": \"ok\", \"code\": \"p\" },\n                    { \"human\": \"failed\", \"command\": \"failed\", \"render\": \"error\", \"code\": \"f\" },\n                    { \"human\": \"\", \"command\": \"not executed\", \"render\": \"warning\", \"code\": \"\" }\n                ],\n                \"perStep\": [\n                    { \"human\": \"passed\", \"command\": \"passed\", \"render\": \"ok\", \"code\": \"p\", \"key\": \"p\", \"image\": \"success.png\" },\n                    { \"human\": \"failed\", \"command\": \"failed\", \"render\": \"error\", \"code\": \"f\", \"key\": \"f\", \"image\": \"fail.png\" },\n                    { \"human\": \"\", \"command\": \"not executed\", \"render\": \"warning\", \"code\": \"\", \"key\": \"r\", \"image\": \"\" }\n                ]\n            };\n        }\n    }\n\n    // returns possible values for the drop down of the completed test case\n    public getTestRunResultOptions(): ITestStepsResultOption[] {\n\n        var opts: ITestStepsResultOption[] = [];\n        if (this.XTCconfig.automatic && this.XTCconfig.automatic.length > 0) {\n            opts.push({ id: \"a\", label: \"automatic\" });\n        }\n        for (var idx = 0; idx < this.XTCconfig.manual.length; idx++) {\n            opts.push({ id: this.XTCconfig.manual[idx].code, label: this.XTCconfig.manual[idx].command });\n        }\n        return opts;\n    }\n\n    // get the configuration for a test definition table (e.g. test actions and expected results)\n    public getTestStepsConfig(category: string): ITestConfigTablesColumns {\n        if (this.XTCconfig.render && this.XTCconfig.render[category]) {\n            return this.XTCconfig.render[category];\n        }\n        // this is actually a fallback for project created with version 1.5 or before\n        // these project can be upgraded by just replacing the xtc_config with the latest version\n        // UNLESS column names have been changed (which never happend)....\n        return {\n            columns: (category === this.XTCconfig.xtcType) ? (<ITestConfig15><any>this.XTCconfig).columnsStepsResult : (<ITestConfig15><any>this.XTCconfig).columnsSteps\n        };\n    }\n\n    // get definition for a test execution table (e.g. including columns with results/comments)\n    public getTestStepsResultsConfig(): ITestStepsResultsConfig {\n\n        return {\n            canBeModified: false,\n            columns: this.getTestStepsConfig(this.XTCconfig.xtcType).columns,\n            passFailEditorConfig: this.XTCconfig.perStep\n        };\n    }\n\n    // check if the category is an executed test case (usually this will mean category type XTC)\n    isXTC(type: string): boolean {\n        return this.XTCconfig.xtcType && this.XTCconfig.xtcType.toLowerCase() === type.toLowerCase();\n    }\n\n    // check if this is a test case, use case, or something else which can be converted to a TC\n    isTC(type: string): boolean {\n        return this.isCloneSource(type);\n    }\n\n    // return the executed test case category type, (usually this will mean type XTC)\n    getXTCType() {\n        return this.XTCconfig.xtcType;\n    }\n    // return a simple array of all categories which can be converted to XTC\n    getCloneSources() {\n        return this.XTCconfig.cloneSources;\n    }\n\n    // returns place holder text if no value is selected\n    public getTestRunResultPlaceholder(value: string): string {\n\n        var code = value ? (value.split(\"|\")[0]) : \"\";\n        if (this.XTCconfig.automatic && this.XTCconfig.automatic.length > 0) {\n            for (var idx = 0; idx < this.XTCconfig.automatic.length; idx++) {\n                if (this.XTCconfig.automatic[idx].code === code) {\n                    return \"automatic - was '\" + this.XTCconfig.automatic[idx].human + \"' when last saved\";\n                }\n            }\n        }\n        return \"select test result\";\n    }\n\n\n    public isCloneSource(category: string): boolean {\n        if (!this.XTCconfig.cloneSources) {\n            return false;\n        }\n        for (var csi = 0; csi < this.XTCconfig.cloneSources.length; csi++) {\n            if (this.XTCconfig.cloneSources[csi] === category) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n","/**\n * Matrix stores data for each item field in a serialized, structured format defined\n * by the type of field. A FieldHandler is a class that allows safe creation and\n * manipulation of these structured types.\n */\nimport {FieldDescriptions} from \"./../FieldDescriptions\";\nimport {EmptyFieldHandler} from \"./EmptyFieldHandler\";\nimport {RichtextFieldHandler} from \"./RichtextFieldHandler\";\nimport {TextlineFieldHandler} from \"./TextlineFieldHandler\";\nimport {CheckboxFieldHandler} from \"./CheckboxFieldHandler\";\nimport {initialize as initializeSteplist, SteplistFieldHandler} from \"./SteplistFieldHandler\";\nimport { ItemConfiguration, XRFieldTypeAnnotatedParamJson } from \"../ItemConfiguration\";\nimport {GenericFieldHandler} from \"./GenericFieldHandler\";\nimport {DropdownFieldHandler, IBaseDropdownFieldParams} from \"./DropdownFieldHandler\";\nimport {TestStepsFieldHandler} from \"./TestStepsFieldHandler\";\nimport {TestStepsResultFieldHandler} from \"./TestStepsResultFieldHandler\";\nimport {TestResultFieldHandler} from \"./TestResultFieldHandler\";\nimport { UserFieldHandler } from \"./UserFieldHandler\";\nimport {DateFieldHandler} from \"./DateFieldHandler\";\nimport {IFieldHandler} from \"./IFieldHandler\";\nimport {GateFieldHandler, IBaseGateOptions} from \"./GateFieldHandler\";\nimport { ITableControlBaseParams } from \"./BaseTableFieldHandler\";\nimport { ITestFieldParam, TestManagerConfiguration } from \"../TestManagerConfiguration\";\nimport { HyperlinkFieldHandler } from \"./HyperlinkFieldHandler\";\nimport { CrosslinksFieldHandler } from \"./CrosslinksFieldHandler\";\nimport {DHFFieldHandler} from \"./DHFFieldHandler\";\nimport {IDHFControlDefinition} from \"../DHFInterfaces\";\n\nexport * from \"./BaseTableFieldHandler\";\nexport * from \"./SteplistFieldHandler\";\nexport * from \"./TestStepsFieldHandler\";\nexport * from \"./TestStepsResultFieldHandler\";\nexport * from \"./TestResultFieldHandler\";\nexport * from \"./UserFieldHandler\";\nexport * from \"./DateFieldHandler\";\nexport * from \"./ItemSelectionFieldHandler\";\nexport * from \"./CrosslinksFieldHandler\";\nexport * from \"./HyperlinkFieldHandler\";\n\nexport function InitializeFieldHandlers() {\n    initializeSteplist();\n}\n\n\n// TODO(modules): At the moment, handling of structured data is spread all over the client\n// code base. We'd like to get all the data manipulation into these classes, separating\n// that code from say, UI code.\n\n\nexport class FieldHandlerFactory {\n    public static UpdateFieldConfig(itemConfig: ItemConfiguration, testConfig: TestManagerConfiguration, fieldType: string, itemType: string, fieldValue: string, config: XRFieldTypeAnnotatedParamJson) {\n        switch (fieldType) {\n            case FieldDescriptions.Field_test_steps:\n                TestStepsFieldHandler.UpdateFieldConfig(config, itemType, testConfig);\n                break;\n            case FieldDescriptions.Field_test_steps_result:\n                TestStepsResultFieldHandler.UpdateFieldConfig(config, testConfig);\n                break;\n            case FieldDescriptions.Field_test_result:\n                TestResultFieldHandler.UpdateFieldConfig(<IBaseDropdownFieldParams>config, testConfig);\n                break;\n            case FieldDescriptions.Field_user:\n                UserFieldHandler.UpdateFieldConfig(<ITestFieldParam>config, fieldValue, itemConfig);\n                break;\n            case FieldDescriptions.Field_crosslinks:\n                CrosslinksFieldHandler.UpdateFieldConfig(config);\n                break;\n            default:\n                break;\n        }\n    }\n\n    public static CreateHandler( fieldType: string, config: XRFieldTypeAnnotatedParamJson): IFieldHandler {\n        const description = FieldDescriptions.findById(fieldType);\n        if (!description) {\n            //Do not throw an error here, because this is called for every field on every item...\n            console.warn(`Unable to find handler for fieldType ${fieldType}`)\n            return new EmptyFieldHandler(\"notFound\", config);\n        }\n        switch (description.id) {\n            case FieldDescriptions.Field_tasksControl:\n            case FieldDescriptions.Field_section:\n            case FieldDescriptions.Field_links:\n            case FieldDescriptions.Field_uplinkinfo:\n            case FieldDescriptions.Field_labels:\n            case FieldDescriptions.Field_workflow:\n            case FieldDescriptions.Field_syncStatus:\n            case FieldDescriptions.Field_syncSourceInfo:\n                return new EmptyFieldHandler(description.id, config);\n\n            case FieldDescriptions.Field_textline:\n                return new TextlineFieldHandler(config);\n\n            case FieldDescriptions.Field_richtext:\n                return new RichtextFieldHandler(config);\n\n            case FieldDescriptions.Field_checkbox:\n                return new CheckboxFieldHandler(config);\n\n            // Table-like handlers\n            case FieldDescriptions.Field_steplist:\n                return new SteplistFieldHandler(<ITableControlBaseParams>config);\n            case FieldDescriptions.Field_test_steps:\n                return new TestStepsFieldHandler(<ITableControlBaseParams>config);\n            case FieldDescriptions.Field_test_steps_result:\n                return new TestStepsResultFieldHandler(<ITableControlBaseParams>config);\n\n            // Dropdown-like field handlers\n            case FieldDescriptions.Field_dropdown:\n                return new DropdownFieldHandler(<IBaseDropdownFieldParams> config );\n            case FieldDescriptions.Field_user:\n                return new UserFieldHandler(<IBaseDropdownFieldParams>config);\n            case FieldDescriptions.Field_test_result:\n                return new TestResultFieldHandler(<IBaseDropdownFieldParams>config);\n            case FieldDescriptions.Field_date:\n                return new DateFieldHandler(config);\n            case FieldDescriptions.Field_gateControl:\n                return new GateFieldHandler(<IBaseGateOptions>config);\n            case FieldDescriptions.Field_crosslinks:\n                return new CrosslinksFieldHandler(config);\n            case FieldDescriptions.Field_hyperlink:\n                return new HyperlinkFieldHandler(config);\n            case FieldDescriptions.Field_dummy:\n                return new EmptyFieldHandler(fieldType, config);\n            case FieldDescriptions.Field_dhf:\n                return new DHFFieldHandler(<IDHFControlDefinition>config);\n            case FieldDescriptions.Field_colorPicker:\n            case FieldDescriptions.Field_sourceref:\n            case FieldDescriptions.Field_markAsTemplate:\n            case FieldDescriptions.Field_docFilter:\n            case FieldDescriptions.Field_text:\n            case FieldDescriptions.Field_fileManager:\n            case FieldDescriptions.Field_risk2:\n            case FieldDescriptions.Field_report:\n            case FieldDescriptions.Field_cascadingSelect:\n            case FieldDescriptions.Field_reportId:\n            case FieldDescriptions.Field_filter_file:\n            case FieldDescriptions.Field_signature:\n            case FieldDescriptions.Field_signatureControl:\n            case FieldDescriptions.Field_publishedContent:\n            case FieldDescriptions.Field_reviewControl:\n            default:\n                return new GenericFieldHandler(fieldType, config);\n        }\n    }\n\n}\nexport {ItemSelectionFieldHandlerFromTo} from \"./ItemSelectionFieldHandlerFromTo\";\n","import { XRFieldTypeAnnotatedParamJson } from \"../ItemConfiguration\";\nimport {IFieldHandler} from \"./IFieldHandler\";\nexport { EmptyFieldHandler };\n\nclass EmptyFieldHandler implements IFieldHandler {\n    private fieldType: string;\n    private config: XRFieldTypeAnnotatedParamJson;\n\n    constructor(fieldTypeIn: string, configIn: XRFieldTypeAnnotatedParamJson) {\n        this.fieldType = fieldTypeIn;\n        this.config = configIn;\n    }\n\n    getFieldType(): string { return this.fieldType; }\n\n    initData(serializedFieldData: string) { }\n    getData(): string { return \"\"; }\n}\n","import { FieldDescriptions } from \"../FieldDescriptions\";\nimport { XRFieldTypeAnnotatedParamJson } from \"../ItemConfiguration\";\nimport {IFieldHandler} from \"./IFieldHandler\";\nexport { RichtextFieldHandler };\n\nclass RichtextFieldHandler implements IFieldHandler {\n    private data: string = \"\";\n    private config: XRFieldTypeAnnotatedParamJson;\n\n    constructor(configIn: XRFieldTypeAnnotatedParamJson) {\n        this.config = configIn;\n    }\n\n    getFieldType(): string { return FieldDescriptions.Field_richtext; }\n\n    // TODO: is there more to richtext than just an html string?\n    initData(serializedFieldData: string) { this.data = serializedFieldData; }\n    getData(): string { return this.data; }\n\n    getHtml(): string { return this.data; }\n    setHtml(str: string): RichtextFieldHandler {\n        this.data = str;\n        return this;\n    }\n}\n","import { FieldDescriptions } from \"../FieldDescriptions\";\nimport { XRFieldTypeAnnotatedParamJson } from \"../ItemConfiguration\";\nimport {IFieldHandler} from \"./IFieldHandler\";\nexport { TextlineFieldHandler };\n\nclass TextlineFieldHandler implements IFieldHandler {\n    private data = \"\";\n    private config: XRFieldTypeAnnotatedParamJson;\n\n    constructor(configIn: XRFieldTypeAnnotatedParamJson) {\n        this.config = configIn;\n    }\n\n    getFieldType(): string { return FieldDescriptions.Field_textline; }\n\n    initData(serializedFieldData: string) { this.data = serializedFieldData; }\n    getData(): string { return this.data; }\n\n    getText(): string { return this.data; }\n    setText(str: string) {\n        // make sure there are no newlines.\n        this.data = str.replace(\"\\n\", \"\");\n    }\n}\n","import { FieldDescriptions } from \"../FieldDescriptions\";\nimport { XRFieldTypeAnnotatedParamJson } from \"../ItemConfiguration\";\nimport {IFieldHandler} from \"./IFieldHandler\";\nexport { CheckboxFieldHandler };\n\nclass CheckboxFieldHandler implements IFieldHandler {\n    private data: string;\n    private config: XRFieldTypeAnnotatedParamJson;\n\n    constructor(configIn: XRFieldTypeAnnotatedParamJson) {\n        this.config = configIn;\n    }\n\n    getFieldType(): string { return FieldDescriptions.Field_checkbox; }\n\n    initData(serializedFieldData: string) {\n        this.data = serializedFieldData;\n    }\n\n    getData(): string {\n        return this.data;\n    }\n\n    getValue(): boolean | undefined {\n        if (this.data) {\n            if (this.data == \"1\" || this.data == \"true\") {\n                return true;\n            } else if (this.data == \"0\" || this.data == \"false\") {\n                return false;\n            }\n        }\n        return undefined;\n    }\n\n    setValue(value: boolean) {\n        if (value !== undefined) {\n            this.data = value ? \"true\" : \"false\";\n        } else {\n            this.data = undefined;\n        }\n    }\n}\n","import { FieldDescriptions } from \"../FieldDescriptions\";\nimport { XRFieldTypeAnnotatedParamJson } from \"../ItemConfiguration\";\nimport {  ITableControlBaseParams } from \"./BaseTableFieldHandler\";\nimport {BaseValidatedTableFieldHandler} from \"./BaseValidatedTableFieldHandler\";\n\nexport { initialize, SteplistFieldHandler };\n\nclass SteplistFieldHandler extends BaseValidatedTableFieldHandler {\n    constructor(configIn: ITableControlBaseParams) {\n        super(configIn);\n    }\n}\n\nfunction validateTableControlParams(json: ITableControlBaseParams): Promise<string | null> {\n    return new Promise((resolve) => {\n        if (!json.columns || json.columns.length == 0) {\n            resolve(\"There are no columns defined. You need at least one column!\");\n        }\n        const validXmlRegex = /^([_a-z][\\w]?|[a-w_yz][\\w]{2,}|[_a-z][a-l_n-z\\d][\\w]+|[_a-z][\\w][a-k_m-z\\d][\\w]*)$/i;\n        // check for bad column field properties\n        let badFields: string[] = [];\n        json.columns.forEach(function (column, idx) {\n            if (!column.field) {\n                badFields.push(\"Column \" + (idx + 1) + \" needs a field property\");\n            } else if (!column.field.match(validXmlRegex)) {\n                badFields.push(\"The field of column \" + (idx + 1) + \": ' \" + column.field + \"' needs to be a valid XML element name.\");\n            }\n            if (column.options) {\n                for (let option in column.options) {\n                    if (!option.match(validXmlRegex)) {\n                        badFields.push(\"The option '\" + option + \"' of field of column \" + (idx + 1) + \": ' \" + column.field + \"' needs to be a valid XML element name.\");\n                    }\n                }\n            }\n        });\n\n        if (badFields.length) {\n            resolve(badFields.join(\"<br>\"));\n        }\n\n        resolve(null);\n    });\n}\n\nfunction initialize() {\n    FieldDescriptions.setValidationFunction(FieldDescriptions.Field_steplist,\n        validateTableControlParams);\n}\n","// A field handler base implementation for field types that ultimately are displayed\n// by the table control.\n\nimport { IDropdownOption } from \"../../../ProjectSettings\";\nimport { FieldDescriptions } from \"../FieldDescriptions\";\nimport {BaseTableFieldHandler, ITableControlBaseParams} from \"./BaseTableFieldHandler\";\nimport {IFieldHandler} from \"./IFieldHandler\";\n\nexport {  BaseValidatedTableFieldHandler };\n\n class BaseValidatedTableFieldHandler extends  BaseTableFieldHandler {\n\n    constructor(configIn: ITableControlBaseParams) {\n        super(configIn);\n    }\n\n\n    validate() {\n        // Data should be an array.\n        if (typeof this.data.length == 'undefined') {\n            throw new Error(\"data is not an array of rows\");\n        }\n\n        for (let row of this.data) {\n            // Each row has a property name for each column.\n            for (const fieldId in row) {\n                let colDetails = this.getColumnByField(fieldId)\n                if (!colDetails) {\n                    throw new Error(`Unable to find definition for column with field id ${fieldId}`);\n                }\n                // TODO: validate the type of the field data.\n            }\n        }\n    }\n\n    setData(dataIn: any[],fixData=false) {\n        const oldData = this.data;\n        if( fixData ) {\n            for (let row of this.data) {\n                // Each row has a property name for each column.\n                for (const colId in row) {\n                    let colDetails = this.getColumnByField(colId)\n                    if (!colDetails) {\n                       delete row[colId];\n                    }\n                }\n            }\n        }\n        this.data = dataIn;\n        this.validate()\n    }\n}\n","// A field handler base implementation for field types that ultimately are displayed\n// by the table control.\n\nimport { IDropdownOption } from \"../../../ProjectSettings\";\nimport { FieldDescriptions } from \"../FieldDescriptions\";\nimport {IFieldHandler} from \"./IFieldHandler\";\nimport {IAnyMap} from \"../../../globals\";\nimport {ITableRow} from \"../../UI/Controls/tableCtrl\";\n\nexport { ColumnEditor, BaseTableFieldHandler };\nexport type { ITableControlOptionsColumn, ITableControlBaseParams };\n\n// A steplist has a table with different column types. They are defined here and interpreted in the table\n// control and field configuration options.\nenum ColumnEditor {\n    none = \"none\",\n    number = \"number\",\n    textline = \"textline\",\n    select = \"select\",\n    commentlog = \"commentlog\",\n    colorPicker = \"colorPicker\",\n    category = \"category\",\n    readonly = \"readonly\",\n    selectIcon = \"selectIcon\",\n    text = \"text\",\n    date_today = \"date_today\",\n    date = \"date\",\n    today = \"today\",\n    current_version = \"current_version\",\n    versionletter = \"versionletter\",\n    signaturemeaning = \"signaturemeaning\",\n    user = \"user\",\n    user_self = \"user_self\",\n    self = \"self\",\n    group = \"group\",\n    revision = \"revision\",\n    result = \"result\",\n    design = \"design\",\n    uprules = \"uprules\",\n    downrules = \"downrules\",\n    ecocapa = \"ecocapa\",\n    eco = \"eco\",\n    uid = \"uid\",\n    rules = \"rules\",\n}\n\ninterface ITableControlOptionsColumn {\n    name: string, //the name of the column shown in the table header\n    field: string, //the id in the column / of the this.data\n    editor: ColumnEditor, //  (optional) 'text','result' (if and how to edit the cell). , ...\n    options?: { [key: string]: string } | IDropdownOption[] // for select editor\n    relativeWidth?: number // can be used to start with unevenly spaced columns (default is 350)\n    headerCssClass?: string // Accepts a string as a class name, applies that class to the cell for the column header.\n    cssClass?: string // Accepts a string as a class name, applies that class to every row cell in the column.   \n}\n\ninterface ITableControlBaseParams {\n    columns?: ITableControlOptionsColumn[], // columns to be added [{name, field, editor, values}], list of column definitions:\n}\n\nclass BaseTableFieldHandler implements IFieldHandler {\n    protected data: any[] = [];\n    protected tableConfig: ITableControlBaseParams;\n\n    constructor(configIn: ITableControlBaseParams) {\n        this.tableConfig = <ITableControlBaseParams>configIn;\n    }\n\n    getFieldType(): string {\n        return FieldDescriptions.Field_steplist;\n    }\n\n    protected getColumnByField(fieldId: string): ITableControlOptionsColumn | undefined {\n        if( this.tableConfig.columns){\n            const cols = this.tableConfig.columns.filter((col) => col.field == fieldId);\n            if (cols.length >= 1) {\n                return cols[0];\n            }\n        }\n        return undefined;\n    }\n\n    columnNumberToFieldId(columnNumber: number): string {\n        if (columnNumber >= this.tableConfig.columns.length) {\n            throw new Error(`${columnNumber} is outside the range [0..${this.tableConfig.columns.length}]`);\n        }\n        return this.tableConfig.columns[columnNumber].field;\n    }\n\n    validate() {\n        // No validation by default\n    }\n\n    initData(serializedFieldData: string) {\n        if (!serializedFieldData) {\n            this.data = [];\n        } else {\n            // This requirement to remove <div> tags comes from the table control implementation.\n            this.data = JSON.parse(serializedFieldData.replace(\"<div/>\", \"\"));\n        }\n    }\n\n    getData(): string {\n        return JSON.stringify(this.data);\n    }\n\n    getDataRaw(): any { return this.data; }\n\n    setData(dataIn: any[],fixData=false) {\n        this.data = dataIn;\n    }\n\n    getRowCount(): number {\n        return this.data.length;\n    }\n\n    deleteRow(rowNumber: number) {\n        if (rowNumber >= this.data.length) {\n            throw new Error(`Row ${rowNumber} not found`);\n        }\n        this.data.splice(rowNumber, 1);\n        this.validate();\n    }\n\n    insertRow(rowNumber: number, columnData: Array<any>) {\n        // Construct a row object from the column data\n        let o = {};\n        columnData.forEach((v, i) => {\n            o[this.columnNumberToFieldId(i)] = v;\n        });\n        this.data.splice(rowNumber, 0, o);\n        this.validate();\n    }\n\n    clear() {\n        this.data = [];\n    }\n\n    getColumnCount(): number {\n        let columnCount = 0;\n        if (this.tableConfig.columns) {\n            columnCount = this.tableConfig.columns.length;\n        }\n        return columnCount;\n    }\n\n    /**\n     * Set data for a particular cell in the table given by a row number and\n     * a column name. \n     * @param row the zero-based row number.\n     * @param columnId the column name.\n     * @param data \n     */\n    setColumnData(row: number, columnId: string, data: any) {\n        // Create rows if necessary.\n        if (this.data.length <= row) {\n            for (let i = this.data.length; i <= row; i++) {\n                this.data.push({});\n            }\n        }\n        // TODO: there should be a switch statement here on type. Complex types may\n        // be JSON objects and should be parsed.\n        this.data[row][columnId] = data;\n    }\n\n    getColumnData(row: number, columnId: string): any {\n        // TODO: there should be a switch statement here on type. Complex types may\n        // be JSON objects and should be parsed.\n        return this.data[row][columnId];\n    }\n\n    getRowData(row: number): Array<any> {\n        let result = [];\n        for (let i = 0; i < this.getColumnCount(); i++) {\n            const columnId = this.columnNumberToFieldId(i);\n            result[i] = this.getColumnData(row, columnId);\n        }\n        return result;\n    }\n}\n","import { XRFieldTypeAnnotatedParamJson } from \"../ItemConfiguration\";\nimport {IFieldHandler} from \"./IFieldHandler\";\nexport { GenericFieldHandler };\n\nclass GenericFieldHandler implements IFieldHandler {\n    protected fieldType: string;\n    protected data: string;\n    private config: XRFieldTypeAnnotatedParamJson;\n\n    constructor(fieldTypeIn: string, configIn: XRFieldTypeAnnotatedParamJson) {\n        this.fieldType = fieldTypeIn;\n        this.config = configIn;\n    }\n\n    getFieldType(): string { return this.fieldType; }\n\n    initData(serializedFieldData: string) { this.data = serializedFieldData; }\n    getData(): string { return this.data; }\n}\n","import {FieldDescriptions} from \"../FieldDescriptions\";\nimport {IDropdownOption} from \"../../../ProjectSettings\";\nimport {IFieldHandler} from \"./IFieldHandler\";\n\nexport interface IBaseDropdownFieldParams{\n    splitHuman?: boolean;\n    maxItems?: number,\n    create?: boolean, // true if values can be added\n    options?: IDropdownOption[] // list of options to choose from\n    optionSetting?: string, // can be name of project setting with options and groups\n}\nexport class DropdownFieldHandler implements IFieldHandler {\n    private rawData = \"\";\n    private human = \"\";\n\n    protected params: IBaseDropdownFieldParams;\n    getData(): string {\n        return this.rawData;\n    }\n    constructor (params: IBaseDropdownFieldParams, initialValue?:string){\n        this.params = params;\n       this.initData(initialValue);\n    }\n    getFieldType(): string {\n        return FieldDescriptions.Field_dropdown;\n    }\n\n    initData(serializedFieldData: string) {\n        this.rawData = serializedFieldData;\n        let that = this;\n        if (typeof serializedFieldData === 'undefined') {\n            serializedFieldData = \"\";\n        }\n        if (this.params && this.params.splitHuman) {\n            let split = serializedFieldData.split(\"|\");\n            this.rawData = split[0];\n            this.human = split[split.length - 1];\n        } else {\n            this.rawData = serializedFieldData;\n            if( this.params && this.params.options) {\n                for (let value of this.params.options) {\n                    if (value.id === that.getData()) {\n                        that.human = value.label;\n                    }\n                }\n            }\n        }\n    }\n\n\n    /**\n     * Retrieve the current value of the field, formatted as an array.\n     * If there are N current values, the array will have N items.\n     * @param filterOnOptions true if you only want to get back values that show up\n     *     in the options list.\n     * @returns an array. Empty if there is no current value.\n     */\n    getValues(filterOnOptions = true): string[] {\n        if (this.rawData != undefined || this.rawData!= null) {\n            let values = this.rawData.split(\",\");\n            if (filterOnOptions && this.params && !this.params.create ) {\n                return values.filter((value) => {\n                    return this.params.options.some((option) => {\n                        return option.id === value;\n                    });\n                });\n            } else {\n                // When creating new values, we don't want to return empty value like this : [\"\"] but []\n                if( this.params && this.params.create && this.rawData === \"\")\n                    return [];\n                else\n                    return values;\n            }\n        }\n\n        return [];\n    }\n    getHuman() {\n        return this.human;\n    }\n}\n","import { FieldDescriptions } from \"../FieldDescriptions\";\nimport { XRFieldTypeAnnotatedParamJson } from \"../ItemConfiguration\";\nimport { TestManagerConfiguration } from \"../TestManagerConfiguration\";\nimport {  ITableControlBaseParams } from \"./BaseTableFieldHandler\";\nimport {BaseValidatedTableFieldHandler} from \"./BaseValidatedTableFieldHandler\";\n\nexport { TestStepsFieldHandler };\n\nclass TestStepsFieldHandler extends BaseValidatedTableFieldHandler {\n\n    public static UpdateFieldConfig(options: XRFieldTypeAnnotatedParamJson, itemType: string, testConfig: TestManagerConfiguration) {\n        // This field handler gets it's configuration options from the test manager.\n        // Ignore input options completely.\n        const rconfig = testConfig.getTestStepsConfig(itemType);\n        for (let name in rconfig) {\n            options[name] = rconfig[name];\n        }\n    }\n\n    constructor(options: ITableControlBaseParams) {\n        super(options);\n    }\n\n    getFieldType(): string {\n        return FieldDescriptions.Field_test_steps;\n    }\n}\n","import { FieldDescriptions } from \"../FieldDescriptions\";\nimport { XRFieldTypeAnnotatedParamJson } from \"../ItemConfiguration\";\nimport { TestManagerConfiguration } from \"../TestManagerConfiguration\";\nimport {  ITableControlBaseParams } from \"./BaseTableFieldHandler\";\nimport {BaseValidatedTableFieldHandler} from \"./BaseValidatedTableFieldHandler\";\n\nexport { TestStepsResultFieldHandler };\n\nclass TestStepsResultFieldHandler extends BaseValidatedTableFieldHandler {\n    public static UpdateFieldConfig(options: XRFieldTypeAnnotatedParamJson, testConfig: TestManagerConfiguration) {\n        // This field handler gets it's configuration options from the test manager.\n        const rconfig = testConfig.getTestStepsResultsConfig();\n        for (let name in rconfig) {\n            options[name] = rconfig[name];\n        }\n    }\n\n    constructor(options: ITableControlBaseParams) {\n        super(options);\n    }\n\n    getFieldType(): string {\n        return FieldDescriptions.Field_test_steps_result;\n    }\n\n    validate() {\n        // TODO: validation for this kind of table is more difficult.\n        // There is a property \"passFailEditorConfig\" on the options that needs to\n        // be looked at.\n    }\n}\n","import { FieldDescriptions } from \"../FieldDescriptions\";\nimport { TestManagerConfiguration } from \"../TestManagerConfiguration\";\nimport { IBaseDropdownFieldParams } from \"./DropdownFieldHandler\";\nimport {IFieldHandler} from \"./IFieldHandler\";\n\nexport { TestResultFieldHandler };\n\n// TODO: This is configuring a dropdown control. It should be possible to combine this code\n// with the DropdownFieldHandler code.\nclass TestResultFieldHandler implements IFieldHandler {\n    private rawData = \"\";\n    private human = \"\";\n    private params: IBaseDropdownFieldParams;\n\n\n    public static UpdateFieldConfig(params: IBaseDropdownFieldParams, testConfig: TestManagerConfiguration) {\n        // There are default params for dropdown for test results\n\n        params.maxItems = 1 // maxItems which can be selected\n        params.options = [], // options in dropdown  [{id:..., label: ...}]\n        params.create = false, // true if values can be added\n        params.splitHuman = true // if human values differ from real values (e.g. for XTCs which are passed|ok|p (only the fist part is interesting).\n\n\n        // This field handler gets its configuration options from the test manager.\n        params.options = testConfig.getTestRunResultOptions();\n    }\n\n    constructor(params: IBaseDropdownFieldParams, initialValue?: string) {\n        this.params = params;\n        this.initData(initialValue);\n    }\n\n    getFieldType(): string {\n        return FieldDescriptions.Field_test_result;\n    }\n\n    getData(): string {\n        return this.rawData;\n    }\n\n    initData(serializedFieldData: string) {\n        this.rawData = serializedFieldData;\n        let that = this;\n        if (typeof serializedFieldData === 'undefined') {\n            serializedFieldData = \"\";\n        }\n        if (this.params.splitHuman) {\n            let split = serializedFieldData.split(\"|\");\n            this.rawData = split[0];\n            this.human = split[split.length - 1];\n        } else {\n            this.rawData = serializedFieldData;\n            for (let value of this.params.options) {\n                if (value.id === that.getData()) {\n                    that.human = value.label;\n                }\n            }\n        }\n    }\n\n    getValues(filterOnOptions = true): string[] {\n        if (this.rawData) {\n            let values = this.rawData.split(\",\");\n            if (filterOnOptions && !this.params.create) {\n                return values.filter((value) => {\n                    return this.params.options.some((option) => {\n                        return option.id === value;\n                    });\n                });\n            } else {\n                return values;\n            }\n        }\n\n        return [];\n    }\n\n    getHuman() {\n        return this.human;\n    }\n}\n","import { FieldDescriptions } from \"../FieldDescriptions\";\nimport { IBaseDropdownFieldParams } from \"./DropdownFieldHandler\";\nimport { ItemConfiguration, XRFieldTypeAnnotatedParamJson } from \"../ItemConfiguration\";\n\nimport {IFieldHandler} from \"./IFieldHandler\";\nimport { BasicFunctions } from \"../BasicFunctions\";\nimport { ITestFieldParam } from \"../TestManagerConfiguration\";\n\n// TODO: UserFieldHandler is a lot like DropdownFieldHandler. Combine them somehow.\nexport class UserFieldHandler implements IFieldHandler {\n\n    // TODO: IDropdownParams is too broad. Use a narrower type\n    public static UpdateFieldConfig(params: ITestFieldParam, fieldValue: string, itemConfig: ItemConfiguration) {\n\n        let userDropdown = itemConfig.getValidUserOptions(\n            !BasicFunctions.isFalse(params.showUsers), // by default show users, if not specified\n            BasicFunctions.isTrue(params.showGroups),  // by default do not show groups\n            undefined,\n            fieldValue);                           // special treatment for deleted users\n\n        params.create = false;\n\n        // TODO: WARNING ! ERROR ! BUG ! This is altering the params object stored in the item configuration\n        // where it was originally retrieved from. We need a clone operation by the caller to stop doing this, however,\n        // I'm wondering if we have code that relies on these things being updated.\n\n        params.options = userDropdown;\n        params.maxItems = params.maxItems ? params.maxItems : 1;\n    }\n\n    private rawData = \"\";\n    private human = \"\";\n\n    private params: IBaseDropdownFieldParams;\n    getData(): string {\n        return this.rawData;\n    }\n    constructor(params: IBaseDropdownFieldParams, initialValue?: string) {\n        this.params = params;\n        this.initData(initialValue);\n    }\n    getFieldType(): string {\n        return FieldDescriptions.Field_user;\n    }\n\n    initData(serializedFieldData: string) {\n        if (typeof serializedFieldData === 'undefined') {\n            serializedFieldData = \"\";\n        }\n        if (this.params.splitHuman) {\n            let split = serializedFieldData.split(\"|\");\n            this.rawData = split[0];\n            this.human = split[split.length - 1];\n        } else {\n            this.rawData = serializedFieldData;\n            for (let value of this.params.options) {\n                if (value.id === this.getData()) {\n                    // TODO: what to do about \"human\" when there are multiple values?\n                    this.human = value.label;\n                }\n            }\n        }\n    }\n\n    getValues(filterOnOptions = true): string[] {\n        if (this.rawData) {\n            let values = this.rawData.split(\",\");\n            if (filterOnOptions && !this.params.create) {\n                return values.filter((value) => {\n                    return this.params.options.some((option) => {\n                        return option.id === value;\n                    });\n                });\n            } else {\n                return values;\n            }\n        }\n\n        return [];\n    }\n\n    private getMaxItems(): number | undefined {\n        if (this.params.maxItems) {\n            return Number(this.params.maxItems);\n        }\n        return undefined;\n    }\n\n    setValues(values: string[]) {\n        const maxItems = this.getMaxItems();\n\n        if (maxItems && maxItems < values.length) {\n            throw new Error(`The field may only store ${maxItems} items`);\n        }\n\n        if (!this.params.create) {\n            // Validate against the existing options.\n            // TODO: validation should probably be in a central method checked by\n            // setData().\n            for (let value of values) {\n                if (!this.params.options.some(o => o.id === value)) {\n                    throw new Error(`Value ${value} not found in accepted options`);\n                }\n            }\n        }\n        this.initData(values.join());\n    }\n\n    getHuman() {\n        return this.human;\n    }\n}\n","/**\n * Basic Functions can be referred to by other businesslogic modules and elsewhere,\n * however it should only import the absolute minimum necessary dependencies.\n * It supports the Matrix SDK, which runs in non-web environments.\n */\nexport { BasicFunctions };\nclass BasicFunctions {\n    static isTrue(obj: undefined | null | boolean | string | number): boolean {\n        if (obj && (obj.toString().toLowerCase() === \"true\" || obj.toString() === \"1\")) {\n            return true;\n        }\n        return false;\n    }\n\n    static isFalse(obj: undefined | null | boolean | string | number): boolean {\n        if (typeof obj == \"undefined\") {\n            return false;\n        }\n        if (obj == false || obj == 0 || obj.toString().toLowerCase() === \"false\" || obj.toString() === \"0\") {\n            return true;\n        }\n        return false;\n    }\n}\n","import {IAnyMap} from \"../../../globals\";\nimport {IFieldHandler} from \"./IFieldHandler\";\nimport {FieldDescriptions} from \"../FieldDescriptions\";\n\nexport interface IDateSelectParamsBase {\n    minDate?: Date;\n}\nexport class DateFieldHandler implements IFieldHandler {\n    private date: Date;\n    constructor(config: IAnyMap) {\n        this.date = undefined;\n    }\n\n    getData(): string {\n        if(! this.date)\n            return \"\";\n        return this.date.getFullYear() + \"/\" + (this.date.getMonth() + 1) + \"/\" + this.date.getDate();\n    }\n\n    getFieldType(): string {\n        return FieldDescriptions.Field_date;\n    }\n\n    initData(serializedFieldData: string) {\n            if (!serializedFieldData)\n                return;\n            let date = DateFieldHandler.getDateFromString( serializedFieldData );\n            if (date) {\n                this.date = date;\n            } else {\n                this.date = undefined;\n            }\n    }\n    static getDateFromString( dateStr :string ) {\n        if (dateStr) {\n            let split: string[] = (dateStr).split(\"/\");\n            if (split.length === 3 && split[0] !== \"NaN\") {\n                let date = new Date(parseInt(split[0]), parseInt(split[1]) - 1, parseInt(split[2]));\n                return date;\n            }\n        }\n        return null;\n    }\n\n    setDate(date: Date) {\n        this.date = date;\n    }\n    getDate(): Date {\n        return this.date;\n    }\n}\n","import {IFieldHandler} from \"./IFieldHandler\";\nimport {XRFieldTypeAnnotatedParamJson} from \"../ItemConfiguration\";\nimport {FieldDescriptions} from \"../FieldDescriptions\";\n\nexport interface IBaseGateOptions{\n    /** define different reviews/approvals which need to be made for gate to pass */\n    lines:IGateLineBase[],\n}\nexport interface  IGateLineBase {\n    /** a unique id for the line */\n    id:string, // unique id of line\n    /** define which users can approve */\n    users:string[],\n}\n\n\n// save status of gate programmable and searchable\nexport interface IGateStatus {\n    passed:boolean, // all lines passed\n    failed:boolean, // 1+ failed\n    lines:IGateStatusLine[],\n    search:string /*\n        _passed_ (all lines passed)\n        _failed_ (one line failed)\n        _todo_ (needs some action)\n        _pass_userId_ (a user passed it)\n        _fail_userId_ (a user failed it)\n        _todo_userId_ (a user needs to do something)\n\n    */\n}\n\nexport interface IGateStatusLine {\n    id:string, // same id as in IGateLine\n    passed:boolean, // last user (see below) passed\n    failed:boolean, // last user (see below) failed\n    user:string, // last user action\n    date:string, // last user date (in utc)\n    dateUser:string, // last user date (in server formatting)\n    comment:string // text\n}\n\nexport class GateFieldHandler implements IFieldHandler {\n    private config: IBaseGateOptions;\n    private allPassed: boolean;\n    private currentValue: IGateStatus;\n    constructor(config: IBaseGateOptions) {\n        // TODO: implement\n        this.config = config;\n    }\n\n    getData(): string {\n        return JSON.stringify(this.currentValue);\n    }\n\n    getFieldType(): string {\n        return FieldDescriptions.Field_gateControl;\n    }\n\n    initData(serializedFieldData: string) {\n        this.currentValue = this.parseFieldValue( serializedFieldData );\n    }\n    private defautValue:IGateStatus = {\n        passed:false,\n        failed:false,\n        lines:[],\n        search:\"\",\n    }\n    // the field value is saved as json object\n    parseFieldValue( stored:string ):IGateStatus {\n        // default\n        let state= { ...this.defautValue};\n        // if something was saved before, use it\n        if (stored) {\n            state = JSON.parse(stored);\n        }\n\n        // remove lines which do not exist anymore (might happen if config changes)\n        let lineIds = this.config.lines.map( (lineDef) => {return lineDef.id;});\n        state.lines = state.lines.filter( (line) => { return lineIds.indexOf(line.id)!=-1;});\n\n        // add missing lines\n        let existsIds = state.lines.map( (lineValue)  => {return lineValue.id;});\n        let newLines = this.config.lines.map( (lineDef):IGateStatusLine =>  { return { // create default lines\n            id:lineDef.id,\n            passed:false,\n            failed:false,\n            user: \"\",\n            comment: \"\",\n            date:\"\",\n            dateUser:\"\"\n        }\n        }).filter( (defaultLine)=> { // filter out lines which ecist already\n            return existsIds.indexOf(defaultLine.id)==-1;\n        });\n        state.lines = state.lines.concat( newLines);\n        // update overall status and text\n        this.updateOverallStatusInternal( state );\n\n        return state;\n    }\n    updateOverallStatus(){\n        this.updateOverallStatusInternal( this.currentValue );\n    }\n   private updateOverallStatusInternal( status:IGateStatus ) {\n        let that = this;\n\n        this.allPassed = false;\n\n        status.passed = false;\n        // if one line is failed, the whole status is failed\n        status.failed = status.lines.filter( (line)=>  { return line.failed; }).length > 0;\n        if (!status.failed) {\n            // if all lines passed, the status is passed\n            status.passed = status.lines.filter( (line) =>  { return line.passed; }).length == status.lines.length;\n        }\n        // build searchable string\n        /*\n            _passed_ (all lines passed)\n            _failed_ (one line failed)\n            _todo_ (needs some action)\n            _pass_userId_ (a user passed it)\n            _fail_userId_ (a user failed it)\n            _todo_userId_ (a user needs to do something)\n        */\n\n        status.search = \"\";\n\n        if ( status.passed ) {\n            status.search += \"_passed_\";\n            this.allPassed = true;\n        } else if ( status.failed ) {\n            status.search += \"_failed_\";\n        } else {\n            status.search += \"_todo_\";\n        }\n        for(let state of status.lines) {\n            if (state.passed) {\n                status.search += \"_pass_\" + state.user + \"_\";\n            } else if (state.failed) {\n                status.search += \"_fail_\" + state.user + \"_\";\n            } else {\n                for(let lineDef of that.config.lines) {\n                    if (lineDef.id == state.id) {\n                        for(let user of lineDef.users) {\n                            status.search += \"_todo_\" + user + \"_\";\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    getGateValue() {\n        return this.currentValue;\n    }\n    setGateValue(gateValue:IGateStatus) {\n        if(!gateValue)\n            gateValue = { ...this.defautValue};\n        this.currentValue = gateValue;\n\n    }\n}\n","import { FieldDescriptions } from \"../FieldDescriptions\";\nimport { XRFieldTypeAnnotatedParamJson } from \"../ItemConfiguration\";\nimport { IFieldHandler } from \"./IFieldHandler\";\nexport { HyperlinkFieldHandler };\n\nclass HyperlinkFieldHandler implements IFieldHandler {\n    private data: string;\n    private config: XRFieldTypeAnnotatedParamJson;\n\n    constructor(configIn: XRFieldTypeAnnotatedParamJson) {\n        this.config = configIn;\n    }\n\n    getFieldType(): string { return FieldDescriptions.Field_hyperlink; }\n\n    initData(serializedFieldData: string) {\n        this.data = serializedFieldData;\n    }\n\n    getData(): string {\n        return this.data;\n    }\n\n    getValue(): boolean | undefined {\n        if (this.data) {\n            if (this.data == \"1\" || this.data == \"true\") {\n                return true;\n            } else if (this.data == \"0\" || this.data == \"false\") {\n                return false;\n            }\n        }\n        return undefined;\n    }\n\n    setValue(value: boolean) {\n        if (value !== undefined) {\n            this.data = value ? \"true\" : \"false\";\n        } else {\n            this.data = undefined;\n        }\n    }\n}\n","import { IReference } from \"../../../globals\";\nimport { FieldDescriptions } from \"../FieldDescriptions\";\nimport { XRFieldTypeAnnotatedParamJson } from \"../ItemConfiguration\";\nimport { ItemSelectionFieldHandler } from \"./ItemSelectionFieldHandler\";\nexport { CrosslinksFieldHandler };\n\nclass CrosslinksFieldHandler extends ItemSelectionFieldHandler {\n\n    public static UpdateFieldConfig(params: XRFieldTypeAnnotatedParamJson) {\n        params.crossProject = true;\n        if (params.linkTypes == undefined) {\n            params.linkTypes = [];\n        }\n        if (params.prefix == undefined) {\n            params.prefix = \"Links\";\n        }\n    }\n\n    constructor(configIn: XRFieldTypeAnnotatedParamJson) {\n        super(configIn, FieldDescriptions.Field_crosslinks);\n    }\n\n    /**\n     * Add an item to the list at the given position\n     * @param position\n     * @param item\n     * @returns the field handler\n     * @throws Error in case a projectShortLabel doesn't exist in the item.\n     */\n    insertItem(position: number, item: IReference): CrosslinksFieldHandler {\n        if (!item.projectShortLabel) {\n            throw new Error(\"item must be a cross project link\");\n        }\n        return super.insertItem(position, item);\n    }\n\n    /**\n     * Append the given item to the end of the list of items.\n     * @param item\n     * @returns the field handler.\n     * @throws Error in case a projectShort label doesn't exist in the item.\n     */\n    appendItem(item: IReference): CrosslinksFieldHandler {\n        if (!item.projectShortLabel) {\n            throw new Error(\"item must be a cross project link\");\n        }\n        return super.appendItem(item);\n    }\n}","// A field handler base implementation for field types that ultimately are displayed\n// by the item selection control\n\nimport {IReference} from \"../../../globals\";\nimport {FieldDescriptions} from \"../FieldDescriptions\";\nimport {XRFieldTypeAnnotatedParamJson} from \"../ItemConfiguration\";\nimport {IFieldHandler} from \"./IFieldHandler\";\n\nexport { ItemSelectionFieldHandler };\n\nclass ItemSelectionFieldHandler implements IFieldHandler {\n    protected fieldType: string;\n    protected data: string;\n    protected config: XRFieldTypeAnnotatedParamJson;\n    protected  items: IReference[];\n\n    constructor(configIn: XRFieldTypeAnnotatedParamJson, fieldTypeIn?: string) {\n        this.config = configIn;\n        if (fieldTypeIn) {\n            this.fieldType = fieldTypeIn;\n        } else {\n            // Field_links is a kind of default. This field handler is often used\n            // in cases that don't map to an item field, just to a control used\n            // to display a UI. In those cases, no one cares about the field type.\n            this.fieldType = FieldDescriptions.Field_links;\n        }\n    }\n    addSignatures (signatures: string[],includeAll:boolean ) {\n        //Nothing to do here\n    }\n    getFieldType(): string { return this.fieldType; }\n\n    initData(serializedFieldData: string) {\n        this.data = serializedFieldData;\n        if( serializedFieldData)\n            this.items = JSON.parse(serializedFieldData);\n        else\n            this.items = [];\n    }\n\n    getData(): string {\n        return JSON.stringify(this.items);\n    }\n\n    getItems(): IReference[] {\n        return this.items;\n    }\n\n    getItemCount(): number {\n        return this.getItems().length;\n    }\n\n    hasItems(): boolean {\n        return this.getItemCount() > 0;\n    }\n\n    hasItem(itemId: string, projectShortLabel?: string): boolean {\n        for (let item of this.getItems()) {\n            if (item.to == itemId && item.projectShortLabel == projectShortLabel) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    insertItem(position: number, item: IReference): ItemSelectionFieldHandler {\n        if (this.hasItem(item.to, item.projectShortLabel)) {\n            const label = item.projectShortLabel ? (item.projectShortLabel + \"/\") : \"\";\n            throw new Error(`Item ${label}${item.to} is already included`);\n        }\n        let items = this.getItems();\n        items.splice(position, 0, item);\n        this.data = JSON.stringify(items);\n        return this;\n    }\n\n    appendItem(item: IReference): ItemSelectionFieldHandler {\n        const position = this.getItemCount();\n        return this.insertItem(position, item);\n    }\n\n    removeItem(position: number): ItemSelectionFieldHandler {\n        let items = this.getItems();\n        items.splice(position, 1);\n        this.data = JSON.stringify(items);\n        return this;\n    }\n\n    clear(): ItemSelectionFieldHandler {\n        let items: IReference[] = [];\n        this.data = JSON.stringify(items);\n        return this;\n    }\n\n    setItems(selectedItems: IReference[]) {\n        if(!selectedItems )\n            selectedItems = [];\n       this.items = selectedItems;\n    }\n\n    protected  name = \"\";\n    getFieldName(): string {\n        return this.name;\n    }\n\n    setFieldName(value: string): void {\n        this.name = value;\n    }\n\n}\n\n","import {IDocFieldHandler} from \"./Document/IDocFieldHandler\";\nimport {GenericFieldHandler} from \"./GenericFieldHandler\";\nimport {globalMatrix, IControlDefinition} from \"../../../globals\";\nimport {FieldDescriptions} from \"../FieldDescriptions\";\nimport {GenericDocFieldHandler} from \"./Document/GenericDocFieldHandler\";\nimport {SectionDescriptions} from \"./Document/SectionDescriptions\";\nimport {DocFieldHandlerFactory} from \"./Document\";\nimport { IDHFControlDefinitionValue, IDHFSectionOptions, IDHFXMLOptions} from \"../DHFInterfaces\";\nimport {ItemConfiguration} from \"../ItemConfiguration\";\nimport {ITableRow} from \"../../UI/Controls/tableCtrl\";\nimport {extend} from \"../../matrixlib/JQueryExtendReplacement\";\n\n\n\ninterface IDHFControlDefinition extends IControlDefinition {\n    dhfValue?: IDHFControlDefinitionValue,\n    configTouched?: boolean\n}\n\nexport class DHFFieldHandler extends GenericFieldHandler {\n\n    innerDataHandler:IDocFieldHandler\n    private itemConfig: ItemConfiguration;\n\n\n    constructor(   private fieldConfig: IDHFControlDefinition) {\n        super(FieldDescriptions.Field_dhf, fieldConfig);\n        this.innerDataHandler = new GenericDocFieldHandler(SectionDescriptions.section_hidden,{},\"\");\n        this.itemConfig = globalMatrix.ItemConfig;\n    }\n    setItemConfig(itemConfig:ItemConfiguration) {\n        this.itemConfig = itemConfig\n    }\n    getData(): string {\n\n        if( this.innerDataHandler == undefined || this.innerDataHandler.getFieldType() == SectionDescriptions.section_hidden)\n        {\n             return undefined;\n        }\n        let dhfValue = { type:   this.innerDataHandler.getFieldType() ,\n                            name:  this.innerDataHandler.getFieldName(),\n                          fieldValueXML:\"\",\n                     fieldValue:\"\" };\n\n        // create the controller\n        let fieldHandler = this.innerDataHandler ;\n\n        // udpate the controller values\n        dhfValue.fieldValue = fieldHandler.getData();\n        // define global options\n        let controllerConfig = extend(fieldHandler.dhfFieldConfig, fieldHandler.getDefaultConfig());\n\n        let global: IDHFSectionOptions = {\n            globalOptions: true,\n            page_break: controllerConfig['page_break'],\n            sub_section: controllerConfig['sub_section'],\n            landscape: controllerConfig['landscape'],\n            show_section_title: controllerConfig['show_section_title'],\n            automation: controllerConfig['automation']\n        };\n\n        // get specific options of control and add global as a row\n        let options: IDHFXMLOptions[] = JSON.parse(fieldHandler.getXmlValue());\n        options.push(global);\n\n        // update the xml dump\n       dhfValue.fieldValueXML = JSON.stringify(options);\n\n\n        //MATRIX-5714 : Dompurify in SDK... Should we make it available ?\n        //\n        // sanitize the name\n        if( globalThis[\"DOMPurify\"] && globalThis[\"DOMPurify\"].sanitize )\n            dhfValue.name =  (DOMPurify.sanitize(dhfValue.name) +'');\n        dhfValue.name = dhfValue.name.replace(/&lt;/g,\"<\");\n\n        return JSON.stringify(dhfValue);\n\n    }\n\n\n    initData(fieldValue: string) {\n        if( fieldValue && fieldValue.length > 0 && this.itemConfig) {\n            this.fieldConfig.dhfValue = <IDHFControlDefinitionValue>JSON.parse(fieldValue);\n            this.fieldConfig.dhfValue.ctrlConfig = DocFieldHandlerFactory.GetDHFFieldConfig(this.itemConfig,this.fieldConfig.dhfValue.type, this.fieldConfig.dhfValue.ctrlConfig);\n            this.innerDataHandler = DocFieldHandlerFactory.createHandler( this.itemConfig, this.fieldConfig.dhfValue);\n        }\n    }\n    setFieldHandler(docFieldHandler:IDocFieldHandler ){\n        this.innerDataHandler = docFieldHandler;\n\n    }\n\n}\n","import {GenericDocAbstractFieldHandler} from \"./GenericDocAbstractFieldHandler\";\n\nexport class GenericDocFieldHandler extends GenericDocAbstractFieldHandler {\n    getDefaultConfig(): any {\n        return {};\n    }\n    getXmlValue(): string {\n        return JSON.stringify([(this.rawValue ?? \"\")]);\n    }\n    addSignatures(signatures: string[], includeAll?: boolean) {}\n}\n\n\n","import {IDocFieldHandler} from \"./IDocFieldHandler\";\nimport {IAnyMap} from \"../../../../globals\";\nimport {XRFieldTypeAnnotatedParamJson} from \"../../ItemConfiguration\";\n\nexport abstract class GenericDocAbstractFieldHandler implements IDocFieldHandler {\n    private sectionType: string;\n     dhfFieldConfig: IAnyMap;\n\n    constructor(sectionType: string, config: XRFieldTypeAnnotatedParamJson, fieldValue: string) {\n        if(!config)\n            config = this.getDefaultConfig()\n        this.dhfFieldConfig = config;\n        this.sectionType = sectionType;\n\n    }\n    setConfig(config: IAnyMap) {\n        this.dhfFieldConfig = config;\n    }\n    addSignatures (signatures: string[],includeAll:boolean ) {\n        //Nothing to do here\n    }\n\n    rawValue: string;\n\n    getData(): string {\n        return this.rawValue;\n    }\n\n    getFieldType(): string {\n        return this.sectionType;\n    }\n\n    initData(serializedFieldData: string) {\n        this.rawValue = serializedFieldData;\n    }\n\n    abstract getXmlValue():string;\n\n    abstract getDefaultConfig(): any;\n\n    protected  name = \"\";\n    getFieldName(): string {\n        return this.name;\n    }\n\n    setFieldName(value: string): void {\n        this.name = value;\n    }\n}\n\n","export class SectionDescriptions{\n    static section_Checkbox = \"Checkbox\"\n    static section_Custom = \"Custom\"\n    static section_derivedfrom = \"derivedfrom\"\n    static section_designreviews = \"designreviews\"\n    static section_audittrail = \"audittrail\"\n    static section_signatures = \"signatures\"\n    static section_responsibilities = \"responsibilities\"\n    static section_genericTable = \"genericTable\"\n    static section_dhf_table = \"dhf_table\"\n    static section_document_options = \"document_options\"\n    static section_Date = \"Date\"\n    static section_item_index = \"item_index\"\n    static section_itemlist = \"itemlist\"\n    static section_package = \"package\"\n    static section_items = \"items\"\n    static section_itemtable = \"itemtable\"\n    static section_linklist = \"linklist\"\n    static section_figures_tables = \"figures_tables\"\n    static section_multiselect = \"multiselect\"\n    static section_remarks = \"remarks\"\n    static section_richtext = \"richtext\"\n    static section_riskstats = \"riskstats\"\n    static section_terms_abbreviations = \"terms_abbreviations\"\n    static section_table_of_content = \"table_of_content\"\n    static section_testresults = \"testresults\"\n    static section_textline = \"textline\"\n    static section_tracematrix = \"tracematrix\"\n    static section_downtraces = \"downtraces\"\n    static section_uptraces = \"uptraces\"\n    static section_duedate= \"duedate\";\n    static section_templateapproval= \"templateapproval\";\n    static section_signaturebox= \"signaturebox\";\n    static section_CustomSection = \"CustomSection\";\n    static section_checkbox = \"checkbox\";\n    static section_hidden= \"hidden\";\n}\n","import {ItemConfiguration} from \"../../ItemConfiguration\";\nimport {SectionDescriptions} from \"./SectionDescriptions\";\nimport {GenericDocFieldHandler} from \"./GenericDocFieldHandler\";\nimport {GenericTableDocHandler} from \"./GenericTableDocHandler\";\nimport {IDHFControlDefinitionValue} from \"../../PluginManagerDocuments\";\nimport {IAnyMap} from \"../../../../globals\";\nimport {DateDocHandler} from \"./DateDocHandler\";\nimport {IBaseDropdownFieldParams} from \"../DropdownFieldHandler\";\nimport {CustomDocFieldHandler} from \"./CustomDocFieldHandler\";\nimport {RemarksDocFieldHandler} from \"./RemarksDocFieldHandler\";\nimport {CheckBoxDocFieldHandler} from \"./CheckBoxDocFieldHandler\";\nimport {DesignReviewDocFieldHandler} from \"./DesignReviewDocFieldHandler\";\nimport {ItemIndexDocFieldHander} from \"./ItemIndexDocFieldHander\";\nimport {ItemListDocFieldHandler} from \"./ItemListDocFieldHandler\";\nimport {LinkListDocFieldHandler} from \"./LinkListDocFieldHandler\";\nimport {ItemTableDocFieldHandler} from \"./ItemTableDocFieldHandler\";\nimport {RiskStatsDocFieldHandler} from \"./RiskStatsDocFieldHandler\";\nimport {ItemRefDocFieldHandler} from \"./ItemRefDocFieldHandler\";\nimport {IDocFieldHandler} from \"./IDocFieldHandler\";\nimport {ListOfFiguresDocFieldHandler} from \"./ListOfFiguresDocFieldHandler\";\nimport {SmartTextDocFieldHandler} from \"./SmartTextDocFieldHandler\";\nimport {TableOfContentDocFieldHandler} from \"./TableOfContentDocFieldHandler\";\nimport {TestResultsDocFieldHandler} from \"./testResultsDocFieldHandler\";\nimport {DerivedFromDocFieldHandler} from \"./DerivedFromDocFieldHandler\";\nimport {DocumentOptionsFieldHandler} from \"./DocumentOptionsFieldHandler\";\nimport {TextLineDocFieldHandler} from \"./TextLineDocFieldHandler\";\nimport {TraceMatrixDocFieldHandler} from \"./TraceMatrixDocFieldHandler\";\nimport {TraceDocFieldHandler} from \"./TraceDocFieldHandler\";\nimport {MultiSelectDocFieldHandler} from \"./DropdownDocFieldHandler\";\nimport {RichTextDocFieldHandler} from \"./RichTextDocFieldHandler\";\n\nexport class DocFieldHandlerFactory {\n\n    public static GetDHFFieldConfig(itemConfig: ItemConfiguration, fieldType: string, config: IAnyMap):IAnyMap {\n        let dhfConfig = itemConfig.getDHFConfig();\n        let foundConfig = undefined;\n        // special case for signatures\n        if( fieldType == SectionDescriptions.section_signaturebox || fieldType == SectionDescriptions.section_templateapproval)\n                fieldType = \"signatures\";\n\n        if (dhfConfig && dhfConfig[fieldType]) {\n            foundConfig = dhfConfig[fieldType];\n        }\n        if( foundConfig != undefined)\n            return {...foundConfig, ...(config || {}) } ;\n        return config;\n    }\n\n\n\n    static createHandler(itemConfig: ItemConfiguration, dhfValue: IDHFControlDefinitionValue): IDocFieldHandler {\n\n        let returnedFieldHandler: IDocFieldHandler = undefined;\n\n        switch (dhfValue.type) {\n            case SectionDescriptions.section_audittrail :\n            case SectionDescriptions.section_signatures :\n            case SectionDescriptions.section_signaturebox:\n            case SectionDescriptions.section_responsibilities :\n            case SectionDescriptions.section_genericTable :\n            case SectionDescriptions.section_templateapproval:\n            case SectionDescriptions.section_dhf_table :\n                returnedFieldHandler = new GenericTableDocHandler(dhfValue.type, dhfValue.ctrlConfig,dhfValue.fieldValue );\n                break;\n            case SectionDescriptions.section_Date :\n            case SectionDescriptions.section_duedate :\n                returnedFieldHandler = new DateDocHandler(dhfValue.type, dhfValue.ctrlConfig,dhfValue.fieldValue);\n                break;\n            case SectionDescriptions.section_remarks :\n                returnedFieldHandler = new RemarksDocFieldHandler(itemConfig, dhfValue.type, <IBaseDropdownFieldParams>dhfValue.ctrlConfig, dhfValue.fieldValue);\n                break;\n            case SectionDescriptions.section_multiselect :\n                returnedFieldHandler =  new MultiSelectDocFieldHandler(itemConfig,dhfValue.type, <IBaseDropdownFieldParams>dhfValue.ctrlConfig, dhfValue.fieldValue)\n                break;\n            case SectionDescriptions.section_downtraces :\n            case SectionDescriptions.section_uptraces :\n                returnedFieldHandler = new TraceDocFieldHandler(itemConfig,dhfValue.type, <IBaseDropdownFieldParams>dhfValue.ctrlConfig,dhfValue.fieldValue );\n                break;\n\n            case SectionDescriptions.section_designreviews:\n                returnedFieldHandler = new DesignReviewDocFieldHandler(dhfValue.type,dhfValue.ctrlConfig, dhfValue.fieldValue);\n                break;\n\n            case SectionDescriptions.section_package:\n            case SectionDescriptions.section_itemlist:\n                returnedFieldHandler = new ItemRefDocFieldHandler(dhfValue.type,dhfValue.ctrlConfig, dhfValue.fieldValue);\n                break;\n\n            case SectionDescriptions.section_riskstats:\n                returnedFieldHandler = new RiskStatsDocFieldHandler(dhfValue.type,dhfValue.ctrlConfig, dhfValue.fieldValue);\n                break;\n            case SectionDescriptions.section_linklist:\n                returnedFieldHandler = new LinkListDocFieldHandler(dhfValue.type,dhfValue.ctrlConfig, dhfValue.fieldValue);\n                break;\n            case SectionDescriptions.section_itemtable:\n                returnedFieldHandler = new ItemTableDocFieldHandler(dhfValue.type,dhfValue.ctrlConfig, dhfValue.fieldValue);\n                break;\n\n\n            case SectionDescriptions.section_items:\n                returnedFieldHandler = new ItemListDocFieldHandler(dhfValue.type,dhfValue.ctrlConfig, dhfValue.fieldValue);\n                break;\n\n            case SectionDescriptions.section_Checkbox : // Legacy\n            case SectionDescriptions.section_checkbox:\n                returnedFieldHandler =  new CheckBoxDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig,dhfValue.fieldValue);\n                break;\n\n\n            case SectionDescriptions.section_Custom :   // Legacy\n            case SectionDescriptions.section_CustomSection :\n                returnedFieldHandler =  new CustomDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig,dhfValue.fieldValue);\n                break;\n\n\n            case SectionDescriptions.section_item_index :\n                returnedFieldHandler =  new ItemIndexDocFieldHander(dhfValue.type, dhfValue.ctrlConfig,dhfValue.fieldValue);\n                break;\n\n            case SectionDescriptions.section_figures_tables :\n                returnedFieldHandler =  new ListOfFiguresDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig,dhfValue.fieldValue);\n                break;\n            case SectionDescriptions.section_terms_abbreviations :\n                returnedFieldHandler =  new SmartTextDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig,dhfValue.fieldValue);\n                break;\n            case SectionDescriptions.section_table_of_content :\n                returnedFieldHandler =  new TableOfContentDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig,dhfValue.fieldValue);\n                break;\n\n            case SectionDescriptions.section_testresults :\n                returnedFieldHandler =  new TestResultsDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig,dhfValue.fieldValue);\n                break;\n\n\n\n            case SectionDescriptions.section_derivedfrom:\n                break;\n                returnedFieldHandler =  new DerivedFromDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig,dhfValue.fieldValue);\n            case SectionDescriptions.section_document_options :\n                returnedFieldHandler =  new DocumentOptionsFieldHandler(dhfValue.type, dhfValue.ctrlConfig,dhfValue.fieldValue);\n                break;\n\n            case SectionDescriptions.section_richtext:\n                returnedFieldHandler =  new RichTextDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig,dhfValue.fieldValue);\n                break;\n\n            case SectionDescriptions.section_textline :\n                returnedFieldHandler =  new TextLineDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig,dhfValue.fieldValue);\n                break;\n\n            case SectionDescriptions.section_tracematrix :\n                returnedFieldHandler =  new TraceMatrixDocFieldHandler(dhfValue.type, dhfValue.ctrlConfig,dhfValue.fieldValue);\n                break;\n\n            default:\n                returnedFieldHandler = new GenericDocFieldHandler(dhfValue.type , dhfValue.ctrlConfig,dhfValue.fieldValue);\n        }\n\n        if( dhfValue.name){\n            returnedFieldHandler.setFieldName(dhfValue.name);\n        }\n\n        return  returnedFieldHandler;\n\n    }\n}\n","import { BaseTableFieldHandler, ITableControlBaseParams } from \"../BaseTableFieldHandler\";\nimport {IDHFControlDefinition, IDHFSection, IDHFSectionOptions} from \"../../PluginManagerDocuments\";\nimport {IDHFConfigTableColumn, IDropdownOption} from \"../../../../ProjectSettings\";\nimport {IDocFieldHandler} from \"./IDocFieldHandler\";\nimport {IAnyMap, IGenericMap} from \"../../../../globals\";\nimport {ITableRow} from \"../../../UI/Controls/tableCtrl\";\n\nexport interface ITableDHFConfig{\n    default:{ columns: IDHFConfigTableColumn[] }\n}\nexport interface ITableDHFSection{\n    config:ITableDHFConfig;\n}\n\n\nexport type { ITableConfig, IDhfTableOptions, ITableConfigColumn };\ninterface ITableConfig {\n    default: IDhfTableOptions\n}\n\ninterface IDhfTableOptions extends IDHFSectionOptions {\n    columns:ITableConfigColumn[],\n}\ninterface ITableConfigColumn extends IDHFSectionOptions {\n    columnType:string,\n    field:string,\n    pos:number,\n    editor: string,\n    name: string,\n    options: IDropdownOption[]\n}\n\n\nexport class GenericTableDocHandler extends BaseTableFieldHandler implements  IDocFieldHandler{\n    private controller: ITableDHFSection\n    public dhfFieldConfig: IAnyMap;\n    constructor(private sectionType:string, config: IDHFSectionOptions, fieldValue:string){\n        // The IDHFSectionOptions config parameter is really a ITableControlBaseParams.\n        super(<ITableControlBaseParams>config);\n        this.dhfFieldConfig = config;\n        this.initData(fieldValue);\n\n    }\n    validate() {\n        super.validate();\n    }\n    setConfig(config: IAnyMap) {\n        this.dhfFieldConfig = config;\n    }\n\n    getFieldType(): string {\n        return this.sectionType;\n    }\n\n    protected GetColumnCount(controllerConfig:ITableControlBaseParams) {\n        return controllerConfig.columns?controllerConfig.columns.length:0;\n    }\n\n    getXmlValue(): string {\n\n        let controllerConfig = this.dhfFieldConfig;\n\n        // get data entered into table\n        let table: IGenericMap[] = [];\n        let fieldValue = this.getData()\n        if (fieldValue) {\n            table = JSON.parse(fieldValue);\n        }\n        // add some extras for the xml dump: table header, sorting and colum type\n        const col_order: IGenericMap = {sortedtable: 1};\n        const col_types: IGenericMap = {columnTypes: 1};\n        const col_header: IGenericMap = {};\n\n        const colSorter :{name:string,order:number} [] = [];\n        let idx = 0;\n        //There might be no columns defined\n        let columns = controllerConfig.columns || [];\n\n        for (let columnConfig of columns) {\n\n            let castedColumnConfig = columnConfig as ITableConfigColumn;\n\n            colSorter.push( {name:castedColumnConfig.field, order:castedColumnConfig.pos} );\n            col_types[castedColumnConfig.field] = castedColumnConfig.columnType;\n            col_header[castedColumnConfig.field] = castedColumnConfig.name;\n\n            // fix custom drop down values\n            let colOpts = this.getColumnByField(controllerConfig.columns[idx].field );\n            if (colOpts) {\n                for(let row=0;row<table.length;row++) {\n                    if ( table[row][\"col\"+idx] && colOpts[table[row][\"col\"+idx]]) {\n                        // replace value with human readable value\n                        table[row][\"col\"+idx]  = colOpts[table[row][\"col\"+idx]];\n                    }\n                }\n            }\n            idx++;\n        }\n        // make sure col indexes start at 0\n        colSorter.sort(function (a, b) {\n            return a.order - b.order;\n        });\n        let colIdx = 0 ;\n        for(let s of colSorter){\n            col_order[s.name] = colIdx;\n            colIdx++ ;\n        }\n\n        table.splice(0, 0, col_header);\n        table.splice(0, 0, col_types);\n        table.splice(0, 0, col_order);\n\n        // return the xml dump\n        return JSON.stringify(table);\n    }\n\n    getDefaultConfig(): any {\n        // Default is empty as it's configured from itemConfig.getDHFConfig();\n        return {};\n    }\n\n    protected  name = \"\";\n    getFieldName(): string {\n        return this.name;\n    }\n\n    setFieldName(value: string): void {\n        this.name = value;\n    }\n    addSignatures(signatures: string[], includeAll?: boolean) {\n\n        let controllerConfig = this.dhfFieldConfig;\n        let signatureNameColumn:string;\n        let eSign = false;\n        for (let col = 0; col < this.getColumnCount(); col++) {\n            if (controllerConfig.columns[col].columnType === \"type4\") {\n                // drop down with user names\n                signatureNameColumn = controllerConfig.columns[col].field;\n            } else if (controllerConfig.columns[col].columnType === \"type10\") {\n                // drop down with user names\n                signatureNameColumn = controllerConfig.columns[col].field;\n            } else if (controllerConfig.columns[col].columnType === \"type3\") {\n                // empty field to add signature image and token\n                eSign = true;\n            }\n        }\n\n        if (!eSign && !signatureNameColumn) {\n            return;\n        }\n\n        if (!eSign) {\n            return;\n        }\n        if (!signatureNameColumn) {\n            return;\n        }\n\n        // get data entered into table\n        let table: ITableRow[] = [];\n         table = this.getDataRaw();\n\n\n        for (let row = 0; row < table.length; row++) {\n            let userId = <string>table[row][signatureNameColumn];\n            if ((includeAll || userId) && signatures.indexOf(userId) === -1) {\n                signatures.push(userId);\n            }\n        }\n    }\n\n}\n\n\n\n\n\n","import {DateFieldHandler} from \"../DateFieldHandler\";\nimport {IAnyMap} from \"../../../../globals\";\nimport {IDocFieldHandler} from \"./IDocFieldHandler\";\nimport {IDHFSectionOptions} from \"../../PluginManagerDocuments\";\nimport {ml} from \"../../../matrixlib\";\nimport {DateTimeBL} from \"../../DateTimeBL\";\n\nexport type { IDueDateOptions, IDHFDueDateConfig };\n\ninterface IDueDateOptions extends IDHFSectionOptions {\n}\n\ninterface IDHFDueDateConfig {\n    default:IDueDateOptions\n}\n\nexport class DateDocHandler extends DateFieldHandler implements  IDocFieldHandler{\n    private type: string;\n\n    constructor(type:string, config: IAnyMap, fieldValue:string) {\n        if( config ==undefined)\n            config = DateDocHandler.default_config;\n        super(config);\n        this.type = type;\n        this.dhfFieldConfig = config;\n\n        this.initData(fieldValue);\n    }\n\n    static default_config:IDHFDueDateConfig = {\n        default: {}\n    };\n    getFieldType(): string {\n        return this.type;\n    }\n    setConfig(config: IAnyMap) {\n        this.dhfFieldConfig = config;\n    }\n\n    getXmlValue(): string {\n        let xmlval:any[] = [];\n        let yyyymmdd = this.getDate();\n            // new Date take mm-1\n         let dateStr = DateTimeBL.getInstance().renderCustomerHumanDate(\n                 yyyymmdd,\n                 true);\n        xmlval.push( { \"date\":dateStr });\n\n        return JSON.stringify(xmlval);\n    }\n    addSignatures (signatures: string[],includeAll:boolean ) {\n        //Nothing to do here\n    }\n    dhfFieldConfig: IAnyMap;\n\n    getDefaultConfig(): any {\n        return {};\n    }\n    protected  name = \"\";\n    getFieldName(): string {\n        return this.name;\n    }\n\n    setFieldName(value: string): void {\n        this.name = value;\n    }\n}\n","import {IGetProjectResultDateInfo} from \"./index\";\nimport {matrixSession, restConnection} from \"../../globals\";\n\nexport  class DateTimeBL {\n    // formatter (always for the user)\n    public simpleDateTimeFormat: SimpleDateFormat;\n    public simpleDateFormat: SimpleDateFormat;\n    // formatter for the customer\n    public simpleCustomerDateTimeFormat: SimpleDateFormat;\n    public simpleCustomerDateFormat: SimpleDateFormat;\n\n\n    // *******************************************************\n    // these are setting of the currently logged in user\n    // as well as the current server settings\n    // they are updated when initDateTimeSettings() is called\n    // *******************************************************\n    public userDateTimeFormat: string;\n    public userDateOnlyFormat: string;\n    public userTimezone: string;\n    // server formatting for user\n    public dateIso8601FromServer: string;\n    public dateUserFromServer: string;\n    // server settings\n    public serverDateTimeFormat: string;\n    public serverDateOnlyFormat: string;\n    public serverTimezone: string;\n\n    static instance: DateTimeBL;\n\n    static getInstance(): DateTimeBL {\n        if (DateTimeBL.instance == null) {\n            DateTimeBL.instance = new DateTimeBL();\n        }\n        return DateTimeBL.instance;\n    }\n\n     private constructor() {\n        this.userDateTimeFormat = \"yyyy/MM/dd HH:mm:ss\";\n        this.userDateOnlyFormat = \"yyyy/MM/dd\";\n        this.userTimezone = \"UTC\";\n        this.simpleDateTimeFormat = new SimpleDateFormat(this.userDateTimeFormat);\n        this.simpleDateFormat = new SimpleDateFormat(this.userDateOnlyFormat);\n        this.dateIso8601FromServer = \"\";\n        this.dateUserFromServer = \"\";\n        this.serverDateTimeFormat = \"yyyy/MM/dd HH:mm:ss\";\n        this.serverDateOnlyFormat = \"yyyy/MM/dd\";\n        this.serverTimezone = \"UTC\";\n        this.simpleCustomerDateTimeFormat = new SimpleDateFormat(this.userDateTimeFormat);\n        this.simpleCustomerDateFormat = new SimpleDateFormat(this.userDateOnlyFormat);\n    }\n\n    // isValidateDate(new Date(\"ccccc\")) -> false\n    private isValidDate(d: Date): boolean {\n        if (Object.prototype.toString.call(d) === \"[object Date]\") {\n            return !isNaN(d.getTime());\n        }\n        return false;\n    }\n\n    // render a human date and time in the user's preferred style\n    renderHumanDate(date: Date, dateOnly?: boolean): string {\n\n        if (!this.isValidDate(date)) {\n            return \"\";\n        }\n\n        if (dateOnly) {\n            return this.simpleDateFormat.format(date);\n        }\n        return this.simpleDateTimeFormat.format(date);\n    }\n\n    // render a human date and time in the user's preferred style\n    renderCustomerHumanDate(date: Date, dateOnly?: boolean): string {\n\n        if (!this.isValidDate(date)) {\n            return \"\";\n        }\n\n        if (dateOnly) {\n            return this.simpleCustomerDateFormat.format(date);\n        }\n        return this.simpleCustomerDateTimeFormat.format(date);\n    }\n\n    // render a date 3 letter abbreviation (e.g. for calendars)\n    renderHumanMonth(dateObj: Date): string {\n        let dateFormat = new SimpleDateFormat(\"MMM\");\n        return dateFormat.format(dateObj);\n    }\n\n    renderDashFormat(dateObj: Date): string {\n        let dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n        return dateFormat.format(dateObj);\n    }\n\n\n\n    // return the simple date format for controls\n    getSimpleDateFormat(): string {\n        return this.userDateOnlyFormat;\n    }\n\n    private toMoment(format: string): string {\n        // see https://www.angularfaces.net/cheatsheet/\n        return format\n            .replace(\"a\", \"A\")\n            .replace(\"DDD\", \"DDDD\")\n            .replace(\"D\", \"DDD\")\n            .replace(\"dd\", \"DD\")\n            .replace(\"d\", \"D\")\n            .replace(\"EEEE\", \"dddd\")\n            .replace(\"EEE\", \"ddd\")\n            .replace(\"EE\", \"dd\")\n            .replace(\"E\", \"d\")\n            .replace(\"u\", \"E\")\n            .replace(\"w\", \"W\")\n            .replace(\"ww\", \"WW\")\n            .replace(\"xxx\", \"Z\")\n            .replace(\"xx\", \"ZZ\")\n            .replace(\"YYYY\", \"gggg\")\n            .replace(\"YY\", \"gg\")\n            .replace(\"yyyy\", \"YYYY\")\n            .replace(\"yyy\", \"YYY\")\n            .replace(\"yy\", \"YY\")\n            .replace(\"y\", \"Y\")\n            .replace(\"Z\", \"ZZ\")\n    }\n\n    getSimpleDateFormatMoment() {\n        return this.toMoment(this.userDateOnlyFormat)\n    }\n\n    getSimpleDateTimeFormatMoment() {\n        return this.toMoment(this.userDateTimeFormat)\n    }\n    async initDateTimeSettings(update?: boolean): Promise<void> {\n        let dateSettings: IGetProjectResultDateInfo;\n        let that = this;\n\n        function updateSettings() {\n            that.userDateTimeFormat = dateSettings.timeformat;\n            that.userDateOnlyFormat = dateSettings.dateformat;\n            that.userTimezone = dateSettings.timeZone;\n            that.serverDateOnlyFormat = dateSettings.customerDateformat;\n            that.serverDateTimeFormat = dateSettings.customerTimeformat;\n            that.serverTimezone = dateSettings.customerTimezone;\n            // create formatting strings\n            that.simpleCustomerDateTimeFormat = new SimpleDateFormat(that.serverDateTimeFormat);\n            that.simpleCustomerDateFormat = new SimpleDateFormat(that.serverDateOnlyFormat);\n            // remember the date time settings as the server thinks it should be\n            that.dateIso8601FromServer = dateSettings.dateIso8601;\n            that.dateUserFromServer = dateSettings.timeUserFormat;\n            // create formatting strings\n            that.simpleDateTimeFormat = new SimpleDateFormat(that.userDateTimeFormat);\n            that.simpleDateFormat = new SimpleDateFormat(that.userDateOnlyFormat);\n        }\n\n        if (update) {\n            await restConnection.getServer(\"all/date\").done(function (ds: IGetProjectResultDateInfo) {\n                dateSettings = ds;\n                updateSettings();\n            });\n        } else {\n            dateSettings = matrixSession.getDateInfo();\n            updateSettings();\n        }\n\n        return;\n    }\n\n}\n","import {IDocFieldHandler} from \"./IDocFieldHandler\";\nimport {IGenericMap} from \"../../../../globals\";\nimport {IDHFSectionOptions} from \"../../PluginManagerDocuments\";\nimport {ICustomSection} from \"../../../../printinterface/PrintProcessorInterfaces\";\nimport {ItemSelectionFromToAbstractDocFieldHandler} from \"./ItemSelectionFromToAbstractDocFieldHandler\";\n\n\nexport type { ICustomSectionOptions, IDHFCustomSectionOptions };\n\ninterface ICustomSectionOptions extends IDHFSectionOptions {\n    includeInToc:boolean,\n    options: ICustomSection,\n    landscape: boolean\n}\n\ninterface IDHFCustomSectionOptions {\n    default:ICustomSectionOptions\n}\n\n\n\nexport class CustomDocFieldHandler extends ItemSelectionFromToAbstractDocFieldHandler implements IDocFieldHandler {\n     static default_config:IDHFCustomSectionOptions = {\n        default: {\n            includeInToc: false, landscape: false, options: {\n                description:\"\",\n                descriptionContent: \"\",\n                descriptionNoContent: \"<p>not applicable</p>\",\n                formatter:\"\"\n            }}\n    }\n\n\n    getDefaultConfig() {\n        return CustomDocFieldHandler.default_config.default;\n    }\n\n    public getXmlValue(): string {\n\n        let controllerConfig = this.dhfFieldConfig;\n\n        // get lists\n        let reflist = this.getSelectedItems();\n\n        let td: IGenericMap[] = [];\n        let r0: IGenericMap = {};\n        for (let idx = 0; idx < reflist.from.length; idx++) {\n            r0[\"from\" + idx] = reflist.from[idx].to;\n        }\n        td.push(r0);\n\n        let r1: IGenericMap = {};\n        for (let idx = 0; idx < reflist.to.length; idx++) {\n            r1[\"to\" + idx] = reflist.to[idx].to;\n        }\n        td.push(r1);\n\n        // copy parameters\n\n        let r2: IGenericMap = {};\n        r2[\"SETTINGS\"] = JSON.stringify(controllerConfig.options);\n\n        td.push(r2);\n\n        // return the xml dump\n        return JSON.stringify(td);\n    }\n\n\n}\n","import {ItemSelectionFieldHandlerFromTo} from \"../ItemSelectionFieldHandlerFromTo\";\nimport {IDocFieldHandler} from \"./IDocFieldHandler\";\nimport {IAnyMap} from \"../../../../globals\";\nimport {IDHFControlDefinition} from \"../../DHFInterfaces\";\n\nexport abstract class ItemSelectionFromToAbstractDocFieldHandler extends ItemSelectionFieldHandlerFromTo implements IDocFieldHandler {\n    dhfFieldConfig: IAnyMap;\n\n    constructor(fielType: string, config: IAnyMap, fieldValue: string) {\n        super(config, fielType);\n\n        if (!config)\n            config = this.getDefaultConfig()\n        this.dhfFieldConfig = config;\n\n        this.initData(fieldValue);\n    }\n\n    setConfig(config: IAnyMap): void {\n        this.dhfFieldConfig = config;\n    }\n    addSignatures (signatures: string[],includeAll:boolean ) {\n        //Nothing to do here\n    }\n    abstract getDefaultConfig(): any ;\n\n    abstract getXmlValue(): string;\n\n    protected  name = \"\";\n    getFieldName(): string {\n        return this.name;\n    }\n\n    setFieldName(value: string): void {\n        this.name = value;\n    }\n\n}\n\n\n","import {IFieldHandler} from \"./IFieldHandler\";\nimport {XRFieldTypeAnnotatedParamJson} from \"../ItemConfiguration\";\nimport {IFromToSelection} from \"../../UI/Controls/itemSelectionFromTo\";\nimport {IAnyMap, IReference} from \"../../../globals\";\n\nexport class ItemSelectionFieldHandlerFromTo implements IFieldHandler {\n    protected config: XRFieldTypeAnnotatedParamJson;\n    private fieldType: string;\n\n    private selectedItems: IFromToSelection;\n    private defaultSelection: IReference[] = [];\n\n\n    constructor(configIn: XRFieldTypeAnnotatedParamJson, fieldTypeIn?: string) {\n        this.config = configIn;\n        this.fieldType = fieldTypeIn;\n        // initialize object\n        this.selectedItems = {from: [], to: []};\n    }\n\n\n    getData(): string {\n        return JSON.stringify(this.selectedItems);\n    }\n\n    getFieldType(): string {\n        return this.fieldType;\n    }\n\n    initData(serializedFieldData: string) {\n        this.selectedItems = {from: [], to: []};\n        if (serializedFieldData && serializedFieldData !== 'undefined' && serializedFieldData !== \"\") {\n            this.selectedItems = JSON.parse(serializedFieldData);\n        } else if (this.config && this.config.parameter &&  this.config.parameter.allTo) {\n            this.selectedItems.to = this.defaultSelection;\n        }\n    }\n\n    getSelectedItems() {\n        return this.selectedItems;\n    }\n\n    setSelectedItems(data: IFromToSelection) {\n        this.selectedItems = data;\n    }\n\n    setFromSelectiont(newSelection: IReference[]) {\n        this.selectedItems.from = newSelection;\n    }\n\n    setToSelectiont(newSelection: IReference[]) {\n        this.selectedItems.to = newSelection;\n    }\n\n    isDefaultSelection() {\n        if (this.defaultSelection.length !== this.selectedItems.to.length) {\n            return false;\n        }\n        const notInDefault = this.selectedItems.to.filter((d: IReference) => {\n            return this.defaultSelection.reduce((prev, item) => {\n                if (item.to === d.to) {\n                    return false;\n                } else {\n                    return prev;\n                }\n            }, true);\n        })\n        return notInDefault.length === 0;\n    }\n\n    setDefaultSelection(map: IReference[]) {\n        this.defaultSelection = map;\n    }\n\n    setConfig(config: IAnyMap) {\n        this.config = config;\n\n    }\n}\n","import {IDHFSectionOptions} from \"../../PluginManagerDocuments\";\nimport {DropdownAbstractDocFieldHandler} from \"./DropdownAbstractDocFieldHandler\";\n\n\nexport type { IRemarkOptions, IDHFRemarksConfig };\n\ninterface IRemarkOptions extends IDHFSectionOptions {\n\n}\n\ninterface IDHFRemarksConfig {\n    default:object\n}\n\nexport class RemarksDocFieldHandler extends DropdownAbstractDocFieldHandler {\n\n    static default_config:IDHFRemarksConfig = {\n        default:{}\n    };\n    getXmlValue(): string {\n        let tt: { lines: string }[] = [];\n        tt.push({lines: this.getData()});\n        return JSON.stringify(tt);\n    }\n\n    getDefaultConfig(): any {\n        return RemarksDocFieldHandler.default_config.default;\n    }\n}\n","import {DropdownFieldHandler, IBaseDropdownFieldParams} from \"../DropdownFieldHandler\";\nimport {IDocFieldHandler} from \"./IDocFieldHandler\";\nimport {IAnyMap} from \"../../../../globals\";\nimport {ItemConfiguration} from \"../../ItemConfiguration\";\n\nexport abstract class DropdownAbstractDocFieldHandler extends DropdownFieldHandler implements IDocFieldHandler {\n\n    private sectionType: string;\n    dhfFieldConfig: IAnyMap;\n\n\n    constructor(protected itemConfig: ItemConfiguration, type: string, config: IBaseDropdownFieldParams, initialValue?: string) {\n        super(config, initialValue);\n        if (!config)\n            config = this.getDefaultConfig()\n        this.dhfFieldConfig = config;\n        this.sectionType = type;\n\n    }\n    getFieldType(): string {\n        return this.sectionType;\n    }\n    setConfig(config: IAnyMap) {\n        this.dhfFieldConfig = config;\n    }\n\n    addSignatures (signatures: string[],includeAll:boolean ) {\n        //Nothing to do here\n    }\n    abstract getDefaultConfig(): any;\n\n    abstract getXmlValue(): string;\n\n    protected  name = \"\";\n    getFieldName(): string {\n        return this.name;\n    }\n\n    setFieldName(value: string): void {\n        this.name = value;\n    }\n\n}\n","import {CheckboxFieldHandler} from \"../CheckboxFieldHandler\";\nimport {IDocFieldHandler} from \"./IDocFieldHandler\";\nimport {XRFieldTypeAnnotatedParamJson} from \"../../ItemConfiguration\";\nimport {IAnyMap, IGenericMap} from \"../../../../globals\";\nimport {IDHFSectionOptions} from \"../../PluginManagerDocuments\";\n\n\nexport type {ICheckboxOptions, IDHFCheckboxConfig};\n\ninterface ICheckboxOptions extends IDHFSectionOptions {\n\n}\n\ninterface IDHFCheckboxConfig {\n    default: object\n}\n\nexport class CheckBoxDocFieldHandler extends CheckboxFieldHandler implements IDocFieldHandler {\n\n    private sectionType: string;\n\n    constructor(sectionType: string, config: XRFieldTypeAnnotatedParamJson, fieldValue: string) {\n        super(config);\n        this.sectionType = sectionType;\n        if(!config)\n            config = this.getDefaultConfig()\n        this.dhfFieldConfig = config;\n        this.initData(fieldValue);\n    }\n    getFieldType(): string {\n        return this.sectionType;\n    }\n    addSignatures (signatures: string[],includeAll:boolean ) {\n        //Nothing to do here\n    }\n    static  default_config: IDHFCheckboxConfig = {\n        default: {}\n    };\n    dhfFieldConfig: IAnyMap;\n    getDefaultConfig() {\n        return CheckBoxDocFieldHandler.default_config.default;\n    }\n\n    setConfig(config: IAnyMap): void {\n        this.dhfFieldConfig = config;\n    }\n    getXmlValue(): string {\n        let xmlval: IGenericMap[] = [];\n        let val = this.getValue();\n        xmlval.push({\"checked\": val ? \"true\" : \"false\"});\n        return JSON.stringify(xmlval);\n    }\n\n    protected  name = \"\";\n    getFieldName(): string {\n        return this.name;\n    }\n\n    setFieldName(value: string): void {\n        this.name = value;\n    }\n}\n","import {ItemSelectionFieldHandler} from \"../ItemSelectionFieldHandler\";\nimport {IDocFieldHandler} from \"./IDocFieldHandler\";\nimport {IAnyMap, IGenericMap} from \"../../../../globals\";\nimport {XRFieldTypeAnnotatedParamJson} from \"../../ItemConfiguration\";\nimport {extend} from \"../../../matrixlib/JQueryExtendReplacement\";\nimport {IDHFSectionOptions} from \"../../PluginManagerDocuments\";\n\n\nexport type { IDesignReviewsOptions, IDHFDesignReviewsConfig };\n\ninterface IDesignReviewsOptions extends IDHFSectionOptions {\n    reviews:string[],\n    user:boolean,\n    date: boolean,\n    revision: boolean,\n    comment: boolean,\n    includeInToc: boolean,\n    numericalOrder: boolean,\n    search?:string\n}\n\ninterface IDHFDesignReviewsConfig {\n    default:IDesignReviewsOptions\n}\nexport class DesignReviewDocFieldHandler extends ItemSelectionFieldHandler implements  IDocFieldHandler{\n     dhfFieldConfig: IAnyMap;\n\n\n    constructor(sectionType: string,  config: XRFieldTypeAnnotatedParamJson,fieldValue:string){\n        super(config, sectionType);\n        if(!config)\n            config = this.getDefaultConfig()\n        this.dhfFieldConfig = config;\n        this.initData(fieldValue);\n    }\n    static defaut_config:IDHFDesignReviewsConfig = {\n        default: { reviews:[], user:false, date:false, revision:false, comment:false, includeInToc:false, numericalOrder:false}\n    };\n    getDefaultConfig() {\n        return DesignReviewDocFieldHandler.defaut_config.default;\n    }\n    setConfig(config: IAnyMap) {\n        this.dhfFieldConfig = config;\n    }\n\n    getXmlValue(): string {\n\n        let js = this.getItems();\n\n        if (!js) {\n             return  JSON.stringify({});\n        }\n\n        let controllerConfig =this. dhfFieldConfig;\n\n        let reviews = {\n            user:controllerConfig.user,\n            date:controllerConfig.date,\n            revision:controllerConfig.revision,\n            comment:controllerConfig.comment,\n            includeInToc:controllerConfig.includeInToc,\n            numericalOrder:controllerConfig.numericalOrder\n        };\n\n        for(let review of controllerConfig.reviews) {\n            (<IGenericMap>reviews)[review] = '1';\n        }\n\n        for (let row = 0; row < js.length; row++) {\n            extend(true, js[row], reviews);\n        }\n\n        return   JSON.stringify(js);\n\n    }\n\n\n\n}\n","export { extend };\n\n// This is ported from the JQuery 3.5.1 codebase. It is tough to get a recursive extend function\n// exactly right. Safest option is to keep the implementation we've used for years, and eliminate\n// the JQuery dependency.\n\nfunction isFunction(obj) {\n    // Support: Chrome <=57, Firefox <=52\n    // In some browsers, typeof returns \"function\" for HTML <object> elements\n    // (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n    // We don't want to classify *any* DOM node as a function.\n    return typeof obj === \"function\" && typeof obj.nodeType !== \"number\";\n}\n\nvar class2type = {};\nconst hasOwn = class2type.hasOwnProperty;\nconst fnToString = hasOwn.toString;\nconst ObjectFunctionString = fnToString.call(Object);\n\nfunction isPlainObject(obj) {\n    var proto, Ctor;\n\n    // Detect obvious negatives\n    // Use toString instead of jQuery.type to catch host objects\n    if (!obj || toString.call(obj) !== \"[object Object]\") {\n        return false;\n    }\n\n    proto = Object.getPrototypeOf(obj);\n\n    // Objects with no prototype (e.g., `Object.create( null )`) are plain\n    if (!proto) {\n        return true;\n    }\n\n    // Objects with prototype are plain iff they were constructed by a global Object function\n    Ctor = hasOwn.call(proto, \"constructor\") && proto.constructor;\n    return typeof Ctor === \"function\" && fnToString.call(Ctor) === ObjectFunctionString;\n}\n\nfunction extend(...args: any[]): any {\n    var options, name, src, copy, copyIsArray, clone,\n        target = arguments[0] || {},\n        i = 1,\n        length = arguments.length,\n        deep = false;\n\n    // Handle a deep copy situation\n    if (typeof target === \"boolean\") {\n        deep = target;\n\n        // Skip the boolean and the target\n        target = arguments[i] || {};\n        i++;\n    }\n\n    // Handle case when target is a string or something (possible in deep copy)\n    if (typeof target !== \"object\" && !isFunction(target)) {\n        target = {};\n    }\n\n    // Extend jQuery itself if only one argument is passed\n    if (i === length) {\n        target = this;\n        i--;\n    }\n\n    for (; i < length; i++) {\n\n        // Only deal with non-null/undefined values\n        if ((options = arguments[i]) != null) {\n\n            // Extend the base object\n            for (name in options) {\n                copy = options[name];\n\n                // Prevent Object.prototype pollution\n                // Prevent never-ending loop\n                if (name === \"__proto__\" || target === copy) {\n                    continue;\n                }\n\n                // Recurse if we're merging plain objects or arrays\n                if (deep && copy && (isPlainObject(copy) ||\n                    (copyIsArray = Array.isArray(copy)))) {\n                    src = target[name];\n\n                    // Ensure proper type for the source value\n                    if (copyIsArray && !Array.isArray(src)) {\n                        clone = [];\n                    } else if (!copyIsArray && !isPlainObject(src)) {\n                        clone = {};\n                    } else {\n                        clone = src;\n                    }\n                    copyIsArray = false;\n\n                    // Never move original objects, clone them\n                    target[name] = extend(deep, clone, copy);\n\n                    // Don't bring in undefined values\n                } else if (copy !== undefined) {\n                    target[name] = copy;\n                }\n            }\n        }\n    }\n\n    // Return the modified object\n    return target;\n}\n\n\nvar initCalled: boolean = false;\nfunction init() {\n    if (initCalled) return;\n    initCalled = true;\n\n    const typeStrings = [\"Boolean\", \"Number\", \"String\", \"Function\", \"Array\", \"Date\", \"RegExp\", \"Object\", \"Error\", \"Symbol\"];\n    typeStrings.forEach((t) => {\n        class2type[\"[object \" + t + \"]\"] = t.toLowerCase();\n    });\n}\n\ninit();","import {IDocFieldHandler} from \"./IDocFieldHandler\";\nimport {IDHFSectionOptions} from \"../../PluginManagerDocuments\";\nimport {IAnyMap} from \"../../../../globals\";\nimport {ITableOfContentOptions} from \"./TableOfContentDocFieldHandler\";\nimport {GenericDocAbstractFieldHandler} from \"./GenericDocAbstractFieldHandler\";\n\nexport type { IItemIndexOptions, IDHFItemIndexConfig };\n\ninterface IItemIndexOptions extends IDHFSectionOptions {\n    format:string\n}\ninterface IDHFItemIndexConfig {\n    default:IItemIndexOptions\n}\n\n\n\n\nexport class ItemIndexDocFieldHander extends GenericDocAbstractFieldHandler implements IDocFieldHandler {\n\n    dhfFieldConfig: IAnyMap;\n    static defaultConfig:IDHFItemIndexConfig = {default:{ format:'\\\\e \"\\\\t\" \\\\c \"1\"'}}\n\n    getXmlValue(): string {\n\n        let controllerConfig = this.dhfFieldConfig;\n        if( this.dhfFieldConfig == undefined)\n            controllerConfig = ItemIndexDocFieldHander.defaultConfig;\n        let options: ITableOfContentOptions = {format: controllerConfig.format};\n        return  JSON.stringify([options]);\n    }\n\n\n    getDefaultConfig(): any {\n        return ItemIndexDocFieldHander.defaultConfig.default;\n    }\n\n}\n","import {IDocFieldHandler} from \"./IDocFieldHandler\";\nimport {IAnyMap, IReference} from \"../../../../globals\";\nimport {IDHFSectionOptions} from \"../../PluginManagerDocuments\";\nimport {extend} from \"../../../matrixlib/JQueryExtendReplacement\";\nimport {IItemsFromConfig, IItemsOptions, ItemSelectionAbstractDocFieldHandler} from \"./ItemSelectionAbstractDocFieldHandler\";\n\nexport interface IItemListOptions extends IDHFSectionOptions {\n    recursive: boolean, tree:boolean, refdocs:boolean, hideEmptyFolders:boolean, showParentFolders:boolean, includeInToc:boolean, sortedList:boolean, search?:string\n}\n\nexport interface IDHFItemListConfig {\n    default:IItemListOptions\n    defaultPackage:IItemListOptions\n}\n\nexport class ItemListDocFieldHandler extends ItemSelectionAbstractDocFieldHandler implements IDocFieldHandler {\n    getDefaultConfig() {\n        return ItemListDocFieldHandler.default_config.default;\n    }\n    static default_config: IItemsFromConfig = {\n        default: {\n            breadcrumb: true,\n            folderDetails: '',\n            extracolumn: '',\n            showlinks: true,\n            showUpOnly: false,\n            showDownOnly: false,\n            showDeeplinks: false,\n            showExternal: 0,\n            dateoptions: '',\n            refdocs: false,\n            hideLinkErrors: false,\n            hideLabels: false,\n            showAllParentFolders: false,\n            hideEmptyFolders: false,\n            includeInToc: false,\n            breakAfterItems: false\n        }\n    };\n    setConfig(config: IAnyMap) {\n        this.dhfFieldConfig = config;\n    }\n\n\n    getXmlValue(): string {\n\n        let js = <IReference[]>this.getItems();\n\n        // add params (parameter: \"showbreadcrumb:true,extracolumn:EX\") to each row\n        let controllerConfig = this.dhfFieldConfig;\n\n        for (let row = 0; row < js.length; row++) {\n            extend(true, js[row], controllerConfig);\n        }\n        return JSON.stringify(js);\n    }\n\n}\n","import {ItemSelectionFieldHandler} from \"../ItemSelectionFieldHandler\";\nimport {IDocFieldHandler} from \"./IDocFieldHandler\";\nimport {IAnyMap} from \"../../../../globals\";\nimport {XRFieldTypeAnnotatedParamJson} from \"../../ItemConfiguration\";\n\nimport {IDHFSectionOptions} from \"../../PluginManagerDocuments\";\n\nexport type { IItemsOptions, IItemsFromConfig };\n\ninterface IItemsOptions extends IDHFSectionOptions {\n    folderDetails:string, extracolumn:string, showlinks:boolean, showUpOnly:boolean, showDownOnly:boolean,\n    showDeeplinks:boolean, breadcrumb:boolean,    showExternal:number,\n    dateoptions:string,refdocs:boolean, hideLinkErrors:boolean, hideLabels:boolean,\n    hideEmptyFolders:boolean, showAllParentFolders:boolean, includeInToc:boolean, search?:string,\n    breakAfterItems:boolean\n\n}\n\ninterface IItemsFromConfig {\n    default:IItemsOptions\n}\n\n\nexport abstract class ItemSelectionAbstractDocFieldHandler extends ItemSelectionFieldHandler implements IDocFieldHandler {\n    dhfFieldConfig: IAnyMap;\n\n    abstract getDefaultConfig(): any;\n    addSignatures (signatures: string[],includeAll:boolean ) {\n        //Nothing to do here\n    }\n    constructor(sectionType: string, config: XRFieldTypeAnnotatedParamJson, fieldValue: string) {\n        super(config, sectionType);\n        if (!config)\n            config = this.getDefaultConfig()\n        this.dhfFieldConfig = config;\n\n        this.initData(fieldValue);\n    }\n    setConfig(config: IAnyMap) {\n        this.dhfFieldConfig = config;\n    }\n\n\n    abstract getXmlValue();\n}\n","import {IDocFieldHandler} from \"./IDocFieldHandler\";\nimport {IDHFSectionOptions} from \"../../PluginManagerDocuments\";\nimport {IReference} from \"../../../../globals\";\nimport {IItemListOptions} from \"./ItemListDocFieldHandler\";\nimport {ItemSelectionAbstractDocFieldHandler} from \"./ItemSelectionAbstractDocFieldHandler\";\n\n\n\nexport type { ILinkListOptions, IDHFLinkListConfig };\n\ninterface ILinkListOptions extends IDHFSectionOptions {\n    showExternal: number, includeInToc:boolean, search?:string\n}\n\ninterface IDHFLinkListConfig {\n    default:ILinkListOptions\n}\n\nexport class LinkListDocFieldHandler extends ItemSelectionAbstractDocFieldHandler implements IDocFieldHandler {\n\n    getDefaultConfig() {\n        return LinkListDocFieldHandler.default_config.default;\n    }\n\n    static default_config:IDHFLinkListConfig = {default:{showExternal: 1, includeInToc:false}}\n    getXmlValue(): string {\n        let reflist = <IReference[]> this.getItems();\n        for (let idx = 0; idx < reflist.length; idx++) {\n            (<ILinkListOptions><any>reflist[idx])['showExternal'] = this.dhfFieldConfig.showExternal;\n            (<IItemListOptions><any>reflist[idx])['includeInToc'] = this.dhfFieldConfig.includeInToc;\n        }\n        return  JSON.stringify(reflist);\n    }\n\n}\n","import {IDocFieldHandler} from \"./IDocFieldHandler\";\nimport {IDHFSectionOptions} from \"../../PluginManagerDocuments\";\nimport {IAnyMap, IReference} from \"../../../../globals\";\nimport {ItemSelectionAbstractDocFieldHandler} from \"./ItemSelectionAbstractDocFieldHandler\";\n\n\nexport type { IItemTableOptions, IDHFItemTableConfig };\n\ninterface IItemTableOptions extends IDHFSectionOptions {\n    includeInToc:boolean, sortedList:boolean, includeFolders:boolean, columns:string, search?:string\n}\n\ninterface IDHFItemTableConfig {\n    default:IItemTableOptions\n}\nexport class ItemTableDocFieldHandler extends ItemSelectionAbstractDocFieldHandler implements IDocFieldHandler {\n    getDefaultConfig() {\n        return ItemTableDocFieldHandler.default_config.default;\n    }\n    static default_config: IDHFItemTableConfig = {\n        default: {includeInToc: false, sortedList: false, includeFolders: false, columns: \"item,labels,down\"}\n    };\n\n    getXmlValue(): string {\n\n        let reflist = <IReference[]>this.getItems();\n        for (let idx = 0; idx < reflist.length; idx++) {\n            (<IItemTableOptions><any>reflist[idx])['includeInToc'] = this.dhfFieldConfig.includeInToc;\n            (<IItemTableOptions><any>reflist[idx])['includeFolders'] =this.dhfFieldConfig.includeFolders;\n            (<IItemTableOptions><any>reflist[idx])['sortedList'] =this.dhfFieldConfig.sortedList;\n            (<IItemTableOptions><any>reflist[idx])['columns'] = this.dhfFieldConfig.columns;\n        }\n        return  JSON.stringify(reflist);\n\n    }\n\n}\n","import {IDocFieldHandler} from \"./IDocFieldHandler\";\nimport {IDHFSectionOptions} from \"../../PluginManagerDocuments\";\nimport {IReference} from \"../../../../globals\";\nimport {extend} from \"../../../matrixlib/JQueryExtendReplacement\";\nimport {ItemSelectionAbstractDocFieldHandler} from \"./ItemSelectionAbstractDocFieldHandler\";\n\n\nexport type { IRiskStatsOptions, IDHFRiskStatsConfig };\n\ninterface IRiskStatsOptions extends IDHFSectionOptions {\n    includeInToc:boolean,\n    table:string,\n    rbm:string,\n    ram:string,\n    noTest:string,\n    mustReduce:string,\n    noBenefits:string,\n    riskNoTest:string,\n    riskAfterByZone:string,\n    riskBeforeByZone:string,\n    mitNoTest:string,\n    traceMitTest:string,\n    search?:string\n}\n\ninterface IDHFRiskStatsConfig {\n    default:IRiskStatsOptions\n}\nexport class RiskStatsDocFieldHandler extends ItemSelectionAbstractDocFieldHandler implements IDocFieldHandler {\n    getDefaultConfig() {\n     return RiskStatsDocFieldHandler.default_config.default ;\n    }\n\n    static default_config: IDHFRiskStatsConfig = {\n        default: {\n            includeInToc: false,\n            table: \"Risk table\",\n            rbm: \"Risk levels before controls\",\n            ram: \"Risk levels after controls\",\n            noTest: \"Test coverage overview\",\n            mustReduce: \"Risks which need to be further reduced\",\n            noBenefits: \"Risks which are not justified by benefits\",\n            riskAfterByZone: \"Risks by zone after control\",\n            riskBeforeByZone: \"Risks by zone before control\",\n            riskNoTest: \"Risks without tests\",\n            mitNoTest: \"Risk controls without tests\",\n            traceMitTest: \"Traces from risks to tests\"\n        }\n    };\n\n    getXmlValue(): string {\n        let reflist = <IReference[]>this.getItems();\n        for (let idx = 0; idx < reflist.length; idx++) {\n            extend(true, reflist[idx], this.dhfFieldConfig);\n        }\n        return  JSON.stringify(reflist);\n    }\n\n}\n","import {IDocFieldHandler} from \"./IDocFieldHandler\";\nimport {SectionDescriptions} from \"./SectionDescriptions\";\nimport {IAnyMap, IReference} from \"../../../../globals\";\nimport {IDHFItemListConfig, IItemListOptions} from \"./ItemListDocFieldHandler\";\nimport {ItemSelectionAbstractDocFieldHandler} from \"./ItemSelectionAbstractDocFieldHandler\";\n\nexport class ItemRefDocFieldHandler extends ItemSelectionAbstractDocFieldHandler implements IDocFieldHandler {\n    static default_configs: IDHFItemListConfig = {\n        default: {\n            recursive: true,\n            tree: true,\n            refdocs: false,\n            hideEmptyFolders: false,\n            includeInToc: false,\n            sortedList: false,\n            showParentFolders: false\n        },\n        defaultPackage: {\n            recursive: false,\n            tree: false,\n            refdocs: false,\n            hideEmptyFolders: false,\n            includeInToc: false,\n            sortedList: true,\n            showParentFolders: false\n        }\n    };\n    setConfig(config: IAnyMap) {\n        this.dhfFieldConfig = config;\n    }\n\n    getDefaultConfig() {\n        if (this.fieldType == SectionDescriptions.section_itemlist)\n            return ItemRefDocFieldHandler.default_configs.default;\n        else\n            return ItemRefDocFieldHandler.default_configs.defaultPackage;\n    }\n\n    constructor(type: string, ctrlConfig: IAnyMap, fieldValue: string) {\n        super(type, ctrlConfig, fieldValue);\n        this.initData(fieldValue);\n    }\n\n    getXmlValue(): string {\n        let reflist = this.getItems();\n\n        for (let ref of reflist) {\n            let refOption = <IItemListOptions><any>ref;\n            refOption['recursive'] = this.dhfFieldConfig.recursive;\n            refOption['tree'] = this.dhfFieldConfig.tree;\n            refOption['hideEmptyFolders'] = this.dhfFieldConfig.hideEmptyFolders;\n            refOption['showParentFolders'] = this.dhfFieldConfig.showParentFolders;\n            refOption['includeInToc'] = this.dhfFieldConfig.includeInToc;\n            refOption['sortedList'] = this.dhfFieldConfig.sortedList;\n        }\n        return JSON.stringify(reflist);\n    }\n\n\n}\n","import {IDocFieldHandler} from \"./IDocFieldHandler\";\nimport {IDHFSectionOptions} from \"../../PluginManagerDocuments\";\nimport {GenericDocAbstractFieldHandler} from \"./GenericDocAbstractFieldHandler\";\n\nexport interface IListOfFiguresOptions extends IDHFSectionOptions {\n    figures?:boolean,\n    tables?:boolean\n}\n\nexport  interface IListOfFiguresConfig {\n    default:IListOfFiguresOptions\n}\n\nexport  class ListOfFiguresDocFieldHandler extends GenericDocAbstractFieldHandler implements IDocFieldHandler {\n\n    static default_config: IListOfFiguresConfig = {\n        default: {\n            figures: true, tables: true\n        }\n    };\n\n    getXmlValue(): string {\n        return JSON.stringify([this.dhfFieldConfig])\n    }\n\n    getDefaultConfig() {\n        return ListOfFiguresDocFieldHandler.default_config.default\n    }\n}\n","import {GenericDocFieldHandler} from \"./GenericDocFieldHandler\";\nimport {IDHFSectionOptions} from \"../../PluginManagerDocuments\";\nimport {GenericDocAbstractFieldHandler} from \"./GenericDocAbstractFieldHandler\";\n\n\n\nexport type { ISmartTextOptions, IDHFSmartTextConfig };\n\ninterface ISmartTextOptions extends IDHFSectionOptions {\n    plaintext?:boolean, richtext?:boolean, abbreviations?:boolean, terms?:boolean, customerTags?:boolean, projectTags?:boolean, includeAll?:boolean,\n    firstColumnName:string, secondColumnName:string\n}\n\ninterface IDHFSmartTextConfig {\n    default:ISmartTextOptions\n}\n\n\n\nexport class SmartTextDocFieldHandler extends GenericDocAbstractFieldHandler {\n    static default_config:IDHFSmartTextConfig = {default:{\n            plaintext:false, richtext:false, abbreviations:true, terms:true, customerTags:true, projectTags:true, includeAll:false,\n            firstColumnName:\"\", secondColumnName:\"\"\n        }};\n    getDefaultConfig() {\n        return SmartTextDocFieldHandler.default_config.default;\n    }\n    getXmlValue(): string {\n        let options:ISmartTextOptions = {\n            abbreviations: this.dhfFieldConfig.abbreviations,\n            terms:this.dhfFieldConfig.terms,\n            richtext:this.dhfFieldConfig.richtext,\n            plaintext: this.dhfFieldConfig.plaintext,\n            includeAll: this.dhfFieldConfig.includeAll,\n            customerTags: true,\n            projectTags: true,\n            firstColumnName:this.dhfFieldConfig.firstColumnName?this.dhfFieldConfig.firstColumnName:\"\",\n            secondColumnName:this.dhfFieldConfig.secondColumnName?this.dhfFieldConfig.secondColumnName:\"\"\n        }\n        return JSON.stringify([options]);\n\n    }\n\n}\n","import {GenericDocAbstractFieldHandler} from \"./GenericDocAbstractFieldHandler\";\nimport {IDHFSectionOptions} from \"../../PluginManagerDocuments\";\nexport type { ITableOfContentOptions, IDHFTableOfContentConfig };\n\ninterface ITableOfContentOptions extends IDHFSectionOptions {\n    format:string, render_toc?:boolean\n}\n\ninterface IDHFTableOfContentConfig {\n    default:ITableOfContentOptions\n}\nexport class TableOfContentDocFieldHandler extends GenericDocAbstractFieldHandler {\n\n    static  default_config:IDHFTableOfContentConfig = { default: { format:\"\\\\o \\\"1-3\\\" \\\\h \\\\z \\\\u \\\\f\"}}\n\n    getDefaultConfig(): any {\n        return TableOfContentDocFieldHandler.default_config.default;\n    }\n\n    getXmlValue(): string {\n        let options:ITableOfContentOptions = { format : this.dhfFieldConfig.format };\n        return JSON.stringify([options]);\n    }\n}\n","import {IDocFieldHandler} from \"./IDocFieldHandler\";\nimport {IDHFSectionOptions} from \"../../PluginManagerDocuments\";\nimport {GenericDocAbstractFieldHandler} from \"./GenericDocAbstractFieldHandler\";\nimport {IFromToSelection} from \"../../../UI/Controls/itemSelectionFromTo\";\nimport {IGenericMap} from \"../../../../globals\";\nimport {CustomDocFieldHandler} from \"./CustomDocFieldHandler\";\nimport {ItemSelectionFromToAbstractDocFieldHandler} from \"./ItemSelectionFromToAbstractDocFieldHandler\";\n\nexport type { ITestResultsOptions, IDHFTestResultsConfig };\n\ninterface ITestResultsOptions extends IDHFSectionOptions {\n    lastOnly:boolean, lastCreatedOnly:boolean, completeTree:boolean, failedOnly:boolean, dateoptions:string,\n    includeInToc:boolean, numericalOrder:boolean, searchFrom?:string, searchTo?:string\n}\n\ninterface IDHFTestResultsConfig {\n    default:ITestResultsOptions\n}\n\n\n\nexport class TestResultsDocFieldHandler extends ItemSelectionFromToAbstractDocFieldHandler implements IDocFieldHandler{\n\n    static default_config:IDHFTestResultsConfig = {default: {lastOnly:true, lastCreatedOnly:false, completeTree:false, failedOnly:false, dateoptions:'', includeInToc:false, numericalOrder:false}}\n\n    getDefaultConfig(): any {\n        return TestResultsDocFieldHandler.default_config.default;\n    }\n\n    getXmlValue(): string {\n\n        let  controllerConfig = this.dhfFieldConfig;\n\n        // get lists\n        let reflist = <IFromToSelection> this.getSelectedItems();\n        let td:IGenericMap[] = [];\n        let r0:IGenericMap = {};\n        for (let idx = 0; idx < reflist.from.length; idx++) {\n            r0[\"from\" + idx] = reflist.from[idx].to;\n        }\n        td.push(r0);\n\n        let r1:IGenericMap = {};\n        for (let idx = 0; idx < reflist.to.length; idx++) {\n            r1[\"to\" + idx] = reflist.to[idx].to;\n        }\n        td.push(r1);\n\n        td.push({lastOnly:controllerConfig.lastOnly});\n        td.push({lastCreatedOnly:controllerConfig.lastCreatedOnly});\n        td.push({completeTree:controllerConfig.completeTree});\n        td.push({failedOnly:controllerConfig.failedOnly});\n        td.push({includeInToc:controllerConfig.includeInToc});\n        td.push({numericalOrder:controllerConfig.numericalOrder});\n\n        td.push({dateoptions:controllerConfig.dateoptions});\n        return JSON.stringify(td);\n    }\n\n}\n","import {GenericDocAbstractFieldHandler} from \"./GenericDocAbstractFieldHandler\";\nimport {IDHFSectionOptions} from \"../../PluginManagerDocuments\";\nimport {ItemSelectionFieldHandler} from \"../ItemSelectionFieldHandler\";\nimport {ItemSelectionFromToAbstractDocFieldHandler} from \"./ItemSelectionFromToAbstractDocFieldHandler\";\nimport {IFromToSelection} from \"../../../UI/Controls/itemSelectionFromTo\";\nimport {IGenericMap} from \"../../../../globals\";\n\nexport type { IDerivedFromOptions, IDHFDerivedFromConfig };\n\ninterface IDerivedFromOptions extends IDHFSectionOptions {\n    render:string,\n    includeInToc:boolean,\n    numericalOrder:boolean,\n    noHitMessage:string,\n    searchFrom?:string,\n    searchTo?:string\n}\n\ninterface IDHFDerivedFromConfig {\n    default:IDerivedFromOptions\n}\n\nexport class DerivedFromDocFieldHandler extends ItemSelectionFromToAbstractDocFieldHandler {\n    static  default_config:IDHFDerivedFromConfig = {\n        default: {render:'items', includeInToc:false, numericalOrder:false, noHitMessage:\"\"} // list, items, tree, table\n    };\n\n    getDefaultConfig(): any {\n        return DerivedFromDocFieldHandler.default_config.default;\n    }\n\n    getXmlValue(): string {\n        let reflist = this.getSelectedItems();\n        let td: IGenericMap[] = [];\n        let r0: IGenericMap = {};\n        for (let idx = 0; idx < reflist.from.length; idx++) {\n            r0[\"from\" + idx] = reflist.from[idx].to;\n        }\n        td.push(r0);\n\n        let r1: IGenericMap = {};\n        for (let idx = 0; idx < reflist.to.length; idx++) {\n            r1[\"to\" + idx] = reflist.to[idx].to;\n        }\n        td.push(r1);\n\n        // copy parameters\n\n        let r2: IGenericMap = {};\n        // copy parameters\n        for(let param in Object.keys(this.dhfFieldConfig)){\n            r2[param] = this.dhfFieldConfig[param];\n        }\n        td.push(r2);\n\n        // update the xml dump\n       return JSON.stringify(td);\n    }\n}\n","import {IDHFSectionOptions} from \"../../PluginManagerDocuments\";\nimport {GenericDocAbstractFieldHandler} from \"./GenericDocAbstractFieldHandler\";\n\n\nexport type { IDocumentOptionsOptions };\n\ninterface IDocumentOptionsOptions extends IDHFSectionOptions {\n    auto_number?:boolean,\n    omit_title?:boolean,\n    internal_links?:boolean,\n    no_folder_ids?:boolean,\n    hide_links?:boolean // if true does not show boxes with cross project and file links\n}\n\n\n\nexport class DocumentOptionsFieldHandler extends GenericDocAbstractFieldHandler {\n    static default_config =   {\n        default: { auto_number:true, omit_title:true, internal_links:false}\n    };\n\n    getDefaultConfig(): any {\n        return DocumentOptionsFieldHandler.default_config.default;\n    }\n\n    setConfig(config: IDocumentOptionsOptions): void {\n        this.dhfFieldConfig = config;\n    }\n\n    getXmlValue(): string {\n        let controllerConfig =  this.dhfFieldConfig;\n\n        let options:IDocumentOptionsOptions = {};\n        options.auto_number = controllerConfig.auto_number || false ;\n        options.omit_title = controllerConfig.omit_title || false ;\n        options.internal_links = controllerConfig.internal_links || false ;\n        options.no_folder_ids = controllerConfig.no_folder_ids|| false ;\n        options.hide_links = controllerConfig.hide_links || false ;\n\n        return  JSON.stringify([options]);\n    }\n\n}\n\n","import {GenericDocAbstractFieldHandler} from \"./GenericDocAbstractFieldHandler\";\nimport {RichTextDocFieldHandler} from \"./RichTextDocFieldHandler\";\nimport {IDHFSectionOptions} from \"../../PluginManagerDocuments\";\n\nexport type { ITextLineOptions, IDHFTextLineConfig };\n\ninterface ITextLineOptions extends IDHFSectionOptions {\n}\n\ninterface IDHFTextLineConfig {\n    default:ITextLineOptions\n}\nexport class TextLineDocFieldHandler extends GenericDocAbstractFieldHandler {\n    static default_config = {\n        default: {}\n    };\n\n    getDefaultConfig(): any {\n        return RichTextDocFieldHandler.default_config.default;\n    }\n\n    getXmlValue(): string {\n        return JSON.stringify([]);\n    }\n\n}\n","import {GenericDocAbstractFieldHandler} from \"./GenericDocAbstractFieldHandler\";\nimport {IDHFSectionOptions} from \"../../PluginManagerDocuments\";\n\n\nexport type { IRichTextOptions, IDHFRichTextConfig };\n\ninterface IRichTextOptions extends IDHFSectionOptions {\n}\n\ninterface IDHFRichTextConfig {\n    default:IRichTextOptions\n}\n\n\nexport class RichTextDocFieldHandler extends GenericDocAbstractFieldHandler {\n    static default_config = {\n        default: {}\n    };\n\n    getDefaultConfig(): any {\n        return RichTextDocFieldHandler.default_config.default;\n    }\n\n    getXmlValue(): string {\n        return JSON.stringify([]);\n    }\n\n}\n\n\n","import {ItemSelectionFromToAbstractDocFieldHandler} from \"./ItemSelectionFromToAbstractDocFieldHandler\";\nimport {IDHFSectionOptions} from \"../../PluginManagerDocuments\";\nimport {IFromToSelection} from \"../../../UI/Controls/itemSelectionFromTo\";\nimport {IGenericMap} from \"../../../../globals\";\n\n\nexport type { ITraceMatrixOptions, IDHFTraceMatrixConfig };\ninterface ITraceMatrixOptions extends IDHFSectionOptions {\n    includeInToc:boolean,\n    numericalOrder:boolean,\n    showIdOnly:boolean,\n    searchFrom?:string,\n    searchTo?:string,\n    columnDef?:string\n}\n\ninterface IDHFTraceMatrixConfig {\n    default:ITraceMatrixOptions\n}\nexport class TraceMatrixDocFieldHandler extends ItemSelectionFromToAbstractDocFieldHandler {\n\n\n    static default_config:IDHFTraceMatrixConfig =  {\n        default: {includeInToc:false, numericalOrder:false, showIdOnly:false, columnDef:\"\"}\n    };\n\n\n    getDefaultConfig(): any {\n        return TraceMatrixDocFieldHandler.default_config.default;\n    }\n\n    getXmlValue(): string {\n\n        let controllerConfig = this.dhfFieldConfig;\n        // get lists\n        let reflist = <IFromToSelection>this.getSelectedItems();\n\n        let td: IGenericMap[] = [];\n        let r0: IGenericMap = {};\n        for (let idx = 0; idx < reflist.from.length; idx++) {\n            r0[\"from\" + idx] = reflist.from[idx].to;\n        }\n        td.push(r0);\n\n        let r1: IGenericMap = {};\n        for (let idx = 0; idx < reflist.to.length; idx++) {\n            r1[\"to\" + idx] = reflist.to[idx].to;\n        }\n        td.push(r1);\n\n        // copy parameters\n\n        let r2: IGenericMap = {};\n        // copy parameters\n        for(let param in Object.keys(this.dhfFieldConfig)){\n            r2[param] = this.dhfFieldConfig[param];\n        }\n        td.push(r2);\n\n        // update the xml dump\n        return   JSON.stringify(td);\n    }\n}\n","import {DropdownAbstractDocFieldHandler} from \"./DropdownAbstractDocFieldHandler\";\nimport {IDHFSectionOptions} from \"../../PluginManagerDocuments\";\n\n\nexport type { ITracesOptions, IDHFTracesConfig, ITracesValue };\n\ninterface ITracesOptions extends IDHFSectionOptions {\n    strict?: boolean, dateoptions?:string, includeInToc?:boolean, numericalOrder?:boolean\n}\n\ninterface IDHFTracesConfig {\n    default:ITracesOptions\n}\n\ninterface ITracesValue extends ITracesOptions {\n    from?:string, to?:string\n}\n\n\n\n\nexport class TraceDocFieldHandler extends DropdownAbstractDocFieldHandler {\n\n    static default_config:IDHFTracesConfig = {default:\n            {strict: true, dateoptions:'', includeInToc:false, numericalOrder:false}\n    }\n    getDefaultConfig(): any {\n        return TraceDocFieldHandler.default_config.default;\n    }\n\n    getXmlValue(): string {\n\n        var traces:ITracesValue = {};\n        if (this.getData()) {\n            var sel = this.getData().split('|');\n            traces.from = sel[0];\n            traces.to = sel[1].split(\"+\").join(\",\");\n        }\n        traces.strict = this.dhfFieldConfig.strict;\n        traces.dateoptions = this.dhfFieldConfig.dateoptions;\n        traces.includeInToc = this.dhfFieldConfig.includeInToc;\n        traces.numericalOrder = this.dhfFieldConfig.numericalOrder;\n\n        return JSON.stringify([traces]);\n    }\n}\n","import {IDropDownConfig, IDropdownOption} from \"../../../../ProjectSettings\";\nimport {globalMatrix} from \"../../../../globals\";\nimport {IDHFSectionOptions} from \"../../PluginManagerDocuments\";\nimport {DropdownAbstractDocFieldHandler} from \"./DropdownAbstractDocFieldHandler\";\n\n\nexport type { IMultiSelectOptions, IDHFMultiSelectConfig };\n\ninterface IMultiSelectOptions extends IDHFSectionOptions {\n    maxItems: number, create:boolean, sort:boolean, optionSetting:string;\n}\n\ninterface IDHFMultiSelectConfig {\n    default:IMultiSelectOptions\n}\n\n\n\nexport class MultiSelectDocFieldHandler extends DropdownAbstractDocFieldHandler{\n    static default_config:IDHFMultiSelectConfig = {\n        default: {maxItems: 1, create:false, sort:false, optionSetting:\"\"}\n    };\n\n    getXmlValue(): string {\n\n        let selectionIds = this.getValues(false);\n\n        // convert to values\n        let selectionLabels: IDropdownOption[] = [];\n        let dropdownOptions = <IDropDownConfig>this.itemConfig.getSettingJSON(this.dhfFieldConfig.optionSetting);\n        if (dropdownOptions) {\n\n            for (let id of selectionIds) {\n                let label = id;\n                for(let option of dropdownOptions.options){\n                    if(option.id == id){\n                        label = option.label;\n                    }\n                }\n                selectionLabels.push({label: label, id: id});\n            }\n            selectionLabels.push(<any>{optionSetting: this.dhfFieldConfig.optionSetting});\n        }\n        return JSON.stringify(selectionLabels);\n    }\n\n    getDefaultConfig(): any {\n        return MultiSelectDocFieldHandler.default_config.default;\n    }\n\n}\n\n","import { ILinkInfo } from \"./MatrixReq\";\nimport { IStringStringArrayMap, globalMatrix } from \"./../../globals\";\nimport { INavigationBar } from \"../UI/Components/index\";\nimport { ITasksConfiguration } from \"./Tasks\";\nimport { IRiskParameter } from \"../UI/Controls/riskCtrl2\";\nimport { IFieldParameter, IDropDownConfig, IDHFConfig, IExtras, ILabelsConfig, IQMSConfig, qmsDefaultConfig, IPublishLegacy, IRiskConfig, ICategoryGroups, IACL, ACL_SETTING, ITraceConfig, IContextPageConfig, IMailConfig, ISearchConfig, ILabelLockConfig, ITestConfig, ISmartTextConfig, ICategorySetting, ITraceConfigRule, ICleanup, ITraceConfigDetails, ITestRuleAuto, ITestRuleManual, ITestConfigTablesColumn, smartTextConfigSetting, mailConfigSetting, IImportConfig, IDropdownOption } from \"../../ProjectSettings\";\nimport { XRFieldType, XRUserPermissionType, XRGetProject_ProjectInfo_ProjectInfo, XRGroupPermissionType, XRGetProject_ProjectSettingAll_GetSettingAck, XRSettingType, XRCategoryAndSettingListType, XRGetProject_CategoryList_GetProjectStructAck, XRCategoryExtendedType, XRPluginSetting, XRUserType } from \"../../RestResult\";\nimport { IJSONTools, ILoggerTools } from \"../matrixlib/MatrixLibInterfaces\";\nimport {FieldDescriptions} from \"./FieldDescriptions\";\n\nexport type {\n    ISettingMapString, ISettingMapStringArray, ISettingMapJSON, ICategoryConfig, ICategoryConfigMap,\n    XRFieldTypeAnnotated, XRFieldTypeAnnotatedParamJson, XRFieldTypeAnnotatedParamJsonLinkType,\n    IFieldsOfType, IDropDownInfo\n};\nexport {\n    ItemConfiguration\n};\n\ninterface ISettingMapString { [key: string]: string }\ninterface ISettingMapStringArray { [key: string]: string[] }\ninterface ISettingMapJSON { [key: string]: {} }\n\ninterface ICategoryConfig {\n    fieldList: XRFieldTypeAnnotated[],\n    label: string,\n    downLinksRequired: string[],\n    downLinksOptional: string[],\n    enable: string[]\n}\ninterface ICategoryConfigMap { [key: string]: ICategoryConfig }\n\ninterface XRFieldTypeAnnotated extends XRFieldType { parameterJson?: XRFieldTypeAnnotatedParamJson }\ninterface XRFieldTypeAnnotatedParamJson extends IFieldParameter { \n    linkTypes?:XRFieldTypeAnnotatedParamJsonLinkType[],\n}\n    \ninterface XRFieldTypeAnnotatedParamJsonLinkType { required: boolean, type: string }\ninterface IFieldsOfType { category: string, field: XRFieldTypeAnnotated }\n\ninterface IDropDownInfo {\n    id:string\n    label:string\n    value:IDropDownConfig\n}\n\nclass ItemConfiguration {\n    // TODO: it seems that we have category information in configuration and also in variable\n    // settings, with SLIGHTLY DIFFERENT FIELDS, WHAT THE HECK?\n    // (one has shortLabel, the other doesnt).\n    private configuration:ICategoryConfigMap = {};\n    private settings:XRGetProject_ProjectInfo_ProjectInfo;\n    private settingsString:ISettingMapString = {};\n    private settingsJSON:ISettingMapJSON = {};\n\n    private users: XRUserPermissionType[] = []; // server\n    private userList: XRUserPermissionType[] = []; // cleaned up\n    private userGroups: XRGroupPermissionType[] = []; \n\n    private timewarpDate:string;\n\n    private logger: ILoggerTools;\n    private json: IJSONTools;\n\n    constructor(logger: ILoggerTools, json: IJSONTools) {\n        this.logger = logger;\n        this.json = json;\n    }\n\n    public isConfigured(): boolean {\n        return this.getCategories() && this.getCategories().length>0;\n    }\n    \n    public addUsers(userPermission: XRUserPermissionType[], groupPermission: XRGroupPermissionType[]): void {\n        this.userGroups = groupPermission;\n        this.users = userPermission;\n        this.userList = [];\n        if (userPermission) {\n            for (var idx = 0; idx < this.users.length; idx++) {\n\n                var ignore = false;\n                if (this.users[idx].permission === 3) {\n                    // 3 is an admin without write write access\n                    ignore = true;\n                }\n                for (var ex = 0; !ignore && ex < this.userList.length; ex++) {\n                    if (this.userList[ex].login.toLowerCase() === this.users[idx].login.toLowerCase() || this.userList[ex].id === this.users[idx].id) {\n                        // somethings wrong here...\n                        this.logger.log(\"warning\", \"Ignoring duplicate user... login:\" + this.userList[ex].id + \" ID:\" + this.users[idx].login);\n                        ignore = true;\n                    }\n                }\n                if (!ignore) {\n                    this.userList.push({\n                        id: this.users[idx].id,\n                        login: this.users[idx].login.toLowerCase(),\n                        email: this.users[idx].email,\n                        permission: this.users[idx].permission,\n                        firstName:this.users[idx].firstName,\n                        lastName:this.users[idx].lastName\n                    });\n                }\n            }\n        }\n    }\n    \n    public getUserInfo(login: string): XRUserPermissionType {\n        let theUser:XRUserPermissionType = null;\n        \n        for (let user of this.getUserNames()) {\n            if (user.login.toLowerCase() === login.toLowerCase()) {\n                theUser = user;\n            }\n        }\n           \n        return theUser;\n    }\n\n    public getCombinedName(user: XRUserPermissionType | XRUserType) {\n        let name = (user.firstName ? user.firstName : \"\") + \" \" + (user.lastName ? user.lastName : \"\");\n        return user.login + (name == \" \" ? \"\" : (\" - \") + name);\n    }\n\n    public getFullName(login: string) {\n        let user = this.getUserInfo(login);\n        if (user === null) {\n            return login;\n        }\n        return this.getCombinedName(user);\n    }\n\n    public groupIdToName(groupId: number): string {\n        return `g_${groupId}_g`;\n    }\n\n    public hasGroupInfo(group: string): boolean {\n        return this.getUserGroups().findIndex((g) => { return this.groupIdToName(g.groupId) === group.toLowerCase() }) > -1;\n    }\n\n    // {login} may have been deleted or doesn't exist.\n    public hasUserInfo(login: string): boolean {\n        return this.getUserInfo(login) !== null;\n    }\n\n    public getUserIds(): string[] {\n        \n        return this.getUserNames().map( function(user) {return user.login});\n    }\n    \n    public getEmail(user: string): string {\n        let email = \"\";\n\n        for (let otherUser of this.getUserNames()) {\n            if (otherUser.login.toLowerCase() === user.toLowerCase()) {\n                email = otherUser.email;\n            }\n        }\n\n        return email;\n    }\n    \n    public activateTimewarp(date: string) {\n        this.timewarpDate = date;\n    }\n    public getTimeWarp() {\n        return this.timewarpDate;\n    }\n    public isAfterTimeWarp(date: string) {\n        return this.timewarpDate &&  new Date(date)  > new Date(this.timewarpDate) ;\n    }\n\n    public hasWriteAccess(user: string): boolean {\n        if (!user ||  this.timewarpDate ) {\n            return false;\n        }\n\n        let permission = this.getPermission(user);\n\n        // -1 super admin, 2 read write, 3 admin\n        return permission == -1 || permission == 2 || permission == 3;\n    }\n    \n    private getPermission(user: string): number {\n        let permission:number = -1; // (in case the user does not exists, it's a super admin)\n        // get permission directly for user\n        for (var idx = 0; idx < this.users.length; idx++) {\n            if (this.users[idx].login.toLowerCase() === user.toLowerCase()) {\n                permission = this.users[idx].permission;\n            }\n        }\n\n        // now go through all groups, maybe it's better\n        for (let ug of this.getUserGroups()) {\n            if (ug.membership.map(member => member.login.toLowerCase()).indexOf(user.toLowerCase()) != -1) {\n                // user is in this group, let's see if we can bump him up\n                if (ug.permission==3) permission=3;\n                if (ug.permission==2 && permission!=3) permission=2;\n                if (ug.permission==1 && permission<=0) permission=1;\n            }\n        }\n        return permission;\n    }\n\n    public getUserNames(sorted?: boolean): XRUserPermissionType[] {\n\n        let users = <XRUserPermissionType[]>this.json.clone(this.userList);\n        // add users from user groups if they are not directly in\n        for (let ug of this.getUserGroups()) {\n            for (let m of ug.membership) {\n                if (users.map(user => user.login).indexOf(m.login) == -1) {\n                    users.push({\n                        id:-1\n                        ,login: m.login\n                        ,email:m.email\n                        ,permission:-1\n                        ,firstName:m.firstName\n                        ,lastName:m.lastName\n                    });\n                }\n            }\n        }\n        if (sorted) {\n            users.sort( function( a,b) { if (a.login<b.login) return -1; else return 1;});\n        }\n        return users;\n    }\n\n    public getUserGroups(): XRGroupPermissionType[] {\n        return this.userGroups;\n    }\n\n    /**\n     * getValidUserOptions returns an array of option values that describe\n     * the users and groups available as values for a user field in the\n     * database (fields of type {@link FieldDescriptions.Field_user}).\n     * \n     * @param showUsers - pass true to include users\n     * @param showGroups - pass true to include groups \n     * @param preSelectedUsers - if present, the list of users will be limited\n     *     to this subset and the full user list will not be consulted to\n     *     construct the return value.\n     * @param possiblyDeletedUserGroupNames - if present, a comma-separated\n     *     list of user and group names. The returned options will include\n     *     these values, and mark deleted user and groups as disabled.\n     * @returns An array of {@link IDropdownOptions} configured according to\n     *     the input parameters and the users and groups of the current project.\n     */\n    getValidUserOptions(showUsers: boolean, showGroups: boolean,\n        preSelectedUsers?: XRUserPermissionType[], possiblyDeletedUserGroupNames?: string): IDropdownOption[] {\n\n        let that = this;\n        let options: IDropdownOption[] = [];\n        let users: XRUserPermissionType[] = preSelectedUsers\n            ? preSelectedUsers\n            : this.getUserNames();\n        let groups = this.getUserGroups().sort((a, b) => {\n            return a.groupName < b.groupName ? -1 : 1;\n        });\n\n        // if {possiblyDeletedUsernames} are not found in {users}, we want to add them.\n        const isGroup = /g_([0-9])+_g/;\n        let names = possiblyDeletedUserGroupNames ? possiblyDeletedUserGroupNames.split(',') : [];\n        names.forEach(name => {\n            if (!this.hasUserInfo(name)) {\n                if (!isGroup.test(name)) {\n                    users.push(<any>{\n                        id: 0,\n                        login: name,\n                        email: \"unknown\",\n                        permission: 0,\n                        firstName: \"\",\n                        lastName: \"\",\n                        deleted: true\n                    });\n                } else if (!this.hasGroupInfo(name)) {\n                    // We know match found a group because isGroup.test(name) returned true.\n                    const groupId = parseInt(name.match(isGroup)[1]);\n                    groups.push(<any>{\n                        groupName: name,\n                        permission: 0,\n                        groupId: groupId,\n                        membership: [],\n                        deleted: true\n                    });\n                }\n            }\n        });\n\n        if (showUsers) {\n            // sort users alphabetically\n            users = users.sort((a, b) => {\n                return a.login < b.login ? -1 : 1;\n            });\n\n            // add to user select\n            users.forEach((user) => {\n                // Deleted users have strikethrough text, and are disabled from selection.\n                // We only display their login, not their full name.\n                const deletedUser = (<any>user).deleted === true;\n                const labelText = deletedUser ? user.login : this.getCombinedName(user);\n                options.push({\n                    id: user.login, label: labelText, class: \"users\",\n                    disabled: deletedUser,\n                    strikethrough: deletedUser\n                });\n            });\n        }\n        if (showGroups) {\n            groups.forEach((group) => {\n                const deletedGroup = (<any>group).deleted === true;\n                let groupName = group.groupName;\n                let groupId = deletedGroup ? groupName : that.groupIdToName(group.groupId);\n                options.push({\n                    id: groupId, label: groupName, class: \"groups\",\n                    disabled: deletedGroup,\n                    strikethrough: deletedGroup\n                });\n            });\n        }\n        return options;\n    }\n\n\n    // TODO(modules): This is a performance hack. Better if private.\n    public addGroupMember(gid: number, user: string) {\n        let gs = this.userGroups.filter( g => g.groupId == gid && g.membership.map(u=>u.login).indexOf(user)==-1);\n        if (gs.length) {\n            gs[0].membership.push( <any>{ login:user } );\n        }\n    }\n    // TODO(modules): This is a performance hack. Better if private.\n    public removeGroupMember(gid: number, user: string) {\n        let gs = this.userGroups.filter( g => g.groupId == gid && g.membership.map(u=>u.login).indexOf(user)!=-1);\n        if (gs.length) {\n            gs[0].membership = gs[0].membership.filter( m => m.login != user );\n        }\n    }\n\n    // TODO(modules): This is a performance hack. Better if private.\n    public addSettings(s: XRGetProject_ProjectInfo_ProjectInfo | XRGetProject_ProjectSettingAll_GetSettingAck): void {\n        let that = this;\n        \n        this.settings = <XRGetProject_ProjectInfo_ProjectInfo>s;\n        this.settingsString = {};\n        this.settingsJSON = {};\n        if (s.settingList) {\n            for (let setting of s.settingList) {\n                that.settingsString[setting.key] = setting.value;\n                if (setting.value && setting.value.indexOf('{') !== -1 && setting.value.indexOf('<') !== 0) {\n                    // assume it a json\n                    var val = this.json.fromString(setting.value);\n                    if (val.status === \"ok\") {\n                        that.settingsJSON[setting.key] = val.value;\n                    }\n                }\n            }\n        }\n    }\n    public getSettings(): XRSettingType[] {\n        return this.settings.settingList;\n    }\n    public getSetting(s: string): string {\n        return this.settingsString[s];\n    }\n\n    public getSettingJSON(s: string, def?: {}): {} {\n        return this.settingsJSON[s]?this.settingsJSON[s]:def;\n    }\n    public getDropDowns(dropdownId?: string): IDropDownInfo[] {\n\n        let that = this;\n        let dropdowns:IDropDownInfo[] = [];\n\n        for (let key of Object.keys(this.settingsJSON)) {\n            let setting = <IDropDownConfig> that.settingsJSON[key];\n            if (setting.options && (!dropdownId || dropdownId == key)  ) {\n                dropdowns.push({\n                    id:key,\n                    label:key,\n                    value:setting\n                });\n            }\n        }\n    \n        return dropdowns;\n    }\n\n    public getTasksConfig() {\n        return <ITasksConfiguration>this.getSettingJSON(\"task_config\");\n    }\n    \n    public getDHFConfig() {\n        return <IDHFConfig>this.getSettingJSON(\"dhf_config\");\n    }\n    \n    public getExtrasConfig() {\n        let extras = this.getSettingJSON(\"extras\");\n        return <IExtras>(extras?extras:{});\n    }\n    public getLabelsConfig() {\n        return <ILabelsConfig>this.getSettingJSON(\"labels\");\n    }\n    getIncludeConfig() {\n        let conf = this.getSettingJSON(\"imports\");\n        return <IImportConfig>(conf?conf:{\n            copies:{\n                importMasters:[],\n                lockLabel:\"\"\n            }, includes: {\n                importMasters:[],\n                lockLabel:\"\"\n            }\n        });\n    }\n    public getQMSConfig() {\n        // get qms config (as project setting, handle 2.1 and earlier setting in category setting)\n        let setting = <IQMSConfig>this.getSettingJSON(\"qms_config\");\n        if (!setting) {\n            setting=qmsDefaultConfig; // as in 2.1 and earlier\n        }\n        for (let p of setting.publications) {\n            if (p.publisher==\"_\") {\n                let legacy = <IPublishLegacy>this.getCategorySetting(p.toCategory, \"publish\");\n                p.publisher = legacy ? legacy.publisher : \"\";\n            }\n        }\n\n        return setting;\n    }\n  \n    public getRiskConfig() {\n        return <IRiskConfig>this.getSettingJSON(\"risk_config\");\n    }\n    public getCategoryGroupConfig() {\n        return <ICategoryGroups>this.getSettingJSON(\"category_groups\");\n    }\n    public getACLConfig() {\n        return <IACL>this.getSettingJSON(ACL_SETTING);\n    }\n    public getTraceConfig() {\n        return <ITraceConfig>this.getSettingJSON(\"trace_config\");\n    }\n\n    public getNavigationBarConfig() {\n        return <INavigationBar>this.getSettingJSON(\"nav_config\");\n    }\n\n    public getContextPagesConfig() {\n        return <IContextPageConfig>this.getSettingJSON(\"project_help\");\n    }\n    public getMailConfig(): IMailConfig {\n        return <IMailConfig>this.getSettingJSON(mailConfigSetting);\n    }\n    public getSearchConfig() {\n        return <ISearchConfig>this.getSettingJSON(\"search_config\");\n    }\n    public getLabelLockConfig() {\n        return <ILabelLockConfig>this.getSettingJSON(\"lockingLabels\");\n    }\n    public getTestConfig() {\n        return <ITestConfig>this.getSettingJSON(\"xtc_config\");\n    }\n    \n    public setSettingJSON(key: string, valueJSON: {}): void {\n        this.settingsString[key] = JSON.stringify(valueJSON);\n        this.settingsJSON[key] = valueJSON;\n    }\n    public getSmartText() {\n        return <ISmartTextConfig>this.getSettingJSON(smartTextConfigSetting);\n    }\n   \n    public addCategorySetting(categorySetting: XRCategoryAndSettingListType): void {\n        if (!this.settings || !this.settings.categorySettingList) {\n            return;\n        }\n        this.settings.categorySettingList.push(categorySetting);\n    }\n\n    public getCategorySettings(category: string): XRSettingType[] {\n        if (!this.settings || !this.settings.categorySettingList) {\n            return [];\n        }\n        for (var idx = 0; idx < this.settings.categorySettingList.length; idx++) {\n            if (this.settings.categorySettingList[idx].categoryShort === category && this.settings.categorySettingList[idx].settingList) {\n                return this.settings.categorySettingList[idx].settingList;\n            }\n        }\n        return [];\n    }\n    \n    // return the setting for a plugin or null if plugin or setting does not exist\n    // TODO(modules): is this ever called?\n    public getPluginSetting(pluginId: number, setting: string): string {\n        /*\n         * pluginSettingsList: [\n            {\n                pluginId: 101,\n                settings: [ {\n                    setting: \"serverType\",\n                    value: \"medical\",\n                    encrypted: false\n                }, {\n                setting: \"baseUrl\",\n                    value: \"https://matrixtest.atlassian.net\",\n                    encrypted: false\n                } ]\n            }\n        ]\n         */\n        if (!this.settings || !this.settings.pluginSettingsList) {\n            return null;\n        }\n        \n        for ( var idx=0; idx < this.settings.pluginSettingsList.length; idx++) {\n            var ps = this.settings.pluginSettingsList[idx];                \n            if ( ps.pluginId == pluginId ) {\n                for ( var jdx=0; jdx < ps.settings.length; jdx++) {\n                    if ( ps.settings[jdx].setting === setting ) {\n                        return ps.settings[jdx].value;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    \n    public getPluginSettings(): XRPluginSetting[] {\n        return this.settings.pluginSettingsList;\n    }\n    // return tuples {category, field} of all categories which use a type\n    // used for tisk traceability in DHF\n    public getFieldsOfType(fieldType: string, categoryType?: string): IFieldsOfType[] {\n        var hits:IFieldsOfType[] = [];\n        if (!this.settings) {\n            return hits;\n        }\n        for (var idx = 0; idx < this.settings.categorySettingList.length; idx++) {\n\n            var category = this.settings.categorySettingList[idx].categoryShort;\n            if (!categoryType || categoryType === category) {\n                var cc = this.getItemConfiguration(category);\n                if (cc) {\n                    var fields = cc.fieldList;\n                    for (var fdx = 0; fdx < fields.length; fdx++) {\n                        if (fields[fdx].fieldType === fieldType) {\n\n                            //    var jconfig = this.json.fromString(fields[fdx].parameter);\n                            hits.push({category: category, field: fields[fdx]});\n                        }\n                    }\n                }\n            }\n        }\n        return hits;\n    }\n\n    public getCategorySetting(category: string, setting: string): ICategorySetting {\n        var catSettings = this.getCategorySettings(category);\n        for (var idx = 0; idx < catSettings.length; idx++) {\n            if (catSettings[idx].key === setting) {\n\n                var jconfig = this.json.fromString(catSettings[idx].value);\n\n                if (jconfig.status === 'ok') {\n                    // apparently parsing went well\n                } else if (jconfig.status === 'error') {\n                    this.logger.log(\"error\", \"The category setting '\" + catSettings[idx].key + \"' has an invalid value. Ignoring it.\");\n                } else {\n                    this.logger.log(\"warning\", \"The category setting '\" + catSettings[idx].key + \"' is empty.\");\n                }\n                return jconfig.value;\n            }\n        }\n        return null;\n    }\n    \n    public getCategories(noFolders?: boolean): string[] {\n        let catgories = Object.keys(this.configuration);\n        if ( noFolders ) {\n            catgories.splice(catgories.indexOf(\"FOLDER\"), 1);\n        }\n        return catgories;\n    }\n    \n    public getCategoryLabel(category: string): string {\n        if (this.configuration[category]) {\n            return this.configuration[category].label;\n        }\n        return \"\";\n    }\n\n    public getCategoryId(category: string): string {\n        let cd = this.settings.categoryList.categoryExtended.filter(function(cat) {return cat.category.shortLabel==category;});\n        if (cd.length==1) {\n            return \"\"+cd[0].category.id;\n        }\n\n        return \"\";\n    }\n    \n    \n    // links for 1.5 and earlier (configured as category setting)\n    public getDownLinkTypes(category: string, required: boolean) {\n\n        if (required) {\n            return this.configuration[category].downLinksRequired;\n        }\n        return this.configuration[category].downLinksOptional;\n    }\n    \n    // links for 1.5 and earlier (configured as category setting)\n    public getUpLinkTypes(category: string, required: boolean) {\n\n        var up: string[] = [];\n        for (var key in this.configuration) {\n            if (key && key != category && this.configuration[key]) {\n                if (required && this.configuration[key].downLinksRequired.indexOf(category) != -1) {\n                    up.push(key);\n                }\n                if (!required && this.configuration[key].downLinksOptional.indexOf(category) != -1) {\n                    up.push(key);\n                }\n            }\n        }\n        return up;\n    }\n    \n    public addCategories(config: XRGetProject_ProjectInfo_ProjectInfo | XRGetProject_CategoryList_GetProjectStructAck) {\n        for (var idx = 0; config.categoryList.categoryExtended != undefined && idx < config.categoryList.categoryExtended.length; idx++) {\n            this.addCategory(config.categoryList.categoryExtended[idx]);\n        }\n    }\n\n    public init(config: XRGetProject_ProjectInfo_ProjectInfo) {\n        this.addCategories( config );\n        this.addSettings(config);\n        this.addUsers(config.userPermission, config.groupPermission);\n    }\n\n    public canEdit(category: string) {\n        return this.canDo(category, \"edit\");\n    }\n    public canEditTitle(category: string) {\n        return this.canDo(category, \"rename\");\n    }\n    public canMove(category: string) {\n        return this.canDo(category, \"move\");\n    }\n    public canCreate(category: string) {\n        return this.canDo(category, \"create\");\n    }\n    public canDelete(category: string) {\n        return this.canDo(category, \"delete\");\n    }\n    public canModifyLabels(category: string) {\n        return this.canDo(category, \"label\");\n    }\n    public canSign(category: string) {\n        return this.canDo(category, \"sign\");\n    }\n    public canReport(category: string) {\n        return this.canDo(category, \"report\");\n    }\n\n    private canDo(category:string, task:string) {\n        if (!this.configuration[category]) return false;\n        if (!this.configuration[category].enable) return true; // no limitation specified for this user\n        if (this.configuration[category].enable.indexOf(task)!=-1) return true; \n        \n        return false;\n    }\n\n    private addCategory(config: XRCategoryExtendedType):void {\n        this.configuration[config.category.shortLabel] = {\n            fieldList: [],\n            label: config.category.label,\n            downLinksRequired: [],\n            downLinksOptional: [],\n            enable:config.enable\n        };\n\n        var fieldList = <XRFieldTypeAnnotated[]> config.fieldList.field;\n        if (!fieldList) {\n            fieldList = [];\n        }\n\n        for (var idx = 0; idx < fieldList.length; idx++) {\n            var jconfig = this.json.fromString(fieldList[idx].parameter);\n\n            if (jconfig.status === 'ok') {\n                // apparently parsing went well\n            } else if (jconfig.status === 'error') {\n                this.logger.log(\"error\", \"The field with id '\" + fieldList[idx].id + \"' has an invalid value. Ignoring it.\");\n            } else {\n                // quite normal\n            }\n\n            fieldList[idx].parameterJson = <XRFieldTypeAnnotatedParamJson>jconfig.value;\n\n            this.configuration[config.category.shortLabel].fieldList.push(fieldList[idx]);\n            if (fieldList[idx].fieldType === FieldDescriptions.Field_links) {\n                if (fieldList[idx].parameterJson && fieldList[idx].parameterJson.linkTypes) {\n                    for (var l = 0; l < fieldList[idx].parameterJson.linkTypes.length; l++) {\n                        var dl = fieldList[idx].parameterJson.linkTypes[l];\n\n                        if (this.json.isTrue(dl.required)) {\n                            this.configuration[config.category.shortLabel].downLinksRequired.push(dl.type);\n                        } else {\n                            this.configuration[config.category.shortLabel].downLinksOptional.push(dl.type);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    public getItemConfiguration(category: string): ICategoryConfig {\n        return this.configuration[category];\n    }\n    \n    public getFieldId(category: string, fieldLabel: string): number {\n        var cc = this.getItemConfiguration(category);\n        if (!cc) {\n            return 0;\n        }\n        var fields = cc.fieldList;\n        for (var idx = 0; idx < fields.length; idx++) {\n            if (fields[idx].label.toLowerCase() === fieldLabel.toLowerCase()) {\n                return fields[idx].id;\n            }\n        }\n        return 0;\n    }\n    \n    public getFields(category: string) {\n        var cc = this.getItemConfiguration(category);\n        if (!cc) {\n            return null;\n        }\n        return cc.fieldList;\n    }\n\n    public getFieldByName(category: string, name: string): XRFieldTypeAnnotated {\n        let fields = this.getFields(category).filter(function (field) { return field.label && field.label.toLowerCase() == name.toLowerCase(); })\n        if (fields.length == 1)\n            return fields[0];\n        return undefined;\n    }\n\n    public getFieldById(category: string, fieldId: number) {\n        var cc = this.getItemConfiguration(category);\n        if (!cc) {\n            return null;\n        }\n        let fields =  cc.fieldList.filter( function(field) {return field.id==fieldId;});\n        return fields.length?fields[0]:null;\n    }\n\n    public getFieldConfig(fieldId: number): XRFieldTypeAnnotatedParamJson {\n        // The fieldId is unique across categories, therefore this code works properly.\n        for ( let category of this.getCategories() ) {\n            let field = this.getFieldById(category, fieldId );\n            if (field) {\n                return field.parameterJson;\n            }\n        }\n        return null;\n    }\n\n    public getFieldName(fieldId: number) {\n        for ( let category of this.getCategories() ) {\n            let field = this.getFieldById(category, fieldId );\n            if (field) {\n                return field.label;\n            }\n        }\n        return \"\";\n    }\n\n    public getFieldType(category: string, fieldId: number): string {\n        var cc = this.getItemConfiguration(category);\n        if (!cc) {\n            return null;\n        }\n        var fields = cc.fieldList;\n        for (var idx = 0; idx < fields.length; idx++) {\n            // note this is ==: sometimes it is an int sometimes a string \n            if (fields[idx].id == fieldId) {\n                return fields[idx].fieldType;\n            }\n        }\n        return null;\n    }\n    \n    // gets required or optional up or downlink categories for a given category\n    // it uses the project setting for the trace configuration if existing,\n    // the category setting (1.5 and earlier) otherwise\n    public getLinkTypes(category: string, down: boolean, required: boolean): string[] {\n\n        var tc = <ITraceConfig>this.getTraceConfig();\n        if (!tc) {\n            // use 1.5 and before rules\n            if (down) {\n                return this.getDownLinkTypes(category, required);\n            } else {\n                return this.getUpLinkTypes(category, required);\n            }\n        }\n\n        // get the up/down rule from project setting\n        var updown:ITraceConfigRule[];\n        for (let rule of tc.rules) {\n            if (rule.category === category) {\n                updown = down ? rule.down_rules : rule.up_rules;\n            }\n        }\n\n        if (!updown) {\n            // no rules.. \n            return [];\n        }\n        var result:string[] = [];\n\n        // rules exist get all required or option links\n        for (let updownRule of updown) {\n            if (updownRule.rule === \"must_have\" && updownRule.any_of && required) {\n                for (let any of updownRule.any_of) {\n                    // add to must have\n                    if (result.indexOf(any) === -1) {\n                        result.push(any);\n                    }\n                }\n            } else if (updownRule.rule === \"can_have\" && updownRule.any_of && !required) {\n                for (let any of updownRule.any_of) {\n                    // add to can have\n                    if (result.indexOf(any) === -1) {\n                        result.push(any);\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n    \n    \n    // gets required or optional up or downlink categories for a given category\n    // including reason why they should / could exist\n    // it uses the project setting for the trace configuration if existing,\n    // the category setting (1.5 and earlier) otherwise\n    public getLinkInfo(category: string, down: boolean, required: boolean, groupByRule: boolean): ILinkInfo[] {\n\n        var tc = <ITraceConfig>this.getTraceConfig();\n        if (!tc) {\n            var links:string[] = [];\n            // use 1.5 and before rules\n            if (down) {\n                links = this.getDownLinkTypes(category, required);\n            } else {\n                links = this.getUpLinkTypes(category, required);\n            }\n            var result:ILinkInfo[] = [];\n            for (var idx = 0; idx < links.length; idx++) {\n                result.push({category: links[idx], reason: (required ? \"required\" : \"optional\")});\n            }\n            return result;\n        }\n\n        // get the up/down rule from project setting\n        var updown: ITraceConfigRule[];\n        for (let rule of tc.rules) {\n            if (rule.category === category) {\n                updown = down ? rule.down_rules : rule.up_rules;\n            }\n        }\n\n        if (!updown) {\n            // no rules.. \n            return [];\n        }\n        var linkInfo:ILinkInfo[] = [];\n\n        // rules exist get all required or optional links\n        for (let updownRule of updown) {\n            if (updownRule.rule === \"must_have\" && updownRule.any_of && required) {\n                if ( groupByRule ) {\n                    linkInfo.push({category: updownRule.any_of, reason: updownRule.name});\n                } else {\n                    for (let anys of updownRule.any_of) {\n                        // add to must have\n                        linkInfo.push({category: anys, reason: updownRule.name});\n                    }\n                }\n            } else if (updownRule.rule === \"can_have\" && updownRule.any_of && !required) {\n                if ( groupByRule ) {\n                    linkInfo.push({category: updownRule.any_of, reason: updownRule.name});\n                } else {\n                    for (let anys of updownRule.any_of) {\n                        // add to can have\n                        linkInfo.push({ category: anys, reason: updownRule.name });\n                    }\n                }\n            }\n        }\n\n        return linkInfo;\n    }\n\n    public getMitigations(): IStringStringArrayMap {\n\n        let risk_config = <IRiskConfig>this.getRiskConfig();\n\n        // get the mitigations from the project setting\n        let global:string[] = [];\n        if ( risk_config && risk_config.mitigationTypes) {\n            global = risk_config.mitigationTypes.map( function( mt ) { return mt.type;});\n        }\n        // for each field, check if there's a field setting, if not use the global setting\n        let mitCats:IStringStringArrayMap = {};\n        for (let riskFieldInfo of this.getFieldsOfType(\"risk2\")) {\n            mitCats[riskFieldInfo.category] = [];\n            let fieldConfig = <IRiskParameter>riskFieldInfo.field.parameterJson;\n            if (fieldConfig && fieldConfig.riskConfig) {\n                mitCats[riskFieldInfo.category] =\n                    fieldConfig.riskConfig.mitigationTypes.map(mt => mt.type);\n            } else {\n                mitCats[riskFieldInfo.category] = global;\n            }\n        }\n        \n        return mitCats;\n    }\n\n\n    /** return cleanup rules, if there's a project setting that wins, if there's no rules or it's disabled it returns -1 */\n    public getCleanupRules(): ICleanup {\n        return <ICleanup>this.getSettingJSON(\"htmlCleanup\");\n    }\n}\n","import { ILabel, ILabelsConfig, IDesignReview, ILabelGroup } from \"../../ProjectSettings\";\nimport { XRLabelHistory } from \"../../RestResult\";\nimport { ItemConfiguration } from \"../businesslogic\";\nimport { ILoggerTools, IJSONTools, IChangedLabels, ILabelManager } from \"./MatrixLibInterfaces\";\nexport { LabelManager };\n\ntype GetItemConfigFunction = () => ItemConfiguration;\n\nclass LabelManager implements ILabelManager {\n    public ignoreProjectFilter = false;\n    private activeFilter = \"\";\n\n    constructor(protected logger: ILoggerTools, protected json: IJSONTools,\n        protected getConfig: GetItemConfigFunction) { }\n\n    getFilterColor(): string {\n        var labels = this.getConfig().getLabelsConfig();\n\n        if (!labels || !labels.filterBackgroundColor) {\n            return null;\n        }\n        return labels.filterBackgroundColor;\n    };\n\n    // return list of selected filters as , separated list\n    getFilter(): string {\n        if (this.ignoreProjectFilter) {\n            return \"\";\n        }\n        var filters: string[] = [];\n\n        var labelsAll = this.getLabelNames();\n        if (labelsAll.length === 0) {\n            return \"\";\n        }\n\n        var stored: string = this.activeFilter;\n        if (!stored || stored === \"\") {\n            return \"\";\n        }\n\n        // only return filters which (still) exist \n        var cs = stored.split(\",\");\n        for (let sf of cs) {\n            if (labelsAll.indexOf(sf.replace(\"!\", \"\")) > -1) {\n                filters.push(sf);\n            }\n        }\n\n        return filters.length > 0 ? filters.join(\",\") : \"\";\n    };\n\n    getDisplayName(labelId: string) {\n        let labels = this.getLabelList();\n        let displayName = \"\";\n        for (let label of labels) {\n            if (label.label == labelId) {\n                displayName = label.displayName;\n                if (label.style.label.on.displayName) {\n                    displayName = label.style.label.on.displayName;\n                }\n            }\n        }\n        return displayName;\n    }\n\n    getFilterName(labelId: string) {\n        let labels = this.getLabelList();\n        let displayName = \"\";\n        for (let label of labels) {\n            if (label.label == labelId) {\n                displayName = label.displayName;\n                if (label.style && label.style.filter && label.style && label.style.filter.on && label.style.filter.on.displayName) {\n                    displayName = label.style.filter.on.displayName;\n                }\n            }\n        }\n        return displayName;\n    }\n\n    // return the existing labels for the passed types (or all labels if no type is passed)\n    getLabelDefinitions(categories: string[]): ILabel[] {\n        var all = this.getLabelList();\n        if (!categories || categories.length === 0) {\n            return all;\n        }\n        let relevant: string[] = [];\n        let relevantLabel: ILabel[] = [];\n        for (let label of all) {\n            for (let category of label.categories) {\n                if (categories.indexOf(category) > -1 && relevant.indexOf(label.label) === -1) {\n                    relevant.push(label.label);\n                    relevantLabel.push(label);\n                }\n            }\n        }\n        return relevantLabel;\n    };\n\n    setFilter(filter: string[]) {\n        this.activeFilter = filter.join(\",\");\n    };\n\n    /* clean up the set labels: in case a set label is in review or design review group, \n        it is possible that the label is removed from the list of set labels / replaced by another label in the group.\n\n        This depends on the groups's setting.\n\n        @param addXor If no label is set in a xor group, the default can be automatically set.\n    \n        @return the list of labels after the review groups have been reset\n    \n     */\n    resetReviewLabels(labelIds: string[], category: string, addXor?: boolean): string[] {\n        let that = this;\n        let cleaned: string[] = [];\n        // get label groups\n        let groups = this.getLabelGroups();\n        let labelList = this.getLabelList();\n\n        // copy all lables besides the review labels\n        for (let label of labelIds) {\n            let isReviewLabel = false;\n            for (var gid = 0; gid < groups.length; gid++) {\n                if (((groups[gid].selection === \"review\" && this.json.isTrue(groups[gid].reset)) ||\n                    (groups[gid].selection === \"design_review\" && !this.json.isFalse(groups[gid].reset))) &&\n                    groups[gid].labels.indexOf(label) !== -1) {\n                    isReviewLabel = true;\n                }\n            }\n\n            if (!isReviewLabel) {\n                cleaned.push(label);\n            }\n        }\n        // add all default review states - if no other label is set in the review group\n        for (var gid = 0; gid < groups.length; gid++) {\n            if ((groups[gid].selection === \"review\" ||\n                (addXor && groups[gid].selection === \"xor\")) &&\n                groups[gid].default) {\n                var groupIsSet = false;\n                for (let cleanLabel of cleaned) {\n                    if (groups[gid].labels.indexOf(cleanLabel) !== -1) {\n                        groupIsSet = true;\n                    }\n                }\n                if (!groupIsSet) {\n                    // verify if label actually is defined for group...\n                    var defaultIsForType = false;\n                    for (let label of labelList) {\n                        if (groups[gid].default === label.label && label.categories.indexOf(category) !== -1) {\n                            defaultIsForType = true;\n                        }\n                    }\n                    if (defaultIsForType) {\n                        cleaned.push(groups[gid].default);\n                    }\n                }\n            }\n        }\n\n        return cleaned;\n    };\n\n    /* return the list of default labels for a category */\n    getDefaultLabels(category: string): string[] {\n        let that = this;\n\n        // get current positive filters\n        let currentFilter = this.getFilter();\n        let posFilter: string[] = [];\n        const filterItems = currentFilter.split(\",\");\n        for (let f of filterItems) {\n            if (f.indexOf(\"!\") !== 0) {\n                posFilter.push(f);\n            }\n        }\n        // each label which is not in a xor/review group can be default\n        let defaultLabels: string[] = [];\n        let labelList = this.getLabelList();\n        for (let label of labelList) {\n            let group = that.getGroupOfLabel(label.label);\n\n            if (group && label.categories.indexOf(category) !== -1 && // label must exist for cateogry type\n                (group.selection !== 'xor' && group.selection !== 'review') && // it must not be in a xor or review group\n                (this.json.isTrue(label.default) || // the default value must be set to on OR \n                    (label.default === \"filter\" && posFilter.indexOf(label.label) !== -1))) { // the default must be filter and it must be set in the current filter\n                defaultLabels.push(label.label);\n            }\n        }\n\n        return this.resetReviewLabels(defaultLabels, category, true);\n    };\n\n    hasLabels() {\n        return (this.getLabelList().length > 0);\n    };\n\n    // implement logic to set labels. \n    setLabels(oldLabelIds: string, labels: string[]): string {\n        let that = this;\n        let old = oldLabelIds ? oldLabelIds.split(\",\") : [];\n        for (let label of labels) {\n            old = that.setLabel(old, label);\n        }\n        return old.join(\",\");\n    }\n\n    // implement logic to set a label. \n    // This depends on the type of group: for xor / review labels other group members must be reset\n    setLabel(oldLabelIds: string[], label: string): string[] {\n        let labelIds: string[] = this.json.clone(oldLabelIds);\n\n        if (labelIds.indexOf(label) !== -1) {\n            // label already set - ignore\n            return labelIds;\n        }\n\n        let group = this.getGroupOfLabel(label);\n\n        if (!group || group.selection == \"or\") {\n            // simple label without group / or group: just set it\n            labelIds.push(label);\n        } else if (group.selection == \"xor\" || group.selection == \"review\") {\n            // remove all labels from group\n            for (let otherLabel of group.labels) {\n                labelIds = labelIds.filter(function (existingLabel) {\n                    return existingLabel != otherLabel;\n                });\n            }\n            // set the label\n            labelIds.push(label);\n        } else {\n            this.logger.log(\"warn\", \"setLabel: unkown group type of label: '\" + label + \"'\");\n        }\n\n        return labelIds;\n    };\n\n    // return the last time a label was set on a given item before a revision (=0 if any)\n    decipherLastTimeLabelWasSet(labelHistory: XRLabelHistory, itemId: string, label: string, beforeRevision: number): number {\n        let itemHistory = labelHistory.entries.filter(entry => entry.itemRef == itemId);\n        if (itemHistory.length > 0) {\n            let history = itemHistory[0].labels.filter(l => l.label == label);\n            if (history.length > 0 && history[0].set.length > 0) {\n                // ignore all sets after the beforeRevision  (unless 0 is passed)\n                let sets = history[0].set.filter(set => !beforeRevision || set.version < beforeRevision);\n                return sets[sets.length - 1].version;\n            }\n        }\n        // label was never set all good\n        return 0;\n    }\n\n    // implement logic to reset a label. \n    // This depends on the type of group: for xor / review labels a default label might need to be set\n    unsetLabel(oldLabelIds: string[], label: string): string[] {\n        let labelIds: string[] = this.json.clone(oldLabelIds);\n\n        if (labelIds.indexOf(label) === -1) {\n            // label is not actually set - ignore\n            return labelIds;\n        }\n\n        let group = this.getGroupOfLabel(label);\n\n        // remove the label\n        labelIds = labelIds.filter(function (existingLabel) {\n            return existingLabel != label;\n        });\n\n        if (!group || group.selection == \"or\") {\n            // simple label without group / or group - nothing else to do\n\n        } else if (group.selection == \"xor\" || group.selection == \"review\") {\n            if (group.default) {\n                labelIds.push(group.default);\n            }\n        } else {\n            this.logger.log(\"warn\", \"unsetLabel: unkown group type of label: '\" + label + \"'\");\n        }\n\n        return labelIds;\n    };\n\n    compareLabels(before: string[], after: string[]): IChangedLabels {\n        let result: IChangedLabels = {\n            changed: false,\n            added: [],\n            removed: [],\n            delta: \"\"\n        }\n\n        before = before || [];\n        after = after || [];\n        let delta: string[] = [];\n\n        for (var idx = 0; idx < after.length; idx++) {\n            if (before.indexOf(after[idx]) === -1) {\n                result.added.push(after[idx]);\n                delta.push(after[idx]);\n            }\n        }\n\n        for (var idx = 0; idx < before.length; idx++) {\n            if (after.indexOf(before[idx]) === -1) {\n                result.removed.push(before[idx]);\n                delta.push(\"-\" + before[idx]);\n            }\n        }\n        result.delta = delta.join(\",\");\n        result.changed = result.added.length + result.removed.length > 0;\n        return result;\n    }\n    static timeWarpLabel = \"_timewarp_\";\n\n    protected getLabelList(): ILabel[] {\n        let labelsAll = this.getConfig().getSetting(\"labels\");\n        if (!labelsAll) {\n            return [];\n        }\n        let labelsJson = this.json.fromString(labelsAll);\n        if (labelsJson.status !== \"ok\" || !(<ILabelsConfig>labelsJson.value).labels) {\n            return [];\n        }\n\n        return (<ILabelsConfig>labelsJson.value).labels;\n    }\n\n    getLabelNames(): string[] {\n\n        let labelList = this.getLabelList();\n\n        let allLabels: string[] = [];\n        for (let label of labelList) {\n            allLabels.push(label.label);\n        }\n\n        return allLabels;\n    }\n\n    protected getDesignReviews(): IDesignReview[] {\n        let labelsAll: string = this.getConfig().getSetting(\"labels\");\n        if (!labelsAll) {\n            return [];\n        }\n        var labelsJson = this.json.fromString(labelsAll);\n        if (labelsJson.status !== \"ok\") {\n            return [];\n        }\n\n        return (<ILabelsConfig>labelsJson.value).design_reviews ? (<ILabelsConfig>labelsJson.value).design_reviews : [];\n    }\n\n    getDesignReview(labelId: string): IDesignReview | null {\n        var dr = this.getDesignReviews();\n        for (var idx = 0; idx < dr.length; idx++) {\n            if (dr[idx].label === labelId) {\n                return dr[idx];\n            }\n        }\n        return null;\n    }\n\n    isFiltered(category: string, labels: string): boolean {\n\n        let filters = this.getFilter();\n        if (!filters) return false; // no filters -> not filtered out \n\n        let isFilteredOut = false;\n        // there are some filters so lets check\n        let labelsSet = labels ? labels.split(\",\") : [];\n        let labelsForItem = this.getLabelDefinitions([category]).map(function (labelDef) { return labelDef.label; });\n\n        const filtersArray = filters.split(\",\");\n        filtersArray.forEach((filter) => {\n            let label = filter.replace(\"!\", \"\"); // to get rid of negation of filters\n            if (labelsForItem.indexOf(label) == -1) return; // irrelevant, try next filter\n            if (label != filter) { // negative filter\n                isFilteredOut = isFilteredOut || labelsSet.indexOf(label) != -1;\n            } else {\n                isFilteredOut = isFilteredOut || labelsSet.indexOf(label) == -1;\n            }\n        });\n        return isFilteredOut;\n    }\n\n    getLabelsOfLabelGroupsType(labelGroupType: string): string[] {\n        if (!labelGroupType) {\n            return [];\n        }\n        let labels: string[] = [];\n        for (let lg of this.getLabelGroups()) {\n            if (lg.groupType == labelGroupType) {\n                labels = labels.concat(lg.labels);\n            }\n        }\n        for (let lg of this.getDesignReviews()) {\n            if (lg.groupType == labelGroupType) {\n                labels.push(lg.label);\n            }\n        }\n\n        return labels;\n    }\n    getLabelGroups(category?: string): ILabelGroup[] {\n        let labelsAll = this.getConfig().getSetting(\"labels\");\n        if (!labelsAll) {\n            return [];\n        }\n        let labelsJson = this.json.fromString(labelsAll);\n        if (labelsJson.status !== \"ok\") {\n            return [];\n        }\n\n        let labelList = this.getLabelList();\n        let groups: ILabelGroup[] = (<ILabelsConfig>labelsJson.value).groups ? (<ILabelsConfig>labelsJson.value).groups : [];\n        let design_reviews = this.getDesignReviews();\n\n        // by default all labels end up in the last group\n        for (var gid = 0; gid < groups.length; gid++) {\n            // prepare to add label definitions of actual labels to display\n            groups[gid].labelDef = [];\n            // by default all filters are in \"or\" mode\n            if (!groups[gid].filterSelection) {\n                groups[gid].filterSelection = \"or\";\n            }\n        }\n\n        // now add actual labels to display to each group, any label should be displayed at most once\n        labelList.forEach((label) => {\n            if (category && label.categories.indexOf(category) === -1) {\n                // this is an item, and label does not exist for item\n                return;\n            }\n\n            // check if label is in group\n            for (var gid = 0; gid < groups.length; gid++) {\n                for (var lid = 0; lid < groups[gid].labels.length; lid++) {\n                    if (groups[gid].labels[lid] === label.label) {\n                        groups[gid].labelDef.push(label);\n                        return;\n                    }\n                }\n            }\n\n            // check if label is in review\n            for (var gid = 0; gid < design_reviews.length; gid++) {\n                if (design_reviews[gid].label === label.label) {\n                    groups.push({\n                        selection: \"design_review\", labels: [label.label], filterSelection: \"or\", labelDef: [label], reset: design_reviews[gid].reset,\n                        filterMenu: design_reviews[gid].filterMenu\n                    });\n                    return;\n                }\n            }\n\n            // create a new group\n            groups.push({ virtualGroup: true, selection: \"or\", labels: [label.label], filterSelection: \"or\", labelDef: [label] });\n        });\n\n        return groups;\n    }\n\n    // returns the group of a label\n    protected getGroupOfLabel(labelID: string): ILabelGroup | null {\n        let groups = this.getLabelGroups();\n        for (var gid = 0; gid < groups.length; gid++) {\n            if (groups[gid].labels.indexOf(labelID) !== -1) {\n                return groups[gid];\n            }\n        }\n        return null;\n    }\n    // returns the background color of the main tool bar to be used if filters are activated\n\n}\n\n","import type { IBaseControlOptions } from \"../UI/Controls/BaseControl\";\n\n// To keep dependencies to a minimum, BasicFunctions is directly imported so\n// we don't have all of the business logic libs.\nimport { BasicFunctions } from \"../businesslogic/BasicFunctions\";\n\nimport type { IJSONTools, ILoggerTools } from \"./MatrixLibInterfaces\";\nimport { extend } from \"./JQueryExtendReplacement\";\n\nexport { JSONTools };\n\n\nclass JSONTools implements IJSONTools {\n\n    private logger: ILoggerTools;\n    constructor(logger: ILoggerTools) {\n        this.logger = logger;\n    }\n\n    private cloner2(src:any) {\n        return extend(true, {}, { x: src }).x;\n    }\n\n    mergeOptions(defaultOptions:IBaseControlOptions, options:IBaseControlOptions):IBaseControlOptions {\n        let newOptions:IBaseControlOptions = this.clone(defaultOptions);\n        // make sure there is a parameter object\n        if (!newOptions.parameter) {\n            newOptions['parameter'] = {};\n        }\n        // copy parameters one by one\n        if (options.parameter) {\n            for (var name in options.parameter) {\n                newOptions.parameter[name] = options.parameter[name];\n            }\n        }\n        // copy other values\n        for (var name in options) {\n            if (name != 'parameter') {\n                newOptions[name] = options[name];\n            }\n        }\n        // use parameters to overwrite some default values\n        if (this.isTrue(newOptions.parameter.readonly)) {\n            newOptions.canEdit = false;\n        }\n        return newOptions;\n    }\n    \n    // overwrite default options\n    setOptions(newOptions:IBaseControlOptions, options:IBaseControlOptions):IBaseControlOptions {\n        // make sure there is a parameter object\n        if (!newOptions.parameter) {\n            newOptions['parameter'] = {};\n        }\n        // copy parameters one by one\n        if (options.parameter) {\n            for (var name in options.parameter) {\n                newOptions.parameter[name] = options.parameter[name];\n            }\n        }\n        // copy other values\n        for (var name in options) {\n            if (name != 'parameter') {\n                newOptions[name] = options[name];\n            }\n        }\n        // use parameters to overwrite some default values\n        if (this.isTrue(newOptions.parameter.readonly)) {\n            newOptions.canEdit = false;\n        }\n        // handle readonly for ACLs\n        if (this.isTrue(newOptions.parameter.readonlyACL)) {\n            newOptions.canEdit = false;\n        }\n        return newOptions;\n    }\n\n    isTrue(obj:undefined|null|boolean|string|number):boolean {\n        return BasicFunctions.isTrue(obj);\n    }\n\n    isFalse(obj:undefined|null|boolean|string|number):boolean {\n        return BasicFunctions.isFalse(obj);\n    }\n\n    fromString(str:null|string):{status: string, value: {}} {\n        var result = {status: 'empty', value: {}};\n        if (str && str !== \"\") {\n            // first replace all single quotes outside of double quotes with \"\n            var strp = str.replace(/(')(?=(?:[^\"]|\"[^\"]*\")*$)/g, '\"').replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n            try {\n                result.value = JSON.parse(strp);\n                result.status = 'ok';\n            }\n            catch (err) {\n                try {\n                    result.value = JSON.parse(str);\n                    result.status = 'ok';\n                }\n                catch (err) {\n                    this.logger.log(\"error\", \"Error trying to parse configuration parameter: \" + str);\n                    this.logger.log(\"error\", \"Error was:\" + err);\n                    result.status = 'error';\n                }\n            }\n        }\n        return result;\n    }\n\n    clone(src:any):any {\n        var b =this.cloner2(src);\n        return b;\n    }\n};\n   ","/// <reference types=\"matrixrequirements-type-declarations\" />\nimport { ILoggerTools } from \"./MatrixLibInterfaces\";\n\nexport { SERVER_LOG_LEVEL, LoggerTools };\n\nenum SERVER_LOG_LEVEL {\n    WEIRD_STATE = \"WEIRD_STATE\",\n    BROKEN_STATE = \"BROKEN_STATE\"\n}\n\ntype FunctionRenderHumanDate = (date: Date) => string;\ntype FunctionSanitize = (data: string) => string;\n\nclass LoggerTools implements ILoggerTools {\n    private verbose:boolean = false;\n    private lastLogMsg:string = \"none\";\n    private logData:string[] = [ ];\n    private logIdx:number = 0;\n    private logSize: number = 50;\n    private functionRenderHumanDate: FunctionRenderHumanDate;\n    private functionSanitize: FunctionSanitize;\n\n    constructor(functionRenderHumanDate: FunctionRenderHumanDate, sanitize?: FunctionSanitize) {\n        this.functionRenderHumanDate = functionRenderHumanDate;\n        this.functionSanitize = (sanitize) ? sanitize : (d) => { return DOMPurify.sanitize(d); };\n    }\n\n    log(id:string, msg:string) {\n        if (!this.verbose && id === \"debug\") {\n            return;\n        }\n        msg = this.functionSanitize(msg) + '';\n        if (!msg) {\n            return;\n        }\n\n        console.log(id + \":\" + msg);\n\n        if (this.lastLogMsg === msg) {\n            this.logData[this.logIdx] = this.logData[this.logIdx] + \".\";\n        } else {\n            this.logIdx++;\n            if (this.logIdx===this.logSize) {\n                this.logIdx =0;\n            }\n            // this.logData[this.logIdx] = ml.UI.DateTime.renderHumanDate(new Date()) + \" [\" + id + \"]: \" + msg;\n            this.logData[this.logIdx] = this.functionRenderHumanDate(new Date()) + \" [\" + id + \"]: \" + msg;\n            this.lastLogMsg = msg;   \n        }\n    }\n\n    debug(message:string):void {\n        this.log(\"debug\", message)\n    }\n\n    info(message:string):void {\n        this.log(\"info\", message)\n    }\n\n    warning(message:string):void {\n        this.log(\"warning\", message)\n    }\n\n    error(message:string):void {\n        this.log(\"error\", message)\n    }\n\n    getLog():string {\n        var msg = \"\";\n        for ( var idx = this.logIdx +1; idx < this.logIdx + this.logSize +1; idx++) {\n            if (this.logData[idx % this.logSize]) {\n                msg += this.logData[idx % this.logSize] + \"\\n\";\n            }\n        }\n        return msg;\n    }\n}","// import { isomorphicFetch } from \"isomorphic-fetch\";\nlet isomorphicFetch = require('isomorphic-fetch');\nimport { XCPutEditItem, XCPostAddFolder } from \"../core/RestCalls\";\nimport { XRProjectInfo, XRPutProject_EditItem_TrimItem } from \"../core/RestResult\";\nimport { ItemConfiguration } from \"../core/common/businesslogic/ItemConfiguration\";\n// import { ISetField } from \"../core/common/businesslogic\";\nimport { ISimpleItemTools, ILoggerTools, IJSONTools, ILabelManager } from \"../core/common/matrixlib/MatrixLibInterfaces\";\nimport { IItemIdParts, IItemGet, IGenericMap, IItemHistory, IItemPut } from \"../core/globals\";\nimport { IItem, IReference, ISearchResult, XRTrimNeedleItem } from \"./client\";\nimport { Configuration } from \"./configuration\";\nimport { DefaultApi, ProjectInfo, ListProjectAndSettings, ProjectType, FancyFolder, TrimFolder, TrimItem, AddFileAck, FolderAnswer, TrimNeedle, AddItemAck, CopyItemAck, GetTodosAck, ItemItemBody, ProjectItemBody } from \"./rest-api\";\nimport { LoggerTools } from \"../core/common/matrixlib/LoggerTools\";\nimport { JSONTools } from \"../core/common/matrixlib/JSONTools\";\nimport { SimpleItemTools } from \"../core/common/matrixlib/SimpleItemTools\";\nimport { TestManagerConfiguration } from \"../core/common/businesslogic/TestManagerConfiguration\";\nimport { LabelManager } from \"../core/common/matrixlib/LabelManager\";\nimport { IProjectContext, Project } from \"./objects/Project\";\nimport { IProjectNeeds, ITitleAndId } from \"./standalone-interfaces\";\nimport { isPlainObject } from \"jquery\";\n\nexport type { ISimpleSessionControl };\nexport { StandaloneMatrixAPI, CreateConsoleAPI };\n\n\n\n// TODO(modules): temp hack. This should be defined in an interface module.\ninterface ISetField {\n    fieldName: string\n    value: string\n}\n\n\ninterface ISimpleSessionControl {\n    getCsrfCookie(): string;\n\n    setComment(comment: string): void;\n    getComment(): string;\n\n    setProject(project: string): void;\n    getProject(): string;\n\n    /**\n     * In the web app environment, where this api is used in a context with\n     * existing global variables, the default project context should be\n     * provided. It provides \"live\" access to globals of the current project.\n     * @returns A valid IProjectContext or null if none is available.\n     */\n    getDefaultProjectContext(): IProjectContext;\n}\n\nfunction CreateConsoleAPI(token: string, baseRestUrl: string, baseMatrixUrl: string) {\n    let config = new Configuration({ apiKey: token });\n    let session = new class implements ISimpleSessionControl {\n        private comment: string;\n        private project: string;\n\n        getCsrfCookie() { return \"\"; }\n\n        setComment(comment: string) { this.comment = comment; }\n        getComment() { return this.comment; }\n\n        setProject(project: string) { this.project = project; }\n        getProject() { return this.project; }\n\n        getDefaultProjectContext() { return null; }\n    };\n    const logger = new LoggerTools((d) => d.toString(), (d) => d);\n    const json = new JSONTools(logger);\n    const itemTools = new SimpleItemTools();\n    const itemConfig = new ItemConfiguration(logger, json);\n    return new StandaloneMatrixAPI(config, session, itemConfig, baseRestUrl, baseMatrixUrl,\n        logger, json, itemTools);\n}\n\nclass IsomorphicFetchWrapper {\n    private myFetch: any;\n    private log: string[];\n    constructor(private oldFetch: any) {\n        this.log = [];\n        let log = this.log;\n        this.myFetch = async (...args) => {\n            let [resource, config] = args;\n            log.push(resource);\n            const response = oldFetch(resource, config);\n            return response;\n        };\n    }\n\n    getLog(): string[] { return this.log; }\n    getFetch(): any {\n        return this.myFetch;\n    }\n}\n\nclass StandaloneMatrixAPI implements IProjectNeeds {\n    // Session Management\n    // Rest API support\n    // UI support\n    protected instance: DefaultApi;\n    private ItemConfig: ItemConfiguration;\n    protected labelManager: ILabelManager;\n    public debug: boolean = false;\n    private projectMap: Map<string, Project>;\n    private fetchWrapper: IsomorphicFetchWrapper;\n\n    constructor(protected config: Configuration,\n        protected session: ISimpleSessionControl,\n        initialItemConfig: ItemConfiguration,\n        protected baseRestUrl: string,\n        protected matrixBaseUrl: string,\n        protected logger: ILoggerTools,\n        protected json: IJSONTools,\n        protected simpleItemTools: ISimpleItemTools) {\n        this.projectMap = new Map<string, Project>();\n        this.fetchWrapper = new IsomorphicFetchWrapper(isomorphicFetch);\n        this.instance = new DefaultApi(this.config, this.baseRestUrl, this.fetchWrapper.getFetch());\n        this.setItemConfig(initialItemConfig);\n        this.labelManager = new LabelManager(logger, json, () => {\n            return this.getItemConfig();\n        });\n    }\n\n    public getFetchLog(): string[] {\n        return this.fetchWrapper.getLog();\n    }\n\n    public createNewItemConfig(): ItemConfiguration {\n        return new ItemConfiguration(this.logger, this.json);\n    }\n\n    public getLabelManager(): ILabelManager {\n        return this.labelManager;\n    }\n\n    public getItemConfig(): ItemConfiguration {\n        return this.ItemConfig;\n    }\n    public setItemConfig(newItemConfig: ItemConfiguration) {\n        this.ItemConfig = newItemConfig;\n    }\n\n    private getHeadersForPost() {\n        let headers = {};\n        headers['x-csrf'] = this.session.getCsrfCookie();\n        return headers;\n    }\n\n    // Called by setProject on project change.\n    private async initializeProject() {\n        const p: ProjectInfo = await this.instance.projectGet(this.getProject(), 1);\n        this.setItemConfig(this.createNewItemConfig());\n        this.getItemConfig().init(<XRProjectInfo>p);\n    }\n\n    private log(arg: any) {\n        if (this.debug) {\n            this.logger.info(arg);\n        }\n    }\n\n    public setComment(comment: string) {\n        this.session.setComment(comment);\n    }\n\n    public getComment(): string { return this.session.getComment(); }\n\n    public async setProject(project: string) {\n        this.session.setProject(project);\n        if (project) {\n            await this.initializeProject();\n        }\n    }\n\n    public getProject(): string { return this.session.getProject(); }\n\n    public async getProjects(): Promise<string[]> {\n        let p: Promise<ListProjectAndSettings> = this.instance.rootGet(0);\n        return p.then((result: ListProjectAndSettings) => {\n            let projects: string[] = [];\n            if (result.project) {\n                result.project.forEach((a: ProjectType) => {\n                    projects.push(a.shortLabel);\n                });\n            }\n            return projects;\n        });\n\n    }\n\n    protected parseRef(itemId: string): IItemIdParts {\n        return this.parseRefForProject(this.getProject(), itemId);\n    }\n\n    private getType(itemId: string): string {\n        var ir = this.parseRef(itemId);\n        if (ir.type !== \"\") {\n            return ir.type;\n        }\n        // no idea... \n        return \"\";\n    }\n\n    /**\n     * get an item from the database as json object.\n     * \n     * Use: await api.getItem(\"F-DOC-1\")\n     * \n     * @param itemId the id of the item like \"REQ-1\" or a specific version like \"REQ-1-v1\"\n     * @throws error in case the itemId is bad.\n     * @returns Promise to json object with all fields, links and labels\n     */\n    public async getItem(itemId: string): Promise<IItem> {\n        this.log(`get item \"${itemId}`);\n\n        let type = this.parseRef(itemId).type;\n        if (!type || this.getItemConfig().getCategories(true).indexOf(type) == -1) {\n            const msg = `This is not possibly an item in this project: \"${itemId}\"!`;\n            this.logger.error(msg);\n            throw new Error(msg);\n        }\n        return this.appGetItemAsync(this.getProject(), itemId);\n    }\n\n    public parseRefForProject(project: string, itemRef: string): IItemIdParts {\n        return this.simpleItemTools.parseRef(itemRef, project, this.matrixBaseUrl);\n    }\n\n    public getItemFromProject(project: string, id: string): Promise<IItemGet> {\n        return this.appGetItemAsync(project, id);\n    }\n\n    /**\n     * get the initial tree structure from a project. Project must be set first.\n     */\n    public async getTree(): Promise<ITitleAndId[]> {\n        return this.getTreeFromProject(this.getProject());\n    }\n\n    public async getFullTreeFromProject(projectName: string): Promise<FancyFolder[]> {\n        const p: FancyFolder[] = await this.instance.projectTreeGet(projectName, \"yes\");\n        return p;\n    }\n\n    public async getTreeFromProject(projectName: string): Promise<ITitleAndId[]> {\n        let p: Promise<FancyFolder[]> =\n            this.instance.projectTreeGet(projectName, \"yes\");\n        return p.then((folders: FancyFolder[]) => {\n            let result = [];\n            folders.forEach((v: FancyFolder) => {\n                const hasChildren = v.children && v.children.length > 0;\n                result.push({ isFolder: hasChildren, title: v.title, id: v.id });\n            });\n            return result;\n        });\n    }\n\n\n    /**\n     * get a folder from the database, filling in it's children. \n     * @param folderId  the id of the folder like \"F-<type>-<id>\"\n     * @throws error if folderId is invalid\n     * @returns Promise to ITitleAndId array\n     */\n    public async getFolderChildren(folderId: string): Promise<ITitleAndId[]> {\n        this.log(`get folder \"${folderId}`);\n        const ref = this.parseRef(folderId);\n        if (!ref.isFolder) {\n            const msg = `This is not a folder: \"${folderId}\"!`;\n            this.logger.error(msg);\n            throw new Error(msg);\n        }\n        let type = ref.type;\n        if (!type || this.getItemConfig().getCategories(true).indexOf(type) == -1) {\n            const msg = `This is not possibly a folder in this project: \"${folderId}\"!`;\n            this.logger.error(msg);\n            throw new Error(msg);\n        }\n        return this.getFolderChildrenFromProject(this.getProject(), folderId);\n    }\n\n    public async getFolderChildrenFromProject(projectName: string, folderId: string): Promise<ITitleAndId[]> {\n        this.log(`get folder ${folderId} from project ${projectName}`);\n        const ref = this.parseRef(folderId);\n        if (!ref.isFolder) {\n            const msg = `This is not a folder: \"${folderId}\"!`;\n            this.logger.error(msg);\n            throw new Error(msg);\n        }\n        const p: Promise<TrimFolder> = this.instance.projectItemFolderGet(\n            projectName, folderId, 0, \"\", \"yes\");\n\n        return p.then((value: TrimFolder) => {\n            let result: ITitleAndId[] = [];\n            // Harvest the children's IDs.\n            if (value.itemList) {\n                value.itemList.forEach((v: TrimFolder) => {\n                    result.push({ isFolder: v.isFolder > 0, title: v.title, id: v.itemRef });\n                });\n            }\n            return result;\n        });\n    }\n\n    private parseItemJSON(itemId: string, result: XRPutProject_EditItem_TrimItem): IItemGet {\n\n        var item: IItemGet = {\n            id: itemId,\n            title: result.title,\n            type: this.getType(itemId),\n            downLinks: [],\n            upLinks: [],\n            modDate: result.modDate,\n            isUnselected: result.isUnselected,\n            labels: result.labels ? result.labels : [],\n            maxVersion: result.maxVersion\n        };\n\n        if (result.isFolder != undefined) {\n            item.isFolder = result.isFolder == 1;\n            item.children = [];\n        } else {\n            item.isFolder = false;\n        }\n\n        if (result.docHasPackage) {\n            item.docHasPackage = result.docHasPackage;\n        }\n\n        if (!result.maxVersion) {\n            item.isDeleted = true;\n        }\n\n        if (result.fieldValList) {\n            for (var fieldVal in result.fieldValList.fieldVal) {\n                (<IGenericMap>item)[result.fieldValList.fieldVal[fieldVal].id.toString()] = result.fieldValList.fieldVal[fieldVal].value;\n            }\n        }\n\n        for (var idx = 0; result.downLinkList && idx < result.downLinkList.length; idx++) {\n            var tol = result.downLinkList[idx].itemRef;\n\n            item.downLinks.push({ to: this.parseRef(tol).id, title: result.downLinkList[idx].title, modDate: result.downLinkList[idx].modDate });\n        }\n\n        for (var idx = 0; result.upLinkList && idx < result.upLinkList.length; idx++) {\n            var tol = result.upLinkList[idx].itemRef;\n\n            item.upLinks.push({ to: this.parseRef(tol).id, title: result.upLinkList[idx].title, modDate: result.upLinkList[idx].modDate });\n        }\n        // copy original up list\n        item.upLinkList = result.upLinkList;\n\n        if (result.availableFormats) {\n            item[\"availableFormats\"] = result.availableFormats;\n        }\n        if (result.selectSubTree) {\n            item[\"selectSubTree\"] = result.selectSubTree;\n        }\n        if (result.requireSubTree) {\n            item[\"requireSubTree\"] = result.requireSubTree;\n        }\n\n        var hoi: IItemHistory[] = [];\n        for (var idx = 0; result.itemHistoryList && idx < result.itemHistoryList.itemHistory.length; idx++) {\n            var theAction = result.itemHistoryList.itemHistory[idx];\n            var historyInfo: IItemHistory = {\n                id: itemId,\n                user: theAction.createdByUserLogin,\n                action: theAction.auditAction,\n                version: theAction.version,\n                date: theAction.createdAt,\n                dateUserFormat: theAction.createdAtUserFormat,\n                title: theAction.title,\n                comment: theAction.reason\n            };\n            // now use the information that undeleted items have been deleted just before\n            if (theAction.auditAction === \"undelete\") {\n                if (result.itemHistoryList.itemHistory.length > idx + 1) {\n                    var theDelete = result.itemHistoryList.itemHistory[idx + 1];\n                    if (theDelete.auditAction !== \"delete\") {\n                        historyInfo[\"deletedate\"] = theDelete.deletedAtUserFormat;\n                    }\n                }\n            }\n            hoi.push(historyInfo);\n        }\n        item['history'] = hoi;\n        return item;\n    }\n\n    private async appGetItemAsync(project: string, itemId: string): Promise<IItem> {\n        const p: Promise<TrimItem> = this.instance.projectItemItemGet(project, itemId, 1);\n\n        return p.then((value: TrimItem) => {\n            if (value.isFolder) {\n                value[\"children\"] = [];\n            }\n            const item = this.parseItemJSON(itemId, value as XRPutProject_EditItem_TrimItem);\n            return item;\n        });\n    }\n\n    public async getDownlinks(itemId: string): Promise<IReference[]> {\n        this.log(`get downlinks of item \"${itemId}`);\n\n        const itemPromise = this.getItem(itemId);\n        return itemPromise.then((value: IItem) => {\n            return value.downLinks ? value.downLinks : [];\n        });\n    }\n\n    public async getDownlinkIds(itemId: string): Promise<string[]> {\n        this.log(`get downlink ids of item \"${itemId}`);\n\n        const links = this.getDownlinks(itemId);\n        return links.then((value: IReference[]) => {\n            return value.map(d => d.to);\n        });\n    }\n\n    public async getUplinks(itemId: string): Promise<IReference[]> {\n        this.log(`get Uplinks of item \"${itemId}`);\n\n        const itemPromise: Promise<IItem> = this.getItem(itemId);\n        return itemPromise.then((value: IItem) => {\n            return value.upLinks ? value.upLinks : [];\n        });\n    }\n\n    public async getUplinkIds(itemId: string): Promise<string[]> {\n        this.log(`get uplink ids of item \"${itemId}`);\n\n        const links = this.getUplinks(itemId);\n        return links.then((value: IReference[]) => {\n            return value.map(d => d.to);\n        });\n    }\n\n    /**\n     * search items\n     * \n     * @param term search expression, e.g. mrql:category=REQ\n     * @param includeFields true to include fields\n     * @param includeLinks true to include links\n     * @param includeLabels true to include labels\n     * @returns search results\n     */\n    public async search(term: string, includeFields?: boolean, includeLinks?: boolean, includeLabels?: boolean,\n        filter?: string): Promise<ISearchResult[]> {\n        this.log(`Search for \"${term}\"`);\n\n        return this.appSearchAsync(this.getProject(), term,\n            filter ?? null,\n            true,\n            includeFields ? \"*\" : null,\n            null,\n            includeLabels ?? false,\n            includeLinks ?? false,\n            includeLinks ?? false);\n    }\n\n    /**\n     * Move items to a particular folder. \n     * @param project a valid project on the instance\n     * @param folderId a valid folder id within the project\n     * @param itemIds an array of itemIds\n     * @returns the string \"Ok\" on success\n     */\n    public async moveItemsInProject(project: string, folderId: string, itemIds: string[]): Promise<string> {\n        this.log(`Move items in ${project} to folder ${folderId}\"`);\n        const comment = this.getComment();\n        const itemsString: string = itemIds.join(\",\");\n        return this.instance.projectMoveinFolderPost(project, folderId, comment, itemsString);\n    }\n\n    /**\n     * Execute a search in the given project, returning matching item ids.\n     * @param project \n     * @param term \n     * @returns an array of item ids.\n     */\n    public async searchInProject(project: string, term: string): Promise<string[]> {\n        this.log(`Search in ${project} for \"${term}\"`);\n\n        const results = await this.instance.projectNeedleminimalGet(project, term);\n        return results;\n    }\n\n    public async complexSearchInProject(project: string, term: string, filter: string,\n        fieldList: string,\n        includeLabels: boolean,\n        includeDownlinks: boolean, includeUplinks: boolean, treeOrder: boolean): Promise<ISearchResult[]> {\n        return this.appSearchAsync(project, term,\n            filter,\n            true,\n            fieldList,  // \"*\" for all fields\n            null,\n            includeLabels,\n            includeDownlinks,\n            includeUplinks);\n    }\n\n    public async uploadProjectFile(url: string): Promise<AddFileAck> {\n        return this.uploadFileToProject(this.getProject(), url);\n    }\n\n    public async uploadFileToProject(project: string, url: string): Promise<AddFileAck> {\n        const options = { headers: this.getHeadersForPost() };\n        let result: AddFileAck = await this.instance.projectFilePost(project, url, options);\n        return result;\n    }\n\n    public async execute(payload: any): Promise<FolderAnswer> {\n        const options = { headers: this.getHeadersForPost() };\n        let items = await this.instance.projectExecutePost(this.getProject(),\n            payload, options);\n        return items;\n    }\n\n    /**\n     * The session object contains a string that represents the \"current project.\"\n     * This convenience method calls openProject() with that string. \n     * @returns A valid Project object, or null if the session has no project.\n     */\n    public async openCurrentProjectFromSession(): Promise<Project> {\n        const project = this.session.getProject();\n        return this.openProject(project);\n    }\n\n    /**\n     * Retrieve or create a Project object for the given project name.  The method is\n     * asynchronous because it may require a trip to the server to retrieve project\n     * configuration.\n     * @param project a valid string.\n     * @returns A valid Project object, or null if the project name is undefined.\n     */\n    public async openProject(project: string): Promise<Project> {\n        if (!project) {\n            return null;\n        }\n\n        if (this.projectMap.has(project)) {\n            let proj = this.projectMap.get(project);\n            return proj;\n        }\n\n        // If we are running in the web application context, and the user asks to open the current\n        // project, provide them with the current web application globals. Otherwise, create a new\n        // context on the fly. That requires a server call to get the item configuration information.\n        let context: IProjectContext = null;\n        if (this.session.getProject() == project &&\n            this.session.getDefaultProjectContext() != null) {\n            context = this.session.getDefaultProjectContext();\n\n            // The default context, although it may have the name of the project the user\n            // is asking for, may not really be \"loaded\". Check for that case.\n            if (context.getItemConfig().getCategories().length == 0) {\n                const p: ProjectInfo = await this.instance.projectGet(project, 1);\n                context.getItemConfig().init(<XRProjectInfo>p);\n                context.getTestManagerConfig().initialize(context.getItemConfig());\n            }\n        } else {\n            const p: ProjectInfo = await this.instance.projectGet(project, 1);\n            let config = this.createNewItemConfig();\n            config.init(<XRProjectInfo>p);\n            const labelManager = new LabelManager(this.logger, this.json, () => config);\n            const testManagerConfig = new TestManagerConfiguration();\n            testManagerConfig.initialize(config);\n            context = {\n                getItemConfig: () => { return config; },\n                getJsonTools: () => { return this.json; },\n                getLogger: () => { return this.logger; },\n                getLabelManager: () => { return labelManager; },\n                getTestManagerConfig: () => { return testManagerConfig; }\n            };\n        }\n        const proj = new Project(this, project, context);\n        this.projectMap.set(project, proj);\n        return proj;\n    }\n\n    private parseSearchResult(needle: XRTrimNeedleItem, fieldList?: string): ISearchResult {\n        let fullitem = this.parseRef(needle.itemOrFolderRef);\n        const that = this;\n        let sr: ISearchResult = {\n            itemId: fullitem.id, version: fullitem.version, title: needle.title, downlinks: [], uplinks: [], labels: []\n        };\n        if (fieldList && fieldList.length > 0) {\n            sr.fieldVal = needle.fieldVal;\n        }\n        if (needle.downLinkList) {\n            for (let link of needle.downLinkList) {\n                sr.downlinks.push(that.parseRef(link.itemRef).id);\n            }\n        }\n        if (needle.upLinkList) {\n            for (let link of needle.upLinkList) {\n                sr.uplinks.push(that.parseRef(link.itemRef).id);\n            }\n        }\n        if (needle.labels) {\n            let labels = needle.labels.split(\",\");\n            for (let label of labels) {\n                sr.labels.push(label.substr(1, label.length - 2));\n            }\n        }\n        if (needle.creationDate) {\n            sr[\"creationDate\"] = needle.creationDate;\n        }\n        return sr;\n    }\n\n    // TODO: crossProject is not handled (it is a server query, not a project query).\n    private async appSearchAsync(project: string, term: string, filter?: string, ignoreFilters?: boolean, fieldList?: string,\n        crossProject?: string, labels?: boolean, down?: boolean, up?: boolean, treeOrder?: boolean): Promise<ISearchResult[]> {\n        let linksReq = \"\";\n        if (down && up) {\n            linksReq = \"up,down\";\n        } else if (down) {\n            linksReq = \"down\";\n        } else if (up) {\n            linksReq = \"up\";\n        }\n        const p: Promise<TrimNeedle> = this.instance.projectNeedleGet(project,\n            term,\n            \"\",\n            filter,\n            fieldList,\n            labels ? 1 : 0,\n            treeOrder ? 1 : 0,\n            linksReq);\n        return p.then((result: TrimNeedle) => {\n            var hoi: ISearchResult[] = [];\n            for (var idx = 0; idx < result.needles.length; idx++) {\n                hoi.push(this.parseSearchResult(result.needles[idx] as XRTrimNeedleItem, fieldList));\n            }\n            return hoi;\n        });\n    }\n\n    public async getItemIdsInCategory(category: string): Promise<string[]> {\n        this.log(`get items of type \"${category}\"`);\n        let items = await this.search(\"mrql:category=\" + category);\n        return items.map(item => item.itemId);\n    }\n\n    /**\n     * gets the value of a field of an item from the database\n     * \n     * Use: await getField( \"REQ-1\", \"description\")\n     * \n     * @param itemId the id of the item like \"REQ-1\" or a specific version like \"REQ-1-v1\"\n     * @param fieldName name of the field\n     * @throws Error in case of invalid item or field\n     * @returns Promise to the value of the field\n     */\n    public async getField(itemId: string, fieldName: string): Promise<any> {\n        this.log(`get field \"${fieldName} of item \"${itemId}\" `);\n\n        let type = this.parseRef(itemId).type;\n        if (!type || this.getItemConfig().getCategories(true).indexOf(type) == -1) {\n            const msg: string = `This is not possibly an item in this project: \"${itemId}\"!`;\n            this.logger.error(msg);\n            throw new Error(msg);\n        }\n        let fieldId = this.getItemConfig().getFieldId(type, fieldName);\n        if (!fieldId) {\n            const msg: string = `\"${fieldName}\" is not a field of this item \"${itemId}\"!`;\n            this.logger.error(msg);\n            throw new Error(msg);\n        }\n        let itemPromise: Promise<IItem> = this.appGetItemAsync(this.getProject(), itemId);\n        return itemPromise.then((value: IItem) => {\n            return value[fieldId];\n        });\n    }\n\n    /**\n     * set a field of an item in the database\n     * \n     * Use: await api.setField(\"PROC-83\", \"plain english\", \"x\");  \n     * \n     * @param itemId itemId the id of the item like \"REQ-1\" \n     * @param fieldName name of the field\n     * @param value value of the field\n     * @throws Error in case of invalid itemId or fieldName\n     * @returns Promise to the updated item\n     */\n    public async setField(itemId: string, fieldName: string, value: string): Promise<IItemGet> {\n        this.log(`set field \"${fieldName} of item \"${itemId}\" `);\n        return this.setFields(itemId, [{ fieldName: fieldName, value: value }]);\n    }\n\n    public async setTitle(itemId: string, value: string): Promise<IItemGet> {\n        this.log(`set title of item \"${itemId}\" `);\n        let update = {\n            id: itemId,\n            onlyThoseFields: 1,\n            onlyThoseLabels: 1,\n            title: value\n        }\n        let type = this.parseRef(itemId).type;\n        if (!type) {\n            const msg: string = `This is not possibly an item in this project: \"${itemId}\"!`;\n            this.logger.error(msg);\n            throw new Error(msg);\n        }\n\n        return this.appUpdateItemInDBAsync(this.getProject(), update, \"edit\");\n    }\n\n    private appUpdateItemInDBAsync(project: string, itemJson: IItemPut, auditAction: string, currentVersion?: number): Promise<IItemGet> {\n        const comment = this.getComment();\n        let body: ItemItemBody = {\n            reason: comment,\n            currentVersion: currentVersion,\n            linksAreComplete: 1,\n            itemProperties: {}\n        };\n        if (auditAction) {\n            body[\"auditAction\"] = auditAction;\n        }\n        const regex = /fx[0-9]+/;\n        for (var par in itemJson) {\n            if (!itemJson.hasOwnProperty(par))\n                continue;\n            if (body.hasOwnProperty(par))\n                continue;\n            if (par === \"type\")\n                continue;\n            if (par === \"category\")\n                continue;\n            if (par === \"links\")\n                continue;\n            if (par === \"id\")\n                continue;\n            if (par === \"downLinks\" || par === \"upLinks\") {\n                // These are sent in fields linksDown and linksUp.\n                continue;\n            }\n\n            if (isNaN(<any>par)) {\n                // it's attribute other than a field\n                (<IGenericMap>body)[par] = (<IGenericMap>itemJson)[par];\n            } else {\n                // it's a number so we assume it's a field\n                (<IGenericMap>body).itemProperties[\"fx\" + par] = (<IGenericMap>itemJson)[par];\n            }\n\n            // If itemJson already has \"fx\" fields, we need to put those in the fxFields bucket.\n            if (regex.test(par)) {\n                (<IGenericMap>body).itemProperties[par] = (<IGenericMap>itemJson)[par];\n            }\n        }\n\n        const options = { headers: this.getHeadersForPost() };\n        const p: Promise<TrimItem> = this.instance.projectItemItemPut(body, project, itemJson.id, options);\n        return p.then((result: TrimItem) => {\n            var item = this.parseItemJSON(itemJson.id, result as XRPutProject_EditItem_TrimItem);\n            return item;\n        });\n    }\n\n    public async updateItemInProject(project: string, item: IItemPut, currentVersion?: number): Promise<string> {\n        return (await this.appUpdateItemInDBAsync(project, item, \"edit\", currentVersion)).id;\n    }\n\n    public async createItemInProject(project: string, parentFolderId: string, item: IItemPut): Promise<string> {\n        const newId = await this.createItemFromIItemPut(project, parentFolderId, item);\n        return newId;\n    }\n\n    /**\n     * sets multiple fields in the database \n     * \n     * Use: await api.setFields(\"PROC-83\", [{fieldName:\"plain english\",value:\"x\"}]  )\n     * \n     * @param itemId itemId itemId the id of the item like \"REQ-1\" \n     * @param data array of fieldName and value tupels \n     * @throws Error in case of invalid id or fields\n     * @returns the updated item\n     */\n    public async setFields(itemId: string, data: ISetField[]): Promise<IItemGet> {\n        return this.setFieldsInProject(this.getProject(), this.getItemConfig(), itemId, data);\n    }\n\n    public async setFieldsInProject(project: string, projectItemConfig: ItemConfiguration, itemId: string, data: ISetField[]): Promise<IItemGet> {\n        this.log(`set fields \"${JSON.stringify(data)} of item \"${itemId}\" in project \"${project}\" `);\n        let update = {\n            id: itemId,\n            onlyThoseFields: 1,\n            onlyThoseLabels: 1\n        }\n        let type = this.parseRefForProject(project, itemId).type;\n        if (!type) {\n            const msg: string = `This is not possibly an item in this project: \"${itemId}\"!`;\n            this.logger.error(msg);\n            throw new Error(msg);\n        }\n        for (let s of data) {\n            let fieldId = projectItemConfig.getFieldId(type, s.fieldName);\n            if (!fieldId) {\n                const msg: string = `\"${s.fieldName}\" is not a field of this item \"${itemId}\"!`;\n                this.logger.error(msg);\n                throw new Error(msg);\n            }\n            update[\"fx\" + fieldId] = s.value;\n        }\n\n        return this.appUpdateItemInDBAsync(this.getProject(), update, \"edit\");\n    }\n\n    public async addDownLink(fromId: string, toId: string): Promise<string> {\n        this.log(`Add downlink from \"${fromId} to \"${toId}\"`);\n\n        const options = { headers: this.getHeadersForPost() };\n        return this.instance.projectItemlinkUpitemDownitemPost(\n            this.getProject(), fromId, toId, this.getComment(), options);\n    }\n\n    public async deleteItem(itemId: string, force?: boolean): Promise<string> {\n        this.log(`Delete Item \"${itemId}\"`);\n\n        if (force == undefined) {\n            force = false;\n        }\n        return this.appDeleteItem(this.getProject(), itemId, force);\n    }\n\n    public async deleteItemInProject(project: string, itemId: string, force?: boolean): Promise<string> {\n        this.log(`Delete Item \"${itemId}\" in project \"${project}\"`);\n\n        if (force == undefined) {\n            force = false;\n        }\n        return this.appDeleteItem(project, itemId, force);\n    }\n\n    private async appDeleteItem(project: string, itemId: string, force: boolean): Promise<string> {\n        return this.appGetItemAsync(project, itemId).then((itemJson: IItem) => {\n            const comment: string = this.getComment();\n            let confirm: string = \"no\";\n            if (itemJson.isFolder && itemJson.children && force) {\n                confirm = \"yes\";\n            }\n            if (!force && itemJson.children.length > 0) {\n                throw new Error(`Item \"${itemId}\" not deleted because it has children`);\n            }\n            return this.instance.projectItemItemDelete(project, itemId, confirm, comment);\n        });\n    }\n\n    public async deleteDownLink(fromId: string, toId: string): Promise<string> {\n        this.log(`Delete downlink from \"${fromId} to \"${toId}\"`);\n\n        return this.instance.projectItemlinkUpitemDownitemDelete(\n            this.getProject(), fromId, toId, this.getComment());\n    }\n\n    public async deleteDownLinks(fromId: string): Promise<string[]> {\n        this.log(`Delete all downlinks from \"${fromId}\"`);\n\n        let dls = await this.getDownlinkIds(fromId);\n        let results: string[] = [];\n        for (let dl of dls) {\n            results.push(await this.deleteDownLink(fromId, dl));\n        }\n        return results;\n    }\n\n    public async deleteUpLinks(fromId: string): Promise<string[]> {\n        this.log(`Delete all uplinks from \"${fromId}\"`);\n\n        let uls = await this.getUplinkIds(fromId);\n        let results: string[] = [];\n        for (let ul of uls) {\n            results.push(await this.deleteDownLink(ul, fromId));\n        }\n        return results;\n    }\n\n    /**\n     * create a new item in the database\n     * \n     * Use: createItem( \"F-REQ-1\", \"my item\", [{fieldName:\"description\",value:\"x\"}], [\"labelx\"], downlinks:[\"SPEC-1\"], uplinks:[] )\n     * \n     * @param folder where to store the item\n     * @param title name of the item\n     * @param data array with fieldNames and values\n     * @param labels list of labels to set\n     * @param downlinks list of downlinks to create\n     * @param uplinks list of uplinks to create\n     * @returns the created item id\n     */\n    public createItem(folder: string, title: string, data?: ISetField[], labels?: [], downlinks?: [], uplinks?: []): Promise<string> {\n        this.log(`Create item ${title} in folder ${folder} with labels: ${labels ? labels.join(\",\") : \"\"} downlinks: ${downlinks ? downlinks.join(\",\") : \"\"} and uplinks:${uplinks ? uplinks.join(\",\") : \"\"} `);\n        let that = this;\n        let category = this.parseRef(folder).type;\n        let update: IItemPut = { title: title, type: category };\n        if (data) {\n            for (let s of data) {\n                let fieldId = this.getItemConfig().getFieldId(category, s.fieldName);\n                if (!fieldId) {\n                    const msg: string = `\"${s.fieldName}\" is not a field of this category \"${category}\"!`;\n                    this.logger.error(msg);\n                    throw new Error(msg);\n                }\n                update[fieldId] = s.value;\n            }\n        }\n        if (labels && labels.length) update.labels = labels.join(\",\");\n\n        const result: Promise<string> = that.appCreateItemOfTypeAsync(this.getProject(), category, update, \"add\", folder);\n        return result.then(async (newItemId: string) => {\n            let itemId = that.parseRef(newItemId).id;\n            if (downlinks) {\n                for (let link of downlinks) {\n                    await that.addDownLink(itemId, link);\n                }\n            }\n            if (uplinks) {\n                for (let link of uplinks) {\n                    await that.addDownLink(link, itemId);\n                }\n            }\n            return newItemId;\n        });\n    }\n\n    public async createItemFromIItemPut(project: string, folder: string, item: IItemPut): Promise<string> {\n        let that = this;\n\n        let category = this.parseRef(folder).type;\n        if (category != item.type) {\n            const msg = `Folder category of ${category} does not match item category of ${item.type}`;\n            this.logger.error(msg);\n            throw new Error(msg);\n        }\n\n        const result: Promise<string> = this.appCreateItemOfTypeAsync(project, category, item, \"add\", folder);\n        return result.then(async (newItemId: string) => {\n            let itemId = that.parseRef(newItemId).id;\n            // TODO: why can't this be done in the initial call? Seems like more trips to server than\n            // required.\n            if (item.downlinks) {\n                for (let link of item.downlinks) {\n                    await that.addDownLink(itemId, link);\n                }\n            }\n            if (item.uplinks) {\n                for (let link of item.uplinks) {\n                    await that.addDownLink(link, itemId);\n                }\n            }\n            return newItemId;\n        });\n    }\n\n    // Returns a promise with the id of the created item.\n    private async appCreateItemOfTypeAsync(project: string, category: string, itemJson: IItemPut, actions: string, parentId: string): Promise<string> {\n        const comment = this.getComment();\n        let body: ProjectItemBody = {\n            reason: comment,\n            title: itemJson.title,\n            linksUp: itemJson.linksUp,\n            linksDown: itemJson.linksDown,\n            folder: parentId,\n            itemProperties: {}\n        };\n        if (itemJson.children) {\n            let postItFolder: XCPostAddFolder = {\n                label: itemJson.title,\n                parent: parentId,\n                reason: comment\n            };\n            let fxFields = {};\n            for (var par in itemJson) {\n                if (!itemJson.hasOwnProperty(par)) continue;\n                if (postItFolder.hasOwnProperty(par)) continue;\n                if (par === \"type\" || par === \"children\" ||\n                    par === \"title\" || par === \"labels\" ||\n                    par === \"linksUp\" || par === \"linksDown\") {\n                    continue;\n                }\n                if (!isNaN(<any>par)) {\n                    (<IGenericMap>fxFields)[\"fx\" + par] = (<IGenericMap>itemJson)[par];\n                }\n            }\n            const options = { query: fxFields, headers: this.getHeadersForPost() };\n            let ack: Promise<AddItemAck> = this.instance.projectFolderPost(\n                project, parentId, itemJson.title, comment, undefined, options);\n            return ack.then((result: AddItemAck) => {\n                itemJson.id = \"F-\" + itemJson.type + \"-\" + result.serial;\n                return itemJson.id;\n            });\n        }\n        for (var par in itemJson) {\n            if (!itemJson.hasOwnProperty(par)) continue;\n            if (par === \"type\" || par === \"labels\" ||\n                par === \"linksUp\" || par === \"linksDown\") {\n                continue;\n            }\n            if (!isNaN(<any>par)) {\n                // it's a number so we assume it's a field\n                (<IGenericMap>body).itemProperties[\"fx\" + par] = (<IGenericMap>itemJson)[par];\n            }\n        }\n        const options = { headers: this.getHeadersForPost() };\n        let ack: Promise<AddItemAck> = this.instance.projectItemPost(body, project, options);\n        return ack.then((result: AddItemAck) => {\n            itemJson.id = itemJson.type + \"-\" + result.serial;\n            return itemJson.id;\n        });\n    }\n\n    /**\n     * Creates a folder\n     * \n     * @param parent where to store the folder\n     * @param title name of the folder\n     * @param data array with fieldNames and values\n     * @throws error in case of input error (bad fields, etc)\n     * @returns Promise to the item id of folder\n     */\n    public async createFolder(parent: string, title: string, data?: ISetField[]): Promise<string> {\n\n        this.log(`Create folder \"${title} in folder \"${parent}\" `);\n        let type = this.parseRef(parent).type;\n        let update: IItemPut = { title: title, children: [], type: type };\n        if (data) {\n            for (let s of data) {\n                let fieldId = this.getItemConfig().getFieldId(\"FOLDER\", s.fieldName);\n                if (!fieldId) {\n                    const msg: string = `\"${s.fieldName}\" is not a field of a FOLDER\"!`;\n                    this.logger.error(msg);\n                    throw new Error(msg);\n                }\n                update[fieldId] = s.value;\n            }\n        }\n        // TODO: is XTC really correct here?\n        return this.appCreateItemOfTypeAsync(this.getProject(), \"XTC\", update, \"add\", parent);\n    }\n\n    public async getItemIdByTitle(category: string, title: string): Promise<string | null> {\n\n        this.log(`get item by title \"${title}\" in category \"${category}\"`);\n        let that = this;\n        let itemsPromise = this.search(\"mrql:category=\" + category);\n        return itemsPromise.then((items: ISearchResult[]) => {\n            if (!items || items.length == 0) {\n                that.log(`Warning there's no item with title '${title}' in category '${category}'`);\n                return null;\n            }\n            const itemsFilteredByName = items.filter(item => item.title == title);\n            if (itemsFilteredByName.length == 0) {\n                that.log(`Warning there's no item with title '${title}' in category '${category}'`);\n                return null;\n            }\n            if (itemsFilteredByName.length > 1) {\n                that.log(`Warning there's more than one match. Returning first item with title '${title}' in category '${category}'`);\n            }\n            that.log(`get item by title \"${title}\" in category \"${category}\" => ${itemsFilteredByName[0].itemId}`);\n            return itemsFilteredByName[0].itemId;\n        });\n    }\n\n    public async copyItem(fromProject: string, fromItem: string, toProject: string, toFolder: string, copyLabels: boolean): Promise<CopyItemAck> {\n        this.log(`Copy Item \"${fromProject}/${fromItem}\" to  \"${toProject}/${toFolder}\"`);\n\n        return this.instance.projectCopyItemOrFolderPost(fromProject, fromItem,\n            toFolder, this.getComment(), toProject, copyLabels ? 1 : 0);\n    }\n\n    /**\n     * Get the TODOs for a project. \n     * @param project project name\n     * @param itemRef if specified, returns all todos linked to an item, regardless of user\n     * @param includeDone - if true, includes done todos\n     * @param includeAllUsers - if true, includes all todos for all users.\n     * @param includeFuture - false by default. If true, includes future todos.\n     * @returns Information on the todos.\n     */\n    public async getProjectTodos(project: string, itemRef?: string, includeDone?: boolean, includeAllUsers?: boolean,\n        includeFuture?: boolean): Promise<GetTodosAck> {\n        return this.instance.projectTodoGet(project,\n            itemRef,\n            includeDone ? 1 : 0,\n            includeAllUsers ? 1 : 0,\n            includeFuture ? 1 : 0);\n    }\n\n}\n","// the whatwg-fetch polyfill installs the fetch() function\n// on the global object (window or self)\n//\n// Return that as the export for use in Webpack, Browserify etc.\nrequire('whatwg-fetch');\nmodule.exports = self.fetch.bind(self);\n","var global =\n  (typeof globalThis !== 'undefined' && globalThis) ||\n  (typeof self !== 'undefined' && self) ||\n  (typeof global !== 'undefined' && global)\n\nvar support = {\n  searchParams: 'URLSearchParams' in global,\n  iterable: 'Symbol' in global && 'iterator' in Symbol,\n  blob:\n    'FileReader' in global &&\n    'Blob' in global &&\n    (function() {\n      try {\n        new Blob()\n        return true\n      } catch (e) {\n        return false\n      }\n    })(),\n  formData: 'FormData' in global,\n  arrayBuffer: 'ArrayBuffer' in global\n}\n\nfunction isDataView(obj) {\n  return obj && DataView.prototype.isPrototypeOf(obj)\n}\n\nif (support.arrayBuffer) {\n  var viewClasses = [\n    '[object Int8Array]',\n    '[object Uint8Array]',\n    '[object Uint8ClampedArray]',\n    '[object Int16Array]',\n    '[object Uint16Array]',\n    '[object Int32Array]',\n    '[object Uint32Array]',\n    '[object Float32Array]',\n    '[object Float64Array]'\n  ]\n\n  var isArrayBufferView =\n    ArrayBuffer.isView ||\n    function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n}\n\nfunction normalizeName(name) {\n  if (typeof name !== 'string') {\n    name = String(name)\n  }\n  if (/[^a-z0-9\\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {\n    throw new TypeError('Invalid character in header field name: \"' + name + '\"')\n  }\n  return name.toLowerCase()\n}\n\nfunction normalizeValue(value) {\n  if (typeof value !== 'string') {\n    value = String(value)\n  }\n  return value\n}\n\n// Build a destructive iterator for the value list\nfunction iteratorFor(items) {\n  var iterator = {\n    next: function() {\n      var value = items.shift()\n      return {done: value === undefined, value: value}\n    }\n  }\n\n  if (support.iterable) {\n    iterator[Symbol.iterator] = function() {\n      return iterator\n    }\n  }\n\n  return iterator\n}\n\nexport function Headers(headers) {\n  this.map = {}\n\n  if (headers instanceof Headers) {\n    headers.forEach(function(value, name) {\n      this.append(name, value)\n    }, this)\n  } else if (Array.isArray(headers)) {\n    headers.forEach(function(header) {\n      this.append(header[0], header[1])\n    }, this)\n  } else if (headers) {\n    Object.getOwnPropertyNames(headers).forEach(function(name) {\n      this.append(name, headers[name])\n    }, this)\n  }\n}\n\nHeaders.prototype.append = function(name, value) {\n  name = normalizeName(name)\n  value = normalizeValue(value)\n  var oldValue = this.map[name]\n  this.map[name] = oldValue ? oldValue + ', ' + value : value\n}\n\nHeaders.prototype['delete'] = function(name) {\n  delete this.map[normalizeName(name)]\n}\n\nHeaders.prototype.get = function(name) {\n  name = normalizeName(name)\n  return this.has(name) ? this.map[name] : null\n}\n\nHeaders.prototype.has = function(name) {\n  return this.map.hasOwnProperty(normalizeName(name))\n}\n\nHeaders.prototype.set = function(name, value) {\n  this.map[normalizeName(name)] = normalizeValue(value)\n}\n\nHeaders.prototype.forEach = function(callback, thisArg) {\n  for (var name in this.map) {\n    if (this.map.hasOwnProperty(name)) {\n      callback.call(thisArg, this.map[name], name, this)\n    }\n  }\n}\n\nHeaders.prototype.keys = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push(name)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.values = function() {\n  var items = []\n  this.forEach(function(value) {\n    items.push(value)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.entries = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push([name, value])\n  })\n  return iteratorFor(items)\n}\n\nif (support.iterable) {\n  Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n}\n\nfunction consumed(body) {\n  if (body.bodyUsed) {\n    return Promise.reject(new TypeError('Already read'))\n  }\n  body.bodyUsed = true\n}\n\nfunction fileReaderReady(reader) {\n  return new Promise(function(resolve, reject) {\n    reader.onload = function() {\n      resolve(reader.result)\n    }\n    reader.onerror = function() {\n      reject(reader.error)\n    }\n  })\n}\n\nfunction readBlobAsArrayBuffer(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsArrayBuffer(blob)\n  return promise\n}\n\nfunction readBlobAsText(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsText(blob)\n  return promise\n}\n\nfunction readArrayBufferAsText(buf) {\n  var view = new Uint8Array(buf)\n  var chars = new Array(view.length)\n\n  for (var i = 0; i < view.length; i++) {\n    chars[i] = String.fromCharCode(view[i])\n  }\n  return chars.join('')\n}\n\nfunction bufferClone(buf) {\n  if (buf.slice) {\n    return buf.slice(0)\n  } else {\n    var view = new Uint8Array(buf.byteLength)\n    view.set(new Uint8Array(buf))\n    return view.buffer\n  }\n}\n\nfunction Body() {\n  this.bodyUsed = false\n\n  this._initBody = function(body) {\n    /*\n      fetch-mock wraps the Response object in an ES6 Proxy to\n      provide useful test harness features such as flush. However, on\n      ES5 browsers without fetch or Proxy support pollyfills must be used;\n      the proxy-pollyfill is unable to proxy an attribute unless it exists\n      on the object before the Proxy is created. This change ensures\n      Response.bodyUsed exists on the instance, while maintaining the\n      semantic of setting Request.bodyUsed in the constructor before\n      _initBody is called.\n    */\n    this.bodyUsed = this.bodyUsed\n    this._bodyInit = body\n    if (!body) {\n      this._bodyText = ''\n    } else if (typeof body === 'string') {\n      this._bodyText = body\n    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n      this._bodyBlob = body\n    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n      this._bodyFormData = body\n    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n      this._bodyText = body.toString()\n    } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n      this._bodyArrayBuffer = bufferClone(body.buffer)\n      // IE 10-11 can't handle a DataView body.\n      this._bodyInit = new Blob([this._bodyArrayBuffer])\n    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n      this._bodyArrayBuffer = bufferClone(body)\n    } else {\n      this._bodyText = body = Object.prototype.toString.call(body)\n    }\n\n    if (!this.headers.get('content-type')) {\n      if (typeof body === 'string') {\n        this.headers.set('content-type', 'text/plain;charset=UTF-8')\n      } else if (this._bodyBlob && this._bodyBlob.type) {\n        this.headers.set('content-type', this._bodyBlob.type)\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n      }\n    }\n  }\n\n  if (support.blob) {\n    this.blob = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return Promise.resolve(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as blob')\n      } else {\n        return Promise.resolve(new Blob([this._bodyText]))\n      }\n    }\n\n    this.arrayBuffer = function() {\n      if (this._bodyArrayBuffer) {\n        var isConsumed = consumed(this)\n        if (isConsumed) {\n          return isConsumed\n        }\n        if (ArrayBuffer.isView(this._bodyArrayBuffer)) {\n          return Promise.resolve(\n            this._bodyArrayBuffer.buffer.slice(\n              this._bodyArrayBuffer.byteOffset,\n              this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength\n            )\n          )\n        } else {\n          return Promise.resolve(this._bodyArrayBuffer)\n        }\n      } else {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n    }\n  }\n\n  this.text = function() {\n    var rejected = consumed(this)\n    if (rejected) {\n      return rejected\n    }\n\n    if (this._bodyBlob) {\n      return readBlobAsText(this._bodyBlob)\n    } else if (this._bodyArrayBuffer) {\n      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n    } else if (this._bodyFormData) {\n      throw new Error('could not read FormData body as text')\n    } else {\n      return Promise.resolve(this._bodyText)\n    }\n  }\n\n  if (support.formData) {\n    this.formData = function() {\n      return this.text().then(decode)\n    }\n  }\n\n  this.json = function() {\n    return this.text().then(JSON.parse)\n  }\n\n  return this\n}\n\n// HTTP methods whose capitalization should be normalized\nvar methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\nfunction normalizeMethod(method) {\n  var upcased = method.toUpperCase()\n  return methods.indexOf(upcased) > -1 ? upcased : method\n}\n\nexport function Request(input, options) {\n  if (!(this instanceof Request)) {\n    throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n  }\n\n  options = options || {}\n  var body = options.body\n\n  if (input instanceof Request) {\n    if (input.bodyUsed) {\n      throw new TypeError('Already read')\n    }\n    this.url = input.url\n    this.credentials = input.credentials\n    if (!options.headers) {\n      this.headers = new Headers(input.headers)\n    }\n    this.method = input.method\n    this.mode = input.mode\n    this.signal = input.signal\n    if (!body && input._bodyInit != null) {\n      body = input._bodyInit\n      input.bodyUsed = true\n    }\n  } else {\n    this.url = String(input)\n  }\n\n  this.credentials = options.credentials || this.credentials || 'same-origin'\n  if (options.headers || !this.headers) {\n    this.headers = new Headers(options.headers)\n  }\n  this.method = normalizeMethod(options.method || this.method || 'GET')\n  this.mode = options.mode || this.mode || null\n  this.signal = options.signal || this.signal\n  this.referrer = null\n\n  if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n    throw new TypeError('Body not allowed for GET or HEAD requests')\n  }\n  this._initBody(body)\n\n  if (this.method === 'GET' || this.method === 'HEAD') {\n    if (options.cache === 'no-store' || options.cache === 'no-cache') {\n      // Search for a '_' parameter in the query string\n      var reParamSearch = /([?&])_=[^&]*/\n      if (reParamSearch.test(this.url)) {\n        // If it already exists then set the value with the current time\n        this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime())\n      } else {\n        // Otherwise add a new '_' parameter to the end with the current time\n        var reQueryString = /\\?/\n        this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime()\n      }\n    }\n  }\n}\n\nRequest.prototype.clone = function() {\n  return new Request(this, {body: this._bodyInit})\n}\n\nfunction decode(body) {\n  var form = new FormData()\n  body\n    .trim()\n    .split('&')\n    .forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n  return form\n}\n\nfunction parseHeaders(rawHeaders) {\n  var headers = new Headers()\n  // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n  // https://tools.ietf.org/html/rfc7230#section-3.2\n  var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n  // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill\n  // https://github.com/github/fetch/issues/748\n  // https://github.com/zloirock/core-js/issues/751\n  preProcessedHeaders\n    .split('\\r')\n    .map(function(header) {\n      return header.indexOf('\\n') === 0 ? header.substr(1, header.length) : header\n    })\n    .forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n  return headers\n}\n\nBody.call(Request.prototype)\n\nexport function Response(bodyInit, options) {\n  if (!(this instanceof Response)) {\n    throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n  }\n  if (!options) {\n    options = {}\n  }\n\n  this.type = 'default'\n  this.status = options.status === undefined ? 200 : options.status\n  this.ok = this.status >= 200 && this.status < 300\n  this.statusText = options.statusText === undefined ? '' : '' + options.statusText\n  this.headers = new Headers(options.headers)\n  this.url = options.url || ''\n  this._initBody(bodyInit)\n}\n\nBody.call(Response.prototype)\n\nResponse.prototype.clone = function() {\n  return new Response(this._bodyInit, {\n    status: this.status,\n    statusText: this.statusText,\n    headers: new Headers(this.headers),\n    url: this.url\n  })\n}\n\nResponse.error = function() {\n  var response = new Response(null, {status: 0, statusText: ''})\n  response.type = 'error'\n  return response\n}\n\nvar redirectStatuses = [301, 302, 303, 307, 308]\n\nResponse.redirect = function(url, status) {\n  if (redirectStatuses.indexOf(status) === -1) {\n    throw new RangeError('Invalid status code')\n  }\n\n  return new Response(null, {status: status, headers: {location: url}})\n}\n\nexport var DOMException = global.DOMException\ntry {\n  new DOMException()\n} catch (err) {\n  DOMException = function(message, name) {\n    this.message = message\n    this.name = name\n    var error = Error(message)\n    this.stack = error.stack\n  }\n  DOMException.prototype = Object.create(Error.prototype)\n  DOMException.prototype.constructor = DOMException\n}\n\nexport function fetch(input, init) {\n  return new Promise(function(resolve, reject) {\n    var request = new Request(input, init)\n\n    if (request.signal && request.signal.aborted) {\n      return reject(new DOMException('Aborted', 'AbortError'))\n    }\n\n    var xhr = new XMLHttpRequest()\n\n    function abortXhr() {\n      xhr.abort()\n    }\n\n    xhr.onload = function() {\n      var options = {\n        status: xhr.status,\n        statusText: xhr.statusText,\n        headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n      }\n      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n      var body = 'response' in xhr ? xhr.response : xhr.responseText\n      setTimeout(function() {\n        resolve(new Response(body, options))\n      }, 0)\n    }\n\n    xhr.onerror = function() {\n      setTimeout(function() {\n        reject(new TypeError('Network request failed'))\n      }, 0)\n    }\n\n    xhr.ontimeout = function() {\n      setTimeout(function() {\n        reject(new TypeError('Network request failed'))\n      }, 0)\n    }\n\n    xhr.onabort = function() {\n      setTimeout(function() {\n        reject(new DOMException('Aborted', 'AbortError'))\n      }, 0)\n    }\n\n    function fixUrl(url) {\n      try {\n        return url === '' && global.location.href ? global.location.href : url\n      } catch (e) {\n        return url\n      }\n    }\n\n    xhr.open(request.method, fixUrl(request.url), true)\n\n    if (request.credentials === 'include') {\n      xhr.withCredentials = true\n    } else if (request.credentials === 'omit') {\n      xhr.withCredentials = false\n    }\n\n    if ('responseType' in xhr) {\n      if (support.blob) {\n        xhr.responseType = 'blob'\n      } else if (\n        support.arrayBuffer &&\n        request.headers.get('Content-Type') &&\n        request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1\n      ) {\n        xhr.responseType = 'arraybuffer'\n      }\n    }\n\n    if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {\n      Object.getOwnPropertyNames(init.headers).forEach(function(name) {\n        xhr.setRequestHeader(name, normalizeValue(init.headers[name]))\n      })\n    } else {\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n    }\n\n    if (request.signal) {\n      request.signal.addEventListener('abort', abortXhr)\n\n      xhr.onreadystatechange = function() {\n        // DONE (success or failure)\n        if (xhr.readyState === 4) {\n          request.signal.removeEventListener('abort', abortXhr)\n        }\n      }\n    }\n\n    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n  })\n}\n\nfetch.polyfill = true\n\nif (!global.fetch) {\n  global.fetch = fetch\n  global.Headers = Headers\n  global.Request = Request\n  global.Response = Response\n}\n","// tslint:disable\n/**\n * MatrixALM and MatrixQMS REST API\n * Feel free to make a copy of this definition and change the url below to your instance of MatrixALM or MatrixQMS. For the authentication, create  a token for an admin to try out all the methods. Use at your own risks! Any question? ask us on https://support.matrixreq.com\n *\n * OpenAPI spec version: 2.3\n * \n *\n * NOTE: This file is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the file manually.\n */\n\nexport interface ConfigurationParameters {\n    apiKey?: string | ((name: string) => string);\n    username?: string;\n    password?: string;\n    accessToken?: string | ((name: string, scopes?: string[]) => string);\n    basePath?: string;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | ((name: string) => string);\n    /**\n     * parameter for basic security\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | ((name: string, scopes?: string[]) => string);\n    /**\n     * override base path\n     * \n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n    }\n}\n","// tslint:disable\n/**\n * MatrixALM and MatrixQMS REST API\n * Feel free to make a copy of this definition and change the url below to your instance of MatrixALM or MatrixQMS. For the authentication, create  a token for an admin to try out all the methods. Use at your own risks! Any question? ask us on https://support.matrixreq.com\n *\n * OpenAPI spec version: 2.4\n * \n *\n * NOTE: This file is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the file manually.\n */\n/// <reference types=\"node\" />\nimport * as url from \"url\";\nimport isomorphicFetch from \"isomorphic-fetch\";\nimport { Configuration } from \"./configuration\";\nconst btoa = require(\"btoa\");\n\nconst BASE_PATH = \"https://demo23.matrixreq.com/rest/1\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface FetchAPI\n */\nexport interface FetchAPI {\n    (url: string, init?: any): Promise<Response>;\n}\n\n/**\n *\n * @export\n * @interface FetchArgs\n */\nexport interface FetchArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\"\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n\n/**\n * \n * @export\n * @interface Access\n */\nexport interface Access {\n    /**\n     * \n     * @type {string}\n     * @memberof Access\n     */\n    startDate8601?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Access\n     */\n    endDate8601?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Access\n     */\n    readWrite?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Access\n     */\n    visitorOnly?: boolean;\n}\n/**\n * \n * @export\n * @interface AddFileAck\n */\nexport interface AddFileAck {\n    /**\n     * \n     * @type {number}\n     * @memberof AddFileAck\n     */\n    fileId?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof AddFileAck\n     */\n    fileFullPath?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AddFileAck\n     */\n    key?: string;\n}\n/**\n * \n * @export\n * @interface AddItemAck\n */\nexport interface AddItemAck {\n    /**\n     * \n     * @type {number}\n     * @memberof AddItemAck\n     */\n    itemId?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof AddItemAck\n     */\n    serial?: number;\n    /**\n     * \n     * @type {CleanupFail}\n     * @memberof AddItemAck\n     */\n    cleanupFail?: CleanupFail;\n}\n/**\n * \n * @export\n * @interface AuthType\n */\nexport interface AuthType {\n    /**\n     * \n     * @type {string}\n     * @memberof AuthType\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthType\n     */\n    login?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthType\n     */\n    password?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthType\n     */\n    clientIp?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AuthType\n     */\n    internalQuery?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AuthType\n     */\n    csrfOk?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AuthType\n     */\n    basicAuth?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AuthType\n     */\n    oAuth?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthType\n     */\n    token?: string;\n    /**\n     * \n     * @type {VerifiedAuth}\n     * @memberof AuthType\n     */\n    verifiedAuth?: VerifiedAuth;\n}\n/**\n * \n * @export\n * @interface CalendarType\n */\nexport interface CalendarType {\n    /**\n     * \n     * @type {string}\n     * @memberof CalendarType\n     */\n    dateString?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CalendarType\n     */\n    auditIdMin?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CalendarType\n     */\n    auditIdMax?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CalendarType\n     */\n    nbChanges?: number;\n}\n/**\n * \n * @export\n * @interface CategoryAndRoot\n */\nexport interface CategoryAndRoot {\n    /**\n     * \n     * @type {string}\n     * @memberof CategoryAndRoot\n     */\n    category?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CategoryAndRoot\n     */\n    rootFolder?: string;\n}\n/**\n * \n * @export\n * @interface CategoryAndSettingListType\n */\nexport interface CategoryAndSettingListType {\n    /**\n     * \n     * @type {Array<SettingType>}\n     * @memberof CategoryAndSettingListType\n     */\n    settingList?: Array<SettingType>;\n    /**\n     * \n     * @type {number}\n     * @memberof CategoryAndSettingListType\n     */\n    categoryId?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof CategoryAndSettingListType\n     */\n    categoryShort?: string;\n}\n/**\n * \n * @export\n * @interface CategoryExtendedListType\n */\nexport interface CategoryExtendedListType {\n    /**\n     * \n     * @type {Array<CategoryExtendedType>}\n     * @memberof CategoryExtendedListType\n     */\n    categoryExtended?: Array<CategoryExtendedType>;\n}\n/**\n * \n * @export\n * @interface CategoryExtendedType\n */\nexport interface CategoryExtendedType {\n    /**\n     * \n     * @type {CategoryType}\n     * @memberof CategoryExtendedType\n     */\n    category?: CategoryType;\n    /**\n     * \n     * @type {FieldListType}\n     * @memberof CategoryExtendedType\n     */\n    fieldList?: FieldListType;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof CategoryExtendedType\n     */\n    enable?: Array<string>;\n}\n/**\n * \n * @export\n * @interface CategoryFull\n */\nexport interface CategoryFull {\n    /**\n     * \n     * @type {ProjectType}\n     * @memberof CategoryFull\n     */\n    project?: ProjectType;\n    /**\n     * \n     * @type {CategoryType}\n     * @memberof CategoryFull\n     */\n    categ?: CategoryType;\n    /**\n     * \n     * @type {TrimFolder}\n     * @memberof CategoryFull\n     */\n    folder?: TrimFolder;\n    /**\n     * \n     * @type {Array<RestField>}\n     * @memberof CategoryFull\n     */\n    fieldList?: Array<RestField>;\n}\n/**\n * \n * @export\n * @interface CategoryType\n */\nexport interface CategoryType {\n    /**\n     * \n     * @type {number}\n     * @memberof CategoryType\n     */\n    id?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof CategoryType\n     */\n    label?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CategoryType\n     */\n    shortLabel?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CategoryType\n     */\n    maxSerial?: number;\n}\n/**\n * \n * @export\n * @interface CheckPasswordAck\n */\nexport interface CheckPasswordAck {\n    /**\n     * \n     * @type {string}\n     * @memberof CheckPasswordAck\n     */\n    actualLogin?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CheckPasswordAck\n     */\n    userId?: number;\n    /**\n     * \n     * @type {UserType}\n     * @memberof CheckPasswordAck\n     */\n    userDetails?: UserType;\n    /**\n     * \n     * @type {number}\n     * @memberof CheckPasswordAck\n     */\n    maxAge?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CheckPasswordAck\n     */\n    singleSignOn?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CheckPasswordAck\n     */\n    superAdmin?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CheckPasswordAck\n     */\n    customerAdmin?: boolean;\n}\n/**\n * \n * @export\n * @interface CleanupFail\n */\nexport interface CleanupFail {\n    /**\n     * \n     * @type {Array<CleanupField>}\n     * @memberof CleanupFail\n     */\n    fields?: Array<CleanupField>;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CleanupFail\n     */\n    titleCleanedUp?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof CleanupFail\n     */\n    titleBeforeCleanup?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CleanupFail\n     */\n    titleAfterCleanup?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CleanupFail\n     */\n    itemRef?: string;\n}\n/**\n * \n * @export\n * @interface CleanupField\n */\nexport interface CleanupField {\n    /**\n     * \n     * @type {number}\n     * @memberof CleanupField\n     */\n    fieldId?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof CleanupField\n     */\n    fieldLabel?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CleanupField\n     */\n    fieldType?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CleanupField\n     */\n    beforeCleanup?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CleanupField\n     */\n    afterCleanup?: string;\n}\n/**\n * \n * @export\n * @interface CleanupSetting\n */\nexport interface CleanupSetting {\n    /**\n     * \n     * @type {string}\n     * @memberof CleanupSetting\n     */\n    logger?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof CleanupSetting\n     */\n    tags?: Array<string>;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof CleanupSetting\n     */\n    attributes?: { [key: string]: any; };\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof CleanupSetting\n     */\n    protocols?: { [key: string]: any; };\n    /**\n     * \n     * @type {Array<Protocol>}\n     * @memberof CleanupSetting\n     */\n    protocolAttributes?: Array<Protocol>;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof CleanupSetting\n     */\n    enforcedAttributes?: { [key: string]: any; };\n    /**\n     * \n     * @type {boolean}\n     * @memberof CleanupSetting\n     */\n    cleanup?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof CleanupSetting\n     */\n    JSON_SINGLE_QUOTE?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CleanupSetting\n     */\n    JSON_NO_CLEAUP_SINGLE_QUOTE?: string;\n}\n/**\n * \n * @export\n * @interface CopyItemAck\n */\nexport interface CopyItemAck {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof CopyItemAck\n     */\n    itemsAndFoldersCreated?: Array<string>;\n}\n/**\n * \n * @export\n * @interface CreateReportJobAck\n */\nexport interface CreateReportJobAck {\n    /**\n     * \n     * @type {number}\n     * @memberof CreateReportJobAck\n     */\n    jobId?: number;\n}\n/**\n * \n * @export\n * @interface CrossProjectLink\n */\nexport interface CrossProjectLink {\n    /**\n     * \n     * @type {OneItem}\n     * @memberof CrossProjectLink\n     */\n    upItem?: OneItem;\n    /**\n     * \n     * @type {OneItem}\n     * @memberof CrossProjectLink\n     */\n    downItem?: OneItem;\n    /**\n     * \n     * @type {string}\n     * @memberof CrossProjectLink\n     */\n    relation?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CrossProjectLink\n     */\n    creationDate?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CrossProjectLink\n     */\n    importHistoryId?: number;\n}\n/**\n * \n * @export\n * @interface ExceptionItemIso\n */\nexport interface ExceptionItemIso {\n    /**\n     * \n     * @type {string}\n     * @memberof ExceptionItemIso\n     */\n    date?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExceptionItemIso\n     */\n    text?: string;\n}\n/**\n * \n * @export\n * @interface ExceptionStatus\n */\nexport interface ExceptionStatus {\n    /**\n     * \n     * @type {number}\n     * @memberof ExceptionStatus\n     */\n    nbExceptionsStillStart?: number;\n    /**\n     * \n     * @type {Array<ExceptionItemIso>}\n     * @memberof ExceptionStatus\n     */\n    lastHourExceptions?: Array<ExceptionItemIso>;\n}\n/**\n * \n * @export\n * @interface ExecuteParam\n */\nexport interface ExecuteParam {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ExecuteParam\n     */\n    input?: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof ExecuteParam\n     */\n    output?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExecuteParam\n     */\n    parentFolder?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExecuteParam\n     */\n    reason?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ExecuteParam\n     */\n    filter?: Array<string>;\n    /**\n     * \n     * @type {Array<FieldAndValue>}\n     * @memberof ExecuteParam\n     */\n    itemPresets?: Array<FieldAndValue>;\n    /**\n     * \n     * @type {Array<FromTo>}\n     * @memberof ExecuteParam\n     */\n    itemFieldMapping?: Array<FromTo>;\n    /**\n     * \n     * @type {number}\n     * @memberof ExecuteParam\n     */\n    single?: number;\n}\n/**\n * \n * @export\n * @interface ExecuteTestErrorDetails\n */\nexport interface ExecuteTestErrorDetails {\n    /**\n     * \n     * @type {string}\n     * @memberof ExecuteTestErrorDetails\n     */\n    key?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ExecuteTestErrorDetails\n     */\n    errors?: Array<string>;\n}\n/**\n * \n * @export\n * @interface ExportItemsAck\n */\nexport interface ExportItemsAck {\n    /**\n     * \n     * @type {number}\n     * @memberof ExportItemsAck\n     */\n    jobId?: number;\n}\n/**\n * \n * @export\n * @interface FancyFolder\n */\nexport interface FancyFolder {\n    /**\n     * \n     * @type {Array<FancyLeaf>}\n     * @memberof FancyFolder\n     */\n    children?: Array<FancyLeaf>;\n    /**\n     * \n     * @type {string}\n     * @memberof FancyFolder\n     */\n    icon?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FancyFolder\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FancyFolder\n     */\n    title?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FancyFolder\n     */\n    type?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof FancyFolder\n     */\n    isUnselected?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof FancyFolder\n     */\n    version?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FancyFolder\n     */\n    mode?: string;\n}\n/**\n * \n * @export\n * @interface FancyLeaf\n */\nexport interface FancyLeaf {\n    /**\n     * \n     * @type {string}\n     * @memberof FancyLeaf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FancyLeaf\n     */\n    title?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FancyLeaf\n     */\n    type?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof FancyLeaf\n     */\n    isUnselected?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof FancyLeaf\n     */\n    version?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FancyLeaf\n     */\n    mode?: string;\n}\n/**\n * \n * @export\n * @interface FieldAndValue\n */\nexport interface FieldAndValue {\n    /**\n     * \n     * @type {number}\n     * @memberof FieldAndValue\n     */\n    field?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof FieldAndValue\n     */\n    value?: string;\n}\n/**\n * \n * @export\n * @interface FieldListType\n */\nexport interface FieldListType {\n    /**\n     * \n     * @type {Array<FieldType>}\n     * @memberof FieldListType\n     */\n    field?: Array<FieldType>;\n}\n/**\n * \n * @export\n * @interface FieldType\n */\nexport interface FieldType {\n    /**\n     * \n     * @type {number}\n     * @memberof FieldType\n     */\n    id?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof FieldType\n     */\n    order?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof FieldType\n     */\n    fieldType?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FieldType\n     */\n    parameter?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FieldType\n     */\n    label?: string;\n}\n/**\n * \n * @export\n * @interface FieldValListType\n */\nexport interface FieldValListType {\n    /**\n     * \n     * @type {Array<FieldValType>}\n     * @memberof FieldValListType\n     */\n    fieldVal?: Array<FieldValType>;\n}\n/**\n * \n * @export\n * @interface FieldValType\n */\nexport interface FieldValType {\n    /**\n     * \n     * @type {number}\n     * @memberof FieldValType\n     */\n    id?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof FieldValType\n     */\n    value?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof FieldValType\n     */\n    hide?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof FieldValType\n     */\n    restricted?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof FieldValType\n     */\n    fieldName?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FieldValType\n     */\n    fieldType?: string;\n}\n/**\n * \n * @export\n * @interface FolderAnswer\n */\nexport interface FolderAnswer {\n    /**\n     * \n     * @type {string}\n     * @memberof FolderAnswer\n     */\n    folder?: string;\n    /**\n     * \n     * @type {Array<ExecuteTestErrorDetails>}\n     * @memberof FolderAnswer\n     */\n    xtcInError?: Array<ExecuteTestErrorDetails>;\n}\n/**\n * \n * @export\n * @interface FromTo\n */\nexport interface FromTo {\n    /**\n     * \n     * @type {number}\n     * @memberof FromTo\n     */\n    fromId?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof FromTo\n     */\n    toId?: number;\n}\n/**\n * \n * @export\n * @interface FromToString\n */\nexport interface FromToString {\n    /**\n     * \n     * @type {string}\n     * @memberof FromToString\n     */\n    from?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FromToString\n     */\n    to?: string;\n}\n/**\n * \n * @export\n * @interface GetAccessAck\n */\nexport interface GetAccessAck {\n    /**\n     * \n     * @type {Array<UserPermissionType>}\n     * @memberof GetAccessAck\n     */\n    userPermission?: Array<UserPermissionType>;\n    /**\n     * \n     * @type {Array<GroupPermissionType>}\n     * @memberof GetAccessAck\n     */\n    groupPermission?: Array<GroupPermissionType>;\n}\n/**\n * \n * @export\n * @interface GetDateAck\n */\nexport interface GetDateAck {\n    /**\n     * \n     * @type {string}\n     * @memberof GetDateAck\n     */\n    dateIso8601?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetDateAck\n     */\n    timeUserFormat?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetDateAck\n     */\n    dateUserFormat?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetDateAck\n     */\n    timeCustomerFormat?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetDateAck\n     */\n    dateCustomerFormat?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetDateAck\n     */\n    dateformat?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetDateAck\n     */\n    timeformat?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetDateAck\n     */\n    timeZone?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetDateAck\n     */\n    timeZoneDesc?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetDateAck\n     */\n    customerDateformat?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetDateAck\n     */\n    customerTimeformat?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetDateAck\n     */\n    customerTimezone?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetDateAck\n     */\n    customerTimezoneDesc?: string;\n}\n/**\n * \n * @export\n * @interface GetGroupListAck\n */\nexport interface GetGroupListAck {\n    /**\n     * \n     * @type {Array<GroupType>}\n     * @memberof GetGroupListAck\n     */\n    groups?: Array<GroupType>;\n}\n/**\n * \n * @export\n * @interface GetHmlBlobInput\n */\nexport interface GetHmlBlobInput {\n    /**\n     * \n     * @type {string}\n     * @memberof GetHmlBlobInput\n     */\n    htmlToClean?: string;\n}\n/**\n * \n * @export\n * @interface GetHtmlBlob\n */\nexport interface GetHtmlBlob {\n    /**\n     * \n     * @type {AuthType}\n     * @memberof GetHtmlBlob\n     */\n    auth?: AuthType;\n    /**\n     * \n     * @type {number}\n     * @memberof GetHtmlBlob\n     */\n    projectId?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof GetHtmlBlob\n     */\n    inputHtml?: string;\n}\n/**\n * \n * @export\n * @interface GetItemListAck\n */\nexport interface GetItemListAck {\n    /**\n     * \n     * @type {string}\n     * @memberof GetItemListAck\n     */\n    docDateCustomerFormat?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetItemListAck\n     */\n    docDate?: string;\n    /**\n     * \n     * @type {Array<ItemSimpleType>}\n     * @memberof GetItemListAck\n     */\n    items?: Array<ItemSimpleType>;\n    /**\n     * \n     * @type {Array<ItemSimpleType>}\n     * @memberof GetItemListAck\n     */\n    secondaryItems?: Array<ItemSimpleType>;\n}\n/**\n * \n * @export\n * @interface GetMonitorAck\n */\nexport interface GetMonitorAck {\n    /**\n     * \n     * @type {Array<MonitorAction>}\n     * @memberof GetMonitorAck\n     */\n    reminderActions?: Array<MonitorAction>;\n    /**\n     * \n     * @type {string}\n     * @memberof GetMonitorAck\n     */\n    firstLoginDate?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetMonitorAck\n     */\n    lastLoginDate?: string;\n}\n/**\n * \n * @export\n * @interface GetProjectFileListAck\n */\nexport interface GetProjectFileListAck {\n    /**\n     * \n     * @type {Array<ProjectFileType>}\n     * @memberof GetProjectFileListAck\n     */\n    projectFile?: Array<ProjectFileType>;\n}\n/**\n * \n * @export\n * @interface GetProjectSettingAck\n */\nexport interface GetProjectSettingAck {\n    /**\n     * \n     * @type {Array<SettingType>}\n     * @memberof GetProjectSettingAck\n     */\n    settingList?: Array<SettingType>;\n    /**\n     * \n     * @type {Array<CategoryAndSettingListType>}\n     * @memberof GetProjectSettingAck\n     */\n    categorySettingList?: Array<CategoryAndSettingListType>;\n    /**\n     * \n     * @type {Array<PluginSetting>}\n     * @memberof GetProjectSettingAck\n     */\n    pluginSettingsList?: Array<PluginSetting>;\n}\n/**\n * \n * @export\n * @interface GetProjectStructAck\n */\nexport interface GetProjectStructAck {\n    /**\n     * \n     * @type {CategoryExtendedListType}\n     * @memberof GetProjectStructAck\n     */\n    categoryList?: CategoryExtendedListType;\n    /**\n     * \n     * @type {string}\n     * @memberof GetProjectStructAck\n     */\n    label?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetProjectStructAck\n     */\n    shortLabel?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetProjectStructAck\n     */\n    acl?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GetProjectStructAck\n     */\n    aclExplanations?: string;\n}\n/**\n * \n * @export\n * @interface GetReportsAck\n */\nexport interface GetReportsAck {\n    /**\n     * \n     * @type {Array<ReportType>}\n     * @memberof GetReportsAck\n     */\n    reportList?: Array<ReportType>;\n}\n/**\n * \n * @export\n * @interface GetSettingAck\n */\nexport interface GetSettingAck {\n    /**\n     * \n     * @type {Array<SettingType>}\n     * @memberof GetSettingAck\n     */\n    settingList?: Array<SettingType>;\n}\n/**\n * \n * @export\n * @interface GetTodosAck\n */\nexport interface GetTodosAck {\n    /**\n     * \n     * @type {Array<Todo>}\n     * @memberof GetTodosAck\n     */\n    todos?: Array<Todo>;\n    /**\n     * \n     * @type {Array<TodoCount>}\n     * @memberof GetTodosAck\n     */\n    todoCounts?: Array<TodoCount>;\n}\n/**\n * \n * @export\n * @interface GetUserListAck\n */\nexport interface GetUserListAck {\n    /**\n     * \n     * @type {Array<UserType>}\n     * @memberof GetUserListAck\n     */\n    user?: Array<UserType>;\n    /**\n     * \n     * @type {number}\n     * @memberof GetUserListAck\n     */\n    needDoublePassword?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof GetUserListAck\n     */\n    passwordExpirationDays?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof GetUserListAck\n     */\n    passwordStrength?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof GetUserListAck\n     */\n    maxUsers?: number;\n}\n/**\n * \n * @export\n * @interface GroupPermissionType\n */\nexport interface GroupPermissionType {\n    /**\n     * \n     * @type {string}\n     * @memberof GroupPermissionType\n     */\n    groupName?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof GroupPermissionType\n     */\n    permission?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof GroupPermissionType\n     */\n    groupId?: number;\n    /**\n     * \n     * @type {Array<UserTypeSimple>}\n     * @memberof GroupPermissionType\n     */\n    membership?: Array<UserTypeSimple>;\n}\n/**\n * \n * @export\n * @interface GroupType\n */\nexport interface GroupType {\n    /**\n     * \n     * @type {string}\n     * @memberof GroupType\n     */\n    groupName?: string;\n    /**\n     * \n     * @type {Array<UserType>}\n     * @memberof GroupType\n     */\n    membership?: Array<UserType>;\n    /**\n     * \n     * @type {Array<ProjectPermissionType>}\n     * @memberof GroupType\n     */\n    permissions?: Array<ProjectPermissionType>;\n    /**\n     * \n     * @type {number}\n     * @memberof GroupType\n     */\n    groupId?: number;\n}\n/**\n * \n * @export\n * @interface HtmlCompareResult\n */\nexport interface HtmlCompareResult {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof HtmlCompareResult\n     */\n    html?: Array<string>;\n    /**\n     * \n     * @type {Array<Array<string>>}\n     * @memberof HtmlCompareResult\n     */\n    htmlMultiple?: Array<Array<string>>;\n    /**\n     * \n     * @type {string}\n     * @memberof HtmlCompareResult\n     */\n    spanElement?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof HtmlCompareResult\n     */\n    addClass?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof HtmlCompareResult\n     */\n    removeClass?: string;\n}\n/**\n * \n * @export\n * @interface HtmlTestCleanup\n */\nexport interface HtmlTestCleanup {\n    /**\n     * \n     * @type {Array<CleanupFail>}\n     * @memberof HtmlTestCleanup\n     */\n    cleanups?: Array<CleanupFail>;\n}\n/**\n * \n * @export\n * @interface IdParent\n */\nexport interface IdParent {\n    /**\n     * \n     * @type {string}\n     * @memberof IdParent\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof IdParent\n     */\n    parent?: string;\n}\n/**\n * \n * @export\n * @interface ItemHistoryListType\n */\nexport interface ItemHistoryListType {\n    /**\n     * \n     * @type {Array<ItemHistoryType>}\n     * @memberof ItemHistoryListType\n     */\n    itemHistory?: Array<ItemHistoryType>;\n}\n/**\n * \n * @export\n * @interface ItemHistoryType\n */\nexport interface ItemHistoryType {\n    /**\n     * \n     * @type {number}\n     * @memberof ItemHistoryType\n     */\n    version?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ItemHistoryType\n     */\n    createdAt?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ItemHistoryType\n     */\n    createdAtUserFormat?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ItemHistoryType\n     */\n    deletedAt?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ItemHistoryType\n     */\n    deletedAtUserFormat?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ItemHistoryType\n     */\n    title?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ItemHistoryType\n     */\n    createdByUserId?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ItemHistoryType\n     */\n    createdByUserLogin?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ItemHistoryType\n     */\n    reason?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ItemHistoryType\n     */\n    auditId?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ItemHistoryType\n     */\n    auditAction?: string;\n}\n/**\n * \n * @export\n * @interface ItemItemBody\n */\nexport interface ItemItemBody {\n    /**\n     * Specify new title for the item -- if not there, keep the old title\n     * @type {string}\n     * @memberof ItemItemBody\n     */\n    title?: string;\n    /**\n     * \n     * @type {{ [key: string]: string; }}\n     * @memberof ItemItemBody\n     */\n    itemProperties?: { [key: string]: string; };\n    /**\n     * (optional) List of labels currently applied to this element. If none is specified, will consider there are none. Should be sent as a comma-delimited list of strings\n     * @type {string}\n     * @memberof ItemItemBody\n     */\n    labels?: string;\n    /**\n     * (optional) Specify a new verb for the audit action. Defaults to edit\n     * @type {string}\n     * @memberof ItemItemBody\n     */\n    auditAction?: string;\n    /**\n     * (optional) Name of a new folder to move the item into (exclusive from title and fx arguments)\n     * @type {string}\n     * @memberof ItemItemBody\n     */\n    newFolder?: string;\n    /**\n     * (optional) Indicates a new position within the newfolder. If newFolder is not specified, only changes the position. Exclusive of title and fx arguments. Position is an integer starting at 1\n     * @type {number}\n     * @memberof ItemItemBody\n     */\n    newPosition?: number;\n    /**\n     * The reason why the user is doing this\n     * @type {string}\n     * @memberof ItemItemBody\n     */\n    reason: string;\n    /**\n     * (optional) A filter\n     * @type {string}\n     * @memberof ItemItemBody\n     */\n    filter?: string;\n    /**\n     * (optional) Comma-delimited (%2C)list of references to up items\n     * @type {string}\n     * @memberof ItemItemBody\n     */\n    linksUp?: string;\n    /**\n     * (optional) Comma-delimited (%2C)list of references to down items\n     * @type {string}\n     * @memberof ItemItemBody\n     */\n    linksDown?: string;\n    /**\n     * (optional) will not make the change if the current version is not that one\n     * @type {number}\n     * @memberof ItemItemBody\n     */\n    currentVersion?: number;\n    /**\n     * (optional) when set to 1 says that the only fields to change are those passed\n     * @type {number}\n     * @memberof ItemItemBody\n     */\n    onlyThoseFields?: number;\n    /**\n     * (optional) when set to 1 says that the only labels to change are those passed. To remove a label in this case, prefix it with minus\n     * @type {number}\n     * @memberof ItemItemBody\n     */\n    onlyThoseLabels?: number;\n    /**\n     * (optional) when set to 1 (default) says that the call will fail if any HTML cleanup is involved. With 0 it will clean and not fail\n     * @type {number}\n     * @memberof ItemItemBody\n     */\n    failOnCleanup?: number;\n    /**\n     * (optional) when set to 0 (default) says that linksUp and linksDown only append new links to the existing links in the database\n     * @type {number}\n     * @memberof ItemItemBody\n     */\n    linksAreComplete?: number;\n}\n/**\n * \n * @export\n * @interface ItemSimpleType\n */\nexport interface ItemSimpleType {\n    /**\n     * \n     * @type {string}\n     * @memberof ItemSimpleType\n     */\n    author?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ItemSimpleType\n     */\n    birth?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ItemSimpleType\n     */\n    ref?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ItemSimpleType\n     */\n    title?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ItemSimpleType\n     */\n    version?: number;\n}\n/**\n * \n * @export\n * @interface JobFileWithUrl\n */\nexport interface JobFileWithUrl {\n    /**\n     * \n     * @type {string}\n     * @memberof JobFileWithUrl\n     */\n    restUrl?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof JobFileWithUrl\n     */\n    jobFileId?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof JobFileWithUrl\n     */\n    visibleName?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JobFileWithUrl\n     */\n    internalPath?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JobFileWithUrl\n     */\n    mimeType?: string;\n}\n/**\n * \n * @export\n * @interface JobWithUrl\n */\nexport interface JobWithUrl {\n    /**\n     * \n     * @type {string}\n     * @memberof JobWithUrl\n     */\n    getJobUrl?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof JobWithUrl\n     */\n    jobId?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof JobWithUrl\n     */\n    progress?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof JobWithUrl\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JobWithUrl\n     */\n    jobBirth?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JobWithUrl\n     */\n    jobLastWrite?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JobWithUrl\n     */\n    project?: string;\n}\n/**\n * \n * @export\n * @interface JobsStatusWithUrl\n */\nexport interface JobsStatusWithUrl {\n    /**\n     * \n     * @type {number}\n     * @memberof JobsStatusWithUrl\n     */\n    progress?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof JobsStatusWithUrl\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JobsStatusWithUrl\n     */\n    visibleName?: string;\n    /**\n     * \n     * @type {Array<JobFileWithUrl>}\n     * @memberof JobsStatusWithUrl\n     */\n    jobFile?: Array<JobFileWithUrl>;\n}\n/**\n * \n * @export\n * @interface JobsWithUrl\n */\nexport interface JobsWithUrl {\n    /**\n     * \n     * @type {number}\n     * @memberof JobsWithUrl\n     */\n    runningJobs?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof JobsWithUrl\n     */\n    maxRunningJobs?: number;\n    /**\n     * \n     * @type {Array<JobWithUrl>}\n     * @memberof JobsWithUrl\n     */\n    jobs?: Array<JobWithUrl>;\n}\n/**\n * \n * @export\n * @interface LabelChange\n */\nexport interface LabelChange {\n    /**\n     * \n     * @type {string}\n     * @memberof LabelChange\n     */\n    label?: string;\n    /**\n     * \n     * @type {Array<LabelChangeDetail>}\n     * @memberof LabelChange\n     */\n    set?: Array<LabelChangeDetail>;\n    /**\n     * \n     * @type {Array<LabelChangeDetail>}\n     * @memberof LabelChange\n     */\n    reset?: Array<LabelChangeDetail>;\n}\n/**\n * \n * @export\n * @interface LabelChangeDetail\n */\nexport interface LabelChangeDetail {\n    /**\n     * \n     * @type {number}\n     * @memberof LabelChangeDetail\n     */\n    version?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelChangeDetail\n     */\n    dateIso?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelChangeDetail\n     */\n    dateUser?: string;\n}\n/**\n * \n * @export\n * @interface LabelEntry\n */\nexport interface LabelEntry {\n    /**\n     * \n     * @type {string}\n     * @memberof LabelEntry\n     */\n    itemRef?: string;\n    /**\n     * \n     * @type {Array<LabelChange>}\n     * @memberof LabelEntry\n     */\n    labels?: Array<LabelChange>;\n}\n/**\n * \n * @export\n * @interface LabelHistory\n */\nexport interface LabelHistory {\n    /**\n     * \n     * @type {Array<LabelEntry>}\n     * @memberof LabelHistory\n     */\n    entries?: Array<LabelEntry>;\n}\n/**\n * \n * @export\n * @interface LicenseStatus\n */\nexport interface LicenseStatus {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof LicenseStatus\n     */\n    modules?: Array<string>;\n    /**\n     * \n     * @type {number}\n     * @memberof LicenseStatus\n     */\n    maxUsers?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof LicenseStatus\n     */\n    currentRWUsers?: number;\n    /**\n     * \n     * @type {Array<LicenseUser>}\n     * @memberof LicenseStatus\n     */\n    licenseUsers?: Array<LicenseUser>;\n}\n/**\n * \n * @export\n * @interface LicenseUser\n */\nexport interface LicenseUser {\n    /**\n     * \n     * @type {number}\n     * @memberof LicenseUser\n     */\n    userId?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof LicenseUser\n     */\n    login?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LicenseUser\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LicenseUser\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LicenseUser\n     */\n    level?: string;\n}\n/**\n * \n * @export\n * @interface ListProjectAndSettings\n */\nexport interface ListProjectAndSettings {\n    /**\n     * \n     * @type {string}\n     * @memberof ListProjectAndSettings\n     */\n    currentUser?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ListProjectAndSettings\n     */\n    customerAdmin?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ListProjectAndSettings\n     */\n    superAdmin?: number;\n    /**\n     * \n     * @type {GetDateAck}\n     * @memberof ListProjectAndSettings\n     */\n    dateInfo?: GetDateAck;\n    /**\n     * \n     * @type {Array<SettingType>}\n     * @memberof ListProjectAndSettings\n     */\n    customerSettings?: Array<SettingType>;\n    /**\n     * \n     * @type {MatrixLicense}\n     * @memberof ListProjectAndSettings\n     */\n    license?: MatrixLicense;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ListProjectAndSettings\n     */\n    readWriteUsers?: Array<string>;\n    /**\n     * \n     * @type {Array<UserType>}\n     * @memberof ListProjectAndSettings\n     */\n    allUsers?: Array<UserType>;\n    /**\n     * \n     * @type {string}\n     * @memberof ListProjectAndSettings\n     */\n    licenseStatus?: string;\n    /**\n     * \n     * @type {Array<TodoCount>}\n     * @memberof ListProjectAndSettings\n     */\n    todoCounts?: Array<TodoCount>;\n    /**\n     * \n     * @type {Array<Todo>}\n     * @memberof ListProjectAndSettings\n     */\n    allTodos?: Array<Todo>;\n    /**\n     * \n     * @type {Array<SettingType>}\n     * @memberof ListProjectAndSettings\n     */\n    currentUserSettings?: Array<SettingType>;\n    /**\n     * \n     * @type {Array<MainAndBranch>}\n     * @memberof ListProjectAndSettings\n     */\n    branches?: Array<MainAndBranch>;\n    /**\n     * \n     * @type {string}\n     * @memberof ListProjectAndSettings\n     */\n    serviceEmail?: string;\n    /**\n     * \n     * @type {Array<ProjectType>}\n     * @memberof ListProjectAndSettings\n     */\n    project?: Array<ProjectType>;\n    /**\n     * \n     * @type {string}\n     * @memberof ListProjectAndSettings\n     */\n    serverVersion?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListProjectAndSettings\n     */\n    baseUrl?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ListProjectAndSettings\n     */\n    restUrl?: string;\n}\n/**\n * \n * @export\n * @interface LogLevel\n */\nexport interface LogLevel {\n    /**\n     * \n     * @type {string}\n     * @memberof LogLevel\n     */\n    level?: string;\n}\n/**\n * \n * @export\n * @interface MainAndBranch\n */\nexport interface MainAndBranch {\n    /**\n     * \n     * @type {string}\n     * @memberof MainAndBranch\n     */\n    mainline?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MainAndBranch\n     */\n    branch?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MainAndBranch\n     */\n    user?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MainAndBranch\n     */\n    branchDateTime?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MainAndBranch\n     */\n    branchDateTimeUser?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof MainAndBranch\n     */\n    withHistory?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof MainAndBranch\n     */\n    branchUntilTag?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MainAndBranch\n     */\n    lastMergeDatetime?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MainAndBranch\n     */\n    lastMergeDatetimeUser?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MainAndBranch\n     */\n    lastMergeUser?: string;\n}\n/**\n * \n * @export\n * @interface MatrixLicense\n */\nexport interface MatrixLicense {\n    /**\n     * \n     * @type {string}\n     * @memberof MatrixLicense\n     */\n    logger?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof MatrixLicense\n     */\n    licenseVersion?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof MatrixLicense\n     */\n    customerName?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof MatrixLicense\n     */\n    customerId?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof MatrixLicense\n     */\n    customerEcommerceId?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof MatrixLicense\n     */\n    customerEmail?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MatrixLicense\n     */\n    customerPhone?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof MatrixLicense\n     */\n    maxReadWrite?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof MatrixLicense\n     */\n    maxReadOnly?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof MatrixLicense\n     */\n    maxVisitors?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof MatrixLicense\n     */\n    maxTotalUsers?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof MatrixLicense\n     */\n    validTo?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MatrixLicense\n     */\n    productName?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof MatrixLicense\n     */\n    options?: Array<string>;\n    /**\n     * \n     * @type {number}\n     * @memberof MatrixLicense\n     */\n    VERSION?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof MatrixLicense\n     */\n    MAX_USERS?: number;\n}\n/**\n * \n * @export\n * @interface MergeAction\n */\nexport interface MergeAction {\n    /**\n     * \n     * @type {string}\n     * @memberof MergeAction\n     */\n    action?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MergeAction\n     */\n    branchItem?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MergeAction\n     */\n    branchItem2?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MergeAction\n     */\n    mainlineItem?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MergeAction\n     */\n    mainlineItem2?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MergeAction\n     */\n    mainlineFolder?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MergeAction\n     */\n    request?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MergeAction\n     */\n    error?: string;\n}\n/**\n * \n * @export\n * @interface MergeEntry\n */\nexport interface MergeEntry {\n    /**\n     * \n     * @type {number}\n     * @memberof MergeEntry\n     */\n    id?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof MergeEntry\n     */\n    user?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MergeEntry\n     */\n    mainlineProject?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MergeEntry\n     */\n    branchProject?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MergeEntry\n     */\n    date?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MergeEntry\n     */\n    dateUser?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MergeEntry\n     */\n    comments?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof MergeEntry\n     */\n    mainlineProjectId?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof MergeEntry\n     */\n    branchProjectId?: number;\n    /**\n     * \n     * @type {Array<MergeAction>}\n     * @memberof MergeEntry\n     */\n    details?: Array<MergeAction>;\n}\n/**\n * \n * @export\n * @interface MergeHistory\n */\nexport interface MergeHistory {\n    /**\n     * \n     * @type {Array<MergeEntry>}\n     * @memberof MergeHistory\n     */\n    entries?: Array<MergeEntry>;\n}\n/**\n * \n * @export\n * @interface MergeInfo\n */\nexport interface MergeInfo {\n    /**\n     * \n     * @type {MergeInfoPoint}\n     * @memberof MergeInfo\n     */\n    branchBase?: MergeInfoPoint;\n    /**\n     * \n     * @type {MergeInfoPoint}\n     * @memberof MergeInfo\n     */\n    branchNow?: MergeInfoPoint;\n    /**\n     * \n     * @type {MergeInfoPoint}\n     * @memberof MergeInfo\n     */\n    mainlineBase?: MergeInfoPoint;\n    /**\n     * \n     * @type {MergeInfoPoint}\n     * @memberof MergeInfo\n     */\n    mainlineNow?: MergeInfoPoint;\n    /**\n     * \n     * @type {Array<MergeItemLink>}\n     * @memberof MergeInfo\n     */\n    linksAdded?: Array<MergeItemLink>;\n    /**\n     * \n     * @type {Array<MergeItemLink>}\n     * @memberof MergeInfo\n     */\n    linksDifferent?: Array<MergeItemLink>;\n    /**\n     * \n     * @type {Array<MergeItemLink>}\n     * @memberof MergeInfo\n     */\n    linksDeleted?: Array<MergeItemLink>;\n}\n/**\n * \n * @export\n * @interface MergeInfoPoint\n */\nexport interface MergeInfoPoint {\n    /**\n     * \n     * @type {string}\n     * @memberof MergeInfoPoint\n     */\n    project?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MergeInfoPoint\n     */\n    date?: string;\n    /**\n     * \n     * @type {Array<MergeItem>}\n     * @memberof MergeInfoPoint\n     */\n    items?: Array<MergeItem>;\n}\n/**\n * \n * @export\n * @interface MergeItem\n */\nexport interface MergeItem {\n    /**\n     * \n     * @type {string}\n     * @memberof MergeItem\n     */\n    itemRef?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof MergeItem\n     */\n    version?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof MergeItem\n     */\n    title?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MergeItem\n     */\n    parentFolder?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof MergeItem\n     */\n    nbMoveSinceV1?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof MergeItem\n     */\n    itemId?: number;\n}\n/**\n * \n * @export\n * @interface MergeItemLink\n */\nexport interface MergeItemLink {\n    /**\n     * \n     * @type {string}\n     * @memberof MergeItemLink\n     */\n    upItemRef?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MergeItemLink\n     */\n    downItemRef?: string;\n}\n/**\n * \n * @export\n * @interface MergeParam\n */\nexport interface MergeParam {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof MergeParam\n     */\n    copy?: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof MergeParam\n     */\n    conflicted?: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof MergeParam\n     */\n    _delete?: Array<string>;\n    /**\n     * \n     * @type {Array<FromToString>}\n     * @memberof MergeParam\n     */\n    addLinks?: Array<FromToString>;\n    /**\n     * \n     * @type {Array<FromToString>}\n     * @memberof MergeParam\n     */\n    removeLinks?: Array<FromToString>;\n    /**\n     * \n     * @type {Array<IdParent>}\n     * @memberof MergeParam\n     */\n    move?: Array<IdParent>;\n    /**\n     * \n     * @type {number}\n     * @memberof MergeParam\n     */\n    push?: number;\n}\n/**\n * \n * @export\n * @interface MonitorAction\n */\nexport interface MonitorAction {\n    /**\n     * \n     * @type {string}\n     * @memberof MonitorAction\n     */\n    action?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof MonitorAction\n     */\n    done?: boolean;\n}\n/**\n * \n * @export\n * @interface OneItem\n */\nexport interface OneItem {\n    /**\n     * \n     * @type {number}\n     * @memberof OneItem\n     */\n    itemId?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof OneItem\n     */\n    version?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof OneItem\n     */\n    projectShort?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OneItem\n     */\n    itemRefWithVersion?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OneItem\n     */\n    itemTitle?: string;\n}\n/**\n * \n * @export\n * @interface PluginCapabilities\n */\nexport interface PluginCapabilities {\n    /**\n     * \n     * @type {boolean}\n     * @memberof PluginCapabilities\n     */\n    canCreate?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PluginCapabilities\n     */\n    canFind?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PluginCapabilities\n     */\n    needSetup?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PluginCapabilities\n     */\n    handleAsLink?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PluginCapabilities\n     */\n    one2OneMapping?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PluginCapabilities\n     */\n    hasMeta?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PluginCapabilities\n     */\n    canCreateBacklinks?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PluginCapabilities\n     */\n    messaging?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PluginCapabilities\n     */\n    restToken?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PluginCapabilities\n     */\n    impersonate?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PluginCapabilities\n     */\n    extendedSettings?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PluginCapabilities\n     */\n    hideInProjectSettings?: boolean;\n}\n/**\n * \n * @export\n * @interface PluginSetting\n */\nexport interface PluginSetting {\n    /**\n     * \n     * @type {number}\n     * @memberof PluginSetting\n     */\n    pluginId?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof PluginSetting\n     */\n    pluginLongName?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PluginSetting\n     */\n    pluginShortName?: string;\n    /**\n     * \n     * @type {Array<SettingAndValue>}\n     * @memberof PluginSetting\n     */\n    settings?: Array<SettingAndValue>;\n    /**\n     * \n     * @type {Array<SettingAndValue>}\n     * @memberof PluginSetting\n     */\n    computedSettings?: Array<SettingAndValue>;\n    /**\n     * \n     * @type {PluginCapabilities}\n     * @memberof PluginSetting\n     */\n    capabilities?: PluginCapabilities;\n}\n/**\n * \n * @export\n * @interface ProjectAndAccess\n */\nexport interface ProjectAndAccess {\n    /**\n     * \n     * @type {number}\n     * @memberof ProjectAndAccess\n     */\n    projectId?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ProjectAndAccess\n     */\n    projectShort?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProjectAndAccess\n     */\n    projectLabel?: string;\n    /**\n     * \n     * @type {Array<Access>}\n     * @memberof ProjectAndAccess\n     */\n    accesses?: Array<Access>;\n}\n/**\n * \n * @export\n * @interface ProjectFileType\n */\nexport interface ProjectFileType {\n    /**\n     * \n     * @type {number}\n     * @memberof ProjectFileType\n     */\n    fileId?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ProjectFileType\n     */\n    localName?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProjectFileType\n     */\n    fullPath?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProjectFileType\n     */\n    mimeType?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProjectFileType\n     */\n    key?: string;\n}\n/**\n * \n * @export\n * @interface ProjectInfo\n */\nexport interface ProjectInfo {\n    /**\n     * \n     * @type {Array<UserPermissionType>}\n     * @memberof ProjectInfo\n     */\n    userPermission?: Array<UserPermissionType>;\n    /**\n     * \n     * @type {Array<GroupPermissionType>}\n     * @memberof ProjectInfo\n     */\n    groupPermission?: Array<GroupPermissionType>;\n    /**\n     * \n     * @type {CategoryExtendedListType}\n     * @memberof ProjectInfo\n     */\n    categoryList?: CategoryExtendedListType;\n    /**\n     * \n     * @type {string}\n     * @memberof ProjectInfo\n     */\n    label?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProjectInfo\n     */\n    shortLabel?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProjectInfo\n     */\n    acl?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProjectInfo\n     */\n    aclExplanations?: string;\n    /**\n     * \n     * @type {Array<SettingType>}\n     * @memberof ProjectInfo\n     */\n    settingList?: Array<SettingType>;\n    /**\n     * \n     * @type {Array<CategoryAndSettingListType>}\n     * @memberof ProjectInfo\n     */\n    categorySettingList?: Array<CategoryAndSettingListType>;\n    /**\n     * \n     * @type {Array<PluginSetting>}\n     * @memberof ProjectInfo\n     */\n    pluginSettingsList?: Array<PluginSetting>;\n    /**\n     * \n     * @type {Array<Todo>}\n     * @memberof ProjectInfo\n     */\n    todos?: Array<Todo>;\n}\n/**\n * \n * @export\n * @interface ProjectItemBody\n */\nexport interface ProjectItemBody {\n    /**\n     * Item title\n     * @type {string}\n     * @memberof ProjectItemBody\n     */\n    title: string;\n    /**\n     * Reference of the folder (F-categ-serial)\n     * @type {string}\n     * @memberof ProjectItemBody\n     */\n    folder: string;\n    /**\n     * \n     * @type {{ [key: string]: string; }}\n     * @memberof ProjectItemBody\n     */\n    itemProperties?: { [key: string]: string; };\n    /**\n     * (optional) List of labels currently applied to this element. If none is specified, will consider there are none. Should be sent as a comma-delimited list of strings\n     * @type {string}\n     * @memberof ProjectItemBody\n     */\n    labels?: string;\n    /**\n     * The author (login name) - only works when superadmin is issuing this\n     * @type {string}\n     * @memberof ProjectItemBody\n     */\n    author?: string;\n    /**\n     * The reason why the user is doing this\n     * @type {string}\n     * @memberof ProjectItemBody\n     */\n    reason: string;\n    /**\n     * Comma-delimited (%2C)list of references to up items\n     * @type {string}\n     * @memberof ProjectItemBody\n     */\n    linksUp: string;\n    /**\n     * Comma-delimited (%2C)list of references to down items\n     * @type {string}\n     * @memberof ProjectItemBody\n     */\n    linksDown: string;\n    /**\n     * (optional) when set to 1 (default) says that the call will fail if any HTML cleanup is involved. With 0 it will clean and not fail\n     * @type {number}\n     * @memberof ProjectItemBody\n     */\n    failOnCleanup?: number;\n}\n/**\n * \n * @export\n * @interface ProjectPermissionType\n */\nexport interface ProjectPermissionType {\n    /**\n     * \n     * @type {ProjectType}\n     * @memberof ProjectPermissionType\n     */\n    project?: ProjectType;\n    /**\n     * \n     * @type {Access}\n     * @memberof ProjectPermissionType\n     */\n    access?: Access;\n}\n/**\n * \n * @export\n * @interface ProjectType\n */\nexport interface ProjectType {\n    /**\n     * \n     * @type {number}\n     * @memberof ProjectType\n     */\n    id?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ProjectType\n     */\n    label?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProjectType\n     */\n    shortLabel?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProjectType\n     */\n    projectLogo?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ProjectType\n     */\n    qmsProject?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ProjectType\n     */\n    accessType?: string;\n}\n/**\n * \n * @export\n * @interface Protocol\n */\nexport interface Protocol {\n    /**\n     * \n     * @type {string}\n     * @memberof Protocol\n     */\n    element?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Protocol\n     */\n    attribute?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Protocol\n     */\n    protocols?: Array<string>;\n}\n/**\n * \n * @export\n * @interface ReportTarget\n */\nexport interface ReportTarget {\n    /**\n     * \n     * @type {string}\n     * @memberof ReportTarget\n     */\n    targetId?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReportTarget\n     */\n    targetText?: string;\n}\n/**\n * \n * @export\n * @interface ReportType\n */\nexport interface ReportType {\n    /**\n     * \n     * @type {string}\n     * @memberof ReportType\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReportType\n     */\n    label?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReportType\n     */\n    group?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReportType\n     */\n    description?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ReportType\n     */\n    custom?: boolean;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ReportType\n     */\n    guiItems?: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof ReportType\n     */\n    requireSubtreeType?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReportType\n     */\n    requireSubtree?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReportType\n     */\n    selectSubtreeType?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReportType\n     */\n    selectSubtree?: string;\n    /**\n     * \n     * @type {Array<ReportTarget>}\n     * @memberof ReportType\n     */\n    targets?: Array<ReportTarget>;\n}\n/**\n * \n * @export\n * @interface RestField\n */\nexport interface RestField {\n    /**\n     * \n     * @type {number}\n     * @memberof RestField\n     */\n    id?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof RestField\n     */\n    label?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RestField\n     */\n    fieldType?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RestField\n     */\n    fieldParam?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RestField\n     */\n    testParam?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RestField\n     */\n    testExecParam?: string;\n}\n/**\n * \n * @export\n * @interface SendmailParam\n */\nexport interface SendmailParam {\n    /**\n     * \n     * @type {string}\n     * @memberof SendmailParam\n     */\n    subject?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SendmailParam\n     */\n    htmlbody?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SendmailParam\n     */\n    textbody?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SendmailParam\n     */\n    to?: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SendmailParam\n     */\n    cc?: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SendmailParam\n     */\n    bcc?: Array<string>;\n}\n/**\n * \n * @export\n * @interface ServerStatus\n */\nexport interface ServerStatus {\n    /**\n     * \n     * @type {ExceptionStatus}\n     * @memberof ServerStatus\n     */\n    exceptionStatus?: ExceptionStatus;\n    /**\n     * \n     * @type {string}\n     * @memberof ServerStatus\n     */\n    version?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServerStatus\n     */\n    publicUrl?: string;\n}\n/**\n * \n * @export\n * @interface ServiceDeskParam\n */\nexport interface ServiceDeskParam {\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceDeskParam\n     */\n    summary?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceDeskParam\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceDeskParam\n     */\n    matrixProject?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceDeskParam\n     */\n    matrixItem?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceDeskParam\n     */\n    browser?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceDeskParam\n     */\n    log?: string;\n}\n/**\n * \n * @export\n * @interface SettingAndValue\n */\nexport interface SettingAndValue {\n    /**\n     * \n     * @type {string}\n     * @memberof SettingAndValue\n     */\n    setting?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SettingAndValue\n     */\n    value?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SettingAndValue\n     */\n    encrypted?: boolean;\n}\n/**\n * \n * @export\n * @interface SettingType\n */\nexport interface SettingType {\n    /**\n     * \n     * @type {string}\n     * @memberof SettingType\n     */\n    value?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SettingType\n     */\n    key?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SettingType\n     */\n    secret?: boolean;\n}\n/**\n * \n * @export\n * @interface SignItemAck\n */\nexport interface SignItemAck {\n    /**\n     * \n     * @type {string}\n     * @memberof SignItemAck\n     */\n    result?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SignItemAck\n     */\n    ok?: boolean;\n}\n/**\n * \n * @export\n * @interface Tag\n */\nexport interface Tag {\n    /**\n     * \n     * @type {number}\n     * @memberof Tag\n     */\n    id?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Tag\n     */\n    auditId?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Tag\n     */\n    auditTime?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Tag\n     */\n    label?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Tag\n     */\n    comments?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Tag\n     */\n    tagType?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Tag\n     */\n    tagCreation?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Tag\n     */\n    userLogin?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Tag\n     */\n    baseProjectId?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Tag\n     */\n    baseProjectName?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Tag\n     */\n    baseProjectTag?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Tag\n     */\n    baseAuditCreation?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Tag\n     */\n    baseAuditId?: number;\n}\n/**\n * \n * @export\n * @interface TechAuditType\n */\nexport interface TechAuditType {\n    /**\n     * \n     * @type {number}\n     * @memberof TechAuditType\n     */\n    id?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof TechAuditType\n     */\n    operation?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TechAuditType\n     */\n    table?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof TechAuditType\n     */\n    index?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof TechAuditType\n     */\n    ref?: string;\n}\n/**\n * \n * @export\n * @interface Todo\n */\nexport interface Todo {\n    /**\n     * \n     * @type {number}\n     * @memberof Todo\n     */\n    todoId?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Todo\n     */\n    userId?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Todo\n     */\n    login?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Todo\n     */\n    projectShort?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Todo\n     */\n    itemRef?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Todo\n     */\n    fieldLabel?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Todo\n     */\n    fieldId?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Todo\n     */\n    auto?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof Todo\n     */\n    originatorUserId?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Todo\n     */\n    originatorLogin?: string;\n    /**\n     * \n     * @type {TodoAction}\n     * @memberof Todo\n     */\n    action?: TodoAction;\n    /**\n     * \n     * @type {string}\n     * @memberof Todo\n     */\n    createdAt?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Todo\n     */\n    closedAt?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Todo\n     */\n    createdAtUserFormat?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Todo\n     */\n    closedAtUserFormat?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Todo\n     */\n    future?: boolean;\n}\n/**\n * \n * @export\n * @interface TodoAction\n */\nexport interface TodoAction {\n    /**\n     * \n     * @type {string}\n     * @memberof TodoAction\n     */\n    text?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TodoAction\n     */\n    todoType?: string;\n}\n/**\n * \n * @export\n * @interface TodoCount\n */\nexport interface TodoCount {\n    /**\n     * \n     * @type {number}\n     * @memberof TodoCount\n     */\n    userId?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof TodoCount\n     */\n    login?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof TodoCount\n     */\n    projectId?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof TodoCount\n     */\n    projectShort?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof TodoCount\n     */\n    nbTodos?: number;\n    /**\n     * \n     * @type {Array<Todo>}\n     * @memberof TodoCount\n     */\n    firstTodos?: Array<Todo>;\n}\n/**\n * \n * @export\n * @interface TokenType\n */\nexport interface TokenType {\n    /**\n     * \n     * @type {number}\n     * @memberof TokenType\n     */\n    userId?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof TokenType\n     */\n    tokenId?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenType\n     */\n    purpose?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenType\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenType\n     */\n    value?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenType\n     */\n    validTo?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenType\n     */\n    validToUserFormat?: string;\n}\n/**\n * \n * @export\n * @interface TrimAudit\n */\nexport interface TrimAudit {\n    /**\n     * \n     * @type {string}\n     * @memberof TrimAudit\n     */\n    userLogin?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TrimAudit\n     */\n    dateTime?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TrimAudit\n     */\n    dateTimeUserFormat?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TrimAudit\n     */\n    action?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TrimAudit\n     */\n    entity?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TrimAudit\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TrimAudit\n     */\n    projectLabel?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TrimAudit\n     */\n    reportRef?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TrimAudit\n     */\n    reportTitle?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof TrimAudit\n     */\n    reportJobId?: number;\n    /**\n     * \n     * @type {TrimNeedleItem}\n     * @memberof TrimAudit\n     */\n    itemBefore?: TrimNeedleItem;\n    /**\n     * \n     * @type {TrimNeedleItem}\n     * @memberof TrimAudit\n     */\n    itemAfter?: TrimNeedleItem;\n    /**\n     * \n     * @type {TrimNeedleItem}\n     * @memberof TrimAudit\n     */\n    itemUp?: TrimNeedleItem;\n    /**\n     * \n     * @type {TrimNeedleItem}\n     * @memberof TrimAudit\n     */\n    itemDown?: TrimNeedleItem;\n    /**\n     * \n     * @type {number}\n     * @memberof TrimAudit\n     */\n    auditId?: number;\n    /**\n     * \n     * @type {Array<TechAuditType>}\n     * @memberof TrimAudit\n     */\n    techAudit?: Array<TechAuditType>;\n    /**\n     * \n     * @type {Array<Tag>}\n     * @memberof TrimAudit\n     */\n    tags?: Array<Tag>;\n    /**\n     * \n     * @type {Array<ItemSimpleType>}\n     * @memberof TrimAudit\n     */\n    itemsDeletedByMerge?: Array<ItemSimpleType>;\n}\n/**\n * \n * @export\n * @interface TrimAuditList\n */\nexport interface TrimAuditList {\n    /**\n     * \n     * @type {number}\n     * @memberof TrimAuditList\n     */\n    startAt?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof TrimAuditList\n     */\n    maxResults?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof TrimAuditList\n     */\n    totalResults?: number;\n    /**\n     * \n     * @type {Array<TrimAudit>}\n     * @memberof TrimAuditList\n     */\n    audit?: Array<TrimAudit>;\n}\n/**\n * \n * @export\n * @interface TrimFolder\n */\nexport interface TrimFolder {\n    /**\n     * \n     * @type {string}\n     * @memberof TrimFolder\n     */\n    itemRef?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TrimFolder\n     */\n    title?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof TrimFolder\n     */\n    partial?: number;\n    /**\n     * \n     * @type {Array<TrimFolder>}\n     * @memberof TrimFolder\n     */\n    itemList?: Array<TrimFolder>;\n    /**\n     * \n     * @type {FieldValListType}\n     * @memberof TrimFolder\n     */\n    fieldValList?: FieldValListType;\n    /**\n     * \n     * @type {number}\n     * @memberof TrimFolder\n     */\n    isFolder?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof TrimFolder\n     */\n    isUnselected?: number;\n    /**\n     * \n     * @type {ItemHistoryListType}\n     * @memberof TrimFolder\n     */\n    itemHistoryList?: ItemHistoryListType;\n    /**\n     * \n     * @type {number}\n     * @memberof TrimFolder\n     */\n    maxVersion?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof TrimFolder\n     */\n    modDate?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TrimFolder\n     */\n    modDateUserFormat?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof TrimFolder\n     */\n    itemId?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof TrimFolder\n     */\n    disabled?: number;\n    /**\n     * \n     * @type {FancyLeaf}\n     * @memberof TrimFolder\n     */\n    contextTree?: FancyLeaf;\n    /**\n     * \n     * @type {Array<CrossProjectLink>}\n     * @memberof TrimFolder\n     */\n    crossLinks?: Array<CrossProjectLink>;\n}\n/**\n * \n * @export\n * @interface TrimItem\n */\nexport interface TrimItem {\n    /**\n     * \n     * @type {string}\n     * @memberof TrimItem\n     */\n    title?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TrimItem\n     */\n    itemRef?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TrimItem\n     */\n    folderRef?: string;\n    /**\n     * \n     * @type {Array<TrimLink>}\n     * @memberof TrimItem\n     */\n    upLinkList?: Array<TrimLink>;\n    /**\n     * \n     * @type {Array<TrimLink>}\n     * @memberof TrimItem\n     */\n    downLinkList?: Array<TrimLink>;\n    /**\n     * \n     * @type {FieldValListType}\n     * @memberof TrimItem\n     */\n    fieldValList?: FieldValListType;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof TrimItem\n     */\n    labels?: Array<string>;\n    /**\n     * \n     * @type {ItemHistoryListType}\n     * @memberof TrimItem\n     */\n    itemHistoryList?: ItemHistoryListType;\n    /**\n     * \n     * @type {number}\n     * @memberof TrimItem\n     */\n    maxVersion?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof TrimItem\n     */\n    disabled?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof TrimItem\n     */\n    isFolder?: number;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof TrimItem\n     */\n    availableFormats?: Array<string>;\n    /**\n     * \n     * @type {number}\n     * @memberof TrimItem\n     */\n    itemId?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof TrimItem\n     */\n    modDate?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TrimItem\n     */\n    modDateUserFormat?: string;\n    /**\n     * \n     * @type {Array<CategoryAndRoot>}\n     * @memberof TrimItem\n     */\n    requireSubTree?: Array<CategoryAndRoot>;\n    /**\n     * \n     * @type {Array<CategoryAndRoot>}\n     * @memberof TrimItem\n     */\n    selectSubTree?: Array<CategoryAndRoot>;\n    /**\n     * \n     * @type {number}\n     * @memberof TrimItem\n     */\n    isUnselected?: number;\n    /**\n     * \n     * @type {Array<UserAndTime>}\n     * @memberof TrimItem\n     */\n    downloads?: Array<UserAndTime>;\n    /**\n     * \n     * @type {boolean}\n     * @memberof TrimItem\n     */\n    docHasPackage?: boolean;\n    /**\n     * \n     * @type {CleanupFail}\n     * @memberof TrimItem\n     */\n    cleanupFail?: CleanupFail;\n    /**\n     * \n     * @type {FancyLeaf}\n     * @memberof TrimItem\n     */\n    contextTree?: FancyLeaf;\n    /**\n     * \n     * @type {Array<CrossProjectLink>}\n     * @memberof TrimItem\n     */\n    crossLinks?: Array<CrossProjectLink>;\n}\n/**\n * \n * @export\n * @interface TrimLink\n */\nexport interface TrimLink {\n    /**\n     * \n     * @type {Array<TrimLink>}\n     * @memberof TrimLink\n     */\n    upLinkList?: Array<TrimLink>;\n    /**\n     * \n     * @type {Array<TrimLink>}\n     * @memberof TrimLink\n     */\n    downLinkList?: Array<TrimLink>;\n    /**\n     * \n     * @type {string}\n     * @memberof TrimLink\n     */\n    itemRef?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TrimLink\n     */\n    title?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TrimLink\n     */\n    modDate?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TrimLink\n     */\n    modDateUserFormat?: string;\n}\n/**\n * \n * @export\n * @interface TrimNeedle\n */\nexport interface TrimNeedle {\n    /**\n     * \n     * @type {number}\n     * @memberof TrimNeedle\n     */\n    startAt?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof TrimNeedle\n     */\n    maxResults?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof TrimNeedle\n     */\n    totalResults?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof TrimNeedle\n     */\n    searchId?: string;\n    /**\n     * \n     * @type {Array<TrimNeedleItem>}\n     * @memberof TrimNeedle\n     */\n    needles?: Array<TrimNeedleItem>;\n}\n/**\n * \n * @export\n * @interface TrimNeedleItem\n */\nexport interface TrimNeedleItem {\n    /**\n     * \n     * @type {string}\n     * @memberof TrimNeedleItem\n     */\n    itemOrFolderRef?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TrimNeedleItem\n     */\n    title?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TrimNeedleItem\n     */\n    project?: string;\n    /**\n     * \n     * @type {Array<FieldValType>}\n     * @memberof TrimNeedleItem\n     */\n    fieldVal?: Array<FieldValType>;\n    /**\n     * \n     * @type {string}\n     * @memberof TrimNeedleItem\n     */\n    labels?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TrimNeedleItem\n     */\n    lastModDate?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TrimNeedleItem\n     */\n    creationDate?: string;\n    /**\n     * \n     * @type {Array<TrimLink>}\n     * @memberof TrimNeedleItem\n     */\n    upLinkList?: Array<TrimLink>;\n    /**\n     * \n     * @type {Array<TrimLink>}\n     * @memberof TrimNeedleItem\n     */\n    downLinkList?: Array<TrimLink>;\n}\n/**\n * \n * @export\n * @interface UndeleteAnswer\n */\nexport interface UndeleteAnswer {\n    /**\n     * \n     * @type {string}\n     * @memberof UndeleteAnswer\n     */\n    newParent?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UndeleteAnswer\n     */\n    newOrder?: number;\n}\n/**\n * \n * @export\n * @interface UserAndTime\n */\nexport interface UserAndTime {\n    /**\n     * \n     * @type {number}\n     * @memberof UserAndTime\n     */\n    userId?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof UserAndTime\n     */\n    login?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserAndTime\n     */\n    firstName?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserAndTime\n     */\n    lastName?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserAndTime\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserAndTime\n     */\n    date?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserAndTime\n     */\n    dateUserFormat?: string;\n}\n/**\n * \n * @export\n * @interface UserDetails\n */\nexport interface UserDetails {\n    /**\n     * \n     * @type {string}\n     * @memberof UserDetails\n     */\n    login?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UserDetails\n     */\n    nbReadWriteProjectsNow?: number;\n    /**\n     * \n     * @type {Array<ProjectAndAccess>}\n     * @memberof UserDetails\n     */\n    projects?: Array<ProjectAndAccess>;\n    /**\n     * \n     * @type {Array<UserInfo>}\n     * @memberof UserDetails\n     */\n    infoUpdates?: Array<UserInfo>;\n    /**\n     * \n     * @type {number}\n     * @memberof UserDetails\n     */\n    admin?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof UserDetails\n     */\n    superAdmin?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof UserDetails\n     */\n    userStatus?: string;\n}\n/**\n * \n * @export\n * @interface UserInfo\n */\nexport interface UserInfo {\n    /**\n     * \n     * @type {string}\n     * @memberof UserInfo\n     */\n    startDate8601?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserInfo\n     */\n    endDate8601?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof UserInfo\n     */\n    hasKey?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof UserInfo\n     */\n    userId?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof UserInfo\n     */\n    login?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserInfo\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserInfo\n     */\n    firstName?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserInfo\n     */\n    lastName?: string;\n}\n/**\n * \n * @export\n * @interface UserPermissionType\n */\nexport interface UserPermissionType {\n    /**\n     * \n     * @type {number}\n     * @memberof UserPermissionType\n     */\n    id?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof UserPermissionType\n     */\n    login?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserPermissionType\n     */\n    email?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UserPermissionType\n     */\n    permission?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof UserPermissionType\n     */\n    firstName?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserPermissionType\n     */\n    lastName?: string;\n}\n/**\n * \n * @export\n * @interface UserType\n */\nexport interface UserType {\n    /**\n     * \n     * @type {number}\n     * @memberof UserType\n     */\n    id?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof UserType\n     */\n    login?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserType\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserType\n     */\n    firstName?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserType\n     */\n    lastName?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserType\n     */\n    signatureImage?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserType\n     */\n    signaturePassword?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof UserType\n     */\n    customerAdmin?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof UserType\n     */\n    passwordAgeInDays?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof UserType\n     */\n    badLogins?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof UserType\n     */\n    badLoginsBefore?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof UserType\n     */\n    superAdmin?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof UserType\n     */\n    userStatus?: string;\n    /**\n     * \n     * @type {Array<SettingType>}\n     * @memberof UserType\n     */\n    userSettingsList?: Array<SettingType>;\n    /**\n     * \n     * @type {Array<TokenType>}\n     * @memberof UserType\n     */\n    tokenList?: Array<TokenType>;\n    /**\n     * \n     * @type {Array<number>}\n     * @memberof UserType\n     */\n    groupList?: Array<number>;\n}\n/**\n * \n * @export\n * @interface UserTypeSimple\n */\nexport interface UserTypeSimple {\n    /**\n     * \n     * @type {number}\n     * @memberof UserTypeSimple\n     */\n    userId?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof UserTypeSimple\n     */\n    login?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserTypeSimple\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserTypeSimple\n     */\n    firstName?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UserTypeSimple\n     */\n    lastName?: string;\n}\n/**\n * \n * @export\n * @interface VerifiedAuth\n */\nexport interface VerifiedAuth {\n    /**\n     * \n     * @type {string}\n     * @memberof VerifiedAuth\n     */\n    logger?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VerifiedAuth\n     */\n    VERIFIED_AUTH_SESSION_ATTRIBUTE?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VerifiedAuth\n     */\n    AUTH_SOURCE_SESSION?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VerifiedAuth\n     */\n    AUTH_SOURCE_SINGLE_SIGNON?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VerifiedAuth\n     */\n    login?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof VerifiedAuth\n     */\n    userId?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof VerifiedAuth\n     */\n    authSource?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof VerifiedAuth\n     */\n    superAdmin?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof VerifiedAuth\n     */\n    customerAdmin?: boolean;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof VerifiedAuth\n     */\n    projectMap?: { [key: string]: any; };\n}\n/**\n * DefaultApi - fetch parameter creator\n * @export\n */\nexport const DefaultApiFetchParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Permissions - No permissions needed. Valid from version 2.1\n         * @summary Asks for the difference between A and B html exerpts, and produce the B html with annotations\n         * @param {string} [arg] json object with the arguments\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allCompareHtmlPost(arg?: string, options: any = {}): FetchArgs {\n            const localVarPath = `/all/compareHtml`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (arg !== undefined) {\n                localVarQueryParameter['arg'] = arg;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Returns all info about a date\n         * @param {string} [date] (optional) an input date formatted as iso8601. If not present, current date/time is used\n         * @param {string} [dateformat] (optional) a date formatter. If not present, current date format is used\n         * @param {string} [timeformat] (optional) a date-time formatter. If not present, current date/time format is used\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allDateGet(date?: string, dateformat?: string, timeformat?: string, options: any = {}): FetchArgs {\n            const localVarPath = `/all/date`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (date !== undefined) {\n                localVarQueryParameter['date'] = date;\n            }\n\n            if (dateformat !== undefined) {\n                localVarQueryParameter['dateformat'] = dateformat;\n            }\n\n            if (timeformat !== undefined) {\n                localVarQueryParameter['timeformat'] = timeformat;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have the right key to download the file. Valid from version 2.1\n         * @summary Retrieve one customer file. The fileno is a simple fileId. This request returns the actual file\n         * @param {number} fileno file number\n         * @param {string} key The key of the file\n         * @param {string} [disposition] (optional, from version 2.3) set to disposition&#x3D;inline to ask the server to send the disposition to &#x27;inline&#x27; instead of &#x27;attachment&#x27;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allFileFilenoGet(fileno: number, key: string, disposition?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'fileno' is not null or undefined\n            if (fileno === null || fileno === undefined) {\n                throw new RequiredError('fileno','Required parameter fileno was null or undefined when calling allFileFilenoGet.');\n            }\n            // verify required parameter 'key' is not null or undefined\n            if (key === null || key === undefined) {\n                throw new RequiredError('key','Required parameter key was null or undefined when calling allFileFilenoGet.');\n            }\n            const localVarPath = `/all/file/{fileno}`\n                .replace(`{${\"fileno\"}}`, encodeURIComponent(String(fileno)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (key !== undefined) {\n                localVarQueryParameter['key'] = key;\n            }\n\n            if (disposition !== undefined) {\n                localVarQueryParameter['disposition'] = disposition;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Retrieve list of all customer-wide files\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allFileGet(options: any = {}): FetchArgs {\n            const localVarPath = `/all/file`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Creates a new customer-wide file - the file should be uploaded as payload. Its mime type should be sent through the HTTP protocol.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allFilePost(options: any = {}): FetchArgs {\n            const localVarPath = `/all/file`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Retrieve license status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allLicenseGet(options: any = {}): FetchArgs {\n            const localVarPath = `/all/license`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Adds a log entry (server side).\n         * @param {string} message Message to log\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allLogPost(message: string, options: any = {}): FetchArgs {\n            // verify required parameter 'message' is not null or undefined\n            if (message === null || message === undefined) {\n                throw new RequiredError('message','Required parameter message was null or undefined when calling allLogPost.');\n            }\n            const localVarPath = `/all/log`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (message !== undefined) {\n                localVarQueryParameter['message'] = message;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Reserved to Matrix Requirements operations. Valid from version 2.4\n         * @summary Update matrix instance log level.\n         * @param {LogLevel} [body] Payload containing the log level\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allLoglevelPut(body?: LogLevel, options: any = {}): FetchArgs {\n            const localVarPath = `/all/loglevel`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"Authorization\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"LogLevel\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - No permissions needed. Valid from version 2.1\n         * @summary Monitoring object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allMonitorGet(options: any = {}): FetchArgs {\n            const localVarPath = `/all/monitor`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Find items based on a search string in all projects\n         * @param {string} search search term\n         * @param {string} id search id. Used by MatrixJira js to match queries with answers. Is returned in the output structure\n         * @param {string} [filter] (optional) applies a filter, can be negative\n         * @param {string} [fieldsOut] (optional) comma-delimited list of fields to return -  101,102 - or * for all\n         * @param {number} [labels] (optional) set to 1 to return labels in the output\n         * @param {string} [links] (optional) set to up,down to return up and down items, or only up or only down\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allNeedleGet(search: string, id: string, filter?: string, fieldsOut?: string, labels?: number, links?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'search' is not null or undefined\n            if (search === null || search === undefined) {\n                throw new RequiredError('search','Required parameter search was null or undefined when calling allNeedleGet.');\n            }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling allNeedleGet.');\n            }\n            const localVarPath = `/all/needle`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (id !== undefined) {\n                localVarQueryParameter['id'] = id;\n            }\n\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n\n            if (fieldsOut !== undefined) {\n                localVarQueryParameter['fieldsOut'] = fieldsOut;\n            }\n\n            if (labels !== undefined) {\n                localVarQueryParameter['labels'] = labels;\n            }\n\n            if (links !== undefined) {\n                localVarQueryParameter['links'] = links;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Find item ids based on a search string in all projects\n         * @param {string} search search term\n         * @param {string} [filter] (optional) applies a filter, can be negative\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allNeedleminimalGet(search: string, filter?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'search' is not null or undefined\n            if (search === null || search === undefined) {\n                throw new RequiredError('search','Required parameter search was null or undefined when calling allNeedleminimalGet.');\n            }\n            const localVarPath = `/all/needleminimal`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - No permissions needed. Valid from version 2.2\n         * @summary The OpenAPI 3.0 definition of our REST API\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allOpenapiGet(options: any = {}): FetchArgs {\n            const localVarPath = `/all/openapi`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - No permissions needed. Valid from version 2.1\n         * @summary Lists all reports\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allReportsGet(options: any = {}): FetchArgs {\n            const localVarPath = `/all/reports`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Sends an email. Non-optional parameters are sent as a POST JSON payload.\n         * @param {SendmailParam} [body] Necessary information to send a mail\n         * @param {number} [system] (optional) if set to 1 makes it a system email (not sent by the actual user)\n         * @param {number} [noreply] (optional) if set to 1 makes it a no-reply email (not sent by the actual user)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allSendmailPost(body?: SendmailParam, system?: number, noreply?: number, options: any = {}): FetchArgs {\n            const localVarPath = `/all/sendmail`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (system !== undefined) {\n                localVarQueryParameter['system'] = system;\n            }\n\n            if (noreply !== undefined) {\n                localVarQueryParameter['noreply'] = noreply;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"SendmailParam\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Creates a service desk issue. The parameters are sent as a POST JSON payload.\n         * @param {ServiceDeskParam} [body] Necessary information to send a mail\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allServicedeskPost(body?: ServiceDeskParam, options: any = {}): FetchArgs {\n            const localVarPath = `/all/servicedesk`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"ServiceDeskParam\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get all settings of a customer\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allSettingGet(options: any = {}): FetchArgs {\n            const localVarPath = `/all/setting`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Adds or changes a customer setting. If the value is empty, the setting will be deleted.\n         * @param {string} key setting key\n         * @param {string} value value\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allSettingPost(key: string, value: string, options: any = {}): FetchArgs {\n            // verify required parameter 'key' is not null or undefined\n            if (key === null || key === undefined) {\n                throw new RequiredError('key','Required parameter key was null or undefined when calling allSettingPost.');\n            }\n            // verify required parameter 'value' is not null or undefined\n            if (value === null || value === undefined) {\n                throw new RequiredError('value','Required parameter value was null or undefined when calling allSettingPost.');\n            }\n            const localVarPath = `/all/setting`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (key !== undefined) {\n                localVarQueryParameter['key'] = key;\n            }\n\n            if (value !== undefined) {\n                localVarQueryParameter['value'] = value;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get instance status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allStatusGet(options: any = {}): FetchArgs {\n            const localVarPath = `/all/status`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - No permissions needed. Valid from version 2.1\n         * @summary Returns all accepted time zones\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allTimezoneGet(options: any = {}): FetchArgs {\n            const localVarPath = `/all/timezone`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.2\n         * @summary Get all todos for the current user, for all projects\n         * @param {number} [includeDone] (optional) set to 1 to include done todos and todo&#x27;s created by the user\n         * @param {number} [includeFuture] (optional) set to 1 to include future todos as well (defaults to 0)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allTodoGet(includeDone?: number, includeFuture?: number, options: any = {}): FetchArgs {\n            const localVarPath = `/all/todo`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (includeDone !== undefined) {\n                localVarQueryParameter['includeDone'] = includeDone;\n            }\n\n            if (includeFuture !== undefined) {\n                localVarQueryParameter['includeFuture'] = includeFuture;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary WebHook\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allWebhookPost(options: any = {}): FetchArgs {\n            const localVarPath = `/all/webhook`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.2\n         * @summary Retrieves the group list\n         * @param {number} [details] (optional) -  if set to 1 returns all details -- in this case user needs to be ADMIN\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGet(details?: number, options: any = {}): FetchArgs {\n            const localVarPath = `/group`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (details !== undefined) {\n                localVarQueryParameter['details'] = details;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Removes a group\n         * @param {string} groupId group Id\n         * @param {string} confirm Needs to be yes for the method to be executed\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdDelete(groupId: string, confirm: string, options: any = {}): FetchArgs {\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupGroupIdDelete.');\n            }\n            // verify required parameter 'confirm' is not null or undefined\n            if (confirm === null || confirm === undefined) {\n                throw new RequiredError('confirm','Required parameter confirm was null or undefined when calling groupGroupIdDelete.');\n            }\n            const localVarPath = `/group/{groupId}`\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (confirm !== undefined) {\n                localVarQueryParameter['confirm'] = confirm;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be that user - Matrix operations can impersonate. Valid from version 2.2\n         * @summary Retrieves details of a group\n         * @param {string} groupId group Id\n         * @param {number} [details] (optional) -  if set to 1 returns all details -- in this case user needs to be ADMIN\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdGet(groupId: string, details?: number, options: any = {}): FetchArgs {\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupGroupIdGet.');\n            }\n            const localVarPath = `/group/{groupId}`\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (details !== undefined) {\n                localVarQueryParameter['details'] = details;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Adds a group to a project (or removes it)\n         * @param {string} groupId group Id\n         * @param {string} project Project short label\n         * @param {number} [permission] Specify the (new) permission for that group in that project\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdProjectProjectPost(groupId: string, project: string, permission?: number, options: any = {}): FetchArgs {\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupGroupIdProjectProjectPost.');\n            }\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling groupGroupIdProjectProjectPost.');\n            }\n            const localVarPath = `/group/{groupId}/project/{project}`\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)))\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (permission !== undefined) {\n                localVarQueryParameter['permission'] = permission;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Renames a group\n         * @param {string} groupId group Id\n         * @param {string} newName The new group name. Cannot be one of the existing. Must start with &#x27;group.&#x27;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdRenamePut(groupId: string, newName: string, options: any = {}): FetchArgs {\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupGroupIdRenamePut.');\n            }\n            // verify required parameter 'newName' is not null or undefined\n            if (newName === null || newName === undefined) {\n                throw new RequiredError('newName','Required parameter newName was null or undefined when calling groupGroupIdRenamePut.');\n            }\n            const localVarPath = `/group/{groupId}/rename`\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (newName !== undefined) {\n                localVarQueryParameter['newName'] = newName;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin or the user. Valid from version 2.2\n         * @summary Adds a user to a group\n         * @param {string} groupId group Id\n         * @param {string} user user login name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdUserUserPut(groupId: string, user: string, options: any = {}): FetchArgs {\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupGroupIdUserUserPut.');\n            }\n            // verify required parameter 'user' is not null or undefined\n            if (user === null || user === undefined) {\n                throw new RequiredError('user','Required parameter user was null or undefined when calling groupGroupIdUserUserPut.');\n            }\n            const localVarPath = `/group/{groupId}/user/{user}`\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)))\n                .replace(`{${\"user\"}}`, encodeURIComponent(String(user)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Sets all users of a group (replacing potential former content)\n         * @param {string} groupId group Id\n         * @param {string} users List of all users members of that group, commas-separated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdUserlistPut(groupId: string, users: string, options: any = {}): FetchArgs {\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupGroupIdUserlistPut.');\n            }\n            // verify required parameter 'users' is not null or undefined\n            if (users === null || users === undefined) {\n                throw new RequiredError('users','Required parameter users was null or undefined when calling groupGroupIdUserlistPut.');\n            }\n            const localVarPath = `/group/{groupId}/userlist`\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (users !== undefined) {\n                localVarQueryParameter['users'] = users;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Creates a new group\n         * @param {string} groupName group name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupNamePost(groupName: string, options: any = {}): FetchArgs {\n            // verify required parameter 'groupName' is not null or undefined\n            if (groupName === null || groupName === undefined) {\n                throw new RequiredError('groupName','Required parameter groupName was null or undefined when calling groupGroupNamePost.');\n            }\n            const localVarPath = `/group/{groupName}`\n                .replace(`{${\"groupName\"}}`, encodeURIComponent(String(groupName)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Removes a user from a group\n         * @param {string} groupName group name\n         * @param {string} user user login name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupNameUserUserDelete(groupName: string, user: string, options: any = {}): FetchArgs {\n            // verify required parameter 'groupName' is not null or undefined\n            if (groupName === null || groupName === undefined) {\n                throw new RequiredError('groupName','Required parameter groupName was null or undefined when calling groupGroupNameUserUserDelete.');\n            }\n            // verify required parameter 'user' is not null or undefined\n            if (user === null || user === undefined) {\n                throw new RequiredError('user','Required parameter user was null or undefined when calling groupGroupNameUserUserDelete.');\n            }\n            const localVarPath = `/group/{groupName}/user/{user}`\n                .replace(`{${\"groupName\"}}`, encodeURIComponent(String(groupName)))\n                .replace(`{${\"user\"}}`, encodeURIComponent(String(user)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.3\n         * @summary Merge branch into mainline. First project is the mainline, second is the branch. The payload must contain a json object with a list of actions to perform.\n         * @param {string} mainproject mainproject\n         * @param {string} branchproject branchproject\n         * @param {string} reason The reason why the user is doing this\n         * @param {MergeParam} [body] Actions to perform\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        mainprojectMergeBranchprojectPost(mainproject: string, branchproject: string, reason: string, body?: MergeParam, options: any = {}): FetchArgs {\n            // verify required parameter 'mainproject' is not null or undefined\n            if (mainproject === null || mainproject === undefined) {\n                throw new RequiredError('mainproject','Required parameter mainproject was null or undefined when calling mainprojectMergeBranchprojectPost.');\n            }\n            // verify required parameter 'branchproject' is not null or undefined\n            if (branchproject === null || branchproject === undefined) {\n                throw new RequiredError('branchproject','Required parameter branchproject was null or undefined when calling mainprojectMergeBranchprojectPost.');\n            }\n            // verify required parameter 'reason' is not null or undefined\n            if (reason === null || reason === undefined) {\n                throw new RequiredError('reason','Required parameter reason was null or undefined when calling mainprojectMergeBranchprojectPost.');\n            }\n            const localVarPath = `/{mainproject}/merge/{branchproject}`\n                .replace(`{${\"mainproject\"}}`, encodeURIComponent(String(mainproject)))\n                .replace(`{${\"branchproject\"}}`, encodeURIComponent(String(branchproject)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (reason !== undefined) {\n                localVarQueryParameter['reason'] = reason;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"MergeParam\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have QMS viewer access (or higher) to the project. Valid from version 2.2\n         * @summary Retrieves all accesses in a project (list of groups and users who have access)\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectAccessGet(project: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectAccessGet.');\n            }\n            const localVarPath = `/{project}/access`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Retrieves all changes in a project\n         * @param {string} project Project short label\n         * @param {number} [startAt] (optional) Pagination -  starts the audit after N records\n         * @param {number} [maxResults] (optional) Pagination -  Retrieve N results per page\n         * @param {string} [deleteOnly] (optional) if set to yes, only returns actions of type delete\n         * @param {string} [tech] (optional) if set to yes, returns the underneath changes\n         * @param {number} [auditIdMin] (optional) sets a minimum ID for audits, as returned by GET calendar\n         * @param {number} [auditIdMax] (optional) sets a maximum ID for audits\n         * @param {number} [noReport] (optional) set to 1 to avoid having reports\n         * @param {number} [noImport] (optional) set to 1 to avoid having imports\n         * @param {string} [include] (optional) set to a list of actions to include (delete,undelete,add,edit,...)\n         * @param {number} [resolveRef] (optional) set to 1 to resolve item IDs into refs\n         * @param {string} [itemRef] (optional) restrict the audit to only those mentionning this item\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectAuditGet(project: string, startAt?: number, maxResults?: number, deleteOnly?: string, tech?: string, auditIdMin?: number, auditIdMax?: number, noReport?: number, noImport?: number, include?: string, resolveRef?: number, itemRef?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectAuditGet.');\n            }\n            const localVarPath = `/{project}/audit`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (startAt !== undefined) {\n                localVarQueryParameter['startAt'] = startAt;\n            }\n\n            if (maxResults !== undefined) {\n                localVarQueryParameter['maxResults'] = maxResults;\n            }\n\n            if (deleteOnly !== undefined) {\n                localVarQueryParameter['deleteOnly'] = deleteOnly;\n            }\n\n            if (tech !== undefined) {\n                localVarQueryParameter['tech'] = tech;\n            }\n\n            if (auditIdMin !== undefined) {\n                localVarQueryParameter['auditIdMin'] = auditIdMin;\n            }\n\n            if (auditIdMax !== undefined) {\n                localVarQueryParameter['auditIdMax'] = auditIdMax;\n            }\n\n            if (noReport !== undefined) {\n                localVarQueryParameter['noReport'] = noReport;\n            }\n\n            if (noImport !== undefined) {\n                localVarQueryParameter['noImport'] = noImport;\n            }\n\n            if (include !== undefined) {\n                localVarQueryParameter['include'] = include;\n            }\n\n            if (resolveRef !== undefined) {\n                localVarQueryParameter['resolveRef'] = resolveRef;\n            }\n\n            if (itemRef !== undefined) {\n                localVarQueryParameter['itemRef'] = itemRef;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.3\n         * @summary Launches a server-side branch or clone - needs the 'merge' module if actual branching\n         * @param {string} project Project short label\n         * @param {string} label Branch project label\n         * @param {string} shortLabel Branch project short label\n         * @param {number} keepPermissions 1 or 0. Defaults to 0 (with 0 the project doesn&#x27;t have any permission after branching)\n         * @param {number} keepContent 1 or 0. Defaults to 1. 0 only works without branch and without history\n         * @param {number} [branch] (optional) Set to 1 to branch (default), 0 to just copy/clone\n         * @param {number} [history] (optional) Set to 1 to branch or copy with history, defaults to 0\n         * @param {string} [tagToCreate] (optional) specify a tag (by default auto-generated)\n         * @param {string} [branchInThePastTag] (optional) specify a tag to branch in the past (needs history&#x3D;1)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectBranchPost(project: string, label: string, shortLabel: string, keepPermissions: number, keepContent: number, branch?: number, history?: number, tagToCreate?: string, branchInThePastTag?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectBranchPost.');\n            }\n            // verify required parameter 'label' is not null or undefined\n            if (label === null || label === undefined) {\n                throw new RequiredError('label','Required parameter label was null or undefined when calling projectBranchPost.');\n            }\n            // verify required parameter 'shortLabel' is not null or undefined\n            if (shortLabel === null || shortLabel === undefined) {\n                throw new RequiredError('shortLabel','Required parameter shortLabel was null or undefined when calling projectBranchPost.');\n            }\n            // verify required parameter 'keepPermissions' is not null or undefined\n            if (keepPermissions === null || keepPermissions === undefined) {\n                throw new RequiredError('keepPermissions','Required parameter keepPermissions was null or undefined when calling projectBranchPost.');\n            }\n            // verify required parameter 'keepContent' is not null or undefined\n            if (keepContent === null || keepContent === undefined) {\n                throw new RequiredError('keepContent','Required parameter keepContent was null or undefined when calling projectBranchPost.');\n            }\n            const localVarPath = `/{project}/branch`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (label !== undefined) {\n                localVarQueryParameter['label'] = label;\n            }\n\n            if (shortLabel !== undefined) {\n                localVarQueryParameter['shortLabel'] = shortLabel;\n            }\n\n            if (branch !== undefined) {\n                localVarQueryParameter['branch'] = branch;\n            }\n\n            if (history !== undefined) {\n                localVarQueryParameter['history'] = history;\n            }\n\n            if (tagToCreate !== undefined) {\n                localVarQueryParameter['tagToCreate'] = tagToCreate;\n            }\n\n            if (branchInThePastTag !== undefined) {\n                localVarQueryParameter['branchInThePastTag'] = branchInThePastTag;\n            }\n\n            if (keepPermissions !== undefined) {\n                localVarQueryParameter['keepPermissions'] = keepPermissions;\n            }\n\n            if (keepContent !== undefined) {\n                localVarQueryParameter['keepContent'] = keepContent;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get all dates at which a project has been modified\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCalendarGet(project: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectCalendarGet.');\n            }\n            const localVarPath = `/{project}/calendar`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Removes (inactivate) a category. Will fail on REPORT and FOLDER categories\n         * @param {string} project Project short label\n         * @param {string} category Category short label\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCatCategoryDelete(project: string, category: string, reason: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectCatCategoryDelete.');\n            }\n            // verify required parameter 'category' is not null or undefined\n            if (category === null || category === undefined) {\n                throw new RequiredError('category','Required parameter category was null or undefined when calling projectCatCategoryDelete.');\n            }\n            // verify required parameter 'reason' is not null or undefined\n            if (reason === null || reason === undefined) {\n                throw new RequiredError('reason','Required parameter reason was null or undefined when calling projectCatCategoryDelete.');\n            }\n            const localVarPath = `/{project}/cat/{category}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"category\"}}`, encodeURIComponent(String(category)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (reason !== undefined) {\n                localVarQueryParameter['reason'] = reason;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get details of a category\n         * @param {string} project Project short label\n         * @param {string} category Category short label\n         * @param {string} [filter] (optional) specify a filter\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCatCategoryGet(project: string, category: string, filter?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectCatCategoryGet.');\n            }\n            // verify required parameter 'category' is not null or undefined\n            if (category === null || category === undefined) {\n                throw new RequiredError('category','Required parameter category was null or undefined when calling projectCatCategoryGet.');\n            }\n            const localVarPath = `/{project}/cat/{category}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"category\"}}`, encodeURIComponent(String(category)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Modifies a categorie's labels, and fix the project's settings to reflect that change, OR modifies a category's order.\n         * @param {string} project Project short label\n         * @param {string} category Category short label\n         * @param {number} order The new order (for reordering)\n         * @param {string} shortLabel The new short label for that category (for renaming)\n         * @param {string} label The new long label for that category (for renaming)\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCatCategoryPut(project: string, category: string, order: number, shortLabel: string, label: string, reason: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectCatCategoryPut.');\n            }\n            // verify required parameter 'category' is not null or undefined\n            if (category === null || category === undefined) {\n                throw new RequiredError('category','Required parameter category was null or undefined when calling projectCatCategoryPut.');\n            }\n            // verify required parameter 'order' is not null or undefined\n            if (order === null || order === undefined) {\n                throw new RequiredError('order','Required parameter order was null or undefined when calling projectCatCategoryPut.');\n            }\n            // verify required parameter 'shortLabel' is not null or undefined\n            if (shortLabel === null || shortLabel === undefined) {\n                throw new RequiredError('shortLabel','Required parameter shortLabel was null or undefined when calling projectCatCategoryPut.');\n            }\n            // verify required parameter 'label' is not null or undefined\n            if (label === null || label === undefined) {\n                throw new RequiredError('label','Required parameter label was null or undefined when calling projectCatCategoryPut.');\n            }\n            // verify required parameter 'reason' is not null or undefined\n            if (reason === null || reason === undefined) {\n                throw new RequiredError('reason','Required parameter reason was null or undefined when calling projectCatCategoryPut.');\n            }\n            const localVarPath = `/{project}/cat/{category}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"category\"}}`, encodeURIComponent(String(category)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (order !== undefined) {\n                localVarQueryParameter['order'] = order;\n            }\n\n            if (shortLabel !== undefined) {\n                localVarQueryParameter['shortLabel'] = shortLabel;\n            }\n\n            if (label !== undefined) {\n                localVarQueryParameter['label'] = label;\n            }\n\n            if (reason !== undefined) {\n                localVarQueryParameter['reason'] = reason;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get all settings of a category\n         * @param {string} project Project short label\n         * @param {string} category Category short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCatCategorySettingGet(project: string, category: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectCatCategorySettingGet.');\n            }\n            // verify required parameter 'category' is not null or undefined\n            if (category === null || category === undefined) {\n                throw new RequiredError('category','Required parameter category was null or undefined when calling projectCatCategorySettingGet.');\n            }\n            const localVarPath = `/{project}/cat/{category}/setting`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"category\"}}`, encodeURIComponent(String(category)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Adds or changes a category setting. If the value is empty, the setting will be deleted\n         * @param {string} project Project short label\n         * @param {string} category Category short label\n         * @param {string} key setting key\n         * @param {string} value value\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCatCategorySettingPost(project: string, category: string, key: string, value: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectCatCategorySettingPost.');\n            }\n            // verify required parameter 'category' is not null or undefined\n            if (category === null || category === undefined) {\n                throw new RequiredError('category','Required parameter category was null or undefined when calling projectCatCategorySettingPost.');\n            }\n            // verify required parameter 'key' is not null or undefined\n            if (key === null || key === undefined) {\n                throw new RequiredError('key','Required parameter key was null or undefined when calling projectCatCategorySettingPost.');\n            }\n            // verify required parameter 'value' is not null or undefined\n            if (value === null || value === undefined) {\n                throw new RequiredError('value','Required parameter value was null or undefined when calling projectCatCategorySettingPost.');\n            }\n            const localVarPath = `/{project}/cat/{category}/setting`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"category\"}}`, encodeURIComponent(String(category)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (key !== undefined) {\n                localVarQueryParameter['key'] = key;\n            }\n\n            if (value !== undefined) {\n                localVarQueryParameter['value'] = value;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get all categories of a project\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCatGet(project: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectCatGet.');\n            }\n            const localVarPath = `/{project}/cat`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Adds a fields in a category\n         * @param {string} project Project short label\n         * @param {string} label Field label\n         * @param {string} category Category short label\n         * @param {string} fieldType Type of field\n         * @param {string} fieldParam Parameter for the field\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCatPost(project: string, label: string, category: string, fieldType: string, fieldParam: string, reason: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectCatPost.');\n            }\n            // verify required parameter 'label' is not null or undefined\n            if (label === null || label === undefined) {\n                throw new RequiredError('label','Required parameter label was null or undefined when calling projectCatPost.');\n            }\n            // verify required parameter 'category' is not null or undefined\n            if (category === null || category === undefined) {\n                throw new RequiredError('category','Required parameter category was null or undefined when calling projectCatPost.');\n            }\n            // verify required parameter 'fieldType' is not null or undefined\n            if (fieldType === null || fieldType === undefined) {\n                throw new RequiredError('fieldType','Required parameter fieldType was null or undefined when calling projectCatPost.');\n            }\n            // verify required parameter 'fieldParam' is not null or undefined\n            if (fieldParam === null || fieldParam === undefined) {\n                throw new RequiredError('fieldParam','Required parameter fieldParam was null or undefined when calling projectCatPost.');\n            }\n            // verify required parameter 'reason' is not null or undefined\n            if (reason === null || reason === undefined) {\n                throw new RequiredError('reason','Required parameter reason was null or undefined when calling projectCatPost.');\n            }\n            const localVarPath = `/{project}/cat`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (label !== undefined) {\n                localVarQueryParameter['label'] = label;\n            }\n\n            if (category !== undefined) {\n                localVarQueryParameter['category'] = category;\n            }\n\n            if (fieldType !== undefined) {\n                localVarQueryParameter['fieldType'] = fieldType;\n            }\n\n            if (fieldParam !== undefined) {\n                localVarQueryParameter['fieldParam'] = fieldParam;\n            }\n\n            if (reason !== undefined) {\n                localVarQueryParameter['reason'] = reason;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Clones a project\n         * @param {string} project Project short label\n         * @param {string} label Project label\n         * @param {string} shortLabel Project short label\n         * @param {number} keepHistory 1 or 0. Defaults to 0\n         * @param {number} keepContent 1 or 0. Defaults to 0 (only the REPORT part is kept, make sense only if keepHistory is 0)\n         * @param {number} keepPermissions 1 or 0. Defaults to 0 (with 0 the project doesn&#x27;t have any permission after cloning)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectClonePost(project: string, label: string, shortLabel: string, keepHistory: number, keepContent: number, keepPermissions: number, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectClonePost.');\n            }\n            // verify required parameter 'label' is not null or undefined\n            if (label === null || label === undefined) {\n                throw new RequiredError('label','Required parameter label was null or undefined when calling projectClonePost.');\n            }\n            // verify required parameter 'shortLabel' is not null or undefined\n            if (shortLabel === null || shortLabel === undefined) {\n                throw new RequiredError('shortLabel','Required parameter shortLabel was null or undefined when calling projectClonePost.');\n            }\n            // verify required parameter 'keepHistory' is not null or undefined\n            if (keepHistory === null || keepHistory === undefined) {\n                throw new RequiredError('keepHistory','Required parameter keepHistory was null or undefined when calling projectClonePost.');\n            }\n            // verify required parameter 'keepContent' is not null or undefined\n            if (keepContent === null || keepContent === undefined) {\n                throw new RequiredError('keepContent','Required parameter keepContent was null or undefined when calling projectClonePost.');\n            }\n            // verify required parameter 'keepPermissions' is not null or undefined\n            if (keepPermissions === null || keepPermissions === undefined) {\n                throw new RequiredError('keepPermissions','Required parameter keepPermissions was null or undefined when calling projectClonePost.');\n            }\n            const localVarPath = `/{project}/clone`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (label !== undefined) {\n                localVarQueryParameter['label'] = label;\n            }\n\n            if (shortLabel !== undefined) {\n                localVarQueryParameter['shortLabel'] = shortLabel;\n            }\n\n            if (keepHistory !== undefined) {\n                localVarQueryParameter['keepHistory'] = keepHistory;\n            }\n\n            if (keepContent !== undefined) {\n                localVarQueryParameter['keepContent'] = keepContent;\n            }\n\n            if (keepPermissions !== undefined) {\n                localVarQueryParameter['keepPermissions'] = keepPermissions;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Asks for the difference between 2 signed documents, as a Word document. The job ID is returned as answer\n         * @param {string} project Project short label\n         * @param {string} signitem1 SIGN-xx for the first SIGN document to compare\n         * @param {string} signitem2 SIGN-xx for the 2nd SIGN document to compare\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCompareSignitem1Signitem2Post(project: string, signitem1: string, signitem2: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectCompareSignitem1Signitem2Post.');\n            }\n            // verify required parameter 'signitem1' is not null or undefined\n            if (signitem1 === null || signitem1 === undefined) {\n                throw new RequiredError('signitem1','Required parameter signitem1 was null or undefined when calling projectCompareSignitem1Signitem2Post.');\n            }\n            // verify required parameter 'signitem2' is not null or undefined\n            if (signitem2 === null || signitem2 === undefined) {\n                throw new RequiredError('signitem2','Required parameter signitem2 was null or undefined when calling projectCompareSignitem1Signitem2Post.');\n            }\n            const localVarPath = `/{project}/compare/{signitem1}/{signitem2}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"signitem1\"}}`, encodeURIComponent(String(signitem1)))\n                .replace(`{${\"signitem2\"}}`, encodeURIComponent(String(signitem2)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get a project's schema\n         * @param {string} [excludeCategories] (optional) comma-separated list of categories to exclude, like DOC,SIGN\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectConfigcheckGet(excludeCategories?: string, options: any = {}): FetchArgs {\n            const localVarPath = `/project/configcheck`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (excludeCategories !== undefined) {\n                localVarQueryParameter['excludeCategories'] = excludeCategories;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project - admins can impersonate. Valid from version 2.2\n         * @summary Copy items from a folder to another one\n         * @param {string} project Project short label\n         * @param {string} itemOrFolder Item reference (XXX-nn) or folder (F-XXX-nn)\n         * @param {string} targetFolder Reference of the target folder (F-categ-serial)\n         * @param {string} reason The reason why the user is doing this\n         * @param {string} [targetProject] (optional) project to copy into (by default, same project)\n         * @param {number} [copyLabels] (optional) 0 or 1. Defaults to 0\n         * @param {string} [map] (optional) mapN&#x3D;M -  map field N in source to field M in target\n         * @param {string} [ignoreLabels] (optional) can contain a comma-delimited list of labels NOT to copy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCopyItemOrFolderPost(project: string, itemOrFolder: string, targetFolder: string, reason: string, targetProject?: string, copyLabels?: number, map?: string, ignoreLabels?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectCopyItemOrFolderPost.');\n            }\n            // verify required parameter 'itemOrFolder' is not null or undefined\n            if (itemOrFolder === null || itemOrFolder === undefined) {\n                throw new RequiredError('itemOrFolder','Required parameter itemOrFolder was null or undefined when calling projectCopyItemOrFolderPost.');\n            }\n            // verify required parameter 'targetFolder' is not null or undefined\n            if (targetFolder === null || targetFolder === undefined) {\n                throw new RequiredError('targetFolder','Required parameter targetFolder was null or undefined when calling projectCopyItemOrFolderPost.');\n            }\n            // verify required parameter 'reason' is not null or undefined\n            if (reason === null || reason === undefined) {\n                throw new RequiredError('reason','Required parameter reason was null or undefined when calling projectCopyItemOrFolderPost.');\n            }\n            const localVarPath = `/{project}/copy/{itemOrFolder}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"itemOrFolder\"}}`, encodeURIComponent(String(itemOrFolder)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (targetFolder !== undefined) {\n                localVarQueryParameter['targetFolder'] = targetFolder;\n            }\n\n            if (targetProject !== undefined) {\n                localVarQueryParameter['targetProject'] = targetProject;\n            }\n\n            if (copyLabels !== undefined) {\n                localVarQueryParameter['copyLabels'] = copyLabels;\n            }\n\n            if (map !== undefined) {\n                localVarQueryParameter['map'] = map;\n            }\n\n            if (ignoreLabels !== undefined) {\n                localVarQueryParameter['ignoreLabels'] = ignoreLabels;\n            }\n\n            if (reason !== undefined) {\n                localVarQueryParameter['reason'] = reason;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get cross project links\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCrossprojectlinkGet(project: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project', 'Required parameter project was null or undefined when calling projectCrossprojectlinkGet.');\n            }\n            const localVarPath = `/{project}/crossprojectlink`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"Authorization\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Reserved to Matrix Requirements operations. Valid from version 2.1\n         * @summary Removes completely a project (only used for unit testing). This is an actual DELETE in the database.\n         * @param {string} project Project short label\n         * @param {string} confirm Needs to be yes for the method to be executed\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectDelete(project: string, confirm: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectDelete.');\n            }\n            // verify required parameter 'confirm' is not null or undefined\n            if (confirm === null || confirm === undefined) {\n                throw new RequiredError('confirm','Required parameter confirm was null or undefined when calling projectDelete.');\n            }\n            const localVarPath = `/{project}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (confirm !== undefined) {\n                localVarQueryParameter['confirm'] = confirm;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Converts an excel file (xls, xlsx) into a XML version that we send straight back as an XML payload.\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectExcelxmlPost(project: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectExcelxmlPost.');\n            }\n            const localVarPath = `/{project}/excelxml`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Executes UC or TC into XTC items\n         * @param {string} project Project short label\n         * @param {ExecuteParam} [body] There must be a JSON as a payload. It includes all parameters AND the reason\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectExecutePost(project: string, body?: ExecuteParam, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectExecutePost.');\n            }\n            const localVarPath = `/{project}/execute`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"ExecuteParam\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Asks for an export of some items. The job ID is returned as answer\n         * @param {string} project Project short label\n         * @param {string} itemList Mandatory list of items to export.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectExportGet(project: string, itemList: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectExportGet.');\n            }\n            // verify required parameter 'itemList' is not null or undefined\n            if (itemList === null || itemList === undefined) {\n                throw new RequiredError('itemList','Required parameter itemList was null or undefined when calling projectExportGet.');\n            }\n            const localVarPath = `/{project}/export`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (itemList !== undefined) {\n                localVarQueryParameter['itemList'] = itemList;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Removes (inactivate) a field.\n         * @param {string} project Project short label\n         * @param {string} category Category short label\n         * @param {number} field The field number (like field&#x3D;502)\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectFieldCategoryDelete(project: string, category: string, field: number, reason: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectFieldCategoryDelete.');\n            }\n            // verify required parameter 'category' is not null or undefined\n            if (category === null || category === undefined) {\n                throw new RequiredError('category','Required parameter category was null or undefined when calling projectFieldCategoryDelete.');\n            }\n            // verify required parameter 'field' is not null or undefined\n            if (field === null || field === undefined) {\n                throw new RequiredError('field','Required parameter field was null or undefined when calling projectFieldCategoryDelete.');\n            }\n            // verify required parameter 'reason' is not null or undefined\n            if (reason === null || reason === undefined) {\n                throw new RequiredError('reason','Required parameter reason was null or undefined when calling projectFieldCategoryDelete.');\n            }\n            const localVarPath = `/{project}/field/{category}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"category\"}}`, encodeURIComponent(String(category)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (field !== undefined) {\n                localVarQueryParameter['field'] = field;\n            }\n\n            if (reason !== undefined) {\n                localVarQueryParameter['reason'] = reason;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get 1 field of an item. {item} has the form CATEG-number.\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} field Mandatory. Field number (faster) OR field label\n         * @param {string} [format] Optional. Format for the return. Can be text, json, html, xml or xslt. Defaults to html\n         * @param {number} [download] Optional. 1 to have in download, 0 as direct result. Defaults to 0.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectFieldItemGet(project: string, item: string, field: string, format?: string, download?: number, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectFieldItemGet.');\n            }\n            // verify required parameter 'item' is not null or undefined\n            if (item === null || item === undefined) {\n                throw new RequiredError('item','Required parameter item was null or undefined when calling projectFieldItemGet.');\n            }\n            // verify required parameter 'field' is not null or undefined\n            if (field === null || field === undefined) {\n                throw new RequiredError('field','Required parameter field was null or undefined when calling projectFieldItemGet.');\n            }\n            const localVarPath = `/{project}/field/{item}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"item\"}}`, encodeURIComponent(String(item)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (field !== undefined) {\n                localVarQueryParameter['field'] = field;\n            }\n\n            if (format !== undefined) {\n                localVarQueryParameter['format'] = format;\n            }\n\n            if (download !== undefined) {\n                localVarQueryParameter['download'] = download;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Modifies a field's label and parameter OR modifies a field's order.\n         * @param {string} project Project short label\n         * @param {number} field The field number (like field&#x3D;502)\n         * @param {string} label The new label (for renaming)\n         * @param {string} fieldParam The new parameter (for renaming)\n         * @param {number} order The new order (for reordering)\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectFieldPut(project: string, field: number, label: string, fieldParam: string, order: number, reason: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectFieldPut.');\n            }\n            // verify required parameter 'field' is not null or undefined\n            if (field === null || field === undefined) {\n                throw new RequiredError('field','Required parameter field was null or undefined when calling projectFieldPut.');\n            }\n            // verify required parameter 'label' is not null or undefined\n            if (label === null || label === undefined) {\n                throw new RequiredError('label','Required parameter label was null or undefined when calling projectFieldPut.');\n            }\n            // verify required parameter 'fieldParam' is not null or undefined\n            if (fieldParam === null || fieldParam === undefined) {\n                throw new RequiredError('fieldParam','Required parameter fieldParam was null or undefined when calling projectFieldPut.');\n            }\n            // verify required parameter 'order' is not null or undefined\n            if (order === null || order === undefined) {\n                throw new RequiredError('order','Required parameter order was null or undefined when calling projectFieldPut.');\n            }\n            // verify required parameter 'reason' is not null or undefined\n            if (reason === null || reason === undefined) {\n                throw new RequiredError('reason','Required parameter reason was null or undefined when calling projectFieldPut.');\n            }\n            const localVarPath = `/{project}/field`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (field !== undefined) {\n                localVarQueryParameter['field'] = field;\n            }\n\n            if (label !== undefined) {\n                localVarQueryParameter['label'] = label;\n            }\n\n            if (fieldParam !== undefined) {\n                localVarQueryParameter['fieldParam'] = fieldParam;\n            }\n\n            if (order !== undefined) {\n                localVarQueryParameter['order'] = order;\n            }\n\n            if (reason !== undefined) {\n                localVarQueryParameter['reason'] = reason;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have the right key to download the file. Valid from version 2.1\n         * @summary Retrieve one project file. The fileno is a simple fileId. This request returns the actual file\n         * @param {string} project Project short label\n         * @param {number} fileno file number\n         * @param {string} key The key of the file\n         * @param {string} [disposition] (optional, from version 2.3) set to disposition&#x3D;inline to ask the server to send the disposition to &#x27;inline&#x27; instead of &#x27;attachment&#x27;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectFileFilenoGet(project: string, fileno: number, key: string, disposition?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectFileFilenoGet.');\n            }\n            // verify required parameter 'fileno' is not null or undefined\n            if (fileno === null || fileno === undefined) {\n                throw new RequiredError('fileno','Required parameter fileno was null or undefined when calling projectFileFilenoGet.');\n            }\n            // verify required parameter 'key' is not null or undefined\n            if (key === null || key === undefined) {\n                throw new RequiredError('key','Required parameter key was null or undefined when calling projectFileFilenoGet.');\n            }\n            const localVarPath = `/{project}/file/{fileno}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"fileno\"}}`, encodeURIComponent(String(fileno)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (key !== undefined) {\n                localVarQueryParameter['key'] = key;\n            }\n\n            if (disposition !== undefined) {\n                localVarQueryParameter['disposition'] = disposition;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Retrieve list of all files owned by a project\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectFileGet(project: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectFileGet.');\n            }\n            const localVarPath = `/{project}/file`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Creates a new file - the file should be uploaded as payload (or through the url argument as an alternative). It's mime type should be sent through the HTTP protocol.\n         * @param {string} project Project short label\n         * @param {string} [url] Optional argument -  the file could also come from an external URL. In this case there will be an error if we can&#x27;t retrieve it on the server\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectFilePost(project: string, urlIn?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectFilePost.');\n            }\n            const localVarPath = `/{project}/file`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (urlIn !== undefined) {\n                localVarQueryParameter['url'] = urlIn;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project - admins can impersonate. Valid from version 2.1\n         * @summary Creates a new folder\n         * @param {string} project Project short label\n         * @param {string} parent Reference of the parent folder in the form F-CATEG-serial (example -  F-SPEC-17)\n         * @param {string} label folder label\n         * @param {string} reason The reason why the user is doing this\n         * @param {string} [fxField] (optional) Add one of each of these to set folder&#x27;s fields. fx is followed by the field ID (a number)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectFolderPost(project: string, parent: string, label: string, reason: string, fxField?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectFolderPost.');\n            }\n            // verify required parameter 'parent' is not null or undefined\n            if (parent === null || parent === undefined) {\n                throw new RequiredError('parent','Required parameter parent was null or undefined when calling projectFolderPost.');\n            }\n            // verify required parameter 'label' is not null or undefined\n            if (label === null || label === undefined) {\n                throw new RequiredError('label','Required parameter label was null or undefined when calling projectFolderPost.');\n            }\n            // verify required parameter 'reason' is not null or undefined\n            if (reason === null || reason === undefined) {\n                throw new RequiredError('reason','Required parameter reason was null or undefined when calling projectFolderPost.');\n            }\n            const localVarPath = `/{project}/folder`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (parent !== undefined) {\n                localVarQueryParameter['parent'] = parent;\n            }\n\n            if (label !== undefined) {\n                localVarQueryParameter['label'] = label;\n            }\n\n            if (reason !== undefined) {\n                localVarQueryParameter['reason'] = reason;\n            }\n\n            if (fxField !== undefined) {\n                localVarQueryParameter['fxField'] = fxField;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get list of project info -  users, settings, categories\n         * @param {string} project Project short label\n         * @param {number} [adminUI] (optional) set to adminUI&#x3D;1 to have this project data even if you are not assigned to, as an admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectGet(project: string, adminUI?: number, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectGet.');\n            }\n            const localVarPath = `/{project}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (adminUI !== undefined) {\n                localVarQueryParameter['adminUI'] = adminUI;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Hides a project\n         * @param {string} project Project short label\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectHidePut(project: string, reason: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectHidePut.');\n            }\n            // verify required parameter 'reason' is not null or undefined\n            if (reason === null || reason === undefined) {\n                throw new RequiredError('reason','Required parameter reason was null or undefined when calling projectHidePut.');\n            }\n            const localVarPath = `/{project}/hide`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (reason !== undefined) {\n                localVarQueryParameter['reason'] = reason;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.2\n         * @summary Launches a server-side hook\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} hook name of the hook\n         * @param {string} [body] Payload for the hook, treated as a string.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectHookItemPost(project: string, item: string, hook: string, body?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectHookItemPost.');\n            }\n            // verify required parameter 'item' is not null or undefined\n            if (item === null || item === undefined) {\n                throw new RequiredError('item','Required parameter item was null or undefined when calling projectHookItemPost.');\n            }\n            // verify required parameter 'hook' is not null or undefined\n            if (hook === null || hook === undefined) {\n                throw new RequiredError('hook','Required parameter hook was null or undefined when calling projectHookItemPost.');\n            }\n            const localVarPath = `/{project}/hook/{item}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"item\"}}`, encodeURIComponent(String(item)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (hook !== undefined) {\n                localVarQueryParameter['hook'] = hook;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'text/plain';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"string\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.3\n         * @summary Cleans up an input html blob according to the current html cleanup rules. The blob is passed in the POST payload. The payload must be a json object with {\\\"htmlToClean\\\" - \\\"x\\\"}\n         * @param {string} project Project short label\n         * @param {GetHmlBlobInput} [body] Payload\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectHtmlCleanupBlobPost(project: string, body?: GetHmlBlobInput, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectHtmlCleanupBlobPost.');\n            }\n            const localVarPath = `/{project}/htmlCleanupBlob`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"GetHmlBlobInput\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.3\n         * @summary Get the list of items that would be changed if we applied html cleanup. You can pass a cleanup setting in the payload of the POST. If it's not there we take the customer (global) setting and force the cleanup to true\n         * @param {string} project Project short label\n         * @param {CleanupSetting} [body] Cleanup setting (optional)\n         * @param {string} [categories] (optional) list of comma-delimited categories to go through, all by default\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectHtmlCleanupTestPost(project: string, body?: CleanupSetting, categories?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectHtmlCleanupTestPost.');\n            }\n            const localVarPath = `/{project}/htmlCleanupTest`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (categories !== undefined) {\n                localVarQueryParameter['categories'] = categories;\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"CleanupSetting\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - ?. Valid from version 2.1\n         * @summary Removes an import\n         * @param {string} project Project short label\n         * @param {string} id id\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectImportIdDelete(project: string, id: string, reason: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project', 'Required parameter project was null or undefined when calling projectImportIdDelete.');\n            }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id', 'Required parameter id was null or undefined when calling projectImportIdDelete.');\n            }\n            // verify required parameter 'reason' is not null or undefined\n            if (reason === null || reason === undefined) {\n                throw new RequiredError('reason', 'Required parameter reason was null or undefined when calling projectImportIdDelete.');\n            }\n            const localVarPath = `/{project}/import/{id}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"Authorization\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (reason !== undefined) {\n                localVarQueryParameter['reason'] = reason;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Imports some items into a project\n         * @param {string} project Project short label\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectImportPost(project: string, reason: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectImportPost.');\n            }\n            // verify required parameter 'reason' is not null or undefined\n            if (reason === null || reason === undefined) {\n                throw new RequiredError('reason','Required parameter reason was null or undefined when calling projectImportPost.');\n            }\n            const localVarPath = `/{project}/import`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (reason !== undefined) {\n                localVarQueryParameter['reason'] = reason;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.4\n         * @summary Get the history of a import in a project\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectImportinfoGet(project: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project', 'Required parameter project was null or undefined when calling projectImportinfoGet.');\n            }\n            const localVarPath = `/{project}/importinfo`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"Authorization\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get details of a folder. {folder} has the form F-CATEG-number[-vN].\n         * @param {string} project Project short label\n         * @param {string} folder Folder reference (F-XXX-nn)\n         * @param {number} [history] (optional) set history&#x3D;1 to retrieve list of all versions\n         * @param {string} [filter] (optional) specify a filter\n         * @param {string} [children] (optional) set to yes if you need the children as well (recursively).\n         * @param {string} [atDate] (optional) retrieves the item at that date - format is ISO8601 like atDate&#x3D;2018-05-30T14 - 48 - 27.223Z. Not compatible with the version query -vN\n         * @param {number} [fields] (optional) set fields&#x3D;1 to retrieve list of all fields, even the empty ones\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemFolderGet(project: string, folder: string, history?: number, filter?: string, children?: string, atDate?: string, fields?: number, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectItemFolderGet.');\n            }\n            // verify required parameter 'folder' is not null or undefined\n            if (folder === null || folder === undefined) {\n                throw new RequiredError('folder','Required parameter folder was null or undefined when calling projectItemFolderGet.');\n            }\n            const localVarPath = `/{project}/item/{folder}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"folder\"}}`, encodeURIComponent(String(folder)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (history !== undefined) {\n                localVarQueryParameter['history'] = history;\n            }\n\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n\n            if (children !== undefined) {\n                localVarQueryParameter['children'] = children;\n            }\n\n            if (atDate !== undefined) {\n                localVarQueryParameter['atDate'] = atDate;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Removes (inactivate) an item (or a folder). Item has the form (F-)CATEG-number. Will fail on non-empty folders\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} confirm Needs to be yes for the method to be executed IF it is a non-empty folder\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemItemDelete(project: string, item: string, confirm: string, reason: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectItemItemDelete.');\n            }\n            // verify required parameter 'item' is not null or undefined\n            if (item === null || item === undefined) {\n                throw new RequiredError('item','Required parameter item was null or undefined when calling projectItemItemDelete.');\n            }\n            // verify required parameter 'confirm' is not null or undefined\n            if (confirm === null || confirm === undefined) {\n                throw new RequiredError('confirm','Required parameter confirm was null or undefined when calling projectItemItemDelete.');\n            }\n            // verify required parameter 'reason' is not null or undefined\n            if (reason === null || reason === undefined) {\n                throw new RequiredError('reason','Required parameter reason was null or undefined when calling projectItemItemDelete.');\n            }\n            const localVarPath = `/{project}/item/{item}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"item\"}}`, encodeURIComponent(String(item)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (confirm !== undefined) {\n                localVarQueryParameter['confirm'] = confirm;\n            }\n\n            if (reason !== undefined) {\n                localVarQueryParameter['reason'] = reason;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get details of an item. {item} has the form CATEG-number[-vN].\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {number} [history] (optional) set history&#x3D;1 to retrieve list of all versions\n         * @param {number} [fields] (optional) set fields&#x3D;1 to retrieve list of all fields, even the empty ones\n         * @param {string} [filter] (optional) specify a filter\n         * @param {string} [atDate] (optional) retrieves the item at that date - format is ISO8601 like atDate&#x3D;2018-05-30T14 - 48 - 27.223Z. Not compatible with the version query -vN\n         * @param {number} [withTree] (optional) retrieves the context tree if set to 1, in the field contextTree. Exclusive to filter and atDate\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemItemGet(project: string, item: string, history?: number, fields?: number, filter?: string, atDate?: string, withTree?: number, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectItemItemGet.');\n            }\n            // verify required parameter 'item' is not null or undefined\n            if (item === null || item === undefined) {\n                throw new RequiredError('item','Required parameter item was null or undefined when calling projectItemItemGet.');\n            }\n            const localVarPath = `/{project}/item/{item}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"item\"}}`, encodeURIComponent(String(item)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (history !== undefined) {\n                localVarQueryParameter['history'] = history;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n\n            if (atDate !== undefined) {\n                localVarQueryParameter['atDate'] = atDate;\n            }\n\n            if (withTree !== undefined) {\n                localVarQueryParameter['withTree'] = withTree;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Restores an item. Item has the form CATEG-number\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} reason The reason why the user is doing this\n         * @param {number} [at] (optional) If set, specifies that the item should be restored as it was in that version\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemItemPost(project: string, item: string, reason: string, at?: number, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectItemItemPost.');\n            }\n            // verify required parameter 'item' is not null or undefined\n            if (item === null || item === undefined) {\n                throw new RequiredError('item','Required parameter item was null or undefined when calling projectItemItemPost.');\n            }\n            // verify required parameter 'reason' is not null or undefined\n            if (reason === null || reason === undefined) {\n                throw new RequiredError('reason','Required parameter reason was null or undefined when calling projectItemItemPost.');\n            }\n            const localVarPath = `/{project}/item/{item}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"item\"}}`, encodeURIComponent(String(item)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (at !== undefined) {\n                localVarQueryParameter['at'] = at;\n            }\n\n            if (reason !== undefined) {\n                localVarQueryParameter['reason'] = reason;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Modifies an item or a folder. Item has the form CATEG-number, folders -  F-CATEG-number\n         * @param {ItemItemBody} body \n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemItemPut(body: ItemItemBody, project: string, item: string, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body', 'Required parameter body was null or undefined when calling projectItemItemPut.');\n            }\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectItemItemPut.');\n            }\n            // verify required parameter 'item' is not null or undefined\n            if (item === null || item === undefined) {\n                throw new RequiredError('item','Required parameter item was null or undefined when calling projectItemItemPut.');\n            }\n            const localVarPath = `/{project}/item/{item}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"item\"}}`, encodeURIComponent(String(item)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"ItemItemBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project - admins can impersonate. Valid from version 2.1\n         * @summary Adds an item in a folder\n         * @param {ProjectItemBody} body \n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemPost(body: ProjectItemBody, project: string, options: any = {}): FetchArgs {\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body', 'Required parameter body was null or undefined when calling projectItemPost.');\n            }\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectItemPost.');\n            }\n            const localVarPath = `/{project}/item`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n            const needsSerialization = (<any>\"ProjectItemBody\" !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || \"\");\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - ?. Valid from version 2.1\n         * @summary Removes (inactivate) a link between 2 items. Items are in the form CATEG-number\n         * @param {string} project Project short label\n         * @param {string} upitem Item reference (XXX-nn) for the UP item\n         * @param {string} downitem Item reference (XXX-nn) for the DOWN item\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemlinkUpitemDownitemDelete(project: string, upitem: string, downitem: string, reason: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectItemlinkUpitemDownitemDelete.');\n            }\n            // verify required parameter 'upitem' is not null or undefined\n            if (upitem === null || upitem === undefined) {\n                throw new RequiredError('upitem','Required parameter upitem was null or undefined when calling projectItemlinkUpitemDownitemDelete.');\n            }\n            // verify required parameter 'downitem' is not null or undefined\n            if (downitem === null || downitem === undefined) {\n                throw new RequiredError('downitem','Required parameter downitem was null or undefined when calling projectItemlinkUpitemDownitemDelete.');\n            }\n            // verify required parameter 'reason' is not null or undefined\n            if (reason === null || reason === undefined) {\n                throw new RequiredError('reason','Required parameter reason was null or undefined when calling projectItemlinkUpitemDownitemDelete.');\n            }\n            const localVarPath = `/{project}/itemlink/{upitem}/{downitem}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"upitem\"}}`, encodeURIComponent(String(upitem)))\n                .replace(`{${\"downitem\"}}`, encodeURIComponent(String(downitem)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (reason !== undefined) {\n                localVarQueryParameter['reason'] = reason;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Adds a link between 2 items. Both items are in the form CATEG-number\n         * @param {string} project Project short label\n         * @param {string} upitem Item reference (XXX-nn) for the UP item\n         * @param {string} downitem Item reference (XXX-nn) for the DOWN item\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemlinkUpitemDownitemPost(project: string, upitem: string, downitem: string, reason: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectItemlinkUpitemDownitemPost.');\n            }\n            // verify required parameter 'upitem' is not null or undefined\n            if (upitem === null || upitem === undefined) {\n                throw new RequiredError('upitem','Required parameter upitem was null or undefined when calling projectItemlinkUpitemDownitemPost.');\n            }\n            // verify required parameter 'downitem' is not null or undefined\n            if (downitem === null || downitem === undefined) {\n                throw new RequiredError('downitem','Required parameter downitem was null or undefined when calling projectItemlinkUpitemDownitemPost.');\n            }\n            // verify required parameter 'reason' is not null or undefined\n            if (reason === null || reason === undefined) {\n                throw new RequiredError('reason','Required parameter reason was null or undefined when calling projectItemlinkUpitemDownitemPost.');\n            }\n            const localVarPath = `/{project}/itemlink/{upitem}/{downitem}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"upitem\"}}`, encodeURIComponent(String(upitem)))\n                .replace(`{${\"downitem\"}}`, encodeURIComponent(String(downitem)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (reason !== undefined) {\n                localVarQueryParameter['reason'] = reason;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get the list of items that are detailed in a DOC/SIGN item.\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {number} [detailed] Optional. When set to 1 adds a secondaryItems list in the answer. Defaults to 0.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemlistItemGet(project: string, item: string, detailed?: number, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectItemlistItemGet.');\n            }\n            // verify required parameter 'item' is not null or undefined\n            if (item === null || item === undefined) {\n                throw new RequiredError('item','Required parameter item was null or undefined when calling projectItemlistItemGet.');\n            }\n            const localVarPath = `/{project}/itemlist/{item}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"item\"}}`, encodeURIComponent(String(item)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (detailed !== undefined) {\n                localVarQueryParameter['detailed'] = detailed;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Retrieve list of all jobs in a project\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectJobGet(project: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectJobGet.');\n            }\n            const localVarPath = `/{project}/job`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.3\n         * @summary Aborts a job.\n         * @param {string} project Project short label\n         * @param {number} job job number\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectJobJobDelete(project: string, job: number, reason: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectJobJobDelete.');\n            }\n            // verify required parameter 'job' is not null or undefined\n            if (job === null || job === undefined) {\n                throw new RequiredError('job','Required parameter job was null or undefined when calling projectJobJobDelete.');\n            }\n            // verify required parameter 'reason' is not null or undefined\n            if (reason === null || reason === undefined) {\n                throw new RequiredError('reason','Required parameter reason was null or undefined when calling projectJobJobDelete.');\n            }\n            const localVarPath = `/{project}/job/{job}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"job\"}}`, encodeURIComponent(String(job)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (reason !== undefined) {\n                localVarQueryParameter['reason'] = reason;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get a job file. The job part is the jobID (a number) and the file is the fileID (a number)\n         * @param {string} project Project short label\n         * @param {number} job job number\n         * @param {number} fileno file number\n         * @param {string} [mode] (optional) set to mode&#x3D;direct to get the output in the response output instead of as a download file. This assumes the file is HTML\n         * @param {string} [format] (optional) set to format&#x3D;json to get a json output instead of XML\n         * @param {string} [disposition] (optional, from version 2.3) set to disposition&#x3D;inline to ask the server to send the disposition to &#x27;inline&#x27; instead of &#x27;attachment&#x27;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectJobJobFilenoGet(project: string, job: number, fileno: number, mode?: string, format?: string, disposition?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectJobJobFilenoGet.');\n            }\n            // verify required parameter 'job' is not null or undefined\n            if (job === null || job === undefined) {\n                throw new RequiredError('job','Required parameter job was null or undefined when calling projectJobJobFilenoGet.');\n            }\n            // verify required parameter 'fileno' is not null or undefined\n            if (fileno === null || fileno === undefined) {\n                throw new RequiredError('fileno','Required parameter fileno was null or undefined when calling projectJobJobFilenoGet.');\n            }\n            const localVarPath = `/{project}/job/{job}/{fileno}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"job\"}}`, encodeURIComponent(String(job)))\n                .replace(`{${\"fileno\"}}`, encodeURIComponent(String(fileno)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (mode !== undefined) {\n                localVarQueryParameter['mode'] = mode;\n            }\n\n            if (format !== undefined) {\n                localVarQueryParameter['format'] = format;\n            }\n\n            if (disposition !== undefined) {\n                localVarQueryParameter['disposition'] = disposition;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get a job status, including generated files. The variable part is the jobID (a number)\n         * @param {string} project Project short label\n         * @param {number} job job number\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectJobJobGet(project: string, job: number, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectJobJobGet.');\n            }\n            // verify required parameter 'job' is not null or undefined\n            if (job === null || job === undefined) {\n                throw new RequiredError('job','Required parameter job was null or undefined when calling projectJobJobGet.');\n            }\n            const localVarPath = `/{project}/job/{job}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"job\"}}`, encodeURIComponent(String(job)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.2\n         * @summary Sets the progress of a job\n         * @param {string} project Project short label\n         * @param {number} job job number\n         * @param {number} progress progress (0 to 100, 200 for error)\n         * @param {string} [status] (optional( status text\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectJobJobPost(project: string, job: number, progress: number, status?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectJobJobPost.');\n            }\n            // verify required parameter 'job' is not null or undefined\n            if (job === null || job === undefined) {\n                throw new RequiredError('job','Required parameter job was null or undefined when calling projectJobJobPost.');\n            }\n            // verify required parameter 'progress' is not null or undefined\n            if (progress === null || progress === undefined) {\n                throw new RequiredError('progress','Required parameter progress was null or undefined when calling projectJobJobPost.');\n            }\n            const localVarPath = `/{project}/job/{job}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"job\"}}`, encodeURIComponent(String(job)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (progress !== undefined) {\n                localVarQueryParameter['progress'] = progress;\n            }\n\n            if (status !== undefined) {\n                localVarQueryParameter['status'] = status;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.3\n         * @summary Get the label history of a project -  list of all label changes for all items\n         * @param {string} project Project short label\n         * @param {string} [itemRef] (optional) ask for just one item (the return structure is still an array in that case)\n         * @param {string} [from] (optional) date from\n         * @param {string} [to] (optional) date to - works only if you only specified a from\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectLabelhistoryGet(project: string, itemRef?: string, from?: string, to?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectLabelhistoryGet.');\n            }\n            const localVarPath = `/{project}/labelhistory`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (itemRef !== undefined) {\n                localVarQueryParameter['itemRef'] = itemRef;\n            }\n\n            if (from !== undefined) {\n                localVarQueryParameter['from'] = from;\n            }\n\n            if (to !== undefined) {\n                localVarQueryParameter['to'] = to;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.3\n         * @summary Get the merge history of a project - needs the 'merge' module\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectMergehistoryGet(project: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectMergehistoryGet.');\n            }\n            const localVarPath = `/{project}/mergehistory`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.3\n         * @summary Get the merge information - needs the 'merge' module\n         * @param {string} project Project short label\n         * @param {string} [excludeCategories] (optional) comma-delimited list of categories to exclude\n         * @param {string} [fromDate] (optional) date from which we consider the merges. ISO8601 format -- this parameter was introduced in v 2.3.4\n         * @param {number} [push] (optional) set to 1 if you inquire about a push, not a merge -- this parameter was introduced in v 2.3.4\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectMergeinfoGet(project: string, excludeCategories?: string, fromDate?: string, push?: number, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectMergeinfoGet.');\n            }\n            const localVarPath = `/{project}/mergeinfo`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (excludeCategories !== undefined) {\n                localVarQueryParameter['excludeCategories'] = excludeCategories;\n            }\n\n            if (fromDate !== undefined) {\n                localVarQueryParameter['fromDate'] = fromDate;\n            }\n\n            if (push !== undefined) {\n                localVarQueryParameter['push'] = push;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Imports some folders from a project to another as a module. Only available is you have the resync module licensed and the unique_serial setting\n         * @param {string} project Project short label\n         * @param {string} mode Import mode -  can be include or copy\n         * @param {string} sourceProject Source project\n         * @param {string} sourceSelection A selection of folders and items to import\n         * @param {string} reason The reason why the user is doing this\n         * @param {string} [update] Update mode -  can be simple, update or rebase. If not defined, simple assumed\n         * @param {string} [oldSourceProject] Old source project (if update&#x3D;rebase\n         * @param {string} [lockLabel] An optional label that this operation will set on all items\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectModuleimportPost(project: string, mode: string, sourceProject: string, sourceSelection: string, reason: string, update?: string, oldSourceProject?: string, lockLabel?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project', 'Required parameter project was null or undefined when calling projectModuleimportPost.');\n            }\n            // verify required parameter 'mode' is not null or undefined\n            if (mode === null || mode === undefined) {\n                throw new RequiredError('mode', 'Required parameter mode was null or undefined when calling projectModuleimportPost.');\n            }\n            // verify required parameter 'sourceProject' is not null or undefined\n            if (sourceProject === null || sourceProject === undefined) {\n                throw new RequiredError('sourceProject', 'Required parameter sourceProject was null or undefined when calling projectModuleimportPost.');\n            }\n            // verify required parameter 'sourceSelection' is not null or undefined\n            if (sourceSelection === null || sourceSelection === undefined) {\n                throw new RequiredError('sourceSelection', 'Required parameter sourceSelection was null or undefined when calling projectModuleimportPost.');\n            }\n            // verify required parameter 'reason' is not null or undefined\n            if (reason === null || reason === undefined) {\n                throw new RequiredError('reason', 'Required parameter reason was null or undefined when calling projectModuleimportPost.');\n            }\n            const localVarPath = `/{project}/moduleimport`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n                    ? configuration.apiKey(\"Authorization\")\n                    : configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (mode !== undefined) {\n                localVarQueryParameter['mode'] = mode;\n            }\n\n            if (update !== undefined) {\n                localVarQueryParameter['update'] = update;\n            }\n\n            if (sourceProject !== undefined) {\n                localVarQueryParameter['sourceProject'] = sourceProject;\n            }\n\n            if (oldSourceProject !== undefined) {\n                localVarQueryParameter['oldSourceProject'] = oldSourceProject;\n            }\n\n            if (sourceSelection !== undefined) {\n                localVarQueryParameter['sourceSelection'] = sourceSelection;\n            }\n\n            if (lockLabel !== undefined) {\n                localVarQueryParameter['lockLabel'] = lockLabel;\n            }\n\n            if (reason !== undefined) {\n                localVarQueryParameter['reason'] = reason;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Move items into this folder\n         * @param {string} project Project short label\n         * @param {string} folder Folder reference (F-XXX-nn)\n         * @param {string} reason The reason why the user is doing this\n         * @param {string} [items] List of items to move in\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectMoveinFolderPost(project: string, folder: string, reason: string, items?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectMoveinFolderPost.');\n            }\n            // verify required parameter 'folder' is not null or undefined\n            if (folder === null || folder === undefined) {\n                throw new RequiredError('folder','Required parameter folder was null or undefined when calling projectMoveinFolderPost.');\n            }\n            // verify required parameter 'reason' is not null or undefined\n            if (reason === null || reason === undefined) {\n                throw new RequiredError('reason','Required parameter reason was null or undefined when calling projectMoveinFolderPost.');\n            }\n            const localVarPath = `/{project}/movein/{folder}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"folder\"}}`, encodeURIComponent(String(folder)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (items !== undefined) {\n                localVarQueryParameter['items'] = items;\n            }\n\n            if (reason !== undefined) {\n                localVarQueryParameter['reason'] = reason;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Find items based on a search string in one project\n         * @param {string} project Project short label\n         * @param {string} search search term\n         * @param {string} id search id. Used by MatrixJira js to match queries with answers. Is returned in the output structure\n         * @param {string} [filter] (optional) applies a filter, can be negative\n         * @param {string} [fieldsOut] (optional) comma-delimited list of fields to return -  101,102 - or * for all\n         * @param {number} [labels] (optional) set to 1 to return labels in the output\n         * @param {number} [treeOrder] (optional) set to 1 to return items in tree order (otherwise it&#x27;s project,category,serial)\n         * @param {string} [links] (optional) set to up,down to return up and down items, or only up or only down\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectNeedleGet(project: string, search: string, id: string, filter?: string, fieldsOut?: string, labels?: number, treeOrder?: number, links?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectNeedleGet.');\n            }\n            // verify required parameter 'search' is not null or undefined\n            if (search === null || search === undefined) {\n                throw new RequiredError('search','Required parameter search was null or undefined when calling projectNeedleGet.');\n            }\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling projectNeedleGet.');\n            }\n            const localVarPath = `/{project}/needle`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (id !== undefined) {\n                localVarQueryParameter['id'] = id;\n            }\n\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n\n            if (fieldsOut !== undefined) {\n                localVarQueryParameter['fieldsOut'] = fieldsOut;\n            }\n\n            if (labels !== undefined) {\n                localVarQueryParameter['labels'] = labels;\n            }\n\n            if (treeOrder !== undefined) {\n                localVarQueryParameter['treeOrder'] = treeOrder;\n            }\n\n            if (links !== undefined) {\n                localVarQueryParameter['links'] = links;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Find item ids based on a search string in one project\n         * @param {string} project Project short label\n         * @param {string} search search term\n         * @param {string} [filter] (optional) applies a filter, can be negative\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectNeedleminimalGet(project: string, search: string, filter?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectNeedleminimalGet.');\n            }\n            // verify required parameter 'search' is not null or undefined\n            if (search === null || search === undefined) {\n                throw new RequiredError('search','Required parameter search was null or undefined when calling projectNeedleminimalGet.');\n            }\n            const localVarPath = `/{project}/needleminimal`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Adds a category to a project\n         * @param {string} project Project short label\n         * @param {string} label Category label\n         * @param {string} shortLabel Category short label\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectPost(project: string, label: string, shortLabel: string, reason: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectPost.');\n            }\n            // verify required parameter 'label' is not null or undefined\n            if (label === null || label === undefined) {\n                throw new RequiredError('label','Required parameter label was null or undefined when calling projectPost.');\n            }\n            // verify required parameter 'shortLabel' is not null or undefined\n            if (shortLabel === null || shortLabel === undefined) {\n                throw new RequiredError('shortLabel','Required parameter shortLabel was null or undefined when calling projectPost.');\n            }\n            // verify required parameter 'reason' is not null or undefined\n            if (reason === null || reason === undefined) {\n                throw new RequiredError('reason','Required parameter reason was null or undefined when calling projectPost.');\n            }\n            const localVarPath = `/{project}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (label !== undefined) {\n                localVarQueryParameter['label'] = label;\n            }\n\n            if (shortLabel !== undefined) {\n                localVarQueryParameter['shortLabel'] = shortLabel;\n            }\n\n            if (reason !== undefined) {\n                localVarQueryParameter['reason'] = reason;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Publishes an item. Item has the form PUB-nnn\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} reason reason for the publication\n         * @param {string} [trainingFor] (optional) list of items for which we need to add training. If list is not there, all trainings will be generated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectPublishItemPost(project: string, item: string, reason: string, trainingFor?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectPublishItemPost.');\n            }\n            // verify required parameter 'item' is not null or undefined\n            if (item === null || item === undefined) {\n                throw new RequiredError('item','Required parameter item was null or undefined when calling projectPublishItemPost.');\n            }\n            // verify required parameter 'reason' is not null or undefined\n            if (reason === null || reason === undefined) {\n                throw new RequiredError('reason','Required parameter reason was null or undefined when calling projectPublishItemPost.');\n            }\n            const localVarPath = `/{project}/publish/{item}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"item\"}}`, encodeURIComponent(String(item)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (reason !== undefined) {\n                localVarQueryParameter['reason'] = reason;\n            }\n\n            if (trainingFor !== undefined) {\n                localVarQueryParameter['trainingFor'] = trainingFor;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have QMS viewer access (or higher) to the project. Valid from version 2.3\n         * @summary Find a string in the QMS published items\n         * @param {string} project Project short label\n         * @param {string} [search] (optional) search term. Return an empty array on PUB &lt; 2.3.1 and et the list of all pub if not specified.\n         * @param {string} [pubItem] (optional) PUB-x item if you want to search in another than the last one for that project\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectQmsfindGet(project: string, search?: string, pubItem?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectQmsfindGet.');\n            }\n            const localVarPath = `/{project}/qmsfind`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (pubItem !== undefined) {\n                localVarQueryParameter['pubItem'] = pubItem;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) for the reports, read/write for the signed reports. Valid from version 2.1\n         * @summary Asks for a new report. The job ID is returned as answer. {report} can be REPORT-n, DOC-n, SIGN-n or a report name.To follow the progress of the job, the GET /{project}/job/{jobid} can be called\n         * @param {string} project Project short label\n         * @param {string} report name of the report\n         * @param {string} isSignedReport If set to true, means the report needs to generate a signed record\n         * @param {string} includeSignatures List of comma separated users who need to sign\n         * @param {string} newTitle New title for the SIGN- item that is generated (only valid for isSignedReport)\n         * @param {string} copyFields List of from-to fields (123,456),(124,457) that we can use to generate the fields in the SIGN record (only valid for isSignedReport)\n         * @param {string} [itemList] (optional) list of items to use in the report. By default all categories are used\n         * @param {string} [url] (optional) url to generate in the filter\n         * @param {string} [resturl] (optional) REST url to generate in the filter\n         * @param {string} [format] (optional) format -  html (default), pdf, docx, odt, xml, zipdocx, zippdf or package (from 2.2), or mf (since 2.3)\n         * @param {string} [filter] (optional) specify a comma-delimited filter list. Can be negative filters (with minus before)\n         * @param {number} [useOld] (optional) ask to use the old report engine (pre 1.11) if set to 1.\n         * @param {string} [atDate] (optional) generates the report at that date - format is ISO8601 like atDate&#x3D;2018-05-30T14 - 48 - 27.223Z\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectReportReportPost(project: string, report: string, isSignedReport: string, includeSignatures: string, newTitle: string, copyFields: string, itemList?: string, urlIn?: string, resturl?: string, format?: string, filter?: string, useOld?: number, atDate?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectReportReportPost.');\n            }\n            // verify required parameter 'report' is not null or undefined\n            if (report === null || report === undefined) {\n                throw new RequiredError('report','Required parameter report was null or undefined when calling projectReportReportPost.');\n            }\n            // verify required parameter 'isSignedReport' is not null or undefined\n            if (isSignedReport === null || isSignedReport === undefined) {\n                throw new RequiredError('isSignedReport','Required parameter isSignedReport was null or undefined when calling projectReportReportPost.');\n            }\n            // verify required parameter 'includeSignatures' is not null or undefined\n            if (includeSignatures === null || includeSignatures === undefined) {\n                throw new RequiredError('includeSignatures','Required parameter includeSignatures was null or undefined when calling projectReportReportPost.');\n            }\n            // verify required parameter 'newTitle' is not null or undefined\n            if (newTitle === null || newTitle === undefined) {\n                throw new RequiredError('newTitle','Required parameter newTitle was null or undefined when calling projectReportReportPost.');\n            }\n            // verify required parameter 'copyFields' is not null or undefined\n            if (copyFields === null || copyFields === undefined) {\n                throw new RequiredError('copyFields','Required parameter copyFields was null or undefined when calling projectReportReportPost.');\n            }\n            const localVarPath = `/{project}/report/{report}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"report\"}}`, encodeURIComponent(String(report)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (itemList !== undefined) {\n                localVarQueryParameter['itemList'] = itemList;\n            }\n\n            if (urlIn !== undefined) {\n                localVarQueryParameter['url'] = urlIn;\n            }\n\n            if (resturl !== undefined) {\n                localVarQueryParameter['resturl'] = resturl;\n            }\n\n            if (format !== undefined) {\n                localVarQueryParameter['format'] = format;\n            }\n\n            if (isSignedReport !== undefined) {\n                localVarQueryParameter['isSignedReport'] = isSignedReport;\n            }\n\n            if (includeSignatures !== undefined) {\n                localVarQueryParameter['includeSignatures'] = includeSignatures;\n            }\n\n            if (newTitle !== undefined) {\n                localVarQueryParameter['newTitle'] = newTitle;\n            }\n\n            if (copyFields !== undefined) {\n                localVarQueryParameter['copyFields'] = copyFields;\n            }\n\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n\n            if (useOld !== undefined) {\n                localVarQueryParameter['useOld'] = useOld;\n            }\n\n            if (atDate !== undefined) {\n                localVarQueryParameter['atDate'] = atDate;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get a project's schema\n         * @param {string} project Project short label\n         * @param {number} [simple] (optional) set to simple&#x3D;1 to have a simpler output (no fields, round shape)\n         * @param {string} [excludeCategories] (optional) comma-separated list of categories to exclude, like DOC,SIGN\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectSchemaGet(project: string, simple?: number, excludeCategories?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectSchemaGet.');\n            }\n            const localVarPath = `/{project}/schema`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (simple !== undefined) {\n                localVarQueryParameter['simple'] = simple;\n            }\n\n            if (excludeCategories !== undefined) {\n                localVarQueryParameter['excludeCategories'] = excludeCategories;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Get all settings of a project\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectSettingGet(project: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectSettingGet.');\n            }\n            const localVarPath = `/{project}/setting`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Adds or changes a project setting. If the value is empty, the setting will be deleted.\n         * @param {string} project Project short label\n         * @param {string} key setting key\n         * @param {string} value value\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectSettingPost(project: string, key: string, value: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectSettingPost.');\n            }\n            // verify required parameter 'key' is not null or undefined\n            if (key === null || key === undefined) {\n                throw new RequiredError('key','Required parameter key was null or undefined when calling projectSettingPost.');\n            }\n            // verify required parameter 'value' is not null or undefined\n            if (value === null || value === undefined) {\n                throw new RequiredError('value','Required parameter value was null or undefined when calling projectSettingPost.');\n            }\n            const localVarPath = `/{project}/setting`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (key !== undefined) {\n                localVarQueryParameter['key'] = key;\n            }\n\n            if (value !== undefined) {\n                localVarQueryParameter['value'] = value;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Signs an item. Item has the form SIGN-nnn\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} password signature password - the user who is signing is the one who is logged in\n         * @param {string} [acceptComments] (optional) adds an acceptance comment\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectSignItemPost(project: string, item: string, password: string, acceptComments?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectSignItemPost.');\n            }\n            // verify required parameter 'item' is not null or undefined\n            if (item === null || item === undefined) {\n                throw new RequiredError('item','Required parameter item was null or undefined when calling projectSignItemPost.');\n            }\n            // verify required parameter 'password' is not null or undefined\n            if (password === null || password === undefined) {\n                throw new RequiredError('password','Required parameter password was null or undefined when calling projectSignItemPost.');\n            }\n            const localVarPath = `/{project}/sign/{item}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"item\"}}`, encodeURIComponent(String(item)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (password !== undefined) {\n                localVarQueryParameter['password'] = password;\n            }\n\n            if (acceptComments !== undefined) {\n                localVarQueryParameter['acceptComments'] = acceptComments;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Edit the signature parts\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} rejectSign The reason why the user is rejecting the signature\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectSignItemPut(project: string, item: string, rejectSign: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectSignItemPut.');\n            }\n            // verify required parameter 'item' is not null or undefined\n            if (item === null || item === undefined) {\n                throw new RequiredError('item','Required parameter item was null or undefined when calling projectSignItemPut.');\n            }\n            // verify required parameter 'rejectSign' is not null or undefined\n            if (rejectSign === null || rejectSign === undefined) {\n                throw new RequiredError('rejectSign','Required parameter rejectSign was null or undefined when calling projectSignItemPut.');\n            }\n            const localVarPath = `/{project}/sign/{item}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"item\"}}`, encodeURIComponent(String(item)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (rejectSign !== undefined) {\n                localVarQueryParameter['rejectSign'] = rejectSign;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Asks for a new report. The job ID is returned as answer\n         * @param {string} project Project short label\n         * @param {string} [url] (optional) url to generate in the filter\n         * @param {string} [resturl] (optional) REST url to generate in the filter\n         * @param {string} [format] (optional) format -  html (default), pdf, docx, odt, xml, zipdocx or zippdf\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectSignedreportSIGNNPost(project: string, urlIn?: string, resturl?: string, format?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectSignedreportSIGNNPost.');\n            }\n            const localVarPath = `/{project}/signedreport/SIGN-n`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (urlIn !== undefined) {\n                localVarQueryParameter['url'] = urlIn;\n            }\n\n            if (resturl !== undefined) {\n                localVarQueryParameter['resturl'] = resturl;\n            }\n\n            if (format !== undefined) {\n                localVarQueryParameter['format'] = format;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Get all tags of a project. Works on any project if user is admin\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectTagGet(project: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectTagGet.');\n            }\n            const localVarPath = `/{project}/tag`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Adds a tag to a project\n         * @param {string} project Project short label\n         * @param {string} label Tag label. Must be unique within a project\n         * @param {number} auditId Id of the audit this tag is based on\n         * @param {string} type Type of tag (default -  tag)\n         * @param {string} comments Free optional comment\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectTagPost(project: string, label: string, auditId: number, type: string, comments: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectTagPost.');\n            }\n            // verify required parameter 'label' is not null or undefined\n            if (label === null || label === undefined) {\n                throw new RequiredError('label','Required parameter label was null or undefined when calling projectTagPost.');\n            }\n            // verify required parameter 'auditId' is not null or undefined\n            if (auditId === null || auditId === undefined) {\n                throw new RequiredError('auditId','Required parameter auditId was null or undefined when calling projectTagPost.');\n            }\n            // verify required parameter 'type' is not null or undefined\n            if (type === null || type === undefined) {\n                throw new RequiredError('type','Required parameter type was null or undefined when calling projectTagPost.');\n            }\n            // verify required parameter 'comments' is not null or undefined\n            if (comments === null || comments === undefined) {\n                throw new RequiredError('comments','Required parameter comments was null or undefined when calling projectTagPost.');\n            }\n            const localVarPath = `/{project}/tag`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (label !== undefined) {\n                localVarQueryParameter['label'] = label;\n            }\n\n            if (auditId !== undefined) {\n                localVarQueryParameter['auditId'] = auditId;\n            }\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n            if (comments !== undefined) {\n                localVarQueryParameter['comments'] = comments;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.2\n         * @summary Get all todos for the current user, for oneproject\n         * @param {string} project Project short label\n         * @param {string} [itemRef] (optional) set to an item to have all todos linked to an item, regardless of the user\n         * @param {number} [includeDone] (optional) set to 1 to include done todos and todo&#x27;s created by the user\n         * @param {number} [includeAllUsers] (optional) set to 1 to include all todos for all users\n         * @param {number} [includeFuture] (optional) set to 1 to include future todos as well (defaults to 0)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectTodoGet(project: string, itemRef?: string, includeDone?: number, includeAllUsers?: number, includeFuture?: number, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectTodoGet.');\n            }\n            const localVarPath = `/{project}/todo`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (itemRef !== undefined) {\n                localVarQueryParameter['itemRef'] = itemRef;\n            }\n\n            if (includeDone !== undefined) {\n                localVarQueryParameter['includeDone'] = includeDone;\n            }\n\n            if (includeAllUsers !== undefined) {\n                localVarQueryParameter['includeAllUsers'] = includeAllUsers;\n            }\n\n            if (includeFuture !== undefined) {\n                localVarQueryParameter['includeFuture'] = includeFuture;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.2\n         * @summary Creates a todo on an item (note that you only need read access for this POST method) for you or others\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} text The todo reason\n         * @param {number} [fieldId] (optional) If set, specifies that the todo is related to that field (review, ...)\n         * @param {string} [logins] (optional) If set, a list of user logins or groups to which these todo apply\n         * @param {string} [todoType] (optional) The todo type -  &#x27;user&#x27; by default\n         * @param {string} [atDate] (optional) a date in the future for reminders\n         * @param {number} [auto] (optional) set to 1 to create an auto-notification (0 by default)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectTodoItemPost(project: string, item: string, text: string, fieldId?: number, logins?: string, todoType?: string, atDate?: string, auto?: number, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectTodoItemPost.');\n            }\n            // verify required parameter 'item' is not null or undefined\n            if (item === null || item === undefined) {\n                throw new RequiredError('item','Required parameter item was null or undefined when calling projectTodoItemPost.');\n            }\n            // verify required parameter 'text' is not null or undefined\n            if (text === null || text === undefined) {\n                throw new RequiredError('text','Required parameter text was null or undefined when calling projectTodoItemPost.');\n            }\n            const localVarPath = `/{project}/todo/{item}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"item\"}}`, encodeURIComponent(String(item)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (fieldId !== undefined) {\n                localVarQueryParameter['fieldId'] = fieldId;\n            }\n\n            if (logins !== undefined) {\n                localVarQueryParameter['logins'] = logins;\n            }\n\n            if (text !== undefined) {\n                localVarQueryParameter['text'] = text;\n            }\n\n            if (todoType !== undefined) {\n                localVarQueryParameter['todoType'] = todoType;\n            }\n\n            if (atDate !== undefined) {\n                localVarQueryParameter['atDate'] = atDate;\n            }\n\n            if (auto !== undefined) {\n                localVarQueryParameter['auto'] = auto;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.2\n         * @summary Removes (mark as done) a todo.\n         * @param {string} project Project short label\n         * @param {string} todoid todoid\n         * @param {string} hardDelete Set to yes to actually remove the record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectTodoTodoidDelete(project: string, todoid: string, hardDelete: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectTodoTodoidDelete.');\n            }\n            // verify required parameter 'todoid' is not null or undefined\n            if (todoid === null || todoid === undefined) {\n                throw new RequiredError('todoid','Required parameter todoid was null or undefined when calling projectTodoTodoidDelete.');\n            }\n            // verify required parameter 'hardDelete' is not null or undefined\n            if (hardDelete === null || hardDelete === undefined) {\n                throw new RequiredError('hardDelete','Required parameter hardDelete was null or undefined when calling projectTodoTodoidDelete.');\n            }\n            const localVarPath = `/{project}/todo/{todoid}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"todoid\"}}`, encodeURIComponent(String(todoid)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (hardDelete !== undefined) {\n                localVarQueryParameter['hardDelete'] = hardDelete;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Touches (set to same date) an item or folder\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} reason The reason why the user is doing this\n         * @param {number} [nbLayers] (optional) Number of layers -- 1 by default\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectTouchItemPut(project: string, item: string, reason: string, nbLayers?: number, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectTouchItemPut.');\n            }\n            // verify required parameter 'item' is not null or undefined\n            if (item === null || item === undefined) {\n                throw new RequiredError('item','Required parameter item was null or undefined when calling projectTouchItemPut.');\n            }\n            // verify required parameter 'reason' is not null or undefined\n            if (reason === null || reason === undefined) {\n                throw new RequiredError('reason','Required parameter reason was null or undefined when calling projectTouchItemPut.');\n            }\n            const localVarPath = `/{project}/touch/{item}`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)))\n                .replace(`{${\"item\"}}`, encodeURIComponent(String(item)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (reason !== undefined) {\n                localVarQueryParameter['reason'] = reason;\n            }\n\n            if (nbLayers !== undefined) {\n                localVarQueryParameter['nbLayers'] = nbLayers;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get full tree\n         * @param {string} project Project short label\n         * @param {string} [fancy] (optional) returns a fancy tree\n         * @param {string} [filter] (optional) applies a filter\n         * @param {string} [atDate] (optional) generates the tree at that date - format is ISO8601 like atDate&#x3D;2018-05-30T14 - 48 - 27.223Z\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectTreeGet(project: string, fancy?: string, filter?: string, atDate?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectTreeGet.');\n            }\n            const localVarPath = `/{project}/tree`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (fancy !== undefined) {\n                localVarQueryParameter['fancy'] = fancy;\n            }\n\n            if (filter !== undefined) {\n                localVarQueryParameter['filter'] = filter;\n            }\n\n            if (atDate !== undefined) {\n                localVarQueryParameter['atDate'] = atDate;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Unhides a project.\n         * @param {string} project Project short label\n         * @param {string} newShort The new project short name to use\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectUnhidePut(project: string, newShort: string, reason: string, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectUnhidePut.');\n            }\n            // verify required parameter 'newShort' is not null or undefined\n            if (newShort === null || newShort === undefined) {\n                throw new RequiredError('newShort','Required parameter newShort was null or undefined when calling projectUnhidePut.');\n            }\n            // verify required parameter 'reason' is not null or undefined\n            if (reason === null || reason === undefined) {\n                throw new RequiredError('reason','Required parameter reason was null or undefined when calling projectUnhidePut.');\n            }\n            const localVarPath = `/{project}/unhide`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (newShort !== undefined) {\n                localVarQueryParameter['newShort'] = newShort;\n            }\n\n            if (reason !== undefined) {\n                localVarQueryParameter['reason'] = reason;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Converts a word document to an HTML, with images pointing to uploaded files on the server\n         * @param {string} project Project short label\n         * @param {string} reason The reason why the user is doing this\n         * @param {number} [fileNo] If specified, means that the conversion is from an already uploaded file. Otherwise the file must be uploaded as body of this call\n         * @param {string} [targetDocumentFolder] target document folder (in this case creates a document)\n         * @param {number} [useAsField] set to 1 to have this docx used as a field. In this case the return value is the html equivalent, with some meta\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectWordconvertPost(project: string, reason: string, fileNo?: number, targetDocumentFolder?: string, useAsField?: number, options: any = {}): FetchArgs {\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling projectWordconvertPost.');\n            }\n            // verify required parameter 'reason' is not null or undefined\n            if (reason === null || reason === undefined) {\n                throw new RequiredError('reason','Required parameter reason was null or undefined when calling projectWordconvertPost.');\n            }\n            const localVarPath = `/{project}/wordconvert`\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (fileNo !== undefined) {\n                localVarQueryParameter['fileNo'] = fileNo;\n            }\n\n            if (targetDocumentFolder !== undefined) {\n                localVarQueryParameter['targetDocumentFolder'] = targetDocumentFolder;\n            }\n\n            if (useAsField !== undefined) {\n                localVarQueryParameter['useAsField'] = useAsField;\n            }\n\n            if (reason !== undefined) {\n                localVarQueryParameter['reason'] = reason;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Get list of all projects, all settings and current user, all todos and JIRA meta create object\n         * @param {number} [adminUI] (optional) set to adminUI&#x3D;1 to have all projects even the ones you are not assigned to, as an admin\n         * @param {string} [output] (optional) comma-delimited list of requested output fields. Returns all fields if parameter is not present\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        rootGet(adminUI?: number, output?: string, options: any = {}): FetchArgs {\n            const localVarPath = `/`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (adminUI !== undefined) {\n                localVarQueryParameter['adminUI'] = adminUI;\n            }\n\n            if (output !== undefined) {\n                localVarQueryParameter['output'] = output;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Creates a new project. Either the full project is sent as XML payload, or the label and shortLabel are given. If uploading data for a whole project, label and shortLabel are optional but overwrite the XML content if present. Branching can be done with an audit report as payload, and branch* must be defined in that case\n         * @param {string} label Project label\n         * @param {string} shortLabel Project short label\n         * @param {string} [overwrite] Must be set to yes if you&#x27;re overwriting an existing project\n         * @param {string} [importUsers] Must be set to yes if you want to import users. false by default\n         * @param {string} [branchLabel] Must be set to branch (optional)\n         * @param {string} [branchTag] Must be set to branch, and match a tag in the audit export (optional)\n         * @param {string} [branchComment] Comment for the branch (optional)\n         * @param {string} [branchBaseProjectLabel] Label of the base Project (optional)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        rootPost(label: string, shortLabel: string, overwrite?: string, importUsers?: string, branchLabel?: string, branchTag?: string, branchComment?: string, branchBaseProjectLabel?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'label' is not null or undefined\n            if (label === null || label === undefined) {\n                throw new RequiredError('label','Required parameter label was null or undefined when calling rootPost.');\n            }\n            // verify required parameter 'shortLabel' is not null or undefined\n            if (shortLabel === null || shortLabel === undefined) {\n                throw new RequiredError('shortLabel','Required parameter shortLabel was null or undefined when calling rootPost.');\n            }\n            const localVarPath = `/`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (label !== undefined) {\n                localVarQueryParameter['label'] = label;\n            }\n\n            if (shortLabel !== undefined) {\n                localVarQueryParameter['shortLabel'] = shortLabel;\n            }\n\n            if (overwrite !== undefined) {\n                localVarQueryParameter['overwrite'] = overwrite;\n            }\n\n            if (importUsers !== undefined) {\n                localVarQueryParameter['importUsers'] = importUsers;\n            }\n\n            if (branchLabel !== undefined) {\n                localVarQueryParameter['branchLabel'] = branchLabel;\n            }\n\n            if (branchTag !== undefined) {\n                localVarQueryParameter['branchTag'] = branchTag;\n            }\n\n            if (branchComment !== undefined) {\n                localVarQueryParameter['branchComment'] = branchComment;\n            }\n\n            if (branchBaseProjectLabel !== undefined) {\n                localVarQueryParameter['branchBaseProjectLabel'] = branchBaseProjectLabel;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin or the user. Valid from version 2.1\n         * @summary Retrieves the user list\n         * @param {string} details (optional) -  if set to 1 returns all details\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userGet(details: string, options: any = {}): FetchArgs {\n            // verify required parameter 'details' is not null or undefined\n            if (details === null || details === undefined) {\n                throw new RequiredError('details','Required parameter details was null or undefined when calling userGet.');\n            }\n            const localVarPath = `/user`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (details !== undefined) {\n                localVarQueryParameter['details'] = details;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Creates a new user. Arguments are either a set of arguments or json\n         * @param {string} login User login name\n         * @param {string} email User email\n         * @param {string} password User password in clear\n         * @param {string} json A json struct with login, email, password, first, last, signatureImage(int), signaturePassword, admin(int)\n         * @param {string} [first] User first name (optional)\n         * @param {string} [last] User last name (optional)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userPost(login: string, email: string, password: string, json: string, first?: string, last?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'login' is not null or undefined\n            if (login === null || login === undefined) {\n                throw new RequiredError('login','Required parameter login was null or undefined when calling userPost.');\n            }\n            // verify required parameter 'email' is not null or undefined\n            if (email === null || email === undefined) {\n                throw new RequiredError('email','Required parameter email was null or undefined when calling userPost.');\n            }\n            // verify required parameter 'password' is not null or undefined\n            if (password === null || password === undefined) {\n                throw new RequiredError('password','Required parameter password was null or undefined when calling userPost.');\n            }\n            // verify required parameter 'json' is not null or undefined\n            if (json === null || json === undefined) {\n                throw new RequiredError('json','Required parameter json was null or undefined when calling userPost.');\n            }\n            const localVarPath = `/user`;\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (login !== undefined) {\n                localVarQueryParameter['login'] = login;\n            }\n\n            if (email !== undefined) {\n                localVarQueryParameter['email'] = email;\n            }\n\n            if (password !== undefined) {\n                localVarQueryParameter['password'] = password;\n            }\n\n            if (first !== undefined) {\n                localVarQueryParameter['first'] = first;\n            }\n\n            if (last !== undefined) {\n                localVarQueryParameter['last'] = last;\n            }\n\n            if (json !== undefined) {\n                localVarQueryParameter['json'] = json;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be that user - Matrix operations can impersonate. Valid from version 2.1\n         * @summary Retrieves all actions of a user\n         * @param {string} user user login name\n         * @param {number} [startAt] (optional) Pagination -  starts the audit after N records\n         * @param {number} [maxResults] (optional) Pagination -  Retrieve N results per page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserAuditGet(user: string, startAt?: number, maxResults?: number, options: any = {}): FetchArgs {\n            // verify required parameter 'user' is not null or undefined\n            if (user === null || user === undefined) {\n                throw new RequiredError('user','Required parameter user was null or undefined when calling userUserAuditGet.');\n            }\n            const localVarPath = `/user/{user}/audit`\n                .replace(`{${\"user\"}}`, encodeURIComponent(String(user)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (startAt !== undefined) {\n                localVarQueryParameter['startAt'] = startAt;\n            }\n\n            if (maxResults !== undefined) {\n                localVarQueryParameter['maxResults'] = maxResults;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be that user - Matrix operations can impersonate. Valid from version 2.1\n         * @summary Check a user's password\n         * @param {string} user user login name\n         * @param {string} password Asks for a check of the password1\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserCheckGet(user: string, password: string, options: any = {}): FetchArgs {\n            // verify required parameter 'user' is not null or undefined\n            if (user === null || user === undefined) {\n                throw new RequiredError('user','Required parameter user was null or undefined when calling userUserCheckGet.');\n            }\n            // verify required parameter 'password' is not null or undefined\n            if (password === null || password === undefined) {\n                throw new RequiredError('password','Required parameter password was null or undefined when calling userUserCheckGet.');\n            }\n            const localVarPath = `/user/{user}/check`\n                .replace(`{${\"user\"}}`, encodeURIComponent(String(user)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (password !== undefined) {\n                localVarQueryParameter['password'] = password;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be that user - Matrix operations can impersonate. Valid from version 2.1\n         * @summary Check a user's password\n         * @param {string} user user login name\n         * @param {string} password Asks for a check of the password1\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserCheckPost(user: string, password: string, options: any = {}): FetchArgs {\n            // verify required parameter 'user' is not null or undefined\n            if (user === null || user === undefined) {\n                throw new RequiredError('user','Required parameter user was null or undefined when calling userUserCheckPost.');\n            }\n            // verify required parameter 'password' is not null or undefined\n            if (password === null || password === undefined) {\n                throw new RequiredError('password','Required parameter password was null or undefined when calling userUserCheckPost.');\n            }\n            const localVarPath = `/user/{user}/check`\n                .replace(`{${\"user\"}}`, encodeURIComponent(String(user)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (password !== undefined) {\n                localVarQueryParameter['password'] = password;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Reserved to Matrix Requirements operations. Valid from version 2.1\n         * @summary Removes completely a user (only used for unit testing)\n         * @param {string} user user login name\n         * @param {string} confirm Needs to be yes for the method to be executed\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserDelete(user: string, confirm: string, options: any = {}): FetchArgs {\n            // verify required parameter 'user' is not null or undefined\n            if (user === null || user === undefined) {\n                throw new RequiredError('user','Required parameter user was null or undefined when calling userUserDelete.');\n            }\n            // verify required parameter 'confirm' is not null or undefined\n            if (confirm === null || confirm === undefined) {\n                throw new RequiredError('confirm','Required parameter confirm was null or undefined when calling userUserDelete.');\n            }\n            const localVarPath = `/user/{user}`\n                .replace(`{${\"user\"}}`, encodeURIComponent(String(user)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (confirm !== undefined) {\n                localVarQueryParameter['confirm'] = confirm;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be that user - Matrix operations can impersonate. Valid from version 2.1\n         * @summary Retrieves full details of a user\n         * @param {string} user user login name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserGet(user: string, options: any = {}): FetchArgs {\n            // verify required parameter 'user' is not null or undefined\n            if (user === null || user === undefined) {\n                throw new RequiredError('user','Required parameter user was null or undefined when calling userUserGet.');\n            }\n            const localVarPath = `/user/{user}`\n                .replace(`{${\"user\"}}`, encodeURIComponent(String(user)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - No permissions needed. Valid from version 2.1\n         * @summary Login\n         * @param {string} user user login name\n         * @param {string} password password in clear\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserLoginPost(user: string, password: string, options: any = {}): FetchArgs {\n            // verify required parameter 'user' is not null or undefined\n            if (user === null || user === undefined) {\n                throw new RequiredError('user','Required parameter user was null or undefined when calling userUserLoginPost.');\n            }\n            // verify required parameter 'password' is not null or undefined\n            if (password === null || password === undefined) {\n                throw new RequiredError('password','Required parameter password was null or undefined when calling userUserLoginPost.');\n            }\n            const localVarPath = `/user/{user}/login`\n                .replace(`{${\"user\"}}`, encodeURIComponent(String(user)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (password !== undefined) {\n                localVarQueryParameter['password'] = password;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Logout\n         * @param {string} user user login name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserLogoutPost(user: string, options: any = {}): FetchArgs {\n            // verify required parameter 'user' is not null or undefined\n            if (user === null || user === undefined) {\n                throw new RequiredError('user','Required parameter user was null or undefined when calling userUserLogoutPost.');\n            }\n            const localVarPath = `/user/{user}/logout`\n                .replace(`{${\"user\"}}`, encodeURIComponent(String(user)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin or the user. Valid from version 2.1\n         * @summary Sets a new password for an account that has a password_reset token in place (the {user} in the URL doesn't matter)\n         * @param {string} user user login name\n         * @param {string} token password_reset token\n         * @param {string} password New password to use from now on\n         * @param {string} [signaturePassword] (optional) New password to use from now on for signatures\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserPasswordResetPost(user: string, token: string, password: string, signaturePassword?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'user' is not null or undefined\n            if (user === null || user === undefined) {\n                throw new RequiredError('user','Required parameter user was null or undefined when calling userUserPasswordResetPost.');\n            }\n            // verify required parameter 'token' is not null or undefined\n            if (token === null || token === undefined) {\n                throw new RequiredError('token','Required parameter token was null or undefined when calling userUserPasswordResetPost.');\n            }\n            // verify required parameter 'password' is not null or undefined\n            if (password === null || password === undefined) {\n                throw new RequiredError('password','Required parameter password was null or undefined when calling userUserPasswordResetPost.');\n            }\n            const localVarPath = `/user/{user}/password_reset`\n                .replace(`{${\"user\"}}`, encodeURIComponent(String(user)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (token !== undefined) {\n                localVarQueryParameter['token'] = token;\n            }\n\n            if (password !== undefined) {\n                localVarQueryParameter['password'] = password;\n            }\n\n            if (signaturePassword !== undefined) {\n                localVarQueryParameter['signature_password'] = signaturePassword;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Adds a user to a project\n         * @param {string} user user login name\n         * @param {string} project Project short label\n         * @param {number} permission 0 for no access, 1 for readonly, 2 for read/write (default), 3 for admin, 4 for visitor\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserProjectPost(user: string, project: string, permission: number, options: any = {}): FetchArgs {\n            // verify required parameter 'user' is not null or undefined\n            if (user === null || user === undefined) {\n                throw new RequiredError('user','Required parameter user was null or undefined when calling userUserProjectPost.');\n            }\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling userUserProjectPost.');\n            }\n            // verify required parameter 'permission' is not null or undefined\n            if (permission === null || permission === undefined) {\n                throw new RequiredError('permission','Required parameter permission was null or undefined when calling userUserProjectPost.');\n            }\n            const localVarPath = `/user/{user}/{project}`\n                .replace(`{${\"user\"}}`, encodeURIComponent(String(user)))\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (permission !== undefined) {\n                localVarQueryParameter['permission'] = permission;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Edits the user permissions in a project. If permission is 0, it means the user has no longer access (but we retain its records for audit purposes)\n         * @param {string} user user login name\n         * @param {string} project Project short label\n         * @param {number} permission 0 for no access, 1 for readonly, 2 for read/write (default), 3 for admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserProjectPut(user: string, project: string, permission: number, options: any = {}): FetchArgs {\n            // verify required parameter 'user' is not null or undefined\n            if (user === null || user === undefined) {\n                throw new RequiredError('user','Required parameter user was null or undefined when calling userUserProjectPut.');\n            }\n            // verify required parameter 'project' is not null or undefined\n            if (project === null || project === undefined) {\n                throw new RequiredError('project','Required parameter project was null or undefined when calling userUserProjectPut.');\n            }\n            // verify required parameter 'permission' is not null or undefined\n            if (permission === null || permission === undefined) {\n                throw new RequiredError('permission','Required parameter permission was null or undefined when calling userUserProjectPut.');\n            }\n            const localVarPath = `/user/{user}/{project}`\n                .replace(`{${\"user\"}}`, encodeURIComponent(String(user)))\n                .replace(`{${\"project\"}}`, encodeURIComponent(String(project)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (permission !== undefined) {\n                localVarQueryParameter['permission'] = permission;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be that user - Matrix operations can impersonate. Valid from version 2.1\n         * @summary Retrieves all projects a user has access to\n         * @param {string} user user login name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserProjectsGet(user: string, options: any = {}): FetchArgs {\n            // verify required parameter 'user' is not null or undefined\n            if (user === null || user === undefined) {\n                throw new RequiredError('user','Required parameter user was null or undefined when calling userUserProjectsGet.');\n            }\n            const localVarPath = `/user/{user}/projects`\n                .replace(`{${\"user\"}}`, encodeURIComponent(String(user)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin or the user. Valid from version 2.1\n         * @summary Edits the user details. Arguments are all separated or a single json argument. Regular users can only change their signature and passwords.\n         * @param {string} user user login name\n         * @param {string} email User new email\n         * @param {string} password User new password in clear\n         * @param {string} json A json struct with login, email, password, first, last, signatureImage(int), signaturePassword, admin(int)\n         * @param {string} [first] User first name (optional)\n         * @param {string} [last] User last name (optional)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserPut(user: string, email: string, password: string, json: string, first?: string, last?: string, options: any = {}): FetchArgs {\n            // verify required parameter 'user' is not null or undefined\n            if (user === null || user === undefined) {\n                throw new RequiredError('user','Required parameter user was null or undefined when calling userUserPut.');\n            }\n            // verify required parameter 'email' is not null or undefined\n            if (email === null || email === undefined) {\n                throw new RequiredError('email','Required parameter email was null or undefined when calling userUserPut.');\n            }\n            // verify required parameter 'password' is not null or undefined\n            if (password === null || password === undefined) {\n                throw new RequiredError('password','Required parameter password was null or undefined when calling userUserPut.');\n            }\n            // verify required parameter 'json' is not null or undefined\n            if (json === null || json === undefined) {\n                throw new RequiredError('json','Required parameter json was null or undefined when calling userUserPut.');\n            }\n            const localVarPath = `/user/{user}`\n                .replace(`{${\"user\"}}`, encodeURIComponent(String(user)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (email !== undefined) {\n                localVarQueryParameter['email'] = email;\n            }\n\n            if (password !== undefined) {\n                localVarQueryParameter['password'] = password;\n            }\n\n            if (first !== undefined) {\n                localVarQueryParameter['first'] = first;\n            }\n\n            if (last !== undefined) {\n                localVarQueryParameter['last'] = last;\n            }\n\n            if (json !== undefined) {\n                localVarQueryParameter['json'] = json;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Renames a user login\n         * @param {string} user user login name\n         * @param {string} newLogin The new login name. Cannot be one of the existing\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserRenamePut(user: string, newLogin: string, options: any = {}): FetchArgs {\n            // verify required parameter 'user' is not null or undefined\n            if (user === null || user === undefined) {\n                throw new RequiredError('user','Required parameter user was null or undefined when calling userUserRenamePut.');\n            }\n            // verify required parameter 'newLogin' is not null or undefined\n            if (newLogin === null || newLogin === undefined) {\n                throw new RequiredError('newLogin','Required parameter newLogin was null or undefined when calling userUserRenamePut.');\n            }\n            const localVarPath = `/user/{user}/rename`\n                .replace(`{${\"user\"}}`, encodeURIComponent(String(user)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (newLogin !== undefined) {\n                localVarQueryParameter['newLogin'] = newLogin;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin or the user. Valid from version 2.1\n         * @summary Adds or deletes a user setting.\n         * @param {string} user user login name\n         * @param {string} key Name of the setting\n         * @param {string} value Value of the setting. If empty, deletes the setting.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserSettingPost(user: string, key: string, value: string, options: any = {}): FetchArgs {\n            // verify required parameter 'user' is not null or undefined\n            if (user === null || user === undefined) {\n                throw new RequiredError('user','Required parameter user was null or undefined when calling userUserSettingPost.');\n            }\n            // verify required parameter 'key' is not null or undefined\n            if (key === null || key === undefined) {\n                throw new RequiredError('key','Required parameter key was null or undefined when calling userUserSettingPost.');\n            }\n            // verify required parameter 'value' is not null or undefined\n            if (value === null || value === undefined) {\n                throw new RequiredError('value','Required parameter value was null or undefined when calling userUserSettingPost.');\n            }\n            const localVarPath = `/user/{user}/setting`\n                .replace(`{${\"user\"}}`, encodeURIComponent(String(user)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (key !== undefined) {\n                localVarQueryParameter['key'] = key;\n            }\n\n            if (value !== undefined) {\n                localVarQueryParameter['value'] = value;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Sets the new status of the user. Can be normal,blocked or deleted\n         * @param {string} user user login name\n         * @param {string} status Can be normal,blocked or deleted\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserStatusPut(user: string, status: string, options: any = {}): FetchArgs {\n            // verify required parameter 'user' is not null or undefined\n            if (user === null || user === undefined) {\n                throw new RequiredError('user','Required parameter user was null or undefined when calling userUserStatusPut.');\n            }\n            // verify required parameter 'status' is not null or undefined\n            if (status === null || status === undefined) {\n                throw new RequiredError('status','Required parameter status was null or undefined when calling userUserStatusPut.');\n            }\n            const localVarPath = `/user/{user}/status`\n                .replace(`{${\"user\"}}`, encodeURIComponent(String(user)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (status !== undefined) {\n                localVarQueryParameter['status'] = status;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin or the user. Valid from version 2.1\n         * @summary Removes a user token\n         * @param {string} user user login name\n         * @param {string} value The token to be removed\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserTokenDelete(user: string, value: string, options: any = {}): FetchArgs {\n            // verify required parameter 'user' is not null or undefined\n            if (user === null || user === undefined) {\n                throw new RequiredError('user','Required parameter user was null or undefined when calling userUserTokenDelete.');\n            }\n            // verify required parameter 'value' is not null or undefined\n            if (value === null || value === undefined) {\n                throw new RequiredError('value','Required parameter value was null or undefined when calling userUserTokenDelete.');\n            }\n            const localVarPath = `/user/{user}/token`\n                .replace(`{${\"user\"}}`, encodeURIComponent(String(user)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (value !== undefined) {\n                localVarQueryParameter['value'] = value;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Permissions - Must be admin or the user. Valid from version 2.1\n         * @summary Adds a token for a user\n         * @param {string} user user login name\n         * @param {string} purpose Purpose of the token. Not checked. Should contain either \\&quot;password_reset\\&quot; or \\&quot;oauth\\&quot;\n         * @param {string} [value] Value of the token - by default generated by this call\n         * @param {string} [reason] Free text explain where the token will be used (URL or others). Should be set for oauth, not needed for others\n         * @param {number} [validity] Validity of the token in hours - if not set, doesn&#x27;t expire\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserTokenPost(user: string, purpose: string, value?: string, reason?: string, validity?: number, options: any = {}): FetchArgs {\n            // verify required parameter 'user' is not null or undefined\n            if (user === null || user === undefined) {\n                throw new RequiredError('user','Required parameter user was null or undefined when calling userUserTokenPost.');\n            }\n            // verify required parameter 'purpose' is not null or undefined\n            if (purpose === null || purpose === undefined) {\n                throw new RequiredError('purpose','Required parameter purpose was null or undefined when calling userUserTokenPost.');\n            }\n            const localVarPath = `/user/{user}/token`\n                .replace(`{${\"user\"}}`, encodeURIComponent(String(user)));\n            const localVarUrlObj = url.parse(localVarPath, true);\n            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication ApiKeyAuth required\n            if (configuration && configuration.apiKey) {\n                const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n\t\t\t\t\t? configuration.apiKey(\"Authorization\")\n\t\t\t\t\t: configuration.apiKey;\n                localVarHeaderParameter[\"Authorization\"] = localVarApiKeyValue;\n            }\n\n            // authentication BasicAuth required\n            // http basic authentication required\n            if (configuration && (configuration.username || configuration.password)) {\n                localVarHeaderParameter[\"Authorization\"] = \"Basic \" + btoa(configuration.username + \":\" + configuration.password);\n            }\n\n            if (value !== undefined) {\n                localVarQueryParameter['value'] = value;\n            }\n\n            if (purpose !== undefined) {\n                localVarQueryParameter['purpose'] = purpose;\n            }\n\n            if (reason !== undefined) {\n                localVarQueryParameter['reason'] = reason;\n            }\n\n            if (validity !== undefined) {\n                localVarQueryParameter['validity'] = validity;\n            }\n\n            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);\n\n            return {\n                url: url.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * Permissions - No permissions needed. Valid from version 2.1\n         * @summary Asks for the difference between A and B html exerpts, and produce the B html with annotations\n         * @param {string} [arg] json object with the arguments\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allCompareHtmlPost(arg?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<HtmlCompareResult> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).allCompareHtmlPost(arg, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Returns all info about a date\n         * @param {string} [date] (optional) an input date formatted as iso8601. If not present, current date/time is used\n         * @param {string} [dateformat] (optional) a date formatter. If not present, current date format is used\n         * @param {string} [timeformat] (optional) a date-time formatter. If not present, current date/time format is used\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allDateGet(date?: string, dateformat?: string, timeformat?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetDateAck> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).allDateGet(date, dateformat, timeformat, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have the right key to download the file. Valid from version 2.1\n         * @summary Retrieve one customer file. The fileno is a simple fileId. This request returns the actual file\n         * @param {number} fileno file number\n         * @param {string} key The key of the file\n         * @param {string} [disposition] (optional, from version 2.3) set to disposition&#x3D;inline to ask the server to send the disposition to &#x27;inline&#x27; instead of &#x27;attachment&#x27;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allFileFilenoGet(fileno: number, key: string, disposition?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).allFileFilenoGet(fileno, key, disposition, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Retrieve list of all customer-wide files\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allFileGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetProjectFileListAck> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).allFileGet(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Creates a new customer-wide file - the file should be uploaded as payload. Its mime type should be sent through the HTTP protocol.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allFilePost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AddFileAck> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).allFilePost(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Retrieve license status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allLicenseGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LicenseStatus> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).allLicenseGet(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Adds a log entry (server side).\n         * @param {string} message Message to log\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allLogPost(message: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).allLogPost(message, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Reserved to Matrix Requirements operations. Valid from version 2.4\n         * @summary Update matrix instance log level.\n         * @param {LogLevel} [body] Payload containing the log level\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allLoglevelPut(body?: LogLevel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).allLoglevelPut(body, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - No permissions needed. Valid from version 2.1\n         * @summary Monitoring object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allMonitorGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetMonitorAck> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).allMonitorGet(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Find items based on a search string in all projects\n         * @param {string} search search term\n         * @param {string} id search id. Used by MatrixJira js to match queries with answers. Is returned in the output structure\n         * @param {string} [filter] (optional) applies a filter, can be negative\n         * @param {string} [fieldsOut] (optional) comma-delimited list of fields to return -  101,102 - or * for all\n         * @param {number} [labels] (optional) set to 1 to return labels in the output\n         * @param {string} [links] (optional) set to up,down to return up and down items, or only up or only down\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allNeedleGet(search: string, id: string, filter?: string, fieldsOut?: string, labels?: number, links?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TrimNeedle> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).allNeedleGet(search, id, filter, fieldsOut, labels, links, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Find item ids based on a search string in all projects\n         * @param {string} search search term\n         * @param {string} [filter] (optional) applies a filter, can be negative\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allNeedleminimalGet(search: string, filter?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).allNeedleminimalGet(search, filter, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - No permissions needed. Valid from version 2.2\n         * @summary The OpenAPI 3.0 definition of our REST API\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allOpenapiGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).allOpenapiGet(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - No permissions needed. Valid from version 2.1\n         * @summary Lists all reports\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allReportsGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetReportsAck> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).allReportsGet(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Sends an email. Non-optional parameters are sent as a POST JSON payload.\n         * @param {SendmailParam} [body] Necessary information to send a mail\n         * @param {number} [system] (optional) if set to 1 makes it a system email (not sent by the actual user)\n         * @param {number} [noreply] (optional) if set to 1 makes it a no-reply email (not sent by the actual user)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allSendmailPost(body?: SendmailParam, system?: number, noreply?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).allSendmailPost(body, system, noreply, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Creates a service desk issue. The parameters are sent as a POST JSON payload.\n         * @param {ServiceDeskParam} [body] Necessary information to send a mail\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allServicedeskPost(body?: ServiceDeskParam, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).allServicedeskPost(body, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get all settings of a customer\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allSettingGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetSettingAck> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).allSettingGet(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Adds or changes a customer setting. If the value is empty, the setting will be deleted.\n         * @param {string} key setting key\n         * @param {string} value value\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allSettingPost(key: string, value: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).allSettingPost(key, value, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get instance status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allStatusGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ServerStatus> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).allStatusGet(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - No permissions needed. Valid from version 2.1\n         * @summary Returns all accepted time zones\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allTimezoneGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).allTimezoneGet(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.2\n         * @summary Get all todos for the current user, for all projects\n         * @param {number} [includeDone] (optional) set to 1 to include done todos and todo&#x27;s created by the user\n         * @param {number} [includeFuture] (optional) set to 1 to include future todos as well (defaults to 0)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allTodoGet(includeDone?: number, includeFuture?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetTodosAck> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).allTodoGet(includeDone, includeFuture, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary WebHook\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allWebhookPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).allWebhookPost(options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.2\n         * @summary Retrieves the group list\n         * @param {number} [details] (optional) -  if set to 1 returns all details -- in this case user needs to be ADMIN\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGet(details?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetGroupListAck> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).groupGet(details, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Removes a group\n         * @param {string} groupId group Id\n         * @param {string} confirm Needs to be yes for the method to be executed\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdDelete(groupId: string, confirm: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).groupGroupIdDelete(groupId, confirm, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be that user - Matrix operations can impersonate. Valid from version 2.2\n         * @summary Retrieves details of a group\n         * @param {string} groupId group Id\n         * @param {number} [details] (optional) -  if set to 1 returns all details -- in this case user needs to be ADMIN\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdGet(groupId: string, details?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GroupType> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).groupGroupIdGet(groupId, details, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Adds a group to a project (or removes it)\n         * @param {string} groupId group Id\n         * @param {string} project Project short label\n         * @param {number} [permission] Specify the (new) permission for that group in that project\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdProjectProjectPost(groupId: string, project: string, permission?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).groupGroupIdProjectProjectPost(groupId, project, permission, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Renames a group\n         * @param {string} groupId group Id\n         * @param {string} newName The new group name. Cannot be one of the existing. Must start with &#x27;group.&#x27;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdRenamePut(groupId: string, newName: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).groupGroupIdRenamePut(groupId, newName, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin or the user. Valid from version 2.2\n         * @summary Adds a user to a group\n         * @param {string} groupId group Id\n         * @param {string} user user login name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdUserUserPut(groupId: string, user: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).groupGroupIdUserUserPut(groupId, user, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Sets all users of a group (replacing potential former content)\n         * @param {string} groupId group Id\n         * @param {string} users List of all users members of that group, commas-separated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdUserlistPut(groupId: string, users: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).groupGroupIdUserlistPut(groupId, users, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Creates a new group\n         * @param {string} groupName group name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupNamePost(groupName: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).groupGroupNamePost(groupName, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Removes a user from a group\n         * @param {string} groupName group name\n         * @param {string} user user login name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupNameUserUserDelete(groupName: string, user: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).groupGroupNameUserUserDelete(groupName, user, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.3\n         * @summary Merge branch into mainline. First project is the mainline, second is the branch. The payload must contain a json object with a list of actions to perform.\n         * @param {string} mainproject mainproject\n         * @param {string} branchproject branchproject\n         * @param {string} reason The reason why the user is doing this\n         * @param {MergeParam} [body] Actions to perform\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        mainprojectMergeBranchprojectPost(mainproject: string, branchproject: string, reason: string, body?: MergeParam, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).mainprojectMergeBranchprojectPost(mainproject, branchproject, reason, body, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have QMS viewer access (or higher) to the project. Valid from version 2.2\n         * @summary Retrieves all accesses in a project (list of groups and users who have access)\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectAccessGet(project: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetAccessAck> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectAccessGet(project, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Retrieves all changes in a project\n         * @param {string} project Project short label\n         * @param {number} [startAt] (optional) Pagination -  starts the audit after N records\n         * @param {number} [maxResults] (optional) Pagination -  Retrieve N results per page\n         * @param {string} [deleteOnly] (optional) if set to yes, only returns actions of type delete\n         * @param {string} [tech] (optional) if set to yes, returns the underneath changes\n         * @param {number} [auditIdMin] (optional) sets a minimum ID for audits, as returned by GET calendar\n         * @param {number} [auditIdMax] (optional) sets a maximum ID for audits\n         * @param {number} [noReport] (optional) set to 1 to avoid having reports\n         * @param {number} [noImport] (optional) set to 1 to avoid having imports\n         * @param {string} [include] (optional) set to a list of actions to include (delete,undelete,add,edit,...)\n         * @param {number} [resolveRef] (optional) set to 1 to resolve item IDs into refs\n         * @param {string} [itemRef] (optional) restrict the audit to only those mentionning this item\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectAuditGet(project: string, startAt?: number, maxResults?: number, deleteOnly?: string, tech?: string, auditIdMin?: number, auditIdMax?: number, noReport?: number, noImport?: number, include?: string, resolveRef?: number, itemRef?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TrimAuditList> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectAuditGet(project, startAt, maxResults, deleteOnly, tech, auditIdMin, auditIdMax, noReport, noImport, include, resolveRef, itemRef, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.3\n         * @summary Launches a server-side branch or clone - needs the 'merge' module if actual branching\n         * @param {string} project Project short label\n         * @param {string} label Branch project label\n         * @param {string} shortLabel Branch project short label\n         * @param {number} keepPermissions 1 or 0. Defaults to 0 (with 0 the project doesn&#x27;t have any permission after branching)\n         * @param {number} keepContent 1 or 0. Defaults to 1. 0 only works without branch and without history\n         * @param {number} [branch] (optional) Set to 1 to branch (default), 0 to just copy/clone\n         * @param {number} [history] (optional) Set to 1 to branch or copy with history, defaults to 0\n         * @param {string} [tagToCreate] (optional) specify a tag (by default auto-generated)\n         * @param {string} [branchInThePastTag] (optional) specify a tag to branch in the past (needs history&#x3D;1)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectBranchPost(project: string, label: string, shortLabel: string, keepPermissions: number, keepContent: number, branch?: number, history?: number, tagToCreate?: string, branchInThePastTag?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectBranchPost(project, label, shortLabel, keepPermissions, keepContent, branch, history, tagToCreate, branchInThePastTag, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get all dates at which a project has been modified\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCalendarGet(project: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<CalendarType>> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectCalendarGet(project, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Removes (inactivate) a category. Will fail on REPORT and FOLDER categories\n         * @param {string} project Project short label\n         * @param {string} category Category short label\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCatCategoryDelete(project: string, category: string, reason: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectCatCategoryDelete(project, category, reason, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get details of a category\n         * @param {string} project Project short label\n         * @param {string} category Category short label\n         * @param {string} [filter] (optional) specify a filter\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCatCategoryGet(project: string, category: string, filter?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CategoryFull> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectCatCategoryGet(project, category, filter, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Modifies a categorie's labels, and fix the project's settings to reflect that change, OR modifies a category's order.\n         * @param {string} project Project short label\n         * @param {string} category Category short label\n         * @param {number} order The new order (for reordering)\n         * @param {string} shortLabel The new short label for that category (for renaming)\n         * @param {string} label The new long label for that category (for renaming)\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCatCategoryPut(project: string, category: string, order: number, shortLabel: string, label: string, reason: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectCatCategoryPut(project, category, order, shortLabel, label, reason, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get all settings of a category\n         * @param {string} project Project short label\n         * @param {string} category Category short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCatCategorySettingGet(project: string, category: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetSettingAck> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectCatCategorySettingGet(project, category, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Adds or changes a category setting. If the value is empty, the setting will be deleted\n         * @param {string} project Project short label\n         * @param {string} category Category short label\n         * @param {string} key setting key\n         * @param {string} value value\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCatCategorySettingPost(project: string, category: string, key: string, value: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectCatCategorySettingPost(project, category, key, value, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get all categories of a project\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCatGet(project: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetProjectStructAck> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectCatGet(project, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Adds a fields in a category\n         * @param {string} project Project short label\n         * @param {string} label Field label\n         * @param {string} category Category short label\n         * @param {string} fieldType Type of field\n         * @param {string} fieldParam Parameter for the field\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCatPost(project: string, label: string, category: string, fieldType: string, fieldParam: string, reason: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectCatPost(project, label, category, fieldType, fieldParam, reason, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Clones a project\n         * @param {string} project Project short label\n         * @param {string} label Project label\n         * @param {string} shortLabel Project short label\n         * @param {number} keepHistory 1 or 0. Defaults to 0\n         * @param {number} keepContent 1 or 0. Defaults to 0 (only the REPORT part is kept, make sense only if keepHistory is 0)\n         * @param {number} keepPermissions 1 or 0. Defaults to 0 (with 0 the project doesn&#x27;t have any permission after cloning)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectClonePost(project: string, label: string, shortLabel: string, keepHistory: number, keepContent: number, keepPermissions: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectClonePost(project, label, shortLabel, keepHistory, keepContent, keepPermissions, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Asks for the difference between 2 signed documents, as a Word document. The job ID is returned as answer\n         * @param {string} project Project short label\n         * @param {string} signitem1 SIGN-xx for the first SIGN document to compare\n         * @param {string} signitem2 SIGN-xx for the 2nd SIGN document to compare\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCompareSignitem1Signitem2Post(project: string, signitem1: string, signitem2: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectCompareSignitem1Signitem2Post(project, signitem1, signitem2, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get a project's schema\n         * @param {string} [excludeCategories] (optional) comma-separated list of categories to exclude, like DOC,SIGN\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectConfigcheckGet(excludeCategories?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectConfigcheckGet(excludeCategories, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project - admins can impersonate. Valid from version 2.2\n         * @summary Copy items from a folder to another one\n         * @param {string} project Project short label\n         * @param {string} itemOrFolder Item reference (XXX-nn) or folder (F-XXX-nn)\n         * @param {string} targetFolder Reference of the target folder (F-categ-serial)\n         * @param {string} reason The reason why the user is doing this\n         * @param {string} [targetProject] (optional) project to copy into (by default, same project)\n         * @param {number} [copyLabels] (optional) 0 or 1. Defaults to 0\n         * @param {string} [map] (optional) mapN&#x3D;M -  map field N in source to field M in target\n         * @param {string} [ignoreLabels] (optional) can contain a comma-delimited list of labels NOT to copy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCopyItemOrFolderPost(project: string, itemOrFolder: string, targetFolder: string, reason: string, targetProject?: string, copyLabels?: number, map?: string, ignoreLabels?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CopyItemAck> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectCopyItemOrFolderPost(project, itemOrFolder, targetFolder, reason, targetProject, copyLabels, map, ignoreLabels, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get cross project links\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCrossprojectlinkGet(project: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<CrossProjectLink>> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectCrossprojectlinkGet(project, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Reserved to Matrix Requirements operations. Valid from version 2.1\n         * @summary Removes completely a project (only used for unit testing). This is an actual DELETE in the database.\n         * @param {string} project Project short label\n         * @param {string} confirm Needs to be yes for the method to be executed\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectDelete(project: string, confirm: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectDelete(project, confirm, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Converts an excel file (xls, xlsx) into a XML version that we send straight back as an XML payload.\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectExcelxmlPost(project: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectExcelxmlPost(project, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Executes UC or TC into XTC items\n         * @param {string} project Project short label\n         * @param {ExecuteParam} [body] There must be a JSON as a payload. It includes all parameters AND the reason\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectExecutePost(project: string, body?: ExecuteParam, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FolderAnswer> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectExecutePost(project, body, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Asks for an export of some items. The job ID is returned as answer\n         * @param {string} project Project short label\n         * @param {string} itemList Mandatory list of items to export.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectExportGet(project: string, itemList: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ExportItemsAck> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectExportGet(project, itemList, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Removes (inactivate) a field.\n         * @param {string} project Project short label\n         * @param {string} category Category short label\n         * @param {number} field The field number (like field&#x3D;502)\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectFieldCategoryDelete(project: string, category: string, field: number, reason: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectFieldCategoryDelete(project, category, field, reason, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get 1 field of an item. {item} has the form CATEG-number.\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} field Mandatory. Field number (faster) OR field label\n         * @param {string} [format] Optional. Format for the return. Can be text, json, html, xml or xslt. Defaults to html\n         * @param {number} [download] Optional. 1 to have in download, 0 as direct result. Defaults to 0.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectFieldItemGet(project: string, item: string, field: string, format?: string, download?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectFieldItemGet(project, item, field, format, download, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Modifies a field's label and parameter OR modifies a field's order.\n         * @param {string} project Project short label\n         * @param {number} field The field number (like field&#x3D;502)\n         * @param {string} label The new label (for renaming)\n         * @param {string} fieldParam The new parameter (for renaming)\n         * @param {number} order The new order (for reordering)\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectFieldPut(project: string, field: number, label: string, fieldParam: string, order: number, reason: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectFieldPut(project, field, label, fieldParam, order, reason, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have the right key to download the file. Valid from version 2.1\n         * @summary Retrieve one project file. The fileno is a simple fileId. This request returns the actual file\n         * @param {string} project Project short label\n         * @param {number} fileno file number\n         * @param {string} key The key of the file\n         * @param {string} [disposition] (optional, from version 2.3) set to disposition&#x3D;inline to ask the server to send the disposition to &#x27;inline&#x27; instead of &#x27;attachment&#x27;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectFileFilenoGet(project: string, fileno: number, key: string, disposition?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectFileFilenoGet(project, fileno, key, disposition, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Retrieve list of all files owned by a project\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectFileGet(project: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetProjectFileListAck> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectFileGet(project, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Creates a new file - the file should be uploaded as payload (or through the url argument as an alternative). It's mime type should be sent through the HTTP protocol.\n         * @param {string} project Project short label\n         * @param {string} [url] Optional argument -  the file could also come from an external URL. In this case there will be an error if we can&#x27;t retrieve it on the server\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectFilePost(project: string, url?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AddFileAck> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectFilePost(project, url, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project - admins can impersonate. Valid from version 2.1\n         * @summary Creates a new folder\n         * @param {string} project Project short label\n         * @param {string} parent Reference of the parent folder in the form F-CATEG-serial (example -  F-SPEC-17)\n         * @param {string} label folder label\n         * @param {string} reason The reason why the user is doing this\n         * @param {string} [fxField] (optional) Add one of each of these to set folder&#x27;s fields. fx is followed by the field ID (a number)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectFolderPost(project: string, parent: string, label: string, reason: string, fxField?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AddItemAck> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectFolderPost(project, parent, label, reason, fxField, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get list of project info -  users, settings, categories\n         * @param {string} project Project short label\n         * @param {number} [adminUI] (optional) set to adminUI&#x3D;1 to have this project data even if you are not assigned to, as an admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectGet(project: string, adminUI?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ProjectInfo> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectGet(project, adminUI, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Hides a project\n         * @param {string} project Project short label\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectHidePut(project: string, reason: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectHidePut(project, reason, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.2\n         * @summary Launches a server-side hook\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} hook name of the hook\n         * @param {string} [body] Payload for the hook, treated as a string.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectHookItemPost(project: string, item: string, hook: string, body?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectHookItemPost(project, item, hook, body, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.3\n         * @summary Cleans up an input html blob according to the current html cleanup rules. The blob is passed in the POST payload. The payload must be a json object with {\\\"htmlToClean\\\" - \\\"x\\\"}\n         * @param {string} project Project short label\n         * @param {GetHmlBlobInput} [body] Payload\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectHtmlCleanupBlobPost(project: string, body?: GetHmlBlobInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<GetHtmlBlob>> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectHtmlCleanupBlobPost(project, body, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.3\n         * @summary Get the list of items that would be changed if we applied html cleanup. You can pass a cleanup setting in the payload of the POST. If it's not there we take the customer (global) setting and force the cleanup to true\n         * @param {string} project Project short label\n         * @param {CleanupSetting} [body] Cleanup setting (optional)\n         * @param {string} [categories] (optional) list of comma-delimited categories to go through, all by default\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectHtmlCleanupTestPost(project: string, body?: CleanupSetting, categories?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<HtmlTestCleanup>> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectHtmlCleanupTestPost(project, body, categories, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - ?. Valid from version 2.1\n         * @summary Removes an import\n         * @param {string} project Project short label\n         * @param {string} id id\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectImportIdDelete(project: string, id: string, reason: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectImportIdDelete(project, id, reason, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Imports some items into a project\n         * @param {string} project Project short label\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectImportPost(project: string, reason: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectImportPost(project, reason, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.4\n         * @summary Get the history of a import in a project\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectImportinfoGet(project: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<LabelHistory>> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectImportinfoGet(project, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get details of a folder. {folder} has the form F-CATEG-number[-vN].\n         * @param {string} project Project short label\n         * @param {string} folder Folder reference (F-XXX-nn)\n         * @param {number} [history] (optional) set history&#x3D;1 to retrieve list of all versions\n         * @param {string} [filter] (optional) specify a filter\n         * @param {string} [children] (optional) set to yes if you need the children as well (recursively).\n         * @param {string} [atDate] (optional) retrieves the item at that date - format is ISO8601 like atDate&#x3D;2018-05-30T14 - 48 - 27.223Z. Not compatible with the version query -vN\n         * @param {number} [fields] (optional) set fields&#x3D;1 to retrieve list of all fields, even the empty ones\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemFolderGet(project: string, folder: string, history?: number, filter?: string, children?: string, atDate?: string, fields?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TrimFolder> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectItemFolderGet(project, folder, history, filter, children, atDate, fields, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Removes (inactivate) an item (or a folder). Item has the form (F-)CATEG-number. Will fail on non-empty folders\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} confirm Needs to be yes for the method to be executed IF it is a non-empty folder\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemItemDelete(project: string, item: string, confirm: string, reason: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectItemItemDelete(project, item, confirm, reason, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get details of an item. {item} has the form CATEG-number[-vN].\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {number} [history] (optional) set history&#x3D;1 to retrieve list of all versions\n         * @param {number} [fields] (optional) set fields&#x3D;1 to retrieve list of all fields, even the empty ones\n         * @param {string} [filter] (optional) specify a filter\n         * @param {string} [atDate] (optional) retrieves the item at that date - format is ISO8601 like atDate&#x3D;2018-05-30T14 - 48 - 27.223Z. Not compatible with the version query -vN\n         * @param {number} [withTree] (optional) retrieves the context tree if set to 1, in the field contextTree. Exclusive to filter and atDate\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemItemGet(project: string, item: string, history?: number, fields?: number, filter?: string, atDate?: string, withTree?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TrimItem> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectItemItemGet(project, item, history, fields, filter, atDate, withTree, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Restores an item. Item has the form CATEG-number\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} reason The reason why the user is doing this\n         * @param {number} [at] (optional) If set, specifies that the item should be restored as it was in that version\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemItemPost(project: string, item: string, reason: string, at?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UndeleteAnswer> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectItemItemPost(project, item, reason, at, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Modifies an item or a folder. Item has the form CATEG-number, folders -  F-CATEG-number\n         * @param {ItemItemBody} body \n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemItemPut(body: ItemItemBody, project: string, item: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TrimItem> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectItemItemPut(body, project, item, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project - admins can impersonate. Valid from version 2.1\n         * @summary Adds an item in a folder\n         * @param {ProjectItemBody} body \n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemPost(body: ProjectItemBody, project: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AddItemAck> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectItemPost(body, project, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - ?. Valid from version 2.1\n         * @summary Removes (inactivate) a link between 2 items. Items are in the form CATEG-number\n         * @param {string} project Project short label\n         * @param {string} upitem Item reference (XXX-nn) for the UP item\n         * @param {string} downitem Item reference (XXX-nn) for the DOWN item\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemlinkUpitemDownitemDelete(project: string, upitem: string, downitem: string, reason: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectItemlinkUpitemDownitemDelete(project, upitem, downitem, reason, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Adds a link between 2 items. Both items are in the form CATEG-number\n         * @param {string} project Project short label\n         * @param {string} upitem Item reference (XXX-nn) for the UP item\n         * @param {string} downitem Item reference (XXX-nn) for the DOWN item\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemlinkUpitemDownitemPost(project: string, upitem: string, downitem: string, reason: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectItemlinkUpitemDownitemPost(project, upitem, downitem, reason, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get the list of items that are detailed in a DOC/SIGN item.\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {number} [detailed] Optional. When set to 1 adds a secondaryItems list in the answer. Defaults to 0.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemlistItemGet(project: string, item: string, detailed?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetItemListAck> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectItemlistItemGet(project, item, detailed, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Retrieve list of all jobs in a project\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectJobGet(project: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<JobsWithUrl> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectJobGet(project, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.3\n         * @summary Aborts a job.\n         * @param {string} project Project short label\n         * @param {number} job job number\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectJobJobDelete(project: string, job: number, reason: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectJobJobDelete(project, job, reason, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get a job file. The job part is the jobID (a number) and the file is the fileID (a number)\n         * @param {string} project Project short label\n         * @param {number} job job number\n         * @param {number} fileno file number\n         * @param {string} [mode] (optional) set to mode&#x3D;direct to get the output in the response output instead of as a download file. This assumes the file is HTML\n         * @param {string} [format] (optional) set to format&#x3D;json to get a json output instead of XML\n         * @param {string} [disposition] (optional, from version 2.3) set to disposition&#x3D;inline to ask the server to send the disposition to &#x27;inline&#x27; instead of &#x27;attachment&#x27;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectJobJobFilenoGet(project: string, job: number, fileno: number, mode?: string, format?: string, disposition?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectJobJobFilenoGet(project, job, fileno, mode, format, disposition, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get a job status, including generated files. The variable part is the jobID (a number)\n         * @param {string} project Project short label\n         * @param {number} job job number\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectJobJobGet(project: string, job: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<JobsStatusWithUrl> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectJobJobGet(project, job, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.2\n         * @summary Sets the progress of a job\n         * @param {string} project Project short label\n         * @param {number} job job number\n         * @param {number} progress progress (0 to 100, 200 for error)\n         * @param {string} [status] (optional( status text\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectJobJobPost(project: string, job: number, progress: number, status?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectJobJobPost(project, job, progress, status, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.3\n         * @summary Get the label history of a project -  list of all label changes for all items\n         * @param {string} project Project short label\n         * @param {string} [itemRef] (optional) ask for just one item (the return structure is still an array in that case)\n         * @param {string} [from] (optional) date from\n         * @param {string} [to] (optional) date to - works only if you only specified a from\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectLabelhistoryGet(project: string, itemRef?: string, from?: string, to?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<LabelHistory>> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectLabelhistoryGet(project, itemRef, from, to, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.3\n         * @summary Get the merge history of a project - needs the 'merge' module\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectMergehistoryGet(project: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<MergeHistory>> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectMergehistoryGet(project, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.3\n         * @summary Get the merge information - needs the 'merge' module\n         * @param {string} project Project short label\n         * @param {string} [excludeCategories] (optional) comma-delimited list of categories to exclude\n         * @param {string} [fromDate] (optional) date from which we consider the merges. ISO8601 format -- this parameter was introduced in v 2.3.4\n         * @param {number} [push] (optional) set to 1 if you inquire about a push, not a merge -- this parameter was introduced in v 2.3.4\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectMergeinfoGet(project: string, excludeCategories?: string, fromDate?: string, push?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<MergeInfo>> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectMergeinfoGet(project, excludeCategories, fromDate, push, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Imports some folders from a project to another as a module. Only available is you have the resync module licensed and the unique_serial setting\n         * @param {string} project Project short label\n         * @param {string} mode Import mode -  can be include or copy\n         * @param {string} sourceProject Source project\n         * @param {string} sourceSelection A selection of folders and items to import\n         * @param {string} reason The reason why the user is doing this\n         * @param {string} [update] Update mode -  can be simple, update or rebase. If not defined, simple assumed\n         * @param {string} [oldSourceProject] Old source project (if update&#x3D;rebase\n         * @param {string} [lockLabel] An optional label that this operation will set on all items\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectModuleimportPost(project: string, mode: string, sourceProject: string, sourceSelection: string, reason: string, update?: string, oldSourceProject?: string, lockLabel?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectModuleimportPost(project, mode, sourceProject, sourceSelection, reason, update, oldSourceProject, lockLabel, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Move items into this folder\n         * @param {string} project Project short label\n         * @param {string} folder Folder reference (F-XXX-nn)\n         * @param {string} reason The reason why the user is doing this\n         * @param {string} [items] List of items to move in\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectMoveinFolderPost(project: string, folder: string, reason: string, items?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectMoveinFolderPost(project, folder, reason, items, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Find items based on a search string in one project\n         * @param {string} project Project short label\n         * @param {string} search search term\n         * @param {string} id search id. Used by MatrixJira js to match queries with answers. Is returned in the output structure\n         * @param {string} [filter] (optional) applies a filter, can be negative\n         * @param {string} [fieldsOut] (optional) comma-delimited list of fields to return -  101,102 - or * for all\n         * @param {number} [labels] (optional) set to 1 to return labels in the output\n         * @param {number} [treeOrder] (optional) set to 1 to return items in tree order (otherwise it&#x27;s project,category,serial)\n         * @param {string} [links] (optional) set to up,down to return up and down items, or only up or only down\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectNeedleGet(project: string, search: string, id: string, filter?: string, fieldsOut?: string, labels?: number, treeOrder?: number, links?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TrimNeedle> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectNeedleGet(project, search, id, filter, fieldsOut, labels, treeOrder, links, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Find item ids based on a search string in one project\n         * @param {string} project Project short label\n         * @param {string} search search term\n         * @param {string} [filter] (optional) applies a filter, can be negative\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectNeedleminimalGet(project: string, search: string, filter?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectNeedleminimalGet(project, search, filter, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Adds a category to a project\n         * @param {string} project Project short label\n         * @param {string} label Category label\n         * @param {string} shortLabel Category short label\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectPost(project: string, label: string, shortLabel: string, reason: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectPost(project, label, shortLabel, reason, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Publishes an item. Item has the form PUB-nnn\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} reason reason for the publication\n         * @param {string} [trainingFor] (optional) list of items for which we need to add training. If list is not there, all trainings will be generated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectPublishItemPost(project: string, item: string, reason: string, trainingFor?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectPublishItemPost(project, item, reason, trainingFor, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have QMS viewer access (or higher) to the project. Valid from version 2.3\n         * @summary Find a string in the QMS published items\n         * @param {string} project Project short label\n         * @param {string} [search] (optional) search term. Return an empty array on PUB &lt; 2.3.1 and et the list of all pub if not specified.\n         * @param {string} [pubItem] (optional) PUB-x item if you want to search in another than the last one for that project\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectQmsfindGet(project: string, search?: string, pubItem?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectQmsfindGet(project, search, pubItem, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) for the reports, read/write for the signed reports. Valid from version 2.1\n         * @summary Asks for a new report. The job ID is returned as answer. {report} can be REPORT-n, DOC-n, SIGN-n or a report name.To follow the progress of the job, the GET /{project}/job/{jobid} can be called\n         * @param {string} project Project short label\n         * @param {string} report name of the report\n         * @param {string} isSignedReport If set to true, means the report needs to generate a signed record\n         * @param {string} includeSignatures List of comma separated users who need to sign\n         * @param {string} newTitle New title for the SIGN- item that is generated (only valid for isSignedReport)\n         * @param {string} copyFields List of from-to fields (123,456),(124,457) that we can use to generate the fields in the SIGN record (only valid for isSignedReport)\n         * @param {string} [itemList] (optional) list of items to use in the report. By default all categories are used\n         * @param {string} [url] (optional) url to generate in the filter\n         * @param {string} [resturl] (optional) REST url to generate in the filter\n         * @param {string} [format] (optional) format -  html (default), pdf, docx, odt, xml, zipdocx, zippdf or package (from 2.2), or mf (since 2.3)\n         * @param {string} [filter] (optional) specify a comma-delimited filter list. Can be negative filters (with minus before)\n         * @param {number} [useOld] (optional) ask to use the old report engine (pre 1.11) if set to 1.\n         * @param {string} [atDate] (optional) generates the report at that date - format is ISO8601 like atDate&#x3D;2018-05-30T14 - 48 - 27.223Z\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectReportReportPost(project: string, report: string, isSignedReport: string, includeSignatures: string, newTitle: string, copyFields: string, itemList?: string, url?: string, resturl?: string, format?: string, filter?: string, useOld?: number, atDate?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CreateReportJobAck> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectReportReportPost(project, report, isSignedReport, includeSignatures, newTitle, copyFields, itemList, url, resturl, format, filter, useOld, atDate, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get a project's schema\n         * @param {string} project Project short label\n         * @param {number} [simple] (optional) set to simple&#x3D;1 to have a simpler output (no fields, round shape)\n         * @param {string} [excludeCategories] (optional) comma-separated list of categories to exclude, like DOC,SIGN\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectSchemaGet(project: string, simple?: number, excludeCategories?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectSchemaGet(project, simple, excludeCategories, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Get all settings of a project\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectSettingGet(project: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetProjectSettingAck> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectSettingGet(project, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Adds or changes a project setting. If the value is empty, the setting will be deleted.\n         * @param {string} project Project short label\n         * @param {string} key setting key\n         * @param {string} value value\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectSettingPost(project: string, key: string, value: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectSettingPost(project, key, value, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Signs an item. Item has the form SIGN-nnn\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} password signature password - the user who is signing is the one who is logged in\n         * @param {string} [acceptComments] (optional) adds an acceptance comment\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectSignItemPost(project: string, item: string, password: string, acceptComments?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SignItemAck> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectSignItemPost(project, item, password, acceptComments, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Edit the signature parts\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} rejectSign The reason why the user is rejecting the signature\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectSignItemPut(project: string, item: string, rejectSign: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectSignItemPut(project, item, rejectSign, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Asks for a new report. The job ID is returned as answer\n         * @param {string} project Project short label\n         * @param {string} [url] (optional) url to generate in the filter\n         * @param {string} [resturl] (optional) REST url to generate in the filter\n         * @param {string} [format] (optional) format -  html (default), pdf, docx, odt, xml, zipdocx or zippdf\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectSignedreportSIGNNPost(project: string, url?: string, resturl?: string, format?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectSignedreportSIGNNPost(project, url, resturl, format, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Get all tags of a project. Works on any project if user is admin\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectTagGet(project: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Tag>> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectTagGet(project, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Adds a tag to a project\n         * @param {string} project Project short label\n         * @param {string} label Tag label. Must be unique within a project\n         * @param {number} auditId Id of the audit this tag is based on\n         * @param {string} type Type of tag (default -  tag)\n         * @param {string} comments Free optional comment\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectTagPost(project: string, label: string, auditId: number, type: string, comments: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectTagPost(project, label, auditId, type, comments, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.2\n         * @summary Get all todos for the current user, for oneproject\n         * @param {string} project Project short label\n         * @param {string} [itemRef] (optional) set to an item to have all todos linked to an item, regardless of the user\n         * @param {number} [includeDone] (optional) set to 1 to include done todos and todo&#x27;s created by the user\n         * @param {number} [includeAllUsers] (optional) set to 1 to include all todos for all users\n         * @param {number} [includeFuture] (optional) set to 1 to include future todos as well (defaults to 0)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectTodoGet(project: string, itemRef?: string, includeDone?: number, includeAllUsers?: number, includeFuture?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetTodosAck> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectTodoGet(project, itemRef, includeDone, includeAllUsers, includeFuture, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.2\n         * @summary Creates a todo on an item (note that you only need read access for this POST method) for you or others\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} text The todo reason\n         * @param {number} [fieldId] (optional) If set, specifies that the todo is related to that field (review, ...)\n         * @param {string} [logins] (optional) If set, a list of user logins or groups to which these todo apply\n         * @param {string} [todoType] (optional) The todo type -  &#x27;user&#x27; by default\n         * @param {string} [atDate] (optional) a date in the future for reminders\n         * @param {number} [auto] (optional) set to 1 to create an auto-notification (0 by default)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectTodoItemPost(project: string, item: string, text: string, fieldId?: number, logins?: string, todoType?: string, atDate?: string, auto?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectTodoItemPost(project, item, text, fieldId, logins, todoType, atDate, auto, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.2\n         * @summary Removes (mark as done) a todo.\n         * @param {string} project Project short label\n         * @param {string} todoid todoid\n         * @param {string} hardDelete Set to yes to actually remove the record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectTodoTodoidDelete(project: string, todoid: string, hardDelete: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectTodoTodoidDelete(project, todoid, hardDelete, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Touches (set to same date) an item or folder\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} reason The reason why the user is doing this\n         * @param {number} [nbLayers] (optional) Number of layers -- 1 by default\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectTouchItemPut(project: string, item: string, reason: string, nbLayers?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectTouchItemPut(project, item, reason, nbLayers, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get full tree\n         * @param {string} project Project short label\n         * @param {string} [fancy] (optional) returns a fancy tree\n         * @param {string} [filter] (optional) applies a filter\n         * @param {string} [atDate] (optional) generates the tree at that date - format is ISO8601 like atDate&#x3D;2018-05-30T14 - 48 - 27.223Z\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectTreeGet(project: string, fancy?: string, filter?: string, atDate?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<FancyFolder>> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectTreeGet(project, fancy, filter, atDate, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Unhides a project.\n         * @param {string} project Project short label\n         * @param {string} newShort The new project short name to use\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectUnhidePut(project: string, newShort: string, reason: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectUnhidePut(project, newShort, reason, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Converts a word document to an HTML, with images pointing to uploaded files on the server\n         * @param {string} project Project short label\n         * @param {string} reason The reason why the user is doing this\n         * @param {number} [fileNo] If specified, means that the conversion is from an already uploaded file. Otherwise the file must be uploaded as body of this call\n         * @param {string} [targetDocumentFolder] target document folder (in this case creates a document)\n         * @param {number} [useAsField] set to 1 to have this docx used as a field. In this case the return value is the html equivalent, with some meta\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectWordconvertPost(project: string, reason: string, fileNo?: number, targetDocumentFolder?: string, useAsField?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).projectWordconvertPost(project, reason, fileNo, targetDocumentFolder, useAsField, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Get list of all projects, all settings and current user, all todos and JIRA meta create object\n         * @param {number} [adminUI] (optional) set to adminUI&#x3D;1 to have all projects even the ones you are not assigned to, as an admin\n         * @param {string} [output] (optional) comma-delimited list of requested output fields. Returns all fields if parameter is not present\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        rootGet(adminUI?: number, output?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ListProjectAndSettings> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).rootGet(adminUI, output, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Creates a new project. Either the full project is sent as XML payload, or the label and shortLabel are given. If uploading data for a whole project, label and shortLabel are optional but overwrite the XML content if present. Branching can be done with an audit report as payload, and branch* must be defined in that case\n         * @param {string} label Project label\n         * @param {string} shortLabel Project short label\n         * @param {string} [overwrite] Must be set to yes if you&#x27;re overwriting an existing project\n         * @param {string} [importUsers] Must be set to yes if you want to import users. false by default\n         * @param {string} [branchLabel] Must be set to branch (optional)\n         * @param {string} [branchTag] Must be set to branch, and match a tag in the audit export (optional)\n         * @param {string} [branchComment] Comment for the branch (optional)\n         * @param {string} [branchBaseProjectLabel] Label of the base Project (optional)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        rootPost(label: string, shortLabel: string, overwrite?: string, importUsers?: string, branchLabel?: string, branchTag?: string, branchComment?: string, branchBaseProjectLabel?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).rootPost(label, shortLabel, overwrite, importUsers, branchLabel, branchTag, branchComment, branchBaseProjectLabel, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin or the user. Valid from version 2.1\n         * @summary Retrieves the user list\n         * @param {string} details (optional) -  if set to 1 returns all details\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userGet(details: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetUserListAck> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).userGet(details, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Creates a new user. Arguments are either a set of arguments or json\n         * @param {string} login User login name\n         * @param {string} email User email\n         * @param {string} password User password in clear\n         * @param {string} json A json struct with login, email, password, first, last, signatureImage(int), signaturePassword, admin(int)\n         * @param {string} [first] User first name (optional)\n         * @param {string} [last] User last name (optional)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userPost(login: string, email: string, password: string, json: string, first?: string, last?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).userPost(login, email, password, json, first, last, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be that user - Matrix operations can impersonate. Valid from version 2.1\n         * @summary Retrieves all actions of a user\n         * @param {string} user user login name\n         * @param {number} [startAt] (optional) Pagination -  starts the audit after N records\n         * @param {number} [maxResults] (optional) Pagination -  Retrieve N results per page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserAuditGet(user: string, startAt?: number, maxResults?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TrimAuditList> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).userUserAuditGet(user, startAt, maxResults, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be that user - Matrix operations can impersonate. Valid from version 2.1\n         * @summary Check a user's password\n         * @param {string} user user login name\n         * @param {string} password Asks for a check of the password1\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserCheckGet(user: string, password: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CheckPasswordAck> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).userUserCheckGet(user, password, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be that user - Matrix operations can impersonate. Valid from version 2.1\n         * @summary Check a user's password\n         * @param {string} user user login name\n         * @param {string} password Asks for a check of the password1\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserCheckPost(user: string, password: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).userUserCheckPost(user, password, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Reserved to Matrix Requirements operations. Valid from version 2.1\n         * @summary Removes completely a user (only used for unit testing)\n         * @param {string} user user login name\n         * @param {string} confirm Needs to be yes for the method to be executed\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserDelete(user: string, confirm: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).userUserDelete(user, confirm, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be that user - Matrix operations can impersonate. Valid from version 2.1\n         * @summary Retrieves full details of a user\n         * @param {string} user user login name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserGet(user: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserType> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).userUserGet(user, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - No permissions needed. Valid from version 2.1\n         * @summary Login\n         * @param {string} user user login name\n         * @param {string} password password in clear\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserLoginPost(user: string, password: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).userUserLoginPost(user, password, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Logout\n         * @param {string} user user login name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserLogoutPost(user: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).userUserLogoutPost(user, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin or the user. Valid from version 2.1\n         * @summary Sets a new password for an account that has a password_reset token in place (the {user} in the URL doesn't matter)\n         * @param {string} user user login name\n         * @param {string} token password_reset token\n         * @param {string} password New password to use from now on\n         * @param {string} [signaturePassword] (optional) New password to use from now on for signatures\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserPasswordResetPost(user: string, token: string, password: string, signaturePassword?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).userUserPasswordResetPost(user, token, password, signaturePassword, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Adds a user to a project\n         * @param {string} user user login name\n         * @param {string} project Project short label\n         * @param {number} permission 0 for no access, 1 for readonly, 2 for read/write (default), 3 for admin, 4 for visitor\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserProjectPost(user: string, project: string, permission: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).userUserProjectPost(user, project, permission, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Edits the user permissions in a project. If permission is 0, it means the user has no longer access (but we retain its records for audit purposes)\n         * @param {string} user user login name\n         * @param {string} project Project short label\n         * @param {number} permission 0 for no access, 1 for readonly, 2 for read/write (default), 3 for admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserProjectPut(user: string, project: string, permission: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).userUserProjectPut(user, project, permission, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be that user - Matrix operations can impersonate. Valid from version 2.1\n         * @summary Retrieves all projects a user has access to\n         * @param {string} user user login name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserProjectsGet(user: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserDetails> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).userUserProjectsGet(user, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin or the user. Valid from version 2.1\n         * @summary Edits the user details. Arguments are all separated or a single json argument. Regular users can only change their signature and passwords.\n         * @param {string} user user login name\n         * @param {string} email User new email\n         * @param {string} password User new password in clear\n         * @param {string} json A json struct with login, email, password, first, last, signatureImage(int), signaturePassword, admin(int)\n         * @param {string} [first] User first name (optional)\n         * @param {string} [last] User last name (optional)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserPut(user: string, email: string, password: string, json: string, first?: string, last?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).userUserPut(user, email, password, json, first, last, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Renames a user login\n         * @param {string} user user login name\n         * @param {string} newLogin The new login name. Cannot be one of the existing\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserRenamePut(user: string, newLogin: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).userUserRenamePut(user, newLogin, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin or the user. Valid from version 2.1\n         * @summary Adds or deletes a user setting.\n         * @param {string} user user login name\n         * @param {string} key Name of the setting\n         * @param {string} value Value of the setting. If empty, deletes the setting.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserSettingPost(user: string, key: string, value: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).userUserSettingPost(user, key, value, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Sets the new status of the user. Can be normal,blocked or deleted\n         * @param {string} user user login name\n         * @param {string} status Can be normal,blocked or deleted\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserStatusPut(user: string, status: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).userUserStatusPut(user, status, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin or the user. Valid from version 2.1\n         * @summary Removes a user token\n         * @param {string} user user login name\n         * @param {string} value The token to be removed\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserTokenDelete(user: string, value: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).userUserTokenDelete(user, value, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n        /**\n         * Permissions - Must be admin or the user. Valid from version 2.1\n         * @summary Adds a token for a user\n         * @param {string} user user login name\n         * @param {string} purpose Purpose of the token. Not checked. Should contain either \\&quot;password_reset\\&quot; or \\&quot;oauth\\&quot;\n         * @param {string} [value] Value of the token - by default generated by this call\n         * @param {string} [reason] Free text explain where the token will be used (URL or others). Should be set for oauth, not needed for others\n         * @param {number} [validity] Validity of the token in hours - if not set, doesn&#x27;t expire\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserTokenPost(user: string, purpose: string, value?: string, reason?: string, validity?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).userUserTokenPost(user, purpose, value, reason, validity, options);\n            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {\n                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {\n                    if (response.status >= 200 && response.status < 300) {\n                        return response.json();\n                    } else {\n                        throw response;\n                    }\n                });\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {\n    return {\n        /**\n         * Permissions - No permissions needed. Valid from version 2.1\n         * @summary Asks for the difference between A and B html exerpts, and produce the B html with annotations\n         * @param {string} [arg] json object with the arguments\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allCompareHtmlPost(arg?: string, options?: any) {\n            return DefaultApiFp(configuration).allCompareHtmlPost(arg, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Returns all info about a date\n         * @param {string} [date] (optional) an input date formatted as iso8601. If not present, current date/time is used\n         * @param {string} [dateformat] (optional) a date formatter. If not present, current date format is used\n         * @param {string} [timeformat] (optional) a date-time formatter. If not present, current date/time format is used\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allDateGet(date?: string, dateformat?: string, timeformat?: string, options?: any) {\n            return DefaultApiFp(configuration).allDateGet(date, dateformat, timeformat, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have the right key to download the file. Valid from version 2.1\n         * @summary Retrieve one customer file. The fileno is a simple fileId. This request returns the actual file\n         * @param {number} fileno file number\n         * @param {string} key The key of the file\n         * @param {string} [disposition] (optional, from version 2.3) set to disposition&#x3D;inline to ask the server to send the disposition to &#x27;inline&#x27; instead of &#x27;attachment&#x27;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allFileFilenoGet(fileno: number, key: string, disposition?: string, options?: any) {\n            return DefaultApiFp(configuration).allFileFilenoGet(fileno, key, disposition, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Retrieve list of all customer-wide files\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allFileGet(options?: any) {\n            return DefaultApiFp(configuration).allFileGet(options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Creates a new customer-wide file - the file should be uploaded as payload. Its mime type should be sent through the HTTP protocol.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allFilePost(options?: any) {\n            return DefaultApiFp(configuration).allFilePost(options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Retrieve license status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allLicenseGet(options?: any) {\n            return DefaultApiFp(configuration).allLicenseGet(options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Adds a log entry (server side).\n         * @param {string} message Message to log\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allLogPost(message: string, options?: any) {\n            return DefaultApiFp(configuration).allLogPost(message, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Reserved to Matrix Requirements operations. Valid from version 2.4\n         * @summary Update matrix instance log level.\n         * @param {LogLevel} [body] Payload containing the log level\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allLoglevelPut(body?: LogLevel, options?: any) {\n            return DefaultApiFp(configuration).allLoglevelPut(body, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - No permissions needed. Valid from version 2.1\n         * @summary Monitoring object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allMonitorGet(options?: any) {\n            return DefaultApiFp(configuration).allMonitorGet(options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Find items based on a search string in all projects\n         * @param {string} search search term\n         * @param {string} id search id. Used by MatrixJira js to match queries with answers. Is returned in the output structure\n         * @param {string} [filter] (optional) applies a filter, can be negative\n         * @param {string} [fieldsOut] (optional) comma-delimited list of fields to return -  101,102 - or * for all\n         * @param {number} [labels] (optional) set to 1 to return labels in the output\n         * @param {string} [links] (optional) set to up,down to return up and down items, or only up or only down\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allNeedleGet(search: string, id: string, filter?: string, fieldsOut?: string, labels?: number, links?: string, options?: any) {\n            return DefaultApiFp(configuration).allNeedleGet(search, id, filter, fieldsOut, labels, links, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Find item ids based on a search string in all projects\n         * @param {string} search search term\n         * @param {string} [filter] (optional) applies a filter, can be negative\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allNeedleminimalGet(search: string, filter?: string, options?: any) {\n            return DefaultApiFp(configuration).allNeedleminimalGet(search, filter, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - No permissions needed. Valid from version 2.2\n         * @summary The OpenAPI 3.0 definition of our REST API\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allOpenapiGet(options?: any) {\n            return DefaultApiFp(configuration).allOpenapiGet(options)(fetch, basePath);\n        },\n        /**\n         * Permissions - No permissions needed. Valid from version 2.1\n         * @summary Lists all reports\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allReportsGet(options?: any) {\n            return DefaultApiFp(configuration).allReportsGet(options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Sends an email. Non-optional parameters are sent as a POST JSON payload.\n         * @param {SendmailParam} [body] Necessary information to send a mail\n         * @param {number} [system] (optional) if set to 1 makes it a system email (not sent by the actual user)\n         * @param {number} [noreply] (optional) if set to 1 makes it a no-reply email (not sent by the actual user)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allSendmailPost(body?: SendmailParam, system?: number, noreply?: number, options?: any) {\n            return DefaultApiFp(configuration).allSendmailPost(body, system, noreply, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Creates a service desk issue. The parameters are sent as a POST JSON payload.\n         * @param {ServiceDeskParam} [body] Necessary information to send a mail\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allServicedeskPost(body?: ServiceDeskParam, options?: any) {\n            return DefaultApiFp(configuration).allServicedeskPost(body, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get all settings of a customer\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allSettingGet(options?: any) {\n            return DefaultApiFp(configuration).allSettingGet(options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Adds or changes a customer setting. If the value is empty, the setting will be deleted.\n         * @param {string} key setting key\n         * @param {string} value value\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allSettingPost(key: string, value: string, options?: any) {\n            return DefaultApiFp(configuration).allSettingPost(key, value, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get instance status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allStatusGet(options?: any) {\n            return DefaultApiFp(configuration).allStatusGet(options)(fetch, basePath);\n        },\n        /**\n         * Permissions - No permissions needed. Valid from version 2.1\n         * @summary Returns all accepted time zones\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allTimezoneGet(options?: any) {\n            return DefaultApiFp(configuration).allTimezoneGet(options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.2\n         * @summary Get all todos for the current user, for all projects\n         * @param {number} [includeDone] (optional) set to 1 to include done todos and todo&#x27;s created by the user\n         * @param {number} [includeFuture] (optional) set to 1 to include future todos as well (defaults to 0)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allTodoGet(includeDone?: number, includeFuture?: number, options?: any) {\n            return DefaultApiFp(configuration).allTodoGet(includeDone, includeFuture, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary WebHook\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allWebhookPost(options?: any) {\n            return DefaultApiFp(configuration).allWebhookPost(options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.2\n         * @summary Retrieves the group list\n         * @param {number} [details] (optional) -  if set to 1 returns all details -- in this case user needs to be ADMIN\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGet(details?: number, options?: any) {\n            return DefaultApiFp(configuration).groupGet(details, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Removes a group\n         * @param {string} groupId group Id\n         * @param {string} confirm Needs to be yes for the method to be executed\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdDelete(groupId: string, confirm: string, options?: any) {\n            return DefaultApiFp(configuration).groupGroupIdDelete(groupId, confirm, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be that user - Matrix operations can impersonate. Valid from version 2.2\n         * @summary Retrieves details of a group\n         * @param {string} groupId group Id\n         * @param {number} [details] (optional) -  if set to 1 returns all details -- in this case user needs to be ADMIN\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdGet(groupId: string, details?: number, options?: any) {\n            return DefaultApiFp(configuration).groupGroupIdGet(groupId, details, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Adds a group to a project (or removes it)\n         * @param {string} groupId group Id\n         * @param {string} project Project short label\n         * @param {number} [permission] Specify the (new) permission for that group in that project\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdProjectProjectPost(groupId: string, project: string, permission?: number, options?: any) {\n            return DefaultApiFp(configuration).groupGroupIdProjectProjectPost(groupId, project, permission, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Renames a group\n         * @param {string} groupId group Id\n         * @param {string} newName The new group name. Cannot be one of the existing. Must start with &#x27;group.&#x27;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdRenamePut(groupId: string, newName: string, options?: any) {\n            return DefaultApiFp(configuration).groupGroupIdRenamePut(groupId, newName, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin or the user. Valid from version 2.2\n         * @summary Adds a user to a group\n         * @param {string} groupId group Id\n         * @param {string} user user login name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdUserUserPut(groupId: string, user: string, options?: any) {\n            return DefaultApiFp(configuration).groupGroupIdUserUserPut(groupId, user, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Sets all users of a group (replacing potential former content)\n         * @param {string} groupId group Id\n         * @param {string} users List of all users members of that group, commas-separated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdUserlistPut(groupId: string, users: string, options?: any) {\n            return DefaultApiFp(configuration).groupGroupIdUserlistPut(groupId, users, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Creates a new group\n         * @param {string} groupName group name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupNamePost(groupName: string, options?: any) {\n            return DefaultApiFp(configuration).groupGroupNamePost(groupName, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Removes a user from a group\n         * @param {string} groupName group name\n         * @param {string} user user login name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupNameUserUserDelete(groupName: string, user: string, options?: any) {\n            return DefaultApiFp(configuration).groupGroupNameUserUserDelete(groupName, user, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.3\n         * @summary Merge branch into mainline. First project is the mainline, second is the branch. The payload must contain a json object with a list of actions to perform.\n         * @param {string} mainproject mainproject\n         * @param {string} branchproject branchproject\n         * @param {string} reason The reason why the user is doing this\n         * @param {MergeParam} [body] Actions to perform\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        mainprojectMergeBranchprojectPost(mainproject: string, branchproject: string, reason: string, body?: MergeParam, options?: any) {\n            return DefaultApiFp(configuration).mainprojectMergeBranchprojectPost(mainproject, branchproject, reason, body, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have QMS viewer access (or higher) to the project. Valid from version 2.2\n         * @summary Retrieves all accesses in a project (list of groups and users who have access)\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectAccessGet(project: string, options?: any) {\n            return DefaultApiFp(configuration).projectAccessGet(project, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Retrieves all changes in a project\n         * @param {string} project Project short label\n         * @param {number} [startAt] (optional) Pagination -  starts the audit after N records\n         * @param {number} [maxResults] (optional) Pagination -  Retrieve N results per page\n         * @param {string} [deleteOnly] (optional) if set to yes, only returns actions of type delete\n         * @param {string} [tech] (optional) if set to yes, returns the underneath changes\n         * @param {number} [auditIdMin] (optional) sets a minimum ID for audits, as returned by GET calendar\n         * @param {number} [auditIdMax] (optional) sets a maximum ID for audits\n         * @param {number} [noReport] (optional) set to 1 to avoid having reports\n         * @param {number} [noImport] (optional) set to 1 to avoid having imports\n         * @param {string} [include] (optional) set to a list of actions to include (delete,undelete,add,edit,...)\n         * @param {number} [resolveRef] (optional) set to 1 to resolve item IDs into refs\n         * @param {string} [itemRef] (optional) restrict the audit to only those mentionning this item\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectAuditGet(project: string, startAt?: number, maxResults?: number, deleteOnly?: string, tech?: string, auditIdMin?: number, auditIdMax?: number, noReport?: number, noImport?: number, include?: string, resolveRef?: number, itemRef?: string, options?: any) {\n            return DefaultApiFp(configuration).projectAuditGet(project, startAt, maxResults, deleteOnly, tech, auditIdMin, auditIdMax, noReport, noImport, include, resolveRef, itemRef, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.3\n         * @summary Launches a server-side branch or clone - needs the 'merge' module if actual branching\n         * @param {string} project Project short label\n         * @param {string} label Branch project label\n         * @param {string} shortLabel Branch project short label\n         * @param {number} keepPermissions 1 or 0. Defaults to 0 (with 0 the project doesn&#x27;t have any permission after branching)\n         * @param {number} keepContent 1 or 0. Defaults to 1. 0 only works without branch and without history\n         * @param {number} [branch] (optional) Set to 1 to branch (default), 0 to just copy/clone\n         * @param {number} [history] (optional) Set to 1 to branch or copy with history, defaults to 0\n         * @param {string} [tagToCreate] (optional) specify a tag (by default auto-generated)\n         * @param {string} [branchInThePastTag] (optional) specify a tag to branch in the past (needs history&#x3D;1)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectBranchPost(project: string, label: string, shortLabel: string, keepPermissions: number, keepContent: number, branch?: number, history?: number, tagToCreate?: string, branchInThePastTag?: string, options?: any) {\n            return DefaultApiFp(configuration).projectBranchPost(project, label, shortLabel, keepPermissions, keepContent, branch, history, tagToCreate, branchInThePastTag, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get all dates at which a project has been modified\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCalendarGet(project: string, options?: any) {\n            return DefaultApiFp(configuration).projectCalendarGet(project, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Removes (inactivate) a category. Will fail on REPORT and FOLDER categories\n         * @param {string} project Project short label\n         * @param {string} category Category short label\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCatCategoryDelete(project: string, category: string, reason: string, options?: any) {\n            return DefaultApiFp(configuration).projectCatCategoryDelete(project, category, reason, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get details of a category\n         * @param {string} project Project short label\n         * @param {string} category Category short label\n         * @param {string} [filter] (optional) specify a filter\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCatCategoryGet(project: string, category: string, filter?: string, options?: any) {\n            return DefaultApiFp(configuration).projectCatCategoryGet(project, category, filter, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Modifies a categorie's labels, and fix the project's settings to reflect that change, OR modifies a category's order.\n         * @param {string} project Project short label\n         * @param {string} category Category short label\n         * @param {number} order The new order (for reordering)\n         * @param {string} shortLabel The new short label for that category (for renaming)\n         * @param {string} label The new long label for that category (for renaming)\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCatCategoryPut(project: string, category: string, order: number, shortLabel: string, label: string, reason: string, options?: any) {\n            return DefaultApiFp(configuration).projectCatCategoryPut(project, category, order, shortLabel, label, reason, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get all settings of a category\n         * @param {string} project Project short label\n         * @param {string} category Category short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCatCategorySettingGet(project: string, category: string, options?: any) {\n            return DefaultApiFp(configuration).projectCatCategorySettingGet(project, category, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Adds or changes a category setting. If the value is empty, the setting will be deleted\n         * @param {string} project Project short label\n         * @param {string} category Category short label\n         * @param {string} key setting key\n         * @param {string} value value\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCatCategorySettingPost(project: string, category: string, key: string, value: string, options?: any) {\n            return DefaultApiFp(configuration).projectCatCategorySettingPost(project, category, key, value, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get all categories of a project\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCatGet(project: string, options?: any) {\n            return DefaultApiFp(configuration).projectCatGet(project, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Adds a fields in a category\n         * @param {string} project Project short label\n         * @param {string} label Field label\n         * @param {string} category Category short label\n         * @param {string} fieldType Type of field\n         * @param {string} fieldParam Parameter for the field\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCatPost(project: string, label: string, category: string, fieldType: string, fieldParam: string, reason: string, options?: any) {\n            return DefaultApiFp(configuration).projectCatPost(project, label, category, fieldType, fieldParam, reason, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Clones a project\n         * @param {string} project Project short label\n         * @param {string} label Project label\n         * @param {string} shortLabel Project short label\n         * @param {number} keepHistory 1 or 0. Defaults to 0\n         * @param {number} keepContent 1 or 0. Defaults to 0 (only the REPORT part is kept, make sense only if keepHistory is 0)\n         * @param {number} keepPermissions 1 or 0. Defaults to 0 (with 0 the project doesn&#x27;t have any permission after cloning)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectClonePost(project: string, label: string, shortLabel: string, keepHistory: number, keepContent: number, keepPermissions: number, options?: any) {\n            return DefaultApiFp(configuration).projectClonePost(project, label, shortLabel, keepHistory, keepContent, keepPermissions, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Asks for the difference between 2 signed documents, as a Word document. The job ID is returned as answer\n         * @param {string} project Project short label\n         * @param {string} signitem1 SIGN-xx for the first SIGN document to compare\n         * @param {string} signitem2 SIGN-xx for the 2nd SIGN document to compare\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCompareSignitem1Signitem2Post(project: string, signitem1: string, signitem2: string, options?: any) {\n            return DefaultApiFp(configuration).projectCompareSignitem1Signitem2Post(project, signitem1, signitem2, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get a project's schema\n         * @param {string} [excludeCategories] (optional) comma-separated list of categories to exclude, like DOC,SIGN\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectConfigcheckGet(excludeCategories?: string, options?: any) {\n            return DefaultApiFp(configuration).projectConfigcheckGet(excludeCategories, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read/write access to the project - admins can impersonate. Valid from version 2.2\n         * @summary Copy items from a folder to another one\n         * @param {string} project Project short label\n         * @param {string} itemOrFolder Item reference (XXX-nn) or folder (F-XXX-nn)\n         * @param {string} targetFolder Reference of the target folder (F-categ-serial)\n         * @param {string} reason The reason why the user is doing this\n         * @param {string} [targetProject] (optional) project to copy into (by default, same project)\n         * @param {number} [copyLabels] (optional) 0 or 1. Defaults to 0\n         * @param {string} [map] (optional) mapN&#x3D;M -  map field N in source to field M in target\n         * @param {string} [ignoreLabels] (optional) can contain a comma-delimited list of labels NOT to copy\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCopyItemOrFolderPost(project: string, itemOrFolder: string, targetFolder: string, reason: string, targetProject?: string, copyLabels?: number, map?: string, ignoreLabels?: string, options?: any) {\n            return DefaultApiFp(configuration).projectCopyItemOrFolderPost(project, itemOrFolder, targetFolder, reason, targetProject, copyLabels, map, ignoreLabels, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get cross project links\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectCrossprojectlinkGet(project: string, options?: any) {\n            return DefaultApiFp(configuration).projectCrossprojectlinkGet(project, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Reserved to Matrix Requirements operations. Valid from version 2.1\n         * @summary Removes completely a project (only used for unit testing). This is an actual DELETE in the database.\n         * @param {string} project Project short label\n         * @param {string} confirm Needs to be yes for the method to be executed\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectDelete(project: string, confirm: string, options?: any) {\n            return DefaultApiFp(configuration).projectDelete(project, confirm, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Converts an excel file (xls, xlsx) into a XML version that we send straight back as an XML payload.\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectExcelxmlPost(project: string, options?: any) {\n            return DefaultApiFp(configuration).projectExcelxmlPost(project, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Executes UC or TC into XTC items\n         * @param {string} project Project short label\n         * @param {ExecuteParam} [body] There must be a JSON as a payload. It includes all parameters AND the reason\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectExecutePost(project: string, body?: ExecuteParam, options?: any) {\n            return DefaultApiFp(configuration).projectExecutePost(project, body, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Asks for an export of some items. The job ID is returned as answer\n         * @param {string} project Project short label\n         * @param {string} itemList Mandatory list of items to export.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectExportGet(project: string, itemList: string, options?: any) {\n            return DefaultApiFp(configuration).projectExportGet(project, itemList, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Removes (inactivate) a field.\n         * @param {string} project Project short label\n         * @param {string} category Category short label\n         * @param {number} field The field number (like field&#x3D;502)\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectFieldCategoryDelete(project: string, category: string, field: number, reason: string, options?: any) {\n            return DefaultApiFp(configuration).projectFieldCategoryDelete(project, category, field, reason, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get 1 field of an item. {item} has the form CATEG-number.\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} field Mandatory. Field number (faster) OR field label\n         * @param {string} [format] Optional. Format for the return. Can be text, json, html, xml or xslt. Defaults to html\n         * @param {number} [download] Optional. 1 to have in download, 0 as direct result. Defaults to 0.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectFieldItemGet(project: string, item: string, field: string, format?: string, download?: number, options?: any) {\n            return DefaultApiFp(configuration).projectFieldItemGet(project, item, field, format, download, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Modifies a field's label and parameter OR modifies a field's order.\n         * @param {string} project Project short label\n         * @param {number} field The field number (like field&#x3D;502)\n         * @param {string} label The new label (for renaming)\n         * @param {string} fieldParam The new parameter (for renaming)\n         * @param {number} order The new order (for reordering)\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectFieldPut(project: string, field: number, label: string, fieldParam: string, order: number, reason: string, options?: any) {\n            return DefaultApiFp(configuration).projectFieldPut(project, field, label, fieldParam, order, reason, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have the right key to download the file. Valid from version 2.1\n         * @summary Retrieve one project file. The fileno is a simple fileId. This request returns the actual file\n         * @param {string} project Project short label\n         * @param {number} fileno file number\n         * @param {string} key The key of the file\n         * @param {string} [disposition] (optional, from version 2.3) set to disposition&#x3D;inline to ask the server to send the disposition to &#x27;inline&#x27; instead of &#x27;attachment&#x27;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectFileFilenoGet(project: string, fileno: number, key: string, disposition?: string, options?: any) {\n            return DefaultApiFp(configuration).projectFileFilenoGet(project, fileno, key, disposition, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Retrieve list of all files owned by a project\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectFileGet(project: string, options?: any) {\n            return DefaultApiFp(configuration).projectFileGet(project, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Creates a new file - the file should be uploaded as payload (or through the url argument as an alternative). It's mime type should be sent through the HTTP protocol.\n         * @param {string} project Project short label\n         * @param {string} [url] Optional argument -  the file could also come from an external URL. In this case there will be an error if we can&#x27;t retrieve it on the server\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectFilePost(project: string, url?: string, options?: any) {\n            return DefaultApiFp(configuration).projectFilePost(project, url, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read/write access to the project - admins can impersonate. Valid from version 2.1\n         * @summary Creates a new folder\n         * @param {string} project Project short label\n         * @param {string} parent Reference of the parent folder in the form F-CATEG-serial (example -  F-SPEC-17)\n         * @param {string} label folder label\n         * @param {string} reason The reason why the user is doing this\n         * @param {string} [fxField] (optional) Add one of each of these to set folder&#x27;s fields. fx is followed by the field ID (a number)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectFolderPost(project: string, parent: string, label: string, reason: string, fxField?: string, options?: any) {\n            return DefaultApiFp(configuration).projectFolderPost(project, parent, label, reason, fxField, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get list of project info -  users, settings, categories\n         * @param {string} project Project short label\n         * @param {number} [adminUI] (optional) set to adminUI&#x3D;1 to have this project data even if you are not assigned to, as an admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectGet(project: string, adminUI?: number, options?: any) {\n            return DefaultApiFp(configuration).projectGet(project, adminUI, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Hides a project\n         * @param {string} project Project short label\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectHidePut(project: string, reason: string, options?: any) {\n            return DefaultApiFp(configuration).projectHidePut(project, reason, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.2\n         * @summary Launches a server-side hook\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} hook name of the hook\n         * @param {string} [body] Payload for the hook, treated as a string.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectHookItemPost(project: string, item: string, hook: string, body?: string, options?: any) {\n            return DefaultApiFp(configuration).projectHookItemPost(project, item, hook, body, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.3\n         * @summary Cleans up an input html blob according to the current html cleanup rules. The blob is passed in the POST payload. The payload must be a json object with {\\\"htmlToClean\\\" - \\\"x\\\"}\n         * @param {string} project Project short label\n         * @param {GetHmlBlobInput} [body] Payload\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectHtmlCleanupBlobPost(project: string, body?: GetHmlBlobInput, options?: any) {\n            return DefaultApiFp(configuration).projectHtmlCleanupBlobPost(project, body, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.3\n         * @summary Get the list of items that would be changed if we applied html cleanup. You can pass a cleanup setting in the payload of the POST. If it's not there we take the customer (global) setting and force the cleanup to true\n         * @param {string} project Project short label\n         * @param {CleanupSetting} [body] Cleanup setting (optional)\n         * @param {string} [categories] (optional) list of comma-delimited categories to go through, all by default\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectHtmlCleanupTestPost(project: string, body?: CleanupSetting, categories?: string, options?: any) {\n            return DefaultApiFp(configuration).projectHtmlCleanupTestPost(project, body, categories, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - ?. Valid from version 2.1\n         * @summary Removes an import\n         * @param {string} project Project short label\n         * @param {string} id id\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectImportIdDelete(project: string, id: string, reason: string, options?: any) {\n            return DefaultApiFp(configuration).projectImportIdDelete(project, id, reason, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Imports some items into a project\n         * @param {string} project Project short label\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectImportPost(project: string, reason: string, options?: any) {\n            return DefaultApiFp(configuration).projectImportPost(project, reason, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.4\n         * @summary Get the history of a import in a project\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectImportinfoGet(project: string, options?: any) {\n            return DefaultApiFp(configuration).projectImportinfoGet(project, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get details of a folder. {folder} has the form F-CATEG-number[-vN].\n         * @param {string} project Project short label\n         * @param {string} folder Folder reference (F-XXX-nn)\n         * @param {number} [history] (optional) set history&#x3D;1 to retrieve list of all versions\n         * @param {string} [filter] (optional) specify a filter\n         * @param {string} [children] (optional) set to yes if you need the children as well (recursively).\n         * @param {string} [atDate] (optional) retrieves the item at that date - format is ISO8601 like atDate&#x3D;2018-05-30T14 - 48 - 27.223Z. Not compatible with the version query -vN\n         * @param {number} [fields] (optional) set fields&#x3D;1 to retrieve list of all fields, even the empty ones\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemFolderGet(project: string, folder: string, history?: number, filter?: string, children?: string, atDate?: string, fields?: number, options?: any) {\n            return DefaultApiFp(configuration).projectItemFolderGet(project, folder, history, filter, children, atDate, fields, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Removes (inactivate) an item (or a folder). Item has the form (F-)CATEG-number. Will fail on non-empty folders\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} confirm Needs to be yes for the method to be executed IF it is a non-empty folder\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemItemDelete(project: string, item: string, confirm: string, reason: string, options?: any) {\n            return DefaultApiFp(configuration).projectItemItemDelete(project, item, confirm, reason, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get details of an item. {item} has the form CATEG-number[-vN].\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {number} [history] (optional) set history&#x3D;1 to retrieve list of all versions\n         * @param {number} [fields] (optional) set fields&#x3D;1 to retrieve list of all fields, even the empty ones\n         * @param {string} [filter] (optional) specify a filter\n         * @param {string} [atDate] (optional) retrieves the item at that date - format is ISO8601 like atDate&#x3D;2018-05-30T14 - 48 - 27.223Z. Not compatible with the version query -vN\n         * @param {number} [withTree] (optional) retrieves the context tree if set to 1, in the field contextTree. Exclusive to filter and atDate\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemItemGet(project: string, item: string, history?: number, fields?: number, filter?: string, atDate?: string, withTree?: number, options?: any) {\n            return DefaultApiFp(configuration).projectItemItemGet(project, item, history, fields, filter, atDate, withTree, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Restores an item. Item has the form CATEG-number\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} reason The reason why the user is doing this\n         * @param {number} [at] (optional) If set, specifies that the item should be restored as it was in that version\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemItemPost(project: string, item: string, reason: string, at?: number, options?: any) {\n            return DefaultApiFp(configuration).projectItemItemPost(project, item, reason, at, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Modifies an item or a folder. Item has the form CATEG-number, folders -  F-CATEG-number\n         * @param {ItemItemBody} body \n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemItemPut(body: ItemItemBody, project: string, item: string, options?: any) {\n            return DefaultApiFp(configuration).projectItemItemPut(body, project, item, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read/write access to the project - admins can impersonate. Valid from version 2.1\n         * @summary Adds an item in a folder\n         * @param {ProjectItemBody} body \n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemPost(body: ProjectItemBody, project: string, options?: any) {\n            return DefaultApiFp(configuration).projectItemPost(body, project, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - ?. Valid from version 2.1\n         * @summary Removes (inactivate) a link between 2 items. Items are in the form CATEG-number\n         * @param {string} project Project short label\n         * @param {string} upitem Item reference (XXX-nn) for the UP item\n         * @param {string} downitem Item reference (XXX-nn) for the DOWN item\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemlinkUpitemDownitemDelete(project: string, upitem: string, downitem: string, reason: string, options?: any) {\n            return DefaultApiFp(configuration).projectItemlinkUpitemDownitemDelete(project, upitem, downitem, reason, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Adds a link between 2 items. Both items are in the form CATEG-number\n         * @param {string} project Project short label\n         * @param {string} upitem Item reference (XXX-nn) for the UP item\n         * @param {string} downitem Item reference (XXX-nn) for the DOWN item\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemlinkUpitemDownitemPost(project: string, upitem: string, downitem: string, reason: string, options?: any) {\n            return DefaultApiFp(configuration).projectItemlinkUpitemDownitemPost(project, upitem, downitem, reason, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get the list of items that are detailed in a DOC/SIGN item.\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {number} [detailed] Optional. When set to 1 adds a secondaryItems list in the answer. Defaults to 0.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectItemlistItemGet(project: string, item: string, detailed?: number, options?: any) {\n            return DefaultApiFp(configuration).projectItemlistItemGet(project, item, detailed, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Retrieve list of all jobs in a project\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectJobGet(project: string, options?: any) {\n            return DefaultApiFp(configuration).projectJobGet(project, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.3\n         * @summary Aborts a job.\n         * @param {string} project Project short label\n         * @param {number} job job number\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectJobJobDelete(project: string, job: number, reason: string, options?: any) {\n            return DefaultApiFp(configuration).projectJobJobDelete(project, job, reason, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get a job file. The job part is the jobID (a number) and the file is the fileID (a number)\n         * @param {string} project Project short label\n         * @param {number} job job number\n         * @param {number} fileno file number\n         * @param {string} [mode] (optional) set to mode&#x3D;direct to get the output in the response output instead of as a download file. This assumes the file is HTML\n         * @param {string} [format] (optional) set to format&#x3D;json to get a json output instead of XML\n         * @param {string} [disposition] (optional, from version 2.3) set to disposition&#x3D;inline to ask the server to send the disposition to &#x27;inline&#x27; instead of &#x27;attachment&#x27;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectJobJobFilenoGet(project: string, job: number, fileno: number, mode?: string, format?: string, disposition?: string, options?: any) {\n            return DefaultApiFp(configuration).projectJobJobFilenoGet(project, job, fileno, mode, format, disposition, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get a job status, including generated files. The variable part is the jobID (a number)\n         * @param {string} project Project short label\n         * @param {number} job job number\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectJobJobGet(project: string, job: number, options?: any) {\n            return DefaultApiFp(configuration).projectJobJobGet(project, job, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.2\n         * @summary Sets the progress of a job\n         * @param {string} project Project short label\n         * @param {number} job job number\n         * @param {number} progress progress (0 to 100, 200 for error)\n         * @param {string} [status] (optional( status text\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectJobJobPost(project: string, job: number, progress: number, status?: string, options?: any) {\n            return DefaultApiFp(configuration).projectJobJobPost(project, job, progress, status, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.3\n         * @summary Get the label history of a project -  list of all label changes for all items\n         * @param {string} project Project short label\n         * @param {string} [itemRef] (optional) ask for just one item (the return structure is still an array in that case)\n         * @param {string} [from] (optional) date from\n         * @param {string} [to] (optional) date to - works only if you only specified a from\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectLabelhistoryGet(project: string, itemRef?: string, from?: string, to?: string, options?: any) {\n            return DefaultApiFp(configuration).projectLabelhistoryGet(project, itemRef, from, to, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.3\n         * @summary Get the merge history of a project - needs the 'merge' module\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectMergehistoryGet(project: string, options?: any) {\n            return DefaultApiFp(configuration).projectMergehistoryGet(project, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.3\n         * @summary Get the merge information - needs the 'merge' module\n         * @param {string} project Project short label\n         * @param {string} [excludeCategories] (optional) comma-delimited list of categories to exclude\n         * @param {string} [fromDate] (optional) date from which we consider the merges. ISO8601 format -- this parameter was introduced in v 2.3.4\n         * @param {number} [push] (optional) set to 1 if you inquire about a push, not a merge -- this parameter was introduced in v 2.3.4\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectMergeinfoGet(project: string, excludeCategories?: string, fromDate?: string, push?: number, options?: any) {\n            return DefaultApiFp(configuration).projectMergeinfoGet(project, excludeCategories, fromDate, push, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Imports some folders from a project to another as a module. Only available is you have the resync module licensed and the unique_serial setting\n         * @param {string} project Project short label\n         * @param {string} mode Import mode -  can be include or copy\n         * @param {string} sourceProject Source project\n         * @param {string} sourceSelection A selection of folders and items to import\n         * @param {string} reason The reason why the user is doing this\n         * @param {string} [update] Update mode -  can be simple, update or rebase. If not defined, simple assumed\n         * @param {string} [oldSourceProject] Old source project (if update&#x3D;rebase\n         * @param {string} [lockLabel] An optional label that this operation will set on all items\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectModuleimportPost(project: string, mode: string, sourceProject: string, sourceSelection: string, reason: string, update?: string, oldSourceProject?: string, lockLabel?: string, options?: any) {\n            return DefaultApiFp(configuration).projectModuleimportPost(project, mode, sourceProject, sourceSelection, reason, update, oldSourceProject, lockLabel, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Move items into this folder\n         * @param {string} project Project short label\n         * @param {string} folder Folder reference (F-XXX-nn)\n         * @param {string} reason The reason why the user is doing this\n         * @param {string} [items] List of items to move in\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectMoveinFolderPost(project: string, folder: string, reason: string, items?: string, options?: any) {\n            return DefaultApiFp(configuration).projectMoveinFolderPost(project, folder, reason, items, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Find items based on a search string in one project\n         * @param {string} project Project short label\n         * @param {string} search search term\n         * @param {string} id search id. Used by MatrixJira js to match queries with answers. Is returned in the output structure\n         * @param {string} [filter] (optional) applies a filter, can be negative\n         * @param {string} [fieldsOut] (optional) comma-delimited list of fields to return -  101,102 - or * for all\n         * @param {number} [labels] (optional) set to 1 to return labels in the output\n         * @param {number} [treeOrder] (optional) set to 1 to return items in tree order (otherwise it&#x27;s project,category,serial)\n         * @param {string} [links] (optional) set to up,down to return up and down items, or only up or only down\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectNeedleGet(project: string, search: string, id: string, filter?: string, fieldsOut?: string, labels?: number, treeOrder?: number, links?: string, options?: any) {\n            return DefaultApiFp(configuration).projectNeedleGet(project, search, id, filter, fieldsOut, labels, treeOrder, links, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Find item ids based on a search string in one project\n         * @param {string} project Project short label\n         * @param {string} search search term\n         * @param {string} [filter] (optional) applies a filter, can be negative\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectNeedleminimalGet(project: string, search: string, filter?: string, options?: any) {\n            return DefaultApiFp(configuration).projectNeedleminimalGet(project, search, filter, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Adds a category to a project\n         * @param {string} project Project short label\n         * @param {string} label Category label\n         * @param {string} shortLabel Category short label\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectPost(project: string, label: string, shortLabel: string, reason: string, options?: any) {\n            return DefaultApiFp(configuration).projectPost(project, label, shortLabel, reason, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Publishes an item. Item has the form PUB-nnn\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} reason reason for the publication\n         * @param {string} [trainingFor] (optional) list of items for which we need to add training. If list is not there, all trainings will be generated\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectPublishItemPost(project: string, item: string, reason: string, trainingFor?: string, options?: any) {\n            return DefaultApiFp(configuration).projectPublishItemPost(project, item, reason, trainingFor, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have QMS viewer access (or higher) to the project. Valid from version 2.3\n         * @summary Find a string in the QMS published items\n         * @param {string} project Project short label\n         * @param {string} [search] (optional) search term. Return an empty array on PUB &lt; 2.3.1 and et the list of all pub if not specified.\n         * @param {string} [pubItem] (optional) PUB-x item if you want to search in another than the last one for that project\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectQmsfindGet(project: string, search?: string, pubItem?: string, options?: any) {\n            return DefaultApiFp(configuration).projectQmsfindGet(project, search, pubItem, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) for the reports, read/write for the signed reports. Valid from version 2.1\n         * @summary Asks for a new report. The job ID is returned as answer. {report} can be REPORT-n, DOC-n, SIGN-n or a report name.To follow the progress of the job, the GET /{project}/job/{jobid} can be called\n         * @param {string} project Project short label\n         * @param {string} report name of the report\n         * @param {string} isSignedReport If set to true, means the report needs to generate a signed record\n         * @param {string} includeSignatures List of comma separated users who need to sign\n         * @param {string} newTitle New title for the SIGN- item that is generated (only valid for isSignedReport)\n         * @param {string} copyFields List of from-to fields (123,456),(124,457) that we can use to generate the fields in the SIGN record (only valid for isSignedReport)\n         * @param {string} [itemList] (optional) list of items to use in the report. By default all categories are used\n         * @param {string} [url] (optional) url to generate in the filter\n         * @param {string} [resturl] (optional) REST url to generate in the filter\n         * @param {string} [format] (optional) format -  html (default), pdf, docx, odt, xml, zipdocx, zippdf or package (from 2.2), or mf (since 2.3)\n         * @param {string} [filter] (optional) specify a comma-delimited filter list. Can be negative filters (with minus before)\n         * @param {number} [useOld] (optional) ask to use the old report engine (pre 1.11) if set to 1.\n         * @param {string} [atDate] (optional) generates the report at that date - format is ISO8601 like atDate&#x3D;2018-05-30T14 - 48 - 27.223Z\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectReportReportPost(project: string, report: string, isSignedReport: string, includeSignatures: string, newTitle: string, copyFields: string, itemList?: string, url?: string, resturl?: string, format?: string, filter?: string, useOld?: number, atDate?: string, options?: any) {\n            return DefaultApiFp(configuration).projectReportReportPost(project, report, isSignedReport, includeSignatures, newTitle, copyFields, itemList, url, resturl, format, filter, useOld, atDate, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get a project's schema\n         * @param {string} project Project short label\n         * @param {number} [simple] (optional) set to simple&#x3D;1 to have a simpler output (no fields, round shape)\n         * @param {string} [excludeCategories] (optional) comma-separated list of categories to exclude, like DOC,SIGN\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectSchemaGet(project: string, simple?: number, excludeCategories?: string, options?: any) {\n            return DefaultApiFp(configuration).projectSchemaGet(project, simple, excludeCategories, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Get all settings of a project\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectSettingGet(project: string, options?: any) {\n            return DefaultApiFp(configuration).projectSettingGet(project, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Adds or changes a project setting. If the value is empty, the setting will be deleted.\n         * @param {string} project Project short label\n         * @param {string} key setting key\n         * @param {string} value value\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectSettingPost(project: string, key: string, value: string, options?: any) {\n            return DefaultApiFp(configuration).projectSettingPost(project, key, value, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Signs an item. Item has the form SIGN-nnn\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} password signature password - the user who is signing is the one who is logged in\n         * @param {string} [acceptComments] (optional) adds an acceptance comment\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectSignItemPost(project: string, item: string, password: string, acceptComments?: string, options?: any) {\n            return DefaultApiFp(configuration).projectSignItemPost(project, item, password, acceptComments, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Edit the signature parts\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} rejectSign The reason why the user is rejecting the signature\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectSignItemPut(project: string, item: string, rejectSign: string, options?: any) {\n            return DefaultApiFp(configuration).projectSignItemPut(project, item, rejectSign, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Asks for a new report. The job ID is returned as answer\n         * @param {string} project Project short label\n         * @param {string} [url] (optional) url to generate in the filter\n         * @param {string} [resturl] (optional) REST url to generate in the filter\n         * @param {string} [format] (optional) format -  html (default), pdf, docx, odt, xml, zipdocx or zippdf\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectSignedreportSIGNNPost(project: string, url?: string, resturl?: string, format?: string, options?: any) {\n            return DefaultApiFp(configuration).projectSignedreportSIGNNPost(project, url, resturl, format, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Get all tags of a project. Works on any project if user is admin\n         * @param {string} project Project short label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectTagGet(project: string, options?: any) {\n            return DefaultApiFp(configuration).projectTagGet(project, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Adds a tag to a project\n         * @param {string} project Project short label\n         * @param {string} label Tag label. Must be unique within a project\n         * @param {number} auditId Id of the audit this tag is based on\n         * @param {string} type Type of tag (default -  tag)\n         * @param {string} comments Free optional comment\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectTagPost(project: string, label: string, auditId: number, type: string, comments: string, options?: any) {\n            return DefaultApiFp(configuration).projectTagPost(project, label, auditId, type, comments, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.2\n         * @summary Get all todos for the current user, for oneproject\n         * @param {string} project Project short label\n         * @param {string} [itemRef] (optional) set to an item to have all todos linked to an item, regardless of the user\n         * @param {number} [includeDone] (optional) set to 1 to include done todos and todo&#x27;s created by the user\n         * @param {number} [includeAllUsers] (optional) set to 1 to include all todos for all users\n         * @param {number} [includeFuture] (optional) set to 1 to include future todos as well (defaults to 0)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectTodoGet(project: string, itemRef?: string, includeDone?: number, includeAllUsers?: number, includeFuture?: number, options?: any) {\n            return DefaultApiFp(configuration).projectTodoGet(project, itemRef, includeDone, includeAllUsers, includeFuture, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.2\n         * @summary Creates a todo on an item (note that you only need read access for this POST method) for you or others\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} text The todo reason\n         * @param {number} [fieldId] (optional) If set, specifies that the todo is related to that field (review, ...)\n         * @param {string} [logins] (optional) If set, a list of user logins or groups to which these todo apply\n         * @param {string} [todoType] (optional) The todo type -  &#x27;user&#x27; by default\n         * @param {string} [atDate] (optional) a date in the future for reminders\n         * @param {number} [auto] (optional) set to 1 to create an auto-notification (0 by default)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectTodoItemPost(project: string, item: string, text: string, fieldId?: number, logins?: string, todoType?: string, atDate?: string, auto?: number, options?: any) {\n            return DefaultApiFp(configuration).projectTodoItemPost(project, item, text, fieldId, logins, todoType, atDate, auto, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.2\n         * @summary Removes (mark as done) a todo.\n         * @param {string} project Project short label\n         * @param {string} todoid todoid\n         * @param {string} hardDelete Set to yes to actually remove the record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectTodoTodoidDelete(project: string, todoid: string, hardDelete: string, options?: any) {\n            return DefaultApiFp(configuration).projectTodoTodoidDelete(project, todoid, hardDelete, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Touches (set to same date) an item or folder\n         * @param {string} project Project short label\n         * @param {string} item Item reference (XXX-nn)\n         * @param {string} reason The reason why the user is doing this\n         * @param {number} [nbLayers] (optional) Number of layers -- 1 by default\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectTouchItemPut(project: string, item: string, reason: string, nbLayers?: number, options?: any) {\n            return DefaultApiFp(configuration).projectTouchItemPut(project, item, reason, nbLayers, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n         * @summary Get full tree\n         * @param {string} project Project short label\n         * @param {string} [fancy] (optional) returns a fancy tree\n         * @param {string} [filter] (optional) applies a filter\n         * @param {string} [atDate] (optional) generates the tree at that date - format is ISO8601 like atDate&#x3D;2018-05-30T14 - 48 - 27.223Z\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectTreeGet(project: string, fancy?: string, filter?: string, atDate?: string, options?: any) {\n            return DefaultApiFp(configuration).projectTreeGet(project, fancy, filter, atDate, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Unhides a project.\n         * @param {string} project Project short label\n         * @param {string} newShort The new project short name to use\n         * @param {string} reason The reason why the user is doing this\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectUnhidePut(project: string, newShort: string, reason: string, options?: any) {\n            return DefaultApiFp(configuration).projectUnhidePut(project, newShort, reason, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have read/write access to the project. Valid from version 2.1\n         * @summary Converts a word document to an HTML, with images pointing to uploaded files on the server\n         * @param {string} project Project short label\n         * @param {string} reason The reason why the user is doing this\n         * @param {number} [fileNo] If specified, means that the conversion is from an already uploaded file. Otherwise the file must be uploaded as body of this call\n         * @param {string} [targetDocumentFolder] target document folder (in this case creates a document)\n         * @param {number} [useAsField] set to 1 to have this docx used as a field. In this case the return value is the html equivalent, with some meta\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        projectWordconvertPost(project: string, reason: string, fileNo?: number, targetDocumentFolder?: string, useAsField?: number, options?: any) {\n            return DefaultApiFp(configuration).projectWordconvertPost(project, reason, fileNo, targetDocumentFolder, useAsField, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Get list of all projects, all settings and current user, all todos and JIRA meta create object\n         * @param {number} [adminUI] (optional) set to adminUI&#x3D;1 to have all projects even the ones you are not assigned to, as an admin\n         * @param {string} [output] (optional) comma-delimited list of requested output fields. Returns all fields if parameter is not present\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        rootGet(adminUI?: number, output?: string, options?: any) {\n            return DefaultApiFp(configuration).rootGet(adminUI, output, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Creates a new project. Either the full project is sent as XML payload, or the label and shortLabel are given. If uploading data for a whole project, label and shortLabel are optional but overwrite the XML content if present. Branching can be done with an audit report as payload, and branch* must be defined in that case\n         * @param {string} label Project label\n         * @param {string} shortLabel Project short label\n         * @param {string} [overwrite] Must be set to yes if you&#x27;re overwriting an existing project\n         * @param {string} [importUsers] Must be set to yes if you want to import users. false by default\n         * @param {string} [branchLabel] Must be set to branch (optional)\n         * @param {string} [branchTag] Must be set to branch, and match a tag in the audit export (optional)\n         * @param {string} [branchComment] Comment for the branch (optional)\n         * @param {string} [branchBaseProjectLabel] Label of the base Project (optional)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        rootPost(label: string, shortLabel: string, overwrite?: string, importUsers?: string, branchLabel?: string, branchTag?: string, branchComment?: string, branchBaseProjectLabel?: string, options?: any) {\n            return DefaultApiFp(configuration).rootPost(label, shortLabel, overwrite, importUsers, branchLabel, branchTag, branchComment, branchBaseProjectLabel, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin or the user. Valid from version 2.1\n         * @summary Retrieves the user list\n         * @param {string} details (optional) -  if set to 1 returns all details\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userGet(details: string, options?: any) {\n            return DefaultApiFp(configuration).userGet(details, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Creates a new user. Arguments are either a set of arguments or json\n         * @param {string} login User login name\n         * @param {string} email User email\n         * @param {string} password User password in clear\n         * @param {string} json A json struct with login, email, password, first, last, signatureImage(int), signaturePassword, admin(int)\n         * @param {string} [first] User first name (optional)\n         * @param {string} [last] User last name (optional)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userPost(login: string, email: string, password: string, json: string, first?: string, last?: string, options?: any) {\n            return DefaultApiFp(configuration).userPost(login, email, password, json, first, last, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be that user - Matrix operations can impersonate. Valid from version 2.1\n         * @summary Retrieves all actions of a user\n         * @param {string} user user login name\n         * @param {number} [startAt] (optional) Pagination -  starts the audit after N records\n         * @param {number} [maxResults] (optional) Pagination -  Retrieve N results per page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserAuditGet(user: string, startAt?: number, maxResults?: number, options?: any) {\n            return DefaultApiFp(configuration).userUserAuditGet(user, startAt, maxResults, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be that user - Matrix operations can impersonate. Valid from version 2.1\n         * @summary Check a user's password\n         * @param {string} user user login name\n         * @param {string} password Asks for a check of the password1\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserCheckGet(user: string, password: string, options?: any) {\n            return DefaultApiFp(configuration).userUserCheckGet(user, password, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be that user - Matrix operations can impersonate. Valid from version 2.1\n         * @summary Check a user's password\n         * @param {string} user user login name\n         * @param {string} password Asks for a check of the password1\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserCheckPost(user: string, password: string, options?: any) {\n            return DefaultApiFp(configuration).userUserCheckPost(user, password, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Reserved to Matrix Requirements operations. Valid from version 2.1\n         * @summary Removes completely a user (only used for unit testing)\n         * @param {string} user user login name\n         * @param {string} confirm Needs to be yes for the method to be executed\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserDelete(user: string, confirm: string, options?: any) {\n            return DefaultApiFp(configuration).userUserDelete(user, confirm, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be that user - Matrix operations can impersonate. Valid from version 2.1\n         * @summary Retrieves full details of a user\n         * @param {string} user user login name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserGet(user: string, options?: any) {\n            return DefaultApiFp(configuration).userUserGet(user, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - No permissions needed. Valid from version 2.1\n         * @summary Login\n         * @param {string} user user login name\n         * @param {string} password password in clear\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserLoginPost(user: string, password: string, options?: any) {\n            return DefaultApiFp(configuration).userUserLoginPost(user, password, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must have a valid authentication. Valid from version 2.1\n         * @summary Logout\n         * @param {string} user user login name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserLogoutPost(user: string, options?: any) {\n            return DefaultApiFp(configuration).userUserLogoutPost(user, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin or the user. Valid from version 2.1\n         * @summary Sets a new password for an account that has a password_reset token in place (the {user} in the URL doesn't matter)\n         * @param {string} user user login name\n         * @param {string} token password_reset token\n         * @param {string} password New password to use from now on\n         * @param {string} [signaturePassword] (optional) New password to use from now on for signatures\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserPasswordResetPost(user: string, token: string, password: string, signaturePassword?: string, options?: any) {\n            return DefaultApiFp(configuration).userUserPasswordResetPost(user, token, password, signaturePassword, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Adds a user to a project\n         * @param {string} user user login name\n         * @param {string} project Project short label\n         * @param {number} permission 0 for no access, 1 for readonly, 2 for read/write (default), 3 for admin, 4 for visitor\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserProjectPost(user: string, project: string, permission: number, options?: any) {\n            return DefaultApiFp(configuration).userUserProjectPost(user, project, permission, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Edits the user permissions in a project. If permission is 0, it means the user has no longer access (but we retain its records for audit purposes)\n         * @param {string} user user login name\n         * @param {string} project Project short label\n         * @param {number} permission 0 for no access, 1 for readonly, 2 for read/write (default), 3 for admin\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserProjectPut(user: string, project: string, permission: number, options?: any) {\n            return DefaultApiFp(configuration).userUserProjectPut(user, project, permission, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be that user - Matrix operations can impersonate. Valid from version 2.1\n         * @summary Retrieves all projects a user has access to\n         * @param {string} user user login name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserProjectsGet(user: string, options?: any) {\n            return DefaultApiFp(configuration).userUserProjectsGet(user, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin or the user. Valid from version 2.1\n         * @summary Edits the user details. Arguments are all separated or a single json argument. Regular users can only change their signature and passwords.\n         * @param {string} user user login name\n         * @param {string} email User new email\n         * @param {string} password User new password in clear\n         * @param {string} json A json struct with login, email, password, first, last, signatureImage(int), signaturePassword, admin(int)\n         * @param {string} [first] User first name (optional)\n         * @param {string} [last] User last name (optional)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserPut(user: string, email: string, password: string, json: string, first?: string, last?: string, options?: any) {\n            return DefaultApiFp(configuration).userUserPut(user, email, password, json, first, last, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.2\n         * @summary Renames a user login\n         * @param {string} user user login name\n         * @param {string} newLogin The new login name. Cannot be one of the existing\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserRenamePut(user: string, newLogin: string, options?: any) {\n            return DefaultApiFp(configuration).userUserRenamePut(user, newLogin, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin or the user. Valid from version 2.1\n         * @summary Adds or deletes a user setting.\n         * @param {string} user user login name\n         * @param {string} key Name of the setting\n         * @param {string} value Value of the setting. If empty, deletes the setting.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserSettingPost(user: string, key: string, value: string, options?: any) {\n            return DefaultApiFp(configuration).userUserSettingPost(user, key, value, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin. Valid from version 2.1\n         * @summary Sets the new status of the user. Can be normal,blocked or deleted\n         * @param {string} user user login name\n         * @param {string} status Can be normal,blocked or deleted\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserStatusPut(user: string, status: string, options?: any) {\n            return DefaultApiFp(configuration).userUserStatusPut(user, status, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin or the user. Valid from version 2.1\n         * @summary Removes a user token\n         * @param {string} user user login name\n         * @param {string} value The token to be removed\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserTokenDelete(user: string, value: string, options?: any) {\n            return DefaultApiFp(configuration).userUserTokenDelete(user, value, options)(fetch, basePath);\n        },\n        /**\n         * Permissions - Must be admin or the user. Valid from version 2.1\n         * @summary Adds a token for a user\n         * @param {string} user user login name\n         * @param {string} purpose Purpose of the token. Not checked. Should contain either \\&quot;password_reset\\&quot; or \\&quot;oauth\\&quot;\n         * @param {string} [value] Value of the token - by default generated by this call\n         * @param {string} [reason] Free text explain where the token will be used (URL or others). Should be set for oauth, not needed for others\n         * @param {number} [validity] Validity of the token in hours - if not set, doesn&#x27;t expire\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        userUserTokenPost(user: string, purpose: string, value?: string, reason?: string, validity?: number, options?: any) {\n            return DefaultApiFp(configuration).userUserTokenPost(user, purpose, value, reason, validity, options)(fetch, basePath);\n        },\n    };\n};\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI {\n    /**\n     * Permissions - No permissions needed. Valid from version 2.1\n     * @summary Asks for the difference between A and B html exerpts, and produce the B html with annotations\n     * @param {string} [arg] json object with the arguments\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public allCompareHtmlPost(arg?: string, options?: any) {\n        return DefaultApiFp(this.configuration).allCompareHtmlPost(arg, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have a valid authentication. Valid from version 2.1\n     * @summary Returns all info about a date\n     * @param {string} [date] (optional) an input date formatted as iso8601. If not present, current date/time is used\n     * @param {string} [dateformat] (optional) a date formatter. If not present, current date format is used\n     * @param {string} [timeformat] (optional) a date-time formatter. If not present, current date/time format is used\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public allDateGet(date?: string, dateformat?: string, timeformat?: string, options?: any) {\n        return DefaultApiFp(this.configuration).allDateGet(date, dateformat, timeformat, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have the right key to download the file. Valid from version 2.1\n     * @summary Retrieve one customer file. The fileno is a simple fileId. This request returns the actual file\n     * @param {number} fileno file number\n     * @param {string} key The key of the file\n     * @param {string} [disposition] (optional, from version 2.3) set to disposition&#x3D;inline to ask the server to send the disposition to &#x27;inline&#x27; instead of &#x27;attachment&#x27;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public allFileFilenoGet(fileno: number, key: string, disposition?: string, options?: any) {\n        return DefaultApiFp(this.configuration).allFileFilenoGet(fileno, key, disposition, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Retrieve list of all customer-wide files\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public allFileGet(options?: any) {\n        return DefaultApiFp(this.configuration).allFileGet(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have a valid authentication. Valid from version 2.1\n     * @summary Creates a new customer-wide file - the file should be uploaded as payload. Its mime type should be sent through the HTTP protocol.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public allFilePost(options?: any) {\n        return DefaultApiFp(this.configuration).allFilePost(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin. Valid from version 2.1\n     * @summary Retrieve license status\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public allLicenseGet(options?: any) {\n        return DefaultApiFp(this.configuration).allLicenseGet(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Adds a log entry (server side).\n     * @param {string} message Message to log\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public allLogPost(message: string, options?: any) {\n        return DefaultApiFp(this.configuration).allLogPost(message, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Reserved to Matrix Requirements operations. Valid from version 2.4\n     * @summary Update matrix instance log level.\n     * @param {LogLevel} [body] Payload containing the log level\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public allLoglevelPut(body?: LogLevel, options?: any) {\n        return DefaultApiFp(this.configuration).allLoglevelPut(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - No permissions needed. Valid from version 2.1\n     * @summary Monitoring object\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public allMonitorGet(options?: any) {\n        return DefaultApiFp(this.configuration).allMonitorGet(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Find items based on a search string in all projects\n     * @param {string} search search term\n     * @param {string} id search id. Used by MatrixJira js to match queries with answers. Is returned in the output structure\n     * @param {string} [filter] (optional) applies a filter, can be negative\n     * @param {string} [fieldsOut] (optional) comma-delimited list of fields to return -  101,102 - or * for all\n     * @param {number} [labels] (optional) set to 1 to return labels in the output\n     * @param {string} [links] (optional) set to up,down to return up and down items, or only up or only down\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public allNeedleGet(search: string, id: string, filter?: string, fieldsOut?: string, labels?: number, links?: string, options?: any) {\n        return DefaultApiFp(this.configuration).allNeedleGet(search, id, filter, fieldsOut, labels, links, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Find item ids based on a search string in all projects\n     * @param {string} search search term\n     * @param {string} [filter] (optional) applies a filter, can be negative\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public allNeedleminimalGet(search: string, filter?: string, options?: any) {\n        return DefaultApiFp(this.configuration).allNeedleminimalGet(search, filter, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - No permissions needed. Valid from version 2.2\n     * @summary The OpenAPI 3.0 definition of our REST API\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public allOpenapiGet(options?: any) {\n        return DefaultApiFp(this.configuration).allOpenapiGet(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - No permissions needed. Valid from version 2.1\n     * @summary Lists all reports\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public allReportsGet(options?: any) {\n        return DefaultApiFp(this.configuration).allReportsGet(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have a valid authentication. Valid from version 2.1\n     * @summary Sends an email. Non-optional parameters are sent as a POST JSON payload.\n     * @param {SendmailParam} [body] Necessary information to send a mail\n     * @param {number} [system] (optional) if set to 1 makes it a system email (not sent by the actual user)\n     * @param {number} [noreply] (optional) if set to 1 makes it a no-reply email (not sent by the actual user)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public allSendmailPost(body?: SendmailParam, system?: number, noreply?: number, options?: any) {\n        return DefaultApiFp(this.configuration).allSendmailPost(body, system, noreply, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have a valid authentication. Valid from version 2.1\n     * @summary Creates a service desk issue. The parameters are sent as a POST JSON payload.\n     * @param {ServiceDeskParam} [body] Necessary information to send a mail\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public allServicedeskPost(body?: ServiceDeskParam, options?: any) {\n        return DefaultApiFp(this.configuration).allServicedeskPost(body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Get all settings of a customer\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public allSettingGet(options?: any) {\n        return DefaultApiFp(this.configuration).allSettingGet(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin. Valid from version 2.1\n     * @summary Adds or changes a customer setting. If the value is empty, the setting will be deleted.\n     * @param {string} key setting key\n     * @param {string} value value\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public allSettingPost(key: string, value: string, options?: any) {\n        return DefaultApiFp(this.configuration).allSettingPost(key, value, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Get instance status\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public allStatusGet(options?: any) {\n        return DefaultApiFp(this.configuration).allStatusGet(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - No permissions needed. Valid from version 2.1\n     * @summary Returns all accepted time zones\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public allTimezoneGet(options?: any) {\n        return DefaultApiFp(this.configuration).allTimezoneGet(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.2\n     * @summary Get all todos for the current user, for all projects\n     * @param {number} [includeDone] (optional) set to 1 to include done todos and todo&#x27;s created by the user\n     * @param {number} [includeFuture] (optional) set to 1 to include future todos as well (defaults to 0)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public allTodoGet(includeDone?: number, includeFuture?: number, options?: any) {\n        return DefaultApiFp(this.configuration).allTodoGet(includeDone, includeFuture, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read/write access to the project. Valid from version 2.1\n     * @summary WebHook\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public allWebhookPost(options?: any) {\n        return DefaultApiFp(this.configuration).allWebhookPost(options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have a valid authentication. Valid from version 2.2\n     * @summary Retrieves the group list\n     * @param {number} [details] (optional) -  if set to 1 returns all details -- in this case user needs to be ADMIN\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public groupGet(details?: number, options?: any) {\n        return DefaultApiFp(this.configuration).groupGet(details, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin. Valid from version 2.2\n     * @summary Removes a group\n     * @param {string} groupId group Id\n     * @param {string} confirm Needs to be yes for the method to be executed\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public groupGroupIdDelete(groupId: string, confirm: string, options?: any) {\n        return DefaultApiFp(this.configuration).groupGroupIdDelete(groupId, confirm, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be that user - Matrix operations can impersonate. Valid from version 2.2\n     * @summary Retrieves details of a group\n     * @param {string} groupId group Id\n     * @param {number} [details] (optional) -  if set to 1 returns all details -- in this case user needs to be ADMIN\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public groupGroupIdGet(groupId: string, details?: number, options?: any) {\n        return DefaultApiFp(this.configuration).groupGroupIdGet(groupId, details, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin. Valid from version 2.2\n     * @summary Adds a group to a project (or removes it)\n     * @param {string} groupId group Id\n     * @param {string} project Project short label\n     * @param {number} [permission] Specify the (new) permission for that group in that project\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public groupGroupIdProjectProjectPost(groupId: string, project: string, permission?: number, options?: any) {\n        return DefaultApiFp(this.configuration).groupGroupIdProjectProjectPost(groupId, project, permission, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin. Valid from version 2.2\n     * @summary Renames a group\n     * @param {string} groupId group Id\n     * @param {string} newName The new group name. Cannot be one of the existing. Must start with &#x27;group.&#x27;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public groupGroupIdRenamePut(groupId: string, newName: string, options?: any) {\n        return DefaultApiFp(this.configuration).groupGroupIdRenamePut(groupId, newName, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin or the user. Valid from version 2.2\n     * @summary Adds a user to a group\n     * @param {string} groupId group Id\n     * @param {string} user user login name\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public groupGroupIdUserUserPut(groupId: string, user: string, options?: any) {\n        return DefaultApiFp(this.configuration).groupGroupIdUserUserPut(groupId, user, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin. Valid from version 2.2\n     * @summary Sets all users of a group (replacing potential former content)\n     * @param {string} groupId group Id\n     * @param {string} users List of all users members of that group, commas-separated\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public groupGroupIdUserlistPut(groupId: string, users: string, options?: any) {\n        return DefaultApiFp(this.configuration).groupGroupIdUserlistPut(groupId, users, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin. Valid from version 2.2\n     * @summary Creates a new group\n     * @param {string} groupName group name\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public groupGroupNamePost(groupName: string, options?: any) {\n        return DefaultApiFp(this.configuration).groupGroupNamePost(groupName, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin. Valid from version 2.2\n     * @summary Removes a user from a group\n     * @param {string} groupName group name\n     * @param {string} user user login name\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public groupGroupNameUserUserDelete(groupName: string, user: string, options?: any) {\n        return DefaultApiFp(this.configuration).groupGroupNameUserUserDelete(groupName, user, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read/write access to the project. Valid from version 2.3\n     * @summary Merge branch into mainline. First project is the mainline, second is the branch. The payload must contain a json object with a list of actions to perform.\n     * @param {string} mainproject mainproject\n     * @param {string} branchproject branchproject\n     * @param {string} reason The reason why the user is doing this\n     * @param {MergeParam} [body] Actions to perform\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public mainprojectMergeBranchprojectPost(mainproject: string, branchproject: string, reason: string, body?: MergeParam, options?: any) {\n        return DefaultApiFp(this.configuration).mainprojectMergeBranchprojectPost(mainproject, branchproject, reason, body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have QMS viewer access (or higher) to the project. Valid from version 2.2\n     * @summary Retrieves all accesses in a project (list of groups and users who have access)\n     * @param {string} project Project short label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectAccessGet(project: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectAccessGet(project, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Retrieves all changes in a project\n     * @param {string} project Project short label\n     * @param {number} [startAt] (optional) Pagination -  starts the audit after N records\n     * @param {number} [maxResults] (optional) Pagination -  Retrieve N results per page\n     * @param {string} [deleteOnly] (optional) if set to yes, only returns actions of type delete\n     * @param {string} [tech] (optional) if set to yes, returns the underneath changes\n     * @param {number} [auditIdMin] (optional) sets a minimum ID for audits, as returned by GET calendar\n     * @param {number} [auditIdMax] (optional) sets a maximum ID for audits\n     * @param {number} [noReport] (optional) set to 1 to avoid having reports\n     * @param {number} [noImport] (optional) set to 1 to avoid having imports\n     * @param {string} [include] (optional) set to a list of actions to include (delete,undelete,add,edit,...)\n     * @param {number} [resolveRef] (optional) set to 1 to resolve item IDs into refs\n     * @param {string} [itemRef] (optional) restrict the audit to only those mentionning this item\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectAuditGet(project: string, startAt?: number, maxResults?: number, deleteOnly?: string, tech?: string, auditIdMin?: number, auditIdMax?: number, noReport?: number, noImport?: number, include?: string, resolveRef?: number, itemRef?: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectAuditGet(project, startAt, maxResults, deleteOnly, tech, auditIdMin, auditIdMax, noReport, noImport, include, resolveRef, itemRef, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin. Valid from version 2.3\n     * @summary Launches a server-side branch or clone - needs the 'merge' module if actual branching\n     * @param {string} project Project short label\n     * @param {string} label Branch project label\n     * @param {string} shortLabel Branch project short label\n     * @param {number} keepPermissions 1 or 0. Defaults to 0 (with 0 the project doesn&#x27;t have any permission after branching)\n     * @param {number} keepContent 1 or 0. Defaults to 1. 0 only works without branch and without history\n     * @param {number} [branch] (optional) Set to 1 to branch (default), 0 to just copy/clone\n     * @param {number} [history] (optional) Set to 1 to branch or copy with history, defaults to 0\n     * @param {string} [tagToCreate] (optional) specify a tag (by default auto-generated)\n     * @param {string} [branchInThePastTag] (optional) specify a tag to branch in the past (needs history&#x3D;1)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectBranchPost(project: string, label: string, shortLabel: string, keepPermissions: number, keepContent: number, branch?: number, history?: number, tagToCreate?: string, branchInThePastTag?: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectBranchPost(project, label, shortLabel, keepPermissions, keepContent, branch, history, tagToCreate, branchInThePastTag, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Get all dates at which a project has been modified\n     * @param {string} project Project short label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectCalendarGet(project: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectCalendarGet(project, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin. Valid from version 2.1\n     * @summary Removes (inactivate) a category. Will fail on REPORT and FOLDER categories\n     * @param {string} project Project short label\n     * @param {string} category Category short label\n     * @param {string} reason The reason why the user is doing this\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectCatCategoryDelete(project: string, category: string, reason: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectCatCategoryDelete(project, category, reason, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Get details of a category\n     * @param {string} project Project short label\n     * @param {string} category Category short label\n     * @param {string} [filter] (optional) specify a filter\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectCatCategoryGet(project: string, category: string, filter?: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectCatCategoryGet(project, category, filter, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin. Valid from version 2.1\n     * @summary Modifies a categorie's labels, and fix the project's settings to reflect that change, OR modifies a category's order.\n     * @param {string} project Project short label\n     * @param {string} category Category short label\n     * @param {number} order The new order (for reordering)\n     * @param {string} shortLabel The new short label for that category (for renaming)\n     * @param {string} label The new long label for that category (for renaming)\n     * @param {string} reason The reason why the user is doing this\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectCatCategoryPut(project: string, category: string, order: number, shortLabel: string, label: string, reason: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectCatCategoryPut(project, category, order, shortLabel, label, reason, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Get all settings of a category\n     * @param {string} project Project short label\n     * @param {string} category Category short label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectCatCategorySettingGet(project: string, category: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectCatCategorySettingGet(project, category, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin. Valid from version 2.1\n     * @summary Adds or changes a category setting. If the value is empty, the setting will be deleted\n     * @param {string} project Project short label\n     * @param {string} category Category short label\n     * @param {string} key setting key\n     * @param {string} value value\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectCatCategorySettingPost(project: string, category: string, key: string, value: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectCatCategorySettingPost(project, category, key, value, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Get all categories of a project\n     * @param {string} project Project short label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectCatGet(project: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectCatGet(project, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin. Valid from version 2.1\n     * @summary Adds a fields in a category\n     * @param {string} project Project short label\n     * @param {string} label Field label\n     * @param {string} category Category short label\n     * @param {string} fieldType Type of field\n     * @param {string} fieldParam Parameter for the field\n     * @param {string} reason The reason why the user is doing this\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectCatPost(project: string, label: string, category: string, fieldType: string, fieldParam: string, reason: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectCatPost(project, label, category, fieldType, fieldParam, reason, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin. Valid from version 2.1\n     * @summary Clones a project\n     * @param {string} project Project short label\n     * @param {string} label Project label\n     * @param {string} shortLabel Project short label\n     * @param {number} keepHistory 1 or 0. Defaults to 0\n     * @param {number} keepContent 1 or 0. Defaults to 0 (only the REPORT part is kept, make sense only if keepHistory is 0)\n     * @param {number} keepPermissions 1 or 0. Defaults to 0 (with 0 the project doesn&#x27;t have any permission after cloning)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectClonePost(project: string, label: string, shortLabel: string, keepHistory: number, keepContent: number, keepPermissions: number, options?: any) {\n        return DefaultApiFp(this.configuration).projectClonePost(project, label, shortLabel, keepHistory, keepContent, keepPermissions, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Asks for the difference between 2 signed documents, as a Word document. The job ID is returned as answer\n     * @param {string} project Project short label\n     * @param {string} signitem1 SIGN-xx for the first SIGN document to compare\n     * @param {string} signitem2 SIGN-xx for the 2nd SIGN document to compare\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectCompareSignitem1Signitem2Post(project: string, signitem1: string, signitem2: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectCompareSignitem1Signitem2Post(project, signitem1, signitem2, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Get a project's schema\n     * @param {string} [excludeCategories] (optional) comma-separated list of categories to exclude, like DOC,SIGN\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectConfigcheckGet(excludeCategories?: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectConfigcheckGet(excludeCategories, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read/write access to the project - admins can impersonate. Valid from version 2.2\n     * @summary Copy items from a folder to another one\n     * @param {string} project Project short label\n     * @param {string} itemOrFolder Item reference (XXX-nn) or folder (F-XXX-nn)\n     * @param {string} targetFolder Reference of the target folder (F-categ-serial)\n     * @param {string} reason The reason why the user is doing this\n     * @param {string} [targetProject] (optional) project to copy into (by default, same project)\n     * @param {number} [copyLabels] (optional) 0 or 1. Defaults to 0\n     * @param {string} [map] (optional) mapN&#x3D;M -  map field N in source to field M in target\n     * @param {string} [ignoreLabels] (optional) can contain a comma-delimited list of labels NOT to copy\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectCopyItemOrFolderPost(project: string, itemOrFolder: string, targetFolder: string, reason: string, targetProject?: string, copyLabels?: number, map?: string, ignoreLabels?: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectCopyItemOrFolderPost(project, itemOrFolder, targetFolder, reason, targetProject, copyLabels, map, ignoreLabels, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Get cross project links\n     * @param {string} project Project short label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectCrossprojectlinkGet(project: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectCrossprojectlinkGet(project, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Reserved to Matrix Requirements operations. Valid from version 2.1\n     * @summary Removes completely a project (only used for unit testing). This is an actual DELETE in the database.\n     * @param {string} project Project short label\n     * @param {string} confirm Needs to be yes for the method to be executed\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectDelete(project: string, confirm: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectDelete(project, confirm, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Converts an excel file (xls, xlsx) into a XML version that we send straight back as an XML payload.\n     * @param {string} project Project short label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectExcelxmlPost(project: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectExcelxmlPost(project, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read/write access to the project. Valid from version 2.1\n     * @summary Executes UC or TC into XTC items\n     * @param {string} project Project short label\n     * @param {ExecuteParam} [body] There must be a JSON as a payload. It includes all parameters AND the reason\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectExecutePost(project: string, body?: ExecuteParam, options?: any) {\n        return DefaultApiFp(this.configuration).projectExecutePost(project, body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Asks for an export of some items. The job ID is returned as answer\n     * @param {string} project Project short label\n     * @param {string} itemList Mandatory list of items to export.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectExportGet(project: string, itemList: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectExportGet(project, itemList, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin. Valid from version 2.1\n     * @summary Removes (inactivate) a field.\n     * @param {string} project Project short label\n     * @param {string} category Category short label\n     * @param {number} field The field number (like field&#x3D;502)\n     * @param {string} reason The reason why the user is doing this\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectFieldCategoryDelete(project: string, category: string, field: number, reason: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectFieldCategoryDelete(project, category, field, reason, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Get 1 field of an item. {item} has the form CATEG-number.\n     * @param {string} project Project short label\n     * @param {string} item Item reference (XXX-nn)\n     * @param {string} field Mandatory. Field number (faster) OR field label\n     * @param {string} [format] Optional. Format for the return. Can be text, json, html, xml or xslt. Defaults to html\n     * @param {number} [download] Optional. 1 to have in download, 0 as direct result. Defaults to 0.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectFieldItemGet(project: string, item: string, field: string, format?: string, download?: number, options?: any) {\n        return DefaultApiFp(this.configuration).projectFieldItemGet(project, item, field, format, download, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin. Valid from version 2.1\n     * @summary Modifies a field's label and parameter OR modifies a field's order.\n     * @param {string} project Project short label\n     * @param {number} field The field number (like field&#x3D;502)\n     * @param {string} label The new label (for renaming)\n     * @param {string} fieldParam The new parameter (for renaming)\n     * @param {number} order The new order (for reordering)\n     * @param {string} reason The reason why the user is doing this\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectFieldPut(project: string, field: number, label: string, fieldParam: string, order: number, reason: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectFieldPut(project, field, label, fieldParam, order, reason, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have the right key to download the file. Valid from version 2.1\n     * @summary Retrieve one project file. The fileno is a simple fileId. This request returns the actual file\n     * @param {string} project Project short label\n     * @param {number} fileno file number\n     * @param {string} key The key of the file\n     * @param {string} [disposition] (optional, from version 2.3) set to disposition&#x3D;inline to ask the server to send the disposition to &#x27;inline&#x27; instead of &#x27;attachment&#x27;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectFileFilenoGet(project: string, fileno: number, key: string, disposition?: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectFileFilenoGet(project, fileno, key, disposition, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have a valid authentication. Valid from version 2.1\n     * @summary Retrieve list of all files owned by a project\n     * @param {string} project Project short label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectFileGet(project: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectFileGet(project, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read/write access to the project. Valid from version 2.1\n     * @summary Creates a new file - the file should be uploaded as payload (or through the url argument as an alternative). It's mime type should be sent through the HTTP protocol.\n     * @param {string} project Project short label\n     * @param {string} [url] Optional argument -  the file could also come from an external URL. In this case there will be an error if we can&#x27;t retrieve it on the server\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectFilePost(project: string, url?: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectFilePost(project, url, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read/write access to the project - admins can impersonate. Valid from version 2.1\n     * @summary Creates a new folder\n     * @param {string} project Project short label\n     * @param {string} parent Reference of the parent folder in the form F-CATEG-serial (example -  F-SPEC-17)\n     * @param {string} label folder label\n     * @param {string} reason The reason why the user is doing this\n     * @param {string} [fxField] (optional) Add one of each of these to set folder&#x27;s fields. fx is followed by the field ID (a number)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectFolderPost(project: string, parent: string, label: string, reason: string, fxField?: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectFolderPost(project, parent, label, reason, fxField, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Get list of project info -  users, settings, categories\n     * @param {string} project Project short label\n     * @param {number} [adminUI] (optional) set to adminUI&#x3D;1 to have this project data even if you are not assigned to, as an admin\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectGet(project: string, adminUI?: number, options?: any) {\n        return DefaultApiFp(this.configuration).projectGet(project, adminUI, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin. Valid from version 2.2\n     * @summary Hides a project\n     * @param {string} project Project short label\n     * @param {string} reason The reason why the user is doing this\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectHidePut(project: string, reason: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectHidePut(project, reason, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read/write access to the project. Valid from version 2.2\n     * @summary Launches a server-side hook\n     * @param {string} project Project short label\n     * @param {string} item Item reference (XXX-nn)\n     * @param {string} hook name of the hook\n     * @param {string} [body] Payload for the hook, treated as a string.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectHookItemPost(project: string, item: string, hook: string, body?: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectHookItemPost(project, item, hook, body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.3\n     * @summary Cleans up an input html blob according to the current html cleanup rules. The blob is passed in the POST payload. The payload must be a json object with {\\\"htmlToClean\\\" - \\\"x\\\"}\n     * @param {string} project Project short label\n     * @param {GetHmlBlobInput} [body] Payload\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectHtmlCleanupBlobPost(project: string, body?: GetHmlBlobInput, options?: any) {\n        return DefaultApiFp(this.configuration).projectHtmlCleanupBlobPost(project, body, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.3\n     * @summary Get the list of items that would be changed if we applied html cleanup. You can pass a cleanup setting in the payload of the POST. If it's not there we take the customer (global) setting and force the cleanup to true\n     * @param {string} project Project short label\n     * @param {CleanupSetting} [body] Cleanup setting (optional)\n     * @param {string} [categories] (optional) list of comma-delimited categories to go through, all by default\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectHtmlCleanupTestPost(project: string, body?: CleanupSetting, categories?: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectHtmlCleanupTestPost(project, body, categories, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - ?. Valid from version 2.1\n     * @summary Removes an import\n     * @param {string} project Project short label\n     * @param {string} id id\n     * @param {string} reason The reason why the user is doing this\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectImportIdDelete(project: string, id: string, reason: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectImportIdDelete(project, id, reason, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read/write access to the project. Valid from version 2.1\n     * @summary Imports some items into a project\n     * @param {string} project Project short label\n     * @param {string} reason The reason why the user is doing this\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectImportPost(project: string, reason: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectImportPost(project, reason, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.4\n     * @summary Get the history of a import in a project\n     * @param {string} project Project short label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectImportinfoGet(project: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectImportinfoGet(project, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Get details of a folder. {folder} has the form F-CATEG-number[-vN].\n     * @param {string} project Project short label\n     * @param {string} folder Folder reference (F-XXX-nn)\n     * @param {number} [history] (optional) set history&#x3D;1 to retrieve list of all versions\n     * @param {string} [filter] (optional) specify a filter\n     * @param {string} [children] (optional) set to yes if you need the children as well (recursively).\n     * @param {string} [atDate] (optional) retrieves the item at that date - format is ISO8601 like atDate&#x3D;2018-05-30T14 - 48 - 27.223Z. Not compatible with the version query -vN\n     * @param {number} [fields] (optional) set fields&#x3D;1 to retrieve list of all fields, even the empty ones\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectItemFolderGet(project: string, folder: string, history?: number, filter?: string, children?: string, atDate?: string, fields?: number, options?: any) {\n        return DefaultApiFp(this.configuration).projectItemFolderGet(project, folder, history, filter, children, atDate, fields, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read/write access to the project. Valid from version 2.1\n     * @summary Removes (inactivate) an item (or a folder). Item has the form (F-)CATEG-number. Will fail on non-empty folders\n     * @param {string} project Project short label\n     * @param {string} item Item reference (XXX-nn)\n     * @param {string} confirm Needs to be yes for the method to be executed IF it is a non-empty folder\n     * @param {string} reason The reason why the user is doing this\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectItemItemDelete(project: string, item: string, confirm: string, reason: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectItemItemDelete(project, item, confirm, reason, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Get details of an item. {item} has the form CATEG-number[-vN].\n     * @param {string} project Project short label\n     * @param {string} item Item reference (XXX-nn)\n     * @param {number} [history] (optional) set history&#x3D;1 to retrieve list of all versions\n     * @param {number} [fields] (optional) set fields&#x3D;1 to retrieve list of all fields, even the empty ones\n     * @param {string} [filter] (optional) specify a filter\n     * @param {string} [atDate] (optional) retrieves the item at that date - format is ISO8601 like atDate&#x3D;2018-05-30T14 - 48 - 27.223Z. Not compatible with the version query -vN\n     * @param {number} [withTree] (optional) retrieves the context tree if set to 1, in the field contextTree. Exclusive to filter and atDate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectItemItemGet(project: string, item: string, history?: number, fields?: number, filter?: string, atDate?: string, withTree?: number, options?: any) {\n        return DefaultApiFp(this.configuration).projectItemItemGet(project, item, history, fields, filter, atDate, withTree, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read/write access to the project. Valid from version 2.1\n     * @summary Restores an item. Item has the form CATEG-number\n     * @param {string} project Project short label\n     * @param {string} item Item reference (XXX-nn)\n     * @param {string} reason The reason why the user is doing this\n     * @param {number} [at] (optional) If set, specifies that the item should be restored as it was in that version\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectItemItemPost(project: string, item: string, reason: string, at?: number, options?: any) {\n        return DefaultApiFp(this.configuration).projectItemItemPost(project, item, reason, at, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read/write access to the project. Valid from version 2.1\n     * @summary Modifies an item or a folder. Item has the form CATEG-number, folders -  F-CATEG-number\n     * @param {ItemItemBody} body \n     * @param {string} project Project short label\n     * @param {string} item Item reference (XXX-nn)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectItemItemPut(body: ItemItemBody, project: string, item: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectItemItemPut(body, project, item, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read/write access to the project - admins can impersonate. Valid from version 2.1\n     * @summary Adds an item in a folder\n     * @param {ProjectItemBody} body \n     * @param {string} project Project short label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectItemPost(body: ProjectItemBody, project: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectItemPost(body, project, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - ?. Valid from version 2.1\n     * @summary Removes (inactivate) a link between 2 items. Items are in the form CATEG-number\n     * @param {string} project Project short label\n     * @param {string} upitem Item reference (XXX-nn) for the UP item\n     * @param {string} downitem Item reference (XXX-nn) for the DOWN item\n     * @param {string} reason The reason why the user is doing this\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectItemlinkUpitemDownitemDelete(project: string, upitem: string, downitem: string, reason: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectItemlinkUpitemDownitemDelete(project, upitem, downitem, reason, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read/write access to the project. Valid from version 2.1\n     * @summary Adds a link between 2 items. Both items are in the form CATEG-number\n     * @param {string} project Project short label\n     * @param {string} upitem Item reference (XXX-nn) for the UP item\n     * @param {string} downitem Item reference (XXX-nn) for the DOWN item\n     * @param {string} reason The reason why the user is doing this\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectItemlinkUpitemDownitemPost(project: string, upitem: string, downitem: string, reason: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectItemlinkUpitemDownitemPost(project, upitem, downitem, reason, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Get the list of items that are detailed in a DOC/SIGN item.\n     * @param {string} project Project short label\n     * @param {string} item Item reference (XXX-nn)\n     * @param {number} [detailed] Optional. When set to 1 adds a secondaryItems list in the answer. Defaults to 0.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectItemlistItemGet(project: string, item: string, detailed?: number, options?: any) {\n        return DefaultApiFp(this.configuration).projectItemlistItemGet(project, item, detailed, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have a valid authentication. Valid from version 2.1\n     * @summary Retrieve list of all jobs in a project\n     * @param {string} project Project short label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectJobGet(project: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectJobGet(project, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin. Valid from version 2.3\n     * @summary Aborts a job.\n     * @param {string} project Project short label\n     * @param {number} job job number\n     * @param {string} reason The reason why the user is doing this\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectJobJobDelete(project: string, job: number, reason: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectJobJobDelete(project, job, reason, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Get a job file. The job part is the jobID (a number) and the file is the fileID (a number)\n     * @param {string} project Project short label\n     * @param {number} job job number\n     * @param {number} fileno file number\n     * @param {string} [mode] (optional) set to mode&#x3D;direct to get the output in the response output instead of as a download file. This assumes the file is HTML\n     * @param {string} [format] (optional) set to format&#x3D;json to get a json output instead of XML\n     * @param {string} [disposition] (optional, from version 2.3) set to disposition&#x3D;inline to ask the server to send the disposition to &#x27;inline&#x27; instead of &#x27;attachment&#x27;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectJobJobFilenoGet(project: string, job: number, fileno: number, mode?: string, format?: string, disposition?: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectJobJobFilenoGet(project, job, fileno, mode, format, disposition, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Get a job status, including generated files. The variable part is the jobID (a number)\n     * @param {string} project Project short label\n     * @param {number} job job number\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectJobJobGet(project: string, job: number, options?: any) {\n        return DefaultApiFp(this.configuration).projectJobJobGet(project, job, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read/write access to the project. Valid from version 2.2\n     * @summary Sets the progress of a job\n     * @param {string} project Project short label\n     * @param {number} job job number\n     * @param {number} progress progress (0 to 100, 200 for error)\n     * @param {string} [status] (optional( status text\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectJobJobPost(project: string, job: number, progress: number, status?: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectJobJobPost(project, job, progress, status, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.3\n     * @summary Get the label history of a project -  list of all label changes for all items\n     * @param {string} project Project short label\n     * @param {string} [itemRef] (optional) ask for just one item (the return structure is still an array in that case)\n     * @param {string} [from] (optional) date from\n     * @param {string} [to] (optional) date to - works only if you only specified a from\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectLabelhistoryGet(project: string, itemRef?: string, from?: string, to?: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectLabelhistoryGet(project, itemRef, from, to, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.3\n     * @summary Get the merge history of a project - needs the 'merge' module\n     * @param {string} project Project short label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectMergehistoryGet(project: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectMergehistoryGet(project, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.3\n     * @summary Get the merge information - needs the 'merge' module\n     * @param {string} project Project short label\n     * @param {string} [excludeCategories] (optional) comma-delimited list of categories to exclude\n     * @param {string} [fromDate] (optional) date from which we consider the merges. ISO8601 format -- this parameter was introduced in v 2.3.4\n     * @param {number} [push] (optional) set to 1 if you inquire about a push, not a merge -- this parameter was introduced in v 2.3.4\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectMergeinfoGet(project: string, excludeCategories?: string, fromDate?: string, push?: number, options?: any) {\n        return DefaultApiFp(this.configuration).projectMergeinfoGet(project, excludeCategories, fromDate, push, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read/write access to the project. Valid from version 2.1\n     * @summary Imports some folders from a project to another as a module. Only available is you have the resync module licensed and the unique_serial setting\n     * @param {string} project Project short label\n     * @param {string} mode Import mode -  can be include or copy\n     * @param {string} sourceProject Source project\n     * @param {string} sourceSelection A selection of folders and items to import\n     * @param {string} reason The reason why the user is doing this\n     * @param {string} [update] Update mode -  can be simple, update or rebase. If not defined, simple assumed\n     * @param {string} [oldSourceProject] Old source project (if update&#x3D;rebase\n     * @param {string} [lockLabel] An optional label that this operation will set on all items\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectModuleimportPost(project: string, mode: string, sourceProject: string, sourceSelection: string, reason: string, update?: string, oldSourceProject?: string, lockLabel?: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectModuleimportPost(project, mode, sourceProject, sourceSelection, reason, update, oldSourceProject, lockLabel, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read/write access to the project. Valid from version 2.1\n     * @summary Move items into this folder\n     * @param {string} project Project short label\n     * @param {string} folder Folder reference (F-XXX-nn)\n     * @param {string} reason The reason why the user is doing this\n     * @param {string} [items] List of items to move in\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectMoveinFolderPost(project: string, folder: string, reason: string, items?: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectMoveinFolderPost(project, folder, reason, items, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Find items based on a search string in one project\n     * @param {string} project Project short label\n     * @param {string} search search term\n     * @param {string} id search id. Used by MatrixJira js to match queries with answers. Is returned in the output structure\n     * @param {string} [filter] (optional) applies a filter, can be negative\n     * @param {string} [fieldsOut] (optional) comma-delimited list of fields to return -  101,102 - or * for all\n     * @param {number} [labels] (optional) set to 1 to return labels in the output\n     * @param {number} [treeOrder] (optional) set to 1 to return items in tree order (otherwise it&#x27;s project,category,serial)\n     * @param {string} [links] (optional) set to up,down to return up and down items, or only up or only down\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectNeedleGet(project: string, search: string, id: string, filter?: string, fieldsOut?: string, labels?: number, treeOrder?: number, links?: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectNeedleGet(project, search, id, filter, fieldsOut, labels, treeOrder, links, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Find item ids based on a search string in one project\n     * @param {string} project Project short label\n     * @param {string} search search term\n     * @param {string} [filter] (optional) applies a filter, can be negative\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectNeedleminimalGet(project: string, search: string, filter?: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectNeedleminimalGet(project, search, filter, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin. Valid from version 2.1\n     * @summary Adds a category to a project\n     * @param {string} project Project short label\n     * @param {string} label Category label\n     * @param {string} shortLabel Category short label\n     * @param {string} reason The reason why the user is doing this\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectPost(project: string, label: string, shortLabel: string, reason: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectPost(project, label, shortLabel, reason, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Publishes an item. Item has the form PUB-nnn\n     * @param {string} project Project short label\n     * @param {string} item Item reference (XXX-nn)\n     * @param {string} reason reason for the publication\n     * @param {string} [trainingFor] (optional) list of items for which we need to add training. If list is not there, all trainings will be generated\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectPublishItemPost(project: string, item: string, reason: string, trainingFor?: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectPublishItemPost(project, item, reason, trainingFor, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have QMS viewer access (or higher) to the project. Valid from version 2.3\n     * @summary Find a string in the QMS published items\n     * @param {string} project Project short label\n     * @param {string} [search] (optional) search term. Return an empty array on PUB &lt; 2.3.1 and et the list of all pub if not specified.\n     * @param {string} [pubItem] (optional) PUB-x item if you want to search in another than the last one for that project\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectQmsfindGet(project: string, search?: string, pubItem?: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectQmsfindGet(project, search, pubItem, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) for the reports, read/write for the signed reports. Valid from version 2.1\n     * @summary Asks for a new report. The job ID is returned as answer. {report} can be REPORT-n, DOC-n, SIGN-n or a report name.To follow the progress of the job, the GET /{project}/job/{jobid} can be called\n     * @param {string} project Project short label\n     * @param {string} report name of the report\n     * @param {string} isSignedReport If set to true, means the report needs to generate a signed record\n     * @param {string} includeSignatures List of comma separated users who need to sign\n     * @param {string} newTitle New title for the SIGN- item that is generated (only valid for isSignedReport)\n     * @param {string} copyFields List of from-to fields (123,456),(124,457) that we can use to generate the fields in the SIGN record (only valid for isSignedReport)\n     * @param {string} [itemList] (optional) list of items to use in the report. By default all categories are used\n     * @param {string} [url] (optional) url to generate in the filter\n     * @param {string} [resturl] (optional) REST url to generate in the filter\n     * @param {string} [format] (optional) format -  html (default), pdf, docx, odt, xml, zipdocx, zippdf or package (from 2.2), or mf (since 2.3)\n     * @param {string} [filter] (optional) specify a comma-delimited filter list. Can be negative filters (with minus before)\n     * @param {number} [useOld] (optional) ask to use the old report engine (pre 1.11) if set to 1.\n     * @param {string} [atDate] (optional) generates the report at that date - format is ISO8601 like atDate&#x3D;2018-05-30T14 - 48 - 27.223Z\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectReportReportPost(project: string, report: string, isSignedReport: string, includeSignatures: string, newTitle: string, copyFields: string, itemList?: string, url?: string, resturl?: string, format?: string, filter?: string, useOld?: number, atDate?: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectReportReportPost(project, report, isSignedReport, includeSignatures, newTitle, copyFields, itemList, url, resturl, format, filter, useOld, atDate, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Get a project's schema\n     * @param {string} project Project short label\n     * @param {number} [simple] (optional) set to simple&#x3D;1 to have a simpler output (no fields, round shape)\n     * @param {string} [excludeCategories] (optional) comma-separated list of categories to exclude, like DOC,SIGN\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectSchemaGet(project: string, simple?: number, excludeCategories?: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectSchemaGet(project, simple, excludeCategories, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have a valid authentication. Valid from version 2.1\n     * @summary Get all settings of a project\n     * @param {string} project Project short label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectSettingGet(project: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectSettingGet(project, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read/write access to the project. Valid from version 2.1\n     * @summary Adds or changes a project setting. If the value is empty, the setting will be deleted.\n     * @param {string} project Project short label\n     * @param {string} key setting key\n     * @param {string} value value\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectSettingPost(project: string, key: string, value: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectSettingPost(project, key, value, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Signs an item. Item has the form SIGN-nnn\n     * @param {string} project Project short label\n     * @param {string} item Item reference (XXX-nn)\n     * @param {string} password signature password - the user who is signing is the one who is logged in\n     * @param {string} [acceptComments] (optional) adds an acceptance comment\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectSignItemPost(project: string, item: string, password: string, acceptComments?: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectSignItemPost(project, item, password, acceptComments, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Edit the signature parts\n     * @param {string} project Project short label\n     * @param {string} item Item reference (XXX-nn)\n     * @param {string} rejectSign The reason why the user is rejecting the signature\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectSignItemPut(project: string, item: string, rejectSign: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectSignItemPut(project, item, rejectSign, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Asks for a new report. The job ID is returned as answer\n     * @param {string} project Project short label\n     * @param {string} [url] (optional) url to generate in the filter\n     * @param {string} [resturl] (optional) REST url to generate in the filter\n     * @param {string} [format] (optional) format -  html (default), pdf, docx, odt, xml, zipdocx or zippdf\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectSignedreportSIGNNPost(project: string, url?: string, resturl?: string, format?: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectSignedreportSIGNNPost(project, url, resturl, format, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have a valid authentication. Valid from version 2.1\n     * @summary Get all tags of a project. Works on any project if user is admin\n     * @param {string} project Project short label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectTagGet(project: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectTagGet(project, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read/write access to the project. Valid from version 2.1\n     * @summary Adds a tag to a project\n     * @param {string} project Project short label\n     * @param {string} label Tag label. Must be unique within a project\n     * @param {number} auditId Id of the audit this tag is based on\n     * @param {string} type Type of tag (default -  tag)\n     * @param {string} comments Free optional comment\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectTagPost(project: string, label: string, auditId: number, type: string, comments: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectTagPost(project, label, auditId, type, comments, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.2\n     * @summary Get all todos for the current user, for oneproject\n     * @param {string} project Project short label\n     * @param {string} [itemRef] (optional) set to an item to have all todos linked to an item, regardless of the user\n     * @param {number} [includeDone] (optional) set to 1 to include done todos and todo&#x27;s created by the user\n     * @param {number} [includeAllUsers] (optional) set to 1 to include all todos for all users\n     * @param {number} [includeFuture] (optional) set to 1 to include future todos as well (defaults to 0)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectTodoGet(project: string, itemRef?: string, includeDone?: number, includeAllUsers?: number, includeFuture?: number, options?: any) {\n        return DefaultApiFp(this.configuration).projectTodoGet(project, itemRef, includeDone, includeAllUsers, includeFuture, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.2\n     * @summary Creates a todo on an item (note that you only need read access for this POST method) for you or others\n     * @param {string} project Project short label\n     * @param {string} item Item reference (XXX-nn)\n     * @param {string} text The todo reason\n     * @param {number} [fieldId] (optional) If set, specifies that the todo is related to that field (review, ...)\n     * @param {string} [logins] (optional) If set, a list of user logins or groups to which these todo apply\n     * @param {string} [todoType] (optional) The todo type -  &#x27;user&#x27; by default\n     * @param {string} [atDate] (optional) a date in the future for reminders\n     * @param {number} [auto] (optional) set to 1 to create an auto-notification (0 by default)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectTodoItemPost(project: string, item: string, text: string, fieldId?: number, logins?: string, todoType?: string, atDate?: string, auto?: number, options?: any) {\n        return DefaultApiFp(this.configuration).projectTodoItemPost(project, item, text, fieldId, logins, todoType, atDate, auto, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have a valid authentication. Valid from version 2.2\n     * @summary Removes (mark as done) a todo.\n     * @param {string} project Project short label\n     * @param {string} todoid todoid\n     * @param {string} hardDelete Set to yes to actually remove the record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectTodoTodoidDelete(project: string, todoid: string, hardDelete: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectTodoTodoidDelete(project, todoid, hardDelete, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read/write access to the project. Valid from version 2.1\n     * @summary Touches (set to same date) an item or folder\n     * @param {string} project Project short label\n     * @param {string} item Item reference (XXX-nn)\n     * @param {string} reason The reason why the user is doing this\n     * @param {number} [nbLayers] (optional) Number of layers -- 1 by default\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectTouchItemPut(project: string, item: string, reason: string, nbLayers?: number, options?: any) {\n        return DefaultApiFp(this.configuration).projectTouchItemPut(project, item, reason, nbLayers, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read access (or higher) to the project. Valid from version 2.1\n     * @summary Get full tree\n     * @param {string} project Project short label\n     * @param {string} [fancy] (optional) returns a fancy tree\n     * @param {string} [filter] (optional) applies a filter\n     * @param {string} [atDate] (optional) generates the tree at that date - format is ISO8601 like atDate&#x3D;2018-05-30T14 - 48 - 27.223Z\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectTreeGet(project: string, fancy?: string, filter?: string, atDate?: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectTreeGet(project, fancy, filter, atDate, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin. Valid from version 2.2\n     * @summary Unhides a project.\n     * @param {string} project Project short label\n     * @param {string} newShort The new project short name to use\n     * @param {string} reason The reason why the user is doing this\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectUnhidePut(project: string, newShort: string, reason: string, options?: any) {\n        return DefaultApiFp(this.configuration).projectUnhidePut(project, newShort, reason, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have read/write access to the project. Valid from version 2.1\n     * @summary Converts a word document to an HTML, with images pointing to uploaded files on the server\n     * @param {string} project Project short label\n     * @param {string} reason The reason why the user is doing this\n     * @param {number} [fileNo] If specified, means that the conversion is from an already uploaded file. Otherwise the file must be uploaded as body of this call\n     * @param {string} [targetDocumentFolder] target document folder (in this case creates a document)\n     * @param {number} [useAsField] set to 1 to have this docx used as a field. In this case the return value is the html equivalent, with some meta\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public projectWordconvertPost(project: string, reason: string, fileNo?: number, targetDocumentFolder?: string, useAsField?: number, options?: any) {\n        return DefaultApiFp(this.configuration).projectWordconvertPost(project, reason, fileNo, targetDocumentFolder, useAsField, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have a valid authentication. Valid from version 2.1\n     * @summary Get list of all projects, all settings and current user, all todos and JIRA meta create object\n     * @param {number} [adminUI] (optional) set to adminUI&#x3D;1 to have all projects even the ones you are not assigned to, as an admin\n     * @param {string} [output] (optional) comma-delimited list of requested output fields. Returns all fields if parameter is not present\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public rootGet(adminUI?: number, output?: string, options?: any) {\n        return DefaultApiFp(this.configuration).rootGet(adminUI, output, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin. Valid from version 2.1\n     * @summary Creates a new project. Either the full project is sent as XML payload, or the label and shortLabel are given. If uploading data for a whole project, label and shortLabel are optional but overwrite the XML content if present. Branching can be done with an audit report as payload, and branch* must be defined in that case\n     * @param {string} label Project label\n     * @param {string} shortLabel Project short label\n     * @param {string} [overwrite] Must be set to yes if you&#x27;re overwriting an existing project\n     * @param {string} [importUsers] Must be set to yes if you want to import users. false by default\n     * @param {string} [branchLabel] Must be set to branch (optional)\n     * @param {string} [branchTag] Must be set to branch, and match a tag in the audit export (optional)\n     * @param {string} [branchComment] Comment for the branch (optional)\n     * @param {string} [branchBaseProjectLabel] Label of the base Project (optional)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public rootPost(label: string, shortLabel: string, overwrite?: string, importUsers?: string, branchLabel?: string, branchTag?: string, branchComment?: string, branchBaseProjectLabel?: string, options?: any) {\n        return DefaultApiFp(this.configuration).rootPost(label, shortLabel, overwrite, importUsers, branchLabel, branchTag, branchComment, branchBaseProjectLabel, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin or the user. Valid from version 2.1\n     * @summary Retrieves the user list\n     * @param {string} details (optional) -  if set to 1 returns all details\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public userGet(details: string, options?: any) {\n        return DefaultApiFp(this.configuration).userGet(details, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin. Valid from version 2.1\n     * @summary Creates a new user. Arguments are either a set of arguments or json\n     * @param {string} login User login name\n     * @param {string} email User email\n     * @param {string} password User password in clear\n     * @param {string} json A json struct with login, email, password, first, last, signatureImage(int), signaturePassword, admin(int)\n     * @param {string} [first] User first name (optional)\n     * @param {string} [last] User last name (optional)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public userPost(login: string, email: string, password: string, json: string, first?: string, last?: string, options?: any) {\n        return DefaultApiFp(this.configuration).userPost(login, email, password, json, first, last, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be that user - Matrix operations can impersonate. Valid from version 2.1\n     * @summary Retrieves all actions of a user\n     * @param {string} user user login name\n     * @param {number} [startAt] (optional) Pagination -  starts the audit after N records\n     * @param {number} [maxResults] (optional) Pagination -  Retrieve N results per page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public userUserAuditGet(user: string, startAt?: number, maxResults?: number, options?: any) {\n        return DefaultApiFp(this.configuration).userUserAuditGet(user, startAt, maxResults, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be that user - Matrix operations can impersonate. Valid from version 2.1\n     * @summary Check a user's password\n     * @param {string} user user login name\n     * @param {string} password Asks for a check of the password1\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public userUserCheckGet(user: string, password: string, options?: any) {\n        return DefaultApiFp(this.configuration).userUserCheckGet(user, password, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be that user - Matrix operations can impersonate. Valid from version 2.1\n     * @summary Check a user's password\n     * @param {string} user user login name\n     * @param {string} password Asks for a check of the password1\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public userUserCheckPost(user: string, password: string, options?: any) {\n        return DefaultApiFp(this.configuration).userUserCheckPost(user, password, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Reserved to Matrix Requirements operations. Valid from version 2.1\n     * @summary Removes completely a user (only used for unit testing)\n     * @param {string} user user login name\n     * @param {string} confirm Needs to be yes for the method to be executed\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public userUserDelete(user: string, confirm: string, options?: any) {\n        return DefaultApiFp(this.configuration).userUserDelete(user, confirm, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be that user - Matrix operations can impersonate. Valid from version 2.1\n     * @summary Retrieves full details of a user\n     * @param {string} user user login name\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public userUserGet(user: string, options?: any) {\n        return DefaultApiFp(this.configuration).userUserGet(user, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - No permissions needed. Valid from version 2.1\n     * @summary Login\n     * @param {string} user user login name\n     * @param {string} password password in clear\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public userUserLoginPost(user: string, password: string, options?: any) {\n        return DefaultApiFp(this.configuration).userUserLoginPost(user, password, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must have a valid authentication. Valid from version 2.1\n     * @summary Logout\n     * @param {string} user user login name\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public userUserLogoutPost(user: string, options?: any) {\n        return DefaultApiFp(this.configuration).userUserLogoutPost(user, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin or the user. Valid from version 2.1\n     * @summary Sets a new password for an account that has a password_reset token in place (the {user} in the URL doesn't matter)\n     * @param {string} user user login name\n     * @param {string} token password_reset token\n     * @param {string} password New password to use from now on\n     * @param {string} [signaturePassword] (optional) New password to use from now on for signatures\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public userUserPasswordResetPost(user: string, token: string, password: string, signaturePassword?: string, options?: any) {\n        return DefaultApiFp(this.configuration).userUserPasswordResetPost(user, token, password, signaturePassword, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin. Valid from version 2.1\n     * @summary Adds a user to a project\n     * @param {string} user user login name\n     * @param {string} project Project short label\n     * @param {number} permission 0 for no access, 1 for readonly, 2 for read/write (default), 3 for admin, 4 for visitor\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public userUserProjectPost(user: string, project: string, permission: number, options?: any) {\n        return DefaultApiFp(this.configuration).userUserProjectPost(user, project, permission, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin. Valid from version 2.1\n     * @summary Edits the user permissions in a project. If permission is 0, it means the user has no longer access (but we retain its records for audit purposes)\n     * @param {string} user user login name\n     * @param {string} project Project short label\n     * @param {number} permission 0 for no access, 1 for readonly, 2 for read/write (default), 3 for admin\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public userUserProjectPut(user: string, project: string, permission: number, options?: any) {\n        return DefaultApiFp(this.configuration).userUserProjectPut(user, project, permission, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be that user - Matrix operations can impersonate. Valid from version 2.1\n     * @summary Retrieves all projects a user has access to\n     * @param {string} user user login name\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public userUserProjectsGet(user: string, options?: any) {\n        return DefaultApiFp(this.configuration).userUserProjectsGet(user, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin or the user. Valid from version 2.1\n     * @summary Edits the user details. Arguments are all separated or a single json argument. Regular users can only change their signature and passwords.\n     * @param {string} user user login name\n     * @param {string} email User new email\n     * @param {string} password User new password in clear\n     * @param {string} json A json struct with login, email, password, first, last, signatureImage(int), signaturePassword, admin(int)\n     * @param {string} [first] User first name (optional)\n     * @param {string} [last] User last name (optional)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public userUserPut(user: string, email: string, password: string, json: string, first?: string, last?: string, options?: any) {\n        return DefaultApiFp(this.configuration).userUserPut(user, email, password, json, first, last, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin. Valid from version 2.2\n     * @summary Renames a user login\n     * @param {string} user user login name\n     * @param {string} newLogin The new login name. Cannot be one of the existing\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public userUserRenamePut(user: string, newLogin: string, options?: any) {\n        return DefaultApiFp(this.configuration).userUserRenamePut(user, newLogin, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin or the user. Valid from version 2.1\n     * @summary Adds or deletes a user setting.\n     * @param {string} user user login name\n     * @param {string} key Name of the setting\n     * @param {string} value Value of the setting. If empty, deletes the setting.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public userUserSettingPost(user: string, key: string, value: string, options?: any) {\n        return DefaultApiFp(this.configuration).userUserSettingPost(user, key, value, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin. Valid from version 2.1\n     * @summary Sets the new status of the user. Can be normal,blocked or deleted\n     * @param {string} user user login name\n     * @param {string} status Can be normal,blocked or deleted\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public userUserStatusPut(user: string, status: string, options?: any) {\n        return DefaultApiFp(this.configuration).userUserStatusPut(user, status, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin or the user. Valid from version 2.1\n     * @summary Removes a user token\n     * @param {string} user user login name\n     * @param {string} value The token to be removed\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public userUserTokenDelete(user: string, value: string, options?: any) {\n        return DefaultApiFp(this.configuration).userUserTokenDelete(user, value, options)(this.fetch, this.basePath);\n    }\n\n    /**\n     * Permissions - Must be admin or the user. Valid from version 2.1\n     * @summary Adds a token for a user\n     * @param {string} user user login name\n     * @param {string} purpose Purpose of the token. Not checked. Should contain either \\&quot;password_reset\\&quot; or \\&quot;oauth\\&quot;\n     * @param {string} [value] Value of the token - by default generated by this call\n     * @param {string} [reason] Free text explain where the token will be used (URL or others). Should be set for oauth, not needed for others\n     * @param {number} [validity] Validity of the token in hours - if not set, doesn&#x27;t expire\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public userUserTokenPost(user: string, purpose: string, value?: string, reason?: string, validity?: number, options?: any) {\n        return DefaultApiFp(this.configuration).userUserTokenPost(user, purpose, value, reason, validity, options)(this.fetch, this.basePath);\n    }\n\n}","(function () {\n  \"use strict\";\n\n  function btoa(str) {\n    var buffer;\n\n    if (str instanceof Buffer) {\n      buffer = str;\n    } else {\n      buffer = Buffer.from(str.toString(), 'binary');\n    }\n\n    return buffer.toString('base64');\n  }\n\n  module.exports = btoa;\n}());\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar punycode = require('punycode');\nvar util = require('./util');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n","/*! https://mths.be/punycode v1.3.2 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * http://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.3.2',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n","'use strict';\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n","'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (Array.isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return Object.keys(obj).map(function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (Array.isArray(obj[k])) {\n        return obj[k].map(function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n","import { ISearchResult, ISetField, ItemConfiguration } from \"../../core/common/businesslogic\";\nimport { TestManagerConfiguration } from \"../../core/common/businesslogic/TestManagerConfiguration\";\nimport { LabelManager } from \"../../core/common/matrixlib/LabelManager\";\nimport { IJSONTools, ILabelManager, ILoggerTools } from \"../../core/common/matrixlib/MatrixLibInterfaces\";\nimport { IItemGet, IItemIdParts } from \"../../core/globals\";\nimport { AddFileAck, FancyFolder, GetTodosAck } from \"../rest-api\";\nimport { ITitleAndId, IProjectNeeds } from \"../standalone-interfaces\";\nimport { Category, ItemFieldMask, ItemsFieldMask } from \"./Category\";\nimport { Item } from \"./Item\";\nimport { TreeFolder } from \"./TreeFolder\";\nimport { ITreeFolderNeeds } from \"./object-interfaces\";\n\nexport type { IProjectContext };\nexport { Project };\n\ninterface IProjectContext {\n    getItemConfig(): ItemConfiguration;\n    getJsonTools(): IJSONTools;\n    getLogger(): ILoggerTools;\n    getLabelManager(): ILabelManager;\n    getTestManagerConfig(): TestManagerConfiguration;\n};\n\nclass Project {\n    private categories: Map<string, Category>;\n\n    constructor(private server: IProjectNeeds, private name: string, private context: IProjectContext) {\n        // Create category objects.\n        this.categories = new Map<string, Category>();\n        for (let c of context.getItemConfig().getCategories(false)) {\n            this.categories.set(c, new Category(c, this));\n        }\n    }\n\n    async getProjectTree(): Promise<TreeFolder> {\n        const that = this;\n        const folders = await that.server.getFullTreeFromProject(that.name);\n        // The top level folder has to be created here synthetically.\n        const f: FancyFolder = {\n            id: undefined,\n            title: undefined,\n            children: folders\n        };\n        return new TreeFolder(that, f);\n    }\n\n    async search(term: string): Promise<string[]> {\n        return this.server.searchInProject(this.name, term);\n    }\n\n    /**\n     * Execute a more complex search, where the fields in the results can be limited. \n     * @param project \n     * @param term \n     * @param filter default empty string\n     * @param fieldList empty string to mean no fields, * to mean all, or comma-seperated list of\n     *   field ids from the various categories from which items will be returned. The default\n     *   value is *.\n     * @param includeLabels default true\n     * @param includeDownlinks default false\n     * @param includeUplinks default false\n     * @param treeOrder default false\n     */\n    async complexSearchInProject(term: string, filter: string = \"\",\n        fieldList: string = \"*\", includeLabels: boolean = true, includeDownlinks: boolean = false,\n        includeUplinks: boolean = false, treeOrder: boolean = false): Promise<ISearchResult[]> {\n        return this.server.complexSearchInProject(this.name, term, filter,\n            fieldList, includeLabels, includeDownlinks,\n            includeUplinks, treeOrder);\n    }\n\n    async complexSearch(term: string, filter: string = \"\", treeOrder: boolean = false,\n        mask?: ItemsFieldMask): Promise<Item[]> {\n        let includeLabels = true;\n        let includeDownlinks = false;\n        let includeUplinks = false;\n        let fieldList = \"*\";\n        if (mask) {\n            includeLabels = mask.getIncludeLabels();\n            includeDownlinks = mask.getIncludeDownlinks();\n            includeUplinks = mask.getIncludeUplinks();\n            fieldList = mask.getFieldMaskString();\n        }\n        const results: ISearchResult[] = await this.complexSearchInProject(term, filter,\n            fieldList, includeLabels, includeDownlinks, includeUplinks, treeOrder);\n        let items: Item[] = [];\n\n        // Turn the results into Items.\n\n        // ItemFieldMasks are unique per category. This cache allows us to avoid creating\n        // a new mask for each item, a waste of memory.\n        let maskCache: Map<string, ItemFieldMask> = new Map<string, ItemFieldMask>();\n\n        for (let oneResult of results) {\n            const catName: string = this.parseRef(oneResult.itemId).type;\n            const cat: Category = this.getCategory(catName);\n\n            let catMask: ItemFieldMask = maskCache.get(catName);\n            if (!catMask) {\n                if (mask) {\n                    if (mask.getCategoryMask(catName) != null) {\n                        catMask = mask.getCategoryMask(catName);\n                    } else {\n                        // Create a field mask that allows all or no fields, depending on\n                        // whether fields are included.\n                        catMask = mask.getIncludeFields() ? cat.createFieldMask() : cat.createFieldMask([]);\n                    }\n                } else {\n                    // If no mask was specified for the search, then we get all category fields in the\n                    // item mask.\n                    catMask = cat.createFieldMask(); \n                }\n                maskCache.set(catName, catMask);\n            }\n\n            let iitemGet: IItemGet = {\n                id: oneResult.itemId,\n                type: catName,\n                title: oneResult.title,\n                labels: includeLabels ? oneResult.labels : undefined,\n                version: oneResult.version\n            };\n            // Deal with labels.\n            if (includeLabels) {\n                iitemGet.labels = oneResult.labels;\n            }\n            // Deal with the links.\n            if (includeDownlinks) {\n                iitemGet.downLinks = [];\n                if (oneResult.downlinks) {\n                    // TODO: We don't have link titles.\n                    iitemGet.downLinks = oneResult.downlinks.map((linkId) => { return { to: linkId, title: \"\" } });\n                }\n            }\n            if (includeUplinks) {\n                iitemGet.upLinks = [];\n                if (oneResult.uplinks) {\n                    // TODO: We don't have link titles.\n                    iitemGet.upLinks = oneResult.uplinks.map((linkId) => { return { to: linkId, title: \"\" } });\n                }\n            }\n            // Deal with fields.\n            for (let fieldId of catMask.getFieldIds()) {\n                let value: string = undefined;\n                if (oneResult.fieldVal) {\n                    const values = oneResult.fieldVal.filter((r) => r.id == fieldId);\n                    if (values.length > 0) {\n                        value = values[0].value;\n                    }\n                }\n                iitemGet[fieldId] = value;\n            }\n            // creationDate is a synthetic field, but if it is available we can pass it through iitemGet\n            // into Item, which knows to look for the field.\n            if (oneResult[\"creationDate\"]) {\n                iitemGet[\"creationDate\"] = oneResult[\"creationDate\"];\n            }\n            // Finally, we have a filled-in iitemGet.\n            // TODO: the item should probably take the master mask, so it knows if labels and up/downlinks are included.\n            items.push(new Item(cat, iitemGet, catMask));\n        }\n        return items;\n    }\n\n    constructSearchFieldMask(includeFields: boolean = true, includeLabels: boolean = true,\n        includeDownlinks: boolean = false, includeUplinks: boolean = false): ItemsFieldMask {\n        return new ItemsFieldMask(includeFields, includeLabels, includeDownlinks, includeUplinks);\n    }\n\n    /**\n     * Upload a file given by the url into the project. \n     * @param url \n     * @returns an AddFileAck structure.\n     */\n    uploadFile(url: string): Promise<AddFileAck> {\n        return this.server.uploadFileToProject(this.name, url);\n    }\n\n    /**\n     * Returns information about an item from an id in a given project. \n     * @param itemId A valid item id in the project\n     * @returns The itemId decomposed into parts\n     */\n    parseRef(itemId: string): IItemIdParts {\n        return this.server.parseRefForProject(this.name, itemId);\n    }\n\n    createItem(category: string): Item {\n        if (category == \"FOLDER\") {\n            throw new Error(`Folders should be created with method createFolder`);\n        }\n        return new Item(this.getCategory(category));\n    }\n\n    /**\n     * Create a folder. Every folder must contain only items of a particular type.\n     * @param type \n     * @returns a new Folder item of the given type.\n     */\n    createFolder(type: string): Item {\n        let item: IItemGet = { isFolder: true, type: type, children: [] };\n        return new Item(this.getCategory(\"FOLDER\"), item);\n    }\n\n    async getItem(id: string): Promise<Item> {\n        const iitem = await this.server.getItemFromProject(this.name, id);\n        const category = iitem.isFolder ? this.getCategory(\"FOLDER\") : this.getCategory(iitem.type);\n        return new Item(category, iitem);\n    }\n\n    /**\n     * Save an item into a given folder. \n     * @param parentFolderId \n     * @param item \n     * @returns A fresh copy of the Item from the server\n     */\n    async putItem(parentFolderId: string, item: Item): Promise<Item> {\n        let iitem = item.extractData();\n        let newId: string;\n        if (iitem.id) {\n            // this is an update.\n            // TODO(sdk): be able to query item field mask and update only requested fields.\n            newId = await this.server.updateItemInProject(this.name, iitem, item.getMaxVersion());\n        } else {\n            // this is creation.\n            newId = await this.server.createItemInProject(this.name, parentFolderId, iitem);\n        }\n\n        // For now, go back to the server and get a fresh item.\n        return await this.getItem(newId);\n    }\n\n    /**\n     * Update an item on the server. \n     * @param item \n     * @returns A fresh copy of the Item from the server.\n     */\n    async updateItem(item: Item): Promise<Item> {\n        let iitem = item.extractData();\n        if (!iitem.id) {\n            throw new Error(`updateItem requires an item with an existing ID`);\n        }\n        // TODO(sdk): be able to query item field mask and update only requested fields.\n        await this.server.updateItemInProject(this.name, iitem, item.getMaxVersion());\n        return await this.getItem(iitem.id);\n    }\n\n    /**\n     * Delete an Item from the project. If the Item is a folder with children, then parameter\n     * {force} must be true.\n     * @param itemId A valid item\n     * @param force\n     * @throws Error if the item is a non-empty folder and force was not specified as true.\n     * @returns A promise with the string \"Ok\" on success.\n     */\n    async deleteItem(itemId: string, force?: boolean): Promise<string> {\n        return this.server.deleteItemInProject(this.name, itemId, force);\n    }\n\n    /**\n     * Move items in the project to a particular folder. \n     * @param folderId a valid folder id within the project\n     * @param itemIds an array of itemIds\n     * @returns the string \"Ok\" on success\n     */\n    async moveItems(folderId: string, itemIds: string[]): Promise<string> {\n        return this.server.moveItemsInProject(this.name, folderId, itemIds);\n    }\n\n    /**\n     * set a field of an item in the database\n     * \n     * Use: await project.setField(\"PROC-83\", \"plain english\", \"x\");  \n     * \n     * @param itemId itemId the id of the item like \"REQ-1\" \n     * @param fieldName name of the field\n     * @param value value of the field\n     * @throws Error in case of invalid itemId or fieldName\n     * @returns Promise to the updated item\n     */\n    public async setField(itemId: string, fieldName: string, value: string): Promise<IItemGet> {\n        return this.setFields(itemId, [{ fieldName: fieldName, value: value }]);\n    }\n\n    /**\n     * sets multiple fields in the database \n     * \n     * Use: await api.setFields(\"PROC-83\", [{fieldName:\"plain english\",value:\"x\"}]  )\n     * \n     * @param itemId itemId itemId the id of the item like \"REQ-1\" \n     * @param data array of fieldName and value tupels \n     * @throws Error in case of invalid id or fields\n     * @returns the updated item\n     */\n    public async setFields(itemId: string, data: ISetField[]): Promise<IItemGet> {\n        return this.server.setFieldsInProject(this.name, this.getItemConfig(), itemId, data);\n    }\n\n    /**\n     * Get the TODOs for a project. \n     * @param itemRef if specified, returns all todos linked to an item, regardless of user\n     * @param includeDone - if true, includes done todos\n     * @param includeAllUsers - if true, includes all todos for all users.\n     * @param includeFuture - false by default. If true, includes future todos.\n     * @returns Information on the todos.\n     */\n    getTodos(itemRef?: string, includeDone?: boolean, includeAllUsers?: boolean,\n        includeFuture?: boolean): Promise<GetTodosAck> {\n        return this.server.getProjectTodos(this.name, itemRef, includeDone, includeAllUsers, includeFuture);\n    }\n\n    getCategory(category: string): Category {\n        if (!this.categories.has(category)) {\n            throw new Error(`Cannot find category ${category} in project ${this.name}`);\n        }\n        return this.categories.get(category);\n    }\n\n    getName(): string { return this.name; }\n    getItemConfig(): ItemConfiguration { return this.context.getItemConfig(); }\n    getLabelManager(): ILabelManager { return this.context.getLabelManager(); }\n    getTestConfig(): TestManagerConfiguration { return this.context.getTestManagerConfig(); }\n}","import { ICategoryConfig, ItemConfiguration, XRFieldTypeAnnotated } from \"../../core/common/businesslogic/ItemConfiguration\";\nimport { TestManagerConfiguration } from \"../../core/common/businesslogic/TestManagerConfiguration\";\nimport { Project } from \"./Project\";\n\nexport { Category, ItemFieldMask, ItemsFieldMask };\n\n/**\n * An ItemFieldMask contains a list of field ids valid within a particular\n * category. It should be created via the Category method createFieldMask().\n */\nclass ItemFieldMask {\n    constructor(private fieldIds: number[]) {\n\n    }\n\n    hasFieldId(fieldId: number): boolean {\n        return this.fieldIds.filter((id) => id == fieldId).length > 0;\n    }\n\n    getFieldIds(): number[] { return this.fieldIds; }\n\n    /**\n     * Combine the other ItemFieldMask with this one. \n     * @param other an ItemFieldMask\n     */\n    union(other: ItemFieldMask): void {\n        for (let i of other.getFieldIds()) {\n            if (!this.hasFieldId(i)) {\n                this.fieldIds.push(i);\n            }\n        }\n    }\n\n    toString(): string {\n        return this.fieldIds.join(\",\");\n    }\n}\n\n/**\n * An ItemsFieldMask keeps track of fields masked by category, as well as some globally\n * masked Item fields (currently labels, uplinks and downlinks). This class is used\n * by the user of the SDK to narrow the set of fields brought down in a search query,\n * and then to allow the SDK to safely construct partial items from those results.\n */\nclass ItemsFieldMask {\n    private masks: Map<string, ItemFieldMask>;\n\n    constructor(private includeFields: boolean = true,\n        private includeLabels: boolean = true,\n        private includeDownlinks: boolean = false,\n        private includeUplinks: boolean = false) {\n        this.masks = new Map<string, ItemFieldMask>();\n    }\n\n    getIncludeFields(): boolean { return this.includeFields; }\n    getIncludeLabels(): boolean { return this.includeLabels; }\n    getIncludeDownlinks(): boolean { return this.includeDownlinks; }\n    getIncludeUplinks(): boolean { return this.includeUplinks; }\n\n    /**\n     * Add fields to the mask for the given Category. If there is already a field mask for the\n     * Category, its values will be combined with the new information via set union. \n     * @param category \n     * @param fieldIdsOrItemFieldMask either an ItemFieldMask object or an array of Category field ids\n     * @throws Error if getIncludeFields() is false.\n     * @returns this\n     */\n    addMask(category: Category, fieldIdsOrItemFieldMask: number[] | ItemFieldMask): ItemsFieldMask {\n        if (!this.includeFields) {\n            throw new Error(`This ItemsFieldMask is not configured to care about fields.`);\n        }\n        let newMask: ItemFieldMask;\n        if (fieldIdsOrItemFieldMask instanceof ItemFieldMask) {\n            newMask = fieldIdsOrItemFieldMask;\n        } else {\n            newMask = category.createFieldMask(fieldIdsOrItemFieldMask);\n        }\n\n        if (this.masks.has(category.getId())) {\n            let cat = this.masks.get(category.getId());\n            cat.union(newMask);\n        } else {\n            this.masks.set(category.getId(), newMask);\n        }\n        return this;\n    }\n\n    /**\n     * Adds fields to the Category mask by name. If the name doesn't exist or if there are more\n     * than one fields with the name, an Error is thrown. \n     * @param category \n     * @param fieldNames \n     * @throws Error if a field name exists more than once in the given Category or not at all.\n     *         Also throws Error if getIncludeFields() is false.\n     * @returns this\n     */\n    addMaskByNames(category: Category, fieldNames: string[]): ItemsFieldMask {\n        if (!this.includeFields) {\n            throw new Error(`This ItemsFieldMask is not configured to care about fields.`);\n        }\n\n        let fieldIds: number[] = [];\n        const fields = category.getFields();\n        for (let name of fieldNames) {\n            const catFieldIds = category.getFieldIdFromLabel(name);\n            if (catFieldIds.length == 0) {\n                throw new Error(`Unable to find field name ${name} in category ${category.getId()}`);\n            }\n            if (catFieldIds.length > 1) {\n                throw new Error(`Multiple fields with name ${name} in category ${category.getId()}`);\n            }\n            fieldIds.push(catFieldIds[0]);\n        }\n        return this.addMask(category, fieldIds);\n    }\n\n    /**\n     * Returns an ItemFieldMask for the given Category if it exists\n     * @param categoryId \n     * @returns null if there is no mask for the given Category.\n     */\n    getCategoryMask(categoryId: string): ItemFieldMask {\n        if (!this.masks.has(categoryId)) return null;\n        return this.masks.get(categoryId);\n    }\n\n    /**\n     * Suitable to send to the server for a search query. \n     * @returns A comma-seperated string of ids or \"*\" (which means all fields accepted)\n     */\n    getFieldMaskString(): string {\n        if (this.masks.size == 0) {\n            // If we have no masks, but fields are included, then return all fields.\n            // Otherwise, no fields (empty string).\n            return this.includeFields ? \"*\" : \"\";\n        }\n        let result: string = \"\";\n        let firstKey = true;\n        for (let key of this.masks.keys()) {\n            if (!firstKey) {\n                result += \",\";\n            }\n            result += this.masks.get(key).toString();\n            firstKey = false;\n        }\n        return result;\n    }\n}\n/**\n * A Category represents a category within a project. It has various configuration\n * settings. It also has a list of fields for that category.\n */\nclass Category {\n    private allFieldsFieldMask: ItemFieldMask;\n\n    constructor(private category: string, private project: Project) {\n        // Cache a mask for all fields since it may be created often.\n        this.allFieldsFieldMask = new ItemFieldMask(this.getFields().map((c) => c.id));\n    }\n\n    getProject(): Project { return this.project; }\n    getItemConfig(): ItemConfiguration { return this.project.getItemConfig(); }\n    getTestConfig(): TestManagerConfiguration { return this.project.getTestConfig(); }\n\n    getId(): string {\n        return this.category;\n    }\n\n    getConfig(): ICategoryConfig {\n        return this.project.getItemConfig().getItemConfiguration(this.category);\n    }\n\n    getFields(): XRFieldTypeAnnotated[] {\n        return this.project.getItemConfig().getFields(this.category);\n    }\n\n    /**\n     * Return field ids from the Category which match the given label.\n     * These labels are searched in a case-insensitive way.\n     * @param label \n     * @returns a non-empty array of field ids if the label is present in the Category.\n     */\n    getFieldIdFromLabel(label: string): number[] {\n        let results: number[] = [];\n        for (let field of this.getFields()) {\n            if (field.label.toLowerCase() == label.toLowerCase()) {\n                results.push(field.id);\n            }\n        }\n        return results;\n    }\n\n    isFolderCategory(): boolean { return this.getId() == \"FOLDER\"; }\n\n    /**\n     * An ItemFieldMask allows you to specify which fields out of the Category\n     * fields of an Item should be considered valid.\n     * @param fieldIds If specified, a valid set of field ids for this Category. Otherwise,\n     *        the returned ItemFieldMask expresses that all fields in the Item are to be\n     *        considered valid.\n     * @throws throws an Error if any of the field ids specified in fieldIds do not exist in the Category.\n     * @returns an ItemFieldMask.\n     */\n    createFieldMask(fieldIds?: number[]): ItemFieldMask {\n        const fields = this.getFields();\n        if (fieldIds) {\n            // Validate that we have these fields.\n            for (let f of fieldIds) {\n                if (fields.filter(c => c.id == f).length == 0) {\n                    throw new Error(`Field id ${f} not found in category ${this.category}`);\n                }\n            }\n            return new ItemFieldMask(fieldIds);\n        }\n        return this.allFieldsFieldMask;\n    }\n}","import { Field } from \"./Field\";\nimport { Category, ItemFieldMask } from \"./Category\";\nimport { ILabel } from \"../client\";\nimport { FieldHandlerFactory } from \"../../core/common/businesslogic/FieldHandlers/index\";\nimport { IFieldHandler } from \"../../core/common/businesslogic/FieldHandlers/IFieldHandler\";\nimport { IItemGet, IItemHistory, IItemIdParts, IItemPut, IReference } from \"../../core/globals\";\n\nexport { Item };\n\nfunction assert(result: boolean, msg?: string) {\n    if (!result) {\n        throw new Error(\"assertion failed: \" + msg ? msg : \"<unknown error>\");\n    }\n}\n\n/**\n * An Item represents a database item. Every Item must have at least a category.\n * If it has an id, then it was retrieved from the database and may be altered and later\n * saved (use needsSave() to determine if the Item needs saving). If it doesn't have\n * an id, it needs to be saved. When an item is saved, it's data is re-initialized from\n * the database.\n */\nclass Item {\n    constructor(private category: Category, item?: IItemGet, fieldMask?: ItemFieldMask) {\n        this.dirty = false;\n        this.fieldMap = new Map<number, Field>();\n        this.isFolder = category.isFolderCategory();\n        if (this.isFolder) {\n            if (!item) {\n                throw new Error(`A folder requires an item`);\n            }\n            if (!item.type) {\n                throw new Error(`A folder requires item.type`);\n            }\n        }\n        if (fieldMask) {\n            this.fieldMask = fieldMask;\n        } else {\n            // Create a field mask that includes all fields.\n            this.fieldMask = this.category.createFieldMask();\n        }\n        this.setData(item);\n    }\n\n    private fieldMask: ItemFieldMask;\n    private fieldMap: Map<number, Field>;\n    private dirty: boolean;\n    private id: string | undefined;\n    private type: string | undefined;\n    private title: string | undefined;\n    private labels: string[] | undefined;\n    private isFolder: boolean;\n    private downLinks: IReference[] | undefined;\n    private upLinks: IReference[] | undefined;    \n    private creationDate: string | undefined;\n    private maxVersion: number | undefined;\n    private history: IItemHistory[] | undefined;\n\n    // TODO: get the rest of the fields from IItem and eliminate member variable {toBeIntegrated}.\n    private toBeIntegrated: IItemGet;\n    // TODO: also, what about labels? Are these in toBeIntegrated right now?\n\n    private setDirty() { this.dirty = true; }\n\n    getFieldMask(): ItemFieldMask { return this.fieldMask; }\n\n    /**\n     * Read-only.\n     * @returns \n     */\n    getMaxVersion(): number | undefined {\n        return this.maxVersion;\n    }\n\n    /**\n     * Return the history for an item, if present. \n     * @returns an IItemHistory array\n     */\n    getHistory(): IItemHistory[] {\n        if (this.history) {\n            return this.history;\n        }\n        return [];\n    }\n\n    private hasLink(array: IReference[] | undefined, id: string): boolean {\n        if (array) {\n            return array.filter(l => l.to == id).length > 0;\n        }\n        return false;\n    }\n\n    private addLink(array: IReference[] | undefined, id: string, title?: string): IReference[] {\n        let newRef: IReference = { to: id, title: title };\n        if (array == undefined) {\n            array = [];\n        }\n        assert(!this.hasLink(array, id));\n        array.push(newRef);\n        return array;\n    }\n\n    private removeLink(array: IReference[], id: string): IReference[] {\n        assert(this.hasLink(array, id));\n        for (let i = 0; i < array.length; i++) {\n            if (array[i].to == id) {\n                array.splice(i, 1);\n                break;\n            }\n        }\n        return array;\n    }\n\n    /**\n     * Return any downlinks. \n     * @returns An array of downlinks (may be undefined)\n     */\n    getDownlinks(): IReference[] {\n        return this.downLinks ? this.downLinks : [];\n    }\n\n    /**\n     * Check if there is a downlink to another item \n     * @param id \n     * @returns true if this item links to the item given by {id}\n     */\n    hasDownlink(id: string): boolean {\n        return this.hasLink(this.downLinks, id);\n    }\n\n    /**\n     * Replace the current array of downlinks with a new one. \n     * @param downLinks \n     * @returns the Item itself\n     */\n    setDownlinks(downLinks: IReference[]): Item {\n        if (downLinks.length == 0) {\n            this.downLinks = undefined;\n        } else {\n            this.downLinks = downLinks;\n        }\n        this.setDirty();\n        return this;\n    }\n\n    /**\n     * Add a new downlink to the item. Does nothing if the item is\n     * already represented \n     * @param id - the id of the item to add.\n     * @param title - optional. The title is just for convenience. \n     *     It is neither saved nor representative of the actual title of the item.\n     * @throws Error if the passed id matches the id of the current item.\n     * @returns the Item\n     */\n    addDownlink(id: string, title?: string): Item {\n        // prevent self-own\n        if (id == this.id) {\n            throw new Error(`An Item may not refer to itself`);\n        }\n        if (!this.hasLink(this.downLinks, id)) {\n            this.downLinks = this.addLink(this.downLinks, id, title);\n            this.setDirty();\n        }\n        return this;\n    }\n\n    /**\n     * Remove a link given by {id} if it exists. \n     * @param id  the id of the downlinked item to remove\n     * @returns the current Item\n     */\n    removeDownlink(id: string): Item {\n        if (this.hasLink(this.downLinks, id)) {\n            this.downLinks = this.removeLink(this.downLinks, id);\n            this.setDirty();\n        }\n        return this;\n    }\n\n    /**\n     * Return any uplinks. \n     * @returns An array of uplinks (may be undefined)\n     */\n    getUplinks(): IReference[] {\n        return this.upLinks ? this.upLinks : [];\n    }\n\n    /**\n     * Check if there is an uplink to another item \n     * @param id \n     * @returns true if this item links to the item given by {id}\n     */\n    hasUplink(id: string): boolean {\n        return this.hasLink(this.upLinks, id);\n    }\n\n    /**\n     * Replace the current array of uplinks with a new one. \n     * @param upLinks \n     * @returns the Item itself\n     */\n    setUplinks(upLinks: IReference[]): Item {\n        if (upLinks.length == 0) {\n            this.upLinks = undefined;\n        } else {\n            this.upLinks = upLinks;\n        }\n        this.setDirty();\n        return this;\n    }\n\n    /**\n     * Add a new uplink to the item. Does nothing if the item is\n     * already represented \n     * @param id - the id of the item to add.\n     * @param title - optional. The title is just for convenience. \n     *     It is neither saved nor representative of the actual title of the item.\n     * @throws Error if the passed id matches the id of the current item.\n     * @returns the Item\n     */\n    addUplink(id: string, title?: string): Item {\n        // prevent self-own\n        if (id == this.id) {\n            throw new Error(`An Item may not refer to itself`);\n        }\n        if (!this.hasLink(this.upLinks, id)) {\n            this.upLinks = this.addLink(this.upLinks, id, title);\n            this.setDirty();\n        }\n        return this;\n    }\n\n    /**\n     * Remove a link given by {id} if it exists. \n     * @param id  the id of the uplinked item to remove\n     * @returns the current Item\n     */\n    removeUplink(id: string): Item {\n        if (this.hasLink(this.upLinks, id)) {\n            this.upLinks = this.removeLink(this.upLinks, id);\n            this.setDirty();\n        }\n        return this;\n    }\n\n    /**\n     * Helper method to test if a field id is valid within the Item Category, irrespective of\n     * whether or not it is specified in the mask. \n     * @param fieldId\n     * @returns true if fieldId is valid within the Category.\n     */\n    private isValidFieldId(fieldId: number): boolean {\n        return this.getCategory().getFields().filter(c => c.id == fieldId).length > 0;\n    }\n\n    /**\n     * Initializes the data fields for the item from an IItemGet structure \n     * @param item \n     */\n    private setData(item?: IItemGet) {\n        this.dirty = false;\n\n        // toBeIntegrated contains standard item fields I just haven't gotten around to\n        // exposing and validating yet.\n\n        if (item) {\n            this.toBeIntegrated = item;\n            this.id = item.id;\n            this.type = item.type;\n            this.title = item.title;\n            this.labels = item.labels;\n            this.isFolder = item.isFolder;\n            this.downLinks = item.downLinks;\n            this.upLinks = item.upLinks;\n            this.maxVersion = item.maxVersion;\n            this.history = item.history;\n            if (item[\"creationDate\"]) {\n                this.creationDate = item[\"creationDate\"];\n            }\n            assert((this.type == this.category.getId()) ||\n                (this.isFolder && this.category.isFolderCategory()),\n                `the item type ${this.type} does not match category type ${this.category.getId()}`);\n        } else {\n            // We can assert that we don't have a folder, because the constructor, which\n            // calls this method doesn't allow an undefined item parameter for folders.\n            assert(!this.category.isFolderCategory(), \"A folder requires a valid item parameter\");\n            this.toBeIntegrated = {};\n            // This is a new item.\n            this.id = undefined;\n            // Category\n            this.type = this.category.getId();\n            this.title = undefined;\n            this.isFolder = false;\n            this.history = [];\n        }\n\n        // Now deal with the category fields.\n        for (let field of this.category.getFields()) {\n            // The mask influences whether we actually have this field data or not.\n            if (this.fieldMask.hasFieldId(field.id)) {\n                let value: string = undefined;\n                if (item && item[field.id]) {\n                    value = item[field.id];\n                }\n\n                FieldHandlerFactory.UpdateFieldConfig(this.category.getItemConfig(), this.category.getTestConfig(),\n                    field.fieldType, this.type, value, field.parameterJson);\n                let handler: IFieldHandler = FieldHandlerFactory.CreateHandler(field.fieldType, field.parameterJson);\n                handler.initData(value);\n\n                this.fieldMap.set(field.id, new Field(field, handler));\n            }\n        }\n\n        // TODO: deal with labels. They show up as a pseudo field, but are really not.\n    }\n\n    /**\n     * Sometimes you've been given an Item with a restrictive ItemFieldMask, however, you'd\n     * like to set a value for a field that was not in the mask. With this method, you can\n     * expand the field mask to include the field given by the fieldId (easily obtained\n     * from the Category object). \n     * \n     * This field will be added to the mask, and the associated Field object will be returned\n     * with an empty value, which you could set. The object will be marked as \"dirty\" at this point,\n     * because we don't know if the server has an empty value for this field or not, so we assume\n     * the pessimistic case.\n     * @param fieldId a valid fieldId from the Category of the item.\n     * @throws if the fieldId is already in the ItemFieldMask, or if the fieldId is not valid for the Category.\n     * @returns the Field object\n     */\n    expandFieldMaskWithEmptyField(fieldId: number): Field {\n        if (this.fieldMask.hasFieldId(fieldId)) {\n            throw new Error(`Field ${fieldId} is already specified in the field mask`);\n        }\n\n        const foundFields = this.getCategory().getFields().filter(c => c.id == fieldId);\n        if (foundFields.length == 0) {\n            throw new Error(`Field ${fieldId} does not exist in category ${this.getCategory().getId()}`);\n        }\n\n        // Update the mask.\n        let fieldIds = this.fieldMask.getFieldIds();\n        fieldIds.push(fieldId);\n        this.fieldMask = this.category.createFieldMask(fieldIds);\n\n        // Create the Field.\n        const field = foundFields[0];\n        const value = undefined;  // empty field.\n        FieldHandlerFactory.UpdateFieldConfig(this.category.getItemConfig(), this.category.getTestConfig(),\n            field.fieldType, this.type, value, field.parameterJson);\n        let handler: IFieldHandler = FieldHandlerFactory.CreateHandler(field.fieldType, field.parameterJson);\n        handler.initData(value);\n\n        this.fieldMap.set(field.id, new Field(field, handler));\n        assert(field.id == fieldId);\n\n        this.setDirty();\n\n        return this.getFieldById(field.id);\n    }\n\n    /**\n     * Export the data from this item into an IItemPut structure \n     * @returns \n     */\n    extractData(): IItemPut {\n        let item: IItemPut = {\n            upLinks: this.upLinks,\n            upLinkList: this.toBeIntegrated.upLinkList,\n            downLinks: this.downLinks,\n            children: this.toBeIntegrated.children,\n            history: this.history,\n            modDate: this.toBeIntegrated.modDate,\n            isUnselected: this.toBeIntegrated.isUnselected,\n            availableFormats: this.toBeIntegrated.availableFormats,\n            selectSubTree: this.toBeIntegrated.selectSubTree,\n            requireSubTree: this.toBeIntegrated.requireSubTree,\n            icon: this.toBeIntegrated.icon,\n            type: this.type,\n            id: this.toBeIntegrated.id,\n            title: this.title,\n            linksUp: this.upLinks ? this.upLinks.map(u => u.to).join(\",\") : \"\",\n            linksDown: this.downLinks ? this.downLinks.map(u => u.to).join(\",\") : \"\",\n            isFolder: this.isFolder,\n            isDeleted: this.toBeIntegrated.isDeleted,\n            maxVersion: this.maxVersion,\n            docHasPackage: this.toBeIntegrated.docHasPackage,\n            // TODO: where is parent in IItemGet? Doesn't every item have a parent?\n            labels: this.labels ? this.labels.join(\",\") : \"\"\n            // TODO: where is crossLinks in IItemPut?\n        }\n\n        // Now deal with the category fields.\n        for (let field of this.category.getFields()) {\n            // The mask influences what we send out.\n            if (this.fieldMask.hasFieldId(field.id)) {\n                const myField = this.fieldMap.get(field.id);\n                item[field.id] = myField.getHandlerRaw().getData();\n                // TODO: do we need to do this?\n                item[`fx${field.id.toString()}`] = myField.getHandlerRaw().getData();\n            }\n        }\n\n        // Note that \"creationDate\" was ignored.\n        return item;\n    }\n\n    getId(): string {\n        return this.id;\n    }\n\n    getIsFolder(): boolean {\n        return this.isFolder;\n    }\n\n    getType(): string {\n        assert((this.type == this.category.getId()) ||\n            (this.isFolder && this.category.isFolderCategory()),\n            `Item type ${this.type} does not match category type ${this.category.getId()}`);\n        return this.type;\n    }\n\n    getCreationDate(): string | undefined {\n        return this.creationDate;\n    }\n\n    setCreationDate(creationDate: string): Item {\n        this.creationDate = creationDate;\n        // Not setting this as dirty because creationDate doesn't \"really\" change.\n        // It is just an expensive piece of information from the server that needs a\n        // home.\n        return this;\n    }\n\n    getTitle(): string {\n        return this.title;\n    }\n\n    setTitle(title: string): Item {\n        if (title !== this.title) {\n            this.title = title;\n            this.setDirty();\n        }\n        return this;\n    }\n\n    /**\n     * Returns an array of labels set for the Item. \n     * @returns array of strings\n     */\n    getLabels(): string[] {\n        return this.labels ? this.labels : [];\n    }\n\n    private labelsToString(): string {\n        if (this.labels) {\n            return this.labels.join(\",\");\n        }\n        return \"\";\n    }\n\n    private stringToLabels(input: string): string[] { return input.split(\",\"); }\n\n    private verifyLabelsAllowed(labels: string[]) {\n        // Are labels allowed for our category?\n        const labelDefs: ILabel[] = this.category.getProject().getLabelManager().getLabelDefinitions([this.type]);\n        if (labelDefs.length == 0 && labels.length > 0) {\n            // Forgive empty strings.\n            const foundNonEmpty = labels.some((l) => l != undefined && l != \"\");\n            if (foundNonEmpty) {\n                throw new Error(`Category ${this.type} doesn't allow labels`);\n            }\n        }\n    }\n\n    /**\n     * Sets the labels for an Item, overwriting any previous labels\n     * @param newLabels \n     * @returns Item\n     * @throws throws error if the Item category doesn't allow labels\n     */\n    setLabels(newLabels: string[]): Item {\n        this.verifyLabelsAllowed(newLabels);\n        this.labels = this.stringToLabels(\n            this.category.getProject().getLabelManager().setLabels(\"\", newLabels));\n        return this;\n    }\n\n    /**\n     * Adds one label to the item if it isn't already set. Note that if the\n     * label is in an XOR group with another set label, that label will be\n     * removed. \n     * @param labelToSet \n     * @returns Item\n     * @throws throws error if the Item category doesn't allow labels\n     */\n    setLabel(labelToSet: string): Item {\n        this.verifyLabelsAllowed([labelToSet]);\n        const labelsAsString = this.labelsToString();\n        this.labels = this.stringToLabels(\n            this.category.getProject().getLabelManager().setLabels(labelsAsString, [labelToSet]));\n        return this;\n    }\n\n    /**\n     * Unsets one label if it exists. \n     * @param labelToUnset \n     * @returns Item\n     * @throws throws error if the Item category doesn't allow labels\n     */\n    unsetLabel(labelToUnset: string): Item {\n        this.verifyLabelsAllowed([labelToUnset]);\n        this.labels = this.category.getProject().getLabelManager().unsetLabel(\n            this.getLabels(), labelToUnset);\n        return this;\n    }\n\n    /**\n     * Return the Category for the current item \n     * @returns Category\n     */\n    getCategory(): Category { return this.category; }\n\n    needsSave(): boolean {\n        // Are any fields dirty?\n        for (let field of this.fieldMap.values()) {\n            if (field.needsSave()) {\n                this.dirty = true;\n                break;\n            }\n        }\n        return this.dirty;\n    }\n\n    /**\n     * An Item can be complete or partial, based on the ItemFieldMask passed in\n     * at construction.\n     * @returns true if the item has all of its Category fields.\n     */\n    hasAllFields(): boolean {\n        return this.fieldMask.getFieldIds().length == this.getCategory().getFields().length;\n    }\n\n    /**\n     * In case the Item is masked (hasAllFields() returns false), one or more Fields may\n     * not be tracked. hasFieldId() allows you to check if the field is present.\n     * @param fieldId a valid field id within the Category\n     * @throws Error if fieldId is not valid within the Category\n     * @returns true if the Item's mask allows for this field.\n     */\n    hasFieldId(fieldId: number): boolean {\n        if (!this.isValidFieldId(fieldId)) {\n            throw new Error(`Field id ${fieldId} is not valid within Category ${this.getCategory().getId()}`);\n        }\n        return this.fieldMask.hasFieldId(fieldId);\n    }\n\n    getFieldById(fieldId: number): Field {\n        // Is it in our mask?\n        if (!this.hasFieldId(fieldId)) {\n            throw new Error(`Field id ${fieldId} is not in the ItemFieldMask for this Item.`);\n        }\n\n        // We should definitely have the field at this point.\n        assert(this.fieldMap.has(fieldId));\n\n        return this.fieldMap.get(fieldId);\n    }\n\n    /**\n     * Returns all fields within the mask which match the fieldName. \n     * @param fieldName \n     * @returns an array of Fields. Note that if the mask has limited the set of fields from\n     *     the Category which are tracked for this particular item, the number of returned Field\n     *     objects may be less than you expect.\n     */\n    getFieldByName(fieldName: string): Field[] {\n        let results: Field[] = [];\n        for (let field of this.fieldMap.values()) {\n            if (field.getFieldName() == fieldName) {\n                results.push(field);\n            }\n        }\n        return results;\n    }\n\n    /**\n     * Returns a Field matching the field name. The field should exist and be within the mask. \n     * @param fieldName \n     * @throws Error if there is no such field, either because the name is invalid or it is not within\n     *     the mask for the Item.\n     * @returns a valid Field.\n     */\n    getSingleFieldByName(fieldName: string): Field {\n        const fields = this.getFieldByName(fieldName);\n        assert(fields.length == 1, `There are ${fields.length} fields with name ${fieldName}`);\n        return fields[0];\n    }\n\n    /**\n     * Returns all fields within the mask which match the fieldType.\n     * @param fieldType\n     * @returns an array of Fields. Note that if the mask has limited the set of fields from\n     *     the Category which are tracked for this particular item, the number of returned Field\n     *     objects may be less than you expect.\n     */\n    getFieldsByType(fieldType: string): Field[] {\n        let results: Field[] = [];\n        for (let field of this.fieldMap.values()) {\n            if (field.getFieldType() == fieldType) {\n                results.push(field);\n            }\n        }\n        return results;\n    }\n\n\n}\n","import { XRFieldTypeAnnotated } from \"../../core/common/businesslogic/ItemConfiguration\";\nimport { IFieldHandler } from \"../../core/common/businesslogic/FieldHandlers/IFieldHandler\";\n\nexport { Field };\nclass Field {\n    private oldData: string;\n\n    constructor(private config: XRFieldTypeAnnotated, private handler: IFieldHandler) {\n        if (this.config.fieldType != this.handler.getFieldType()) {\n            throw new Error(\n                `Field type ${this.config.fieldType} doesn't match handler field type ${this.handler.getFieldType()}`);\n        }\n        this.oldData = handler.getData();\n    }\n\n    getHandlerRaw(): IFieldHandler { return this.handler; }\n\n    getHandler<T>(): T {\n        // return the handler cast appropriately given the type of the field.\n        // TODO: check this somehow.\n        return <T>this.handler;\n    }\n\n    getFieldType(): string { return this.config.fieldType; }\n    getFieldId(): number { return this.config.id; }\n    getFieldName(): string { return this.config.label; }\n    getFieldConfigParameter(name: string): any {\n        return this.config.parameterJson[name];\n    }\n\n    needsSave(): boolean {\n        return this.handler.getData() !== this.oldData;\n    }\n}","import { tickStep } from \"d3-array\";\nimport { ITitleAndId } from \"../standalone-interfaces\";\nimport { Item } from \"./Item\";\nimport { Project } from \"./Project\";\nimport { ITreeFolderNeeds } from \"./object-interfaces\";\nimport { FancyFolder } from \"../rest-api\";\n\nexport { TreeFolder };\n\nclass TreeFolder {\n    private id: string;\n    private title: string;\n    private type: string;\n\n    private folderChildren: TreeFolder[];\n    private itemChildren: ITitleAndId[];\n\n    constructor(private needs: ITreeFolderNeeds, folder: FancyFolder, private parent?: TreeFolder) {\n        // Decompose folder.\n        this.id = folder.id;\n        this.title = folder.title;\n        this.type = folder.type;\n        this.itemChildren = [];\n        this.folderChildren = [];\n\n        if (folder.children) {\n            // Some of the children are folders, others items.\n            for (let child of folder.children) {\n                if (needs.parseRef(child.id).isFolder) {\n                    // Recurse and create TreeFolders.\n                    this.folderChildren.push(new TreeFolder(needs, child, this));\n                } else {\n                    this.itemChildren.push({ id: child.id, title: child.title, isFolder: false });\n                }\n            }\n        }\n    }\n\n    isRoot(): boolean { return this.id == undefined && this.parent == undefined; }\n\n    getId(): string {\n        if (this.isRoot()) return \"ROOT\";\n        return this.id;\n    }\n    getTitle(): string {\n        if (this.isRoot()) return \"ROOT\";\n        return this.title;\n    }\n\n    getParent(): TreeFolder {\n        if (this.isRoot()) return null;\n        return this.parent;\n    }\n\n    /**\n     * Creates a path string including all ancestor folder titles, separated by \"/\".\n     * @returns the folder path\n     */\n    getPath(): string {\n        if (this.isRoot()) return \"\";\n        const result = this.getParent().getPath() + \"/\" + this.getTitle();\n        return result;\n    }\n\n    /**\n     * Return a TreeFolder if the folderId is valid in the project.\n     * @param folderId \n     * @returns null if folderId cannot be found.\n     */\n    findFolder(folderId: string): TreeFolder {\n        // Is it one of the children?\n        for (let child of this.folderChildren) {\n            if (child.getId() == folderId) {\n                return child;\n            }\n            const folder = child.findFolder(folderId);\n            if (folder != null) {\n                return folder;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Find a TreeFolder with the given name in this folder. \n     * @param folderTitle \n     * @returns A valid TreeFolder object or null if not found.\n     */\n    findDirectFolderByTitle(folderTitle: string): TreeFolder {\n        for (let child of this.folderChildren) {\n            if (child.getTitle() == folderTitle) {\n                return child;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Save an item with this folder as the parent folder. \n     * @param item An item that hasn't yet been saved on the server\n     * @returns An Item object which corresponds to the newly created Item on the server.\n     * @throws throws Error if your item already has an id (was already created on the server).\n     */\n    async saveInFolder(item: Item): Promise<Item> {\n        if (item.getId() !== undefined) {\n            throw new Error(`item already exists (id = ${item.getId()})`);\n        }\n        let createdItem = await this.needs.putItem(this.id, item);\n\n        // Update the folder structure just for this folder.\n        if (!createdItem.getIsFolder()) {\n            this.itemChildren.push({ isFolder: false, id: createdItem.getId(), title: createdItem.getTitle() });\n        } else {\n            // New folders don't have children, so we can get away with adding this folder without a\n            // server call.\n            const folderInfo: FancyFolder = {\n                id: createdItem.getId(),\n                title: createdItem.getTitle(),\n                type: createdItem.getType()\n            };\n            this.folderChildren.push(new TreeFolder(this.needs, folderInfo, this));\n        }\n        return createdItem;\n    }\n\n    /**\n     * Move the given items into this folder. This method does NOT update the list of folder children,\n     * since server-side information is necessary.\n     * @param itemIds an array of itemIds\n     * @returns the string \"Ok\" on success\n     */\n    async moveItemsToThisFolder(itemIds: string[]): Promise<string> {\n        const result = await this.needs.moveItems(this.getId(), itemIds);\n        return result;\n    }\n\n    /**\n     * Delete a child of this folder.\n     * @param id A valid child id of this folder\n     * @param force If the id points to a non-empty folder, then this must be true to carry out the deletion\n     * @throws Error if the child wasn't found, or if it points to a non-empty folder and {force} is not true\n     * @returns The string \"Ok\" if successful.\n     */\n    async deleteChildItemOrFolder(id: string, force?: boolean): Promise<string> {\n        // The id must be one of our children.\n        for (let i = 0; i < this.itemChildren.length; i++) {\n            if (this.itemChildren[i].id == id) {\n                let result = await this.needs.deleteItem(id, force);\n                this.itemChildren.splice(i, 1);\n                return result;\n            }\n        }\n        for (let i = 0; i < this.folderChildren.length; i++) {\n            if (this.folderChildren[i].getId() == id) {\n                let result = await this.needs.deleteItem(id, force);\n                this.folderChildren.splice(i, 1);\n                return result;\n            }\n        }\n        // Item isn't a child if we reached this point.\n        throw new Error(`Item with id ${id} not found in item or folder children`);\n    }\n\n    /**\n     * TreeFolder is nice/simple to work with, but sometimes you need the\n     * underlying Item. For example, you might want to set a label on the folder.\n     * Item is the necessary type to do that. \n     * @returns An Item which matches this folder\n     */\n    async getItem(): Promise<Item> {\n        return this.needs.getItem(this.id);\n    }\n\n    /**\n     * Returns information on the folders in the folder. May make a request to\n     * the server if children haven't been loaded yet, otherwise, acts on\n     * cached information (which may be out of date. Call refresh() to update\n     * the folder in that case).\n     * @returns an array of TreeFolder objects.\n     */\n    getFolderChildren(): TreeFolder[] {\n        return this.folderChildren;\n    }\n\n    /**\n     * Returns information on the items in the folder. May make a request to\n     * the server if children haven't been loaded yet, otherwise, acts on\n     * cached information (which may be out of date. Call refresh() to update\n     * the folder in that case).\n     * @returns an array of ITitleAndId objects\n     */\n    getItemChildren(): ITitleAndId[] {\n        return this.itemChildren;\n    }\n\n    /**\n     * Returns both folders and items at this level.\n     * @returns an array of ITitleAndId objects for the folders and items\n     */\n    getAllChildren(): ITitleAndId[] {\n        let children: ITitleAndId[] = [];\n        children = children.concat(this.getItemChildren());\n        children = children.concat(\n            this.getFolderChildren().map((tf) => {\n                return { isFolder: true, id: tf.id, title: tf.title };\n            })\n        );\n        return children;\n    }\n\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(245);\n",""],"names":[],"sourceRoot":""}